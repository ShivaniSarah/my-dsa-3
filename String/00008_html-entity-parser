http://leetcode.com/problems/html-entity-parser/description/


1410. HTML Entity Parser
Medium
Topics
Companies
Hint
HTML entity parser is the parser that takes HTML code as input and replace all the entities of the special characters by the characters itself.

The special characters and their entities for HTML are:

Quotation Mark: the entity is &quot; and symbol character is ".
Single Quote Mark: the entity is &apos; and symbol character is '.
Ampersand: the entity is &amp; and symbol character is &.
Greater Than Sign: the entity is &gt; and symbol character is >.
Less Than Sign: the entity is &lt; and symbol character is <.
Slash: the entity is &frasl; and symbol character is /.
Given the input text string to the HTML parser, you have to implement the entity parser.

Return the text after replacing the entities by the special characters.

 

Example 1:

Input: text = "&amp; is an HTML entity but &ambassador; is not."
Output: "& is an HTML entity but &ambassador; is not."
Explanation: The parser will replace the &amp; entity by &
Example 2:

Input: text = "and I quote: &quot;...&quot;"
Output: "and I quote: \"...\""
 

Constraints:

1 <= text.length <= 105
The string may contain any possible characters out of all the 256 ASCII characters.



# java


//"&amp;gt; here there occurs an error if we add & inside the map instead of separetely replacing

class Solution {
    public String entityParser(String text) {
        Map<String, String> map = new HashMap<>();
        map.put("&apos;", "'");
        map.put("&quot;", "\"");
        map.put("&gt;", ">");
        map.put("&lt;", "<");
        map.put("&frasl;", "/");
        for (String key: map.keySet()) {
            text = text.replaceAll(key, map.get(key));
        }
        text = text.replaceAll("&amp;", "&");
        return text;
    }
}


or



class Solution {
    public String entityParser(String text) {
        Map<String, String> d = new HashMap<>();
        d.put("&quot;", "\"");
        d.put("&apos;", "'");
        d.put("&amp;", "&");
        d.put("&gt;", ">");
        d.put("&lt;", "<");
        d.put("&frasl;", "/");
        StringBuilder ans = new StringBuilder();
        int i = 0;
        int n = text.length();
        while (i < n) {
            boolean found = false;
            for (int l = 1; l < 8; ++l) {
                int j = i + l;
                if (j <= n) {
                    String t = text.substring(i, j);
                    if (d.containsKey(t)) {
                        ans.append(d.get(t));
                        i = j;
                        found = true;
                        break;
                    }
                }
            }
            if (!found) {
                ans.append(text.charAt(i++));
            }
        }
        return ans.toString();
    }
}


or



class Solution {
  public String entityParser(String text) {
    Map<String, String> entryToChar =
        Map.of("&quot;", "\"", "&apos;", "'", "&gt;", ">", "&lt;", "<", "&frasl;", "/");

    for (Map.Entry<String, String> entry : entryToChar.entrySet()) {
      final String entity = entry.getKey();
      final String c = entry.getValue();
      text = text.replaceAll(entity, c);
    }

    // Process '&' in last.
    return text.replaceAll("&amp;", "&");
  }
}



