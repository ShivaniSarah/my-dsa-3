https://leetcode.com/problems/find-the-most-common-response/


3527. Find the Most Common Response
Attempted
Medium
Topics
Companies
Hint
You are given a 2D string array responses where each responses[i] is an array of strings representing survey responses from the ith day.

Return the most common response across all days after removing duplicate responses within each responses[i]. If there is a tie, return the lexicographically smallest response.

 

Example 1:

Input: responses = [["good","ok","good","ok"],["ok","bad","good","ok","ok"],["good"],["bad"]]

Output: "good"

Explanation:

After removing duplicates within each list, responses = [["good", "ok"], ["ok", "bad", "good"], ["good"], ["bad"]].
"good" appears 3 times, "ok" appears 2 times, and "bad" appears 2 times.
Return "good" because it has the highest frequency.
Example 2:

Input: responses = [["good","ok","good"],["ok","bad"],["bad","notsure"],["great","good"]]

Output: "bad"

Explanation:

After removing duplicates within each list we have responses = [["good", "ok"], ["ok", "bad"], ["bad", "notsure"], ["great", "good"]].
"bad", "good", and "ok" each occur 2 times.
The output is "bad" because it is the lexicographically smallest amongst the words with the highest frequency.
 

Constraints:

1 <= responses.length <= 1000
1 <= responses[i].length <= 1000
1 <= responses[i][j].length <= 10
responses[i][j] consists of only lowercase English letters


# java


class Solution {
  public String findCommonResponse(List<List<String>> responses) {
    String ans = "";
    Map<String, Integer> count = new HashMap<>();
    int maxFreq = 0;

    for (List<String> response : responses)
      for (final String r : new HashSet<>(response))
        count.merge(r, 1, Integer::sum);

    for (final int freq : count.values())
      maxFreq = Math.max(maxFreq, freq);

    for (Map.Entry<String, Integer> entry : count.entrySet()) {
      final String response = entry.getKey();
      final int freq = entry.getValue();
      if (freq == maxFreq && (ans.isEmpty() || response.compareTo(ans) < 0))
        ans = response;
    }

    return ans;
  }
}





