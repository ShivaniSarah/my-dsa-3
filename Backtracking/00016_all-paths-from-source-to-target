https://leetcode.com/problems/all-paths-from-source-to-target/description/

797. All Paths From Source to Target
Medium
Topics
Companies
Given a directed acyclic graph (DAG) of n nodes labeled from 0 to n - 1, find all possible paths from node 0 to node n - 1 and return them in any order.

The graph is given as follows: graph[i] is a list of all nodes you can visit from node i (i.e., there is a directed edge from node i to node graph[i][j]).

 

Example 1:


Input: graph = [[1,2],[3],[3],[]]
Output: [[0,1,3],[0,2,3]]
Explanation: There are two paths: 0 -> 1 -> 3 and 0 -> 2 -> 3.
Example 2:


Input: graph = [[4,3,1],[3,2,4],[3],[4],[]]
Output: [[0,4],[0,3,4],[0,1,3,4],[0,1,2,3,4],[0,1,4]]
 

Constraints:

n == graph.length
2 <= n <= 15
0 <= graph[i][j] < n
graph[i][j] != i (i.e., there will be no self-loops).
All the elements of graph[i] are unique.
The input graph is guaranteed to be a DAG.


# java


class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> ans = new LinkedList();
        List<Integer> current = new ArrayList();
        current.add(0);
        dfs(0,current,graph,graph.length-1,ans);
        return ans; 
    }
    private void dfs(int src, List<Integer> current, int graph[][], int dest, List<List<Integer>> ans){
        if(src == dest){
            ans.add(new ArrayList(current));
            return;
        }
        for(int n : graph[src]){
            current.add(n);
            dfs(n,current,graph,dest,ans);
            current.remove(current.size()-1);
        }
    }
}


or


class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
     List<List<Integer>> ans = new LinkedList();
     Queue<List<Integer>> bfs  =new LinkedList();
     bfs.add(Arrays.asList(0));
     int dest = graph.length -1;

     while(!bfs.isEmpty()){
         List<Integer> path = bfs.poll();
         int current = path.get(path.size()-1);
           if(current == dest){
             ans.add(new ArrayList(path));
           }
              for(int node : graph[current]){
                   List<Integer> newPath = new ArrayList(path);
                   newPath.add(node);
                   bfs.add(newPath);
                }
        }
        return ans;

    }
}



or


class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> temp = new ArrayList<>();
        temp.add(0);
        dfs(graph,ans,temp,0);
        return ans;
    }
    
   public void dfs(int[][] graph, List<List<Integer>> ans, List<Integer> temp, int start){
       
        if(start == graph.length-1){
            ans.add(new ArrayList<>(temp));
            return;
        }
        
        for(int i : graph[start]){
            temp.add(i);
            dfs(graph,ans,temp,i);
            temp.remove(temp.size()-1);  
        }
        
    }
}


or



class Solution {
    public List<List<Integer>> allPathsSourceTarget(int[][] graph) {
        List<List<Integer>> res = new ArrayList<>();
        if(graph.length == 0)
            return res;
        List<Integer> path = new ArrayList<>();
        path.add(0);//adding starting 0th node initially
        dfs(graph,0,path,res);
        return res;
    }
    private void dfs(int[][] graph,int node,List<Integer> path,List<List<Integer>> res){
        if(node == graph.length - 1){ //node is index in graph i.e. each row or individual sub list
            res.add(new ArrayList(path));//when it reaches to end(graph.lenght-1) then add that path to res
            return;
        }
        for(int n : graph[node]){//traversing on each sublist or and finding path from that again
            path.add(n);
            dfs(graph,n,path,res);
            path.remove(path.size()-1);//backtracking
        }
    }
}
