https://leetcode.com/problems/generate-binary-strings-without-adjacent-zeros/description/


3211. Generate Binary Strings Without Adjacent Zeros
Medium
Topics
Companies
Hint
You are given a positive integer n.

A binary string x is valid if all substrings of x of length 2 contain at least one "1".

Return all valid strings with length n, in any order.

 

Example 1:

Input: n = 3

Output: ["010","011","101","110","111"]

Explanation:

The valid strings of length 3 are: "010", "011", "101", "110", and "111".

Example 2:

Input: n = 1

Output: ["0","1"]

Explanation:

The valid strings of length 1 are: "0" and "1".

 

Constraints:

1 <= n <= 18



# java


import java.util.ArrayList;
import java.util.List;

class Solution {
    public List<String> validStrings(int n) {
        List<String> result = new ArrayList<>();
        generateStrings(result, new StringBuilder(), n, -1);
        return result;
    }
    
    private void generateStrings(List<String> result, StringBuilder sb, int n, int lastChar) {
        if (sb.length() == n) {
            result.add(sb.toString());
            return;
        }
        
        // Add '1' to the string
        sb.append('1');
        generateStrings(result, sb, n, 1);
        sb.deleteCharAt(sb.length() - 1);
        
        // Add '0' to the string, only if the last character was not '0'
        if (lastChar != 0) {
            sb.append('0');
            generateStrings(result, sb, n, 0);
            sb.deleteCharAt(sb.length() - 1);
        }
    }
}


or

class Solution {
    public List<String> validStrings(int n) {
        // Initialize the list with the first two valid strings "0" and "1"
        List<String> vec = new ArrayList<>();
        vec.add("0");
        vec.add("1");
        for (int i = 2; i <= n; i++) {
            List<String> v = new ArrayList<>();
            for (String s : vec) {
                // Append "1" to the current string
                v.add(s + "1");
                // If the last character of the string is "1", append "0"
                if (s.charAt(s.length() - 1) == '1') {
                    v.add(s + "0");
                }
            }
            // Update vec to be the new list of strings
            vec = v;
        }
        return vec;
    }
}


or



class Solution {
    public List<String> validStrings(int n) {
        List<String> res=new ArrayList<>();
        
        dfs(0,n,res,"",'1');
        //System.out.println(res);
        return res;
    }

    public void dfs(int i,int n,List<String> res,String s,char ch){
        if(i==n){
            res.add(s);
            return;
        }
        if(ch=='1'){
            dfs(i+1,n,res,s+"1",'1');
            dfs(i+1,n,res,s+"0",'0');
        }else{
            dfs(i+1,n,res,s+"1",'1');
        }
        

    }
}


or

class Solution {
    private List<String> res = new ArrayList<>();
    public List<String> validStrings(int n) {
        char[] s = new char[n];
        for (int i = 0; i < n; i++) s[i] = '0';
        backtrack(0, false, s);
        return res;
    }
    private void backtrack(int index, boolean flag, char[] s){
        if (index == s.length){
            res.add(new String(s));
            return;
        }
        if (!flag) backtrack(index + 1, true, s);
        s[index] = '1';
        backtrack(index + 1, false, s);
        s[index] = '0';
    }
}
