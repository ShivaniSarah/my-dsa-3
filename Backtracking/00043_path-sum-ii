https://leetcode.com/problems/path-sum-ii/description/


113. Path Sum II
Medium
Topics
Companies
Given the root of a binary tree and an integer targetSum, return all root-to-leaf paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.

A root-to-leaf path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.

 

Example 1:


Input: root = [5,4,8,11,null,13,4,7,2,null,null,5,1], targetSum = 22
Output: [[5,4,11,2],[5,8,4,5]]
Explanation: There are two paths whose sum equals targetSum:
5 + 4 + 11 + 2 = 22
5 + 8 + 4 + 5 = 22
Example 2:


Input: root = [1,2,3], targetSum = 5
Output: []
Example 3:

Input: root = [1,2], targetSum = 0
Output: []
 

Constraints:

The number of nodes in the tree is in the range [0, 5000].
-1000 <= Node.val <= 1000
-1000 <= targetSum <= 1000


# java


public class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int sum) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        pathSum(root, sum, new ArrayList<Integer>(), res);
        return res;
    }
    
    void pathSum(TreeNode root, int sum, List<Integer> sol, List<List<Integer>> res) {
        if (root == null) {
            return;
        }
        
        sol.add(root.val);
        
        if (root.left == null && root.right == null && sum == root.val) {
            res.add(new ArrayList<Integer>(sol));
        } else {
            pathSum(root.left, sum - root.val, sol, res);
            pathSum(root.right, sum - root.val, sol, res);
        }
        
        sol.remove(sol.size() - 1);
    }
}


or



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        
        List<Integer> currPath = new ArrayList<>();
        
        List<List<Integer>> allPaths = new ArrayList<>();
        pathSum(root, targetSum, currPath, allPaths);
        return allPaths;
    }
    
    public void pathSum(TreeNode root, int targetSum, List<Integer> currPath, List<List<Integer>> allPaths) {
        
        if(root == null) {
            return;
        }
        /*
          1. Agar node leaf node, koi child nahin hai, or targetsum bann gaya to allPath list mein 
             currentPath list ko add krdia.
          2. If statement mein topi utarna(backtrack krna) na bhulna, path add krne ke baad.

          1. If node is a leaf node i.e no left and right child and target sum is achieved 
             add the currentPath into all path
          2. Do not forget to backtrack in if statement i.e remove after adding path.
        */
        if(root.left == null && root.right == null && targetSum - root.val == 0) {
            currPath.add(root.val);
            allPaths.add(new ArrayList<>(currPath));
            currPath.remove(currPath.size() - 1);
            return;
        }
        
        //Add the current node in the potential currentPath list.
        //jis node pr hain usko consider krenge to usko currentPath list mein add krdia
        currPath.add(root.val); //Topi pehnana(Wearing The Cap)
        
        //Two choices(Left, Right) -> decrement target sum by root's(current node) value.
        //Do choices hain left jao and right jao -> targetSum mein se current node ki value minus krdo
        pathSum(root.left, targetSum - root.val, currPath, allPaths);
        pathSum(root.right, targetSum - root.val, currPath, allPaths);
        //Backtracking(Topi Utarna(Pehle jaisi list krna)/Taking of the cup(undo))
        currPath.remove(currPath.size() - 1); 
    }
}




or



class Solution {
    public List<List<Integer>> pathSum(TreeNode root, int targetSum) {
        List<List<Integer>> res = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        dfs(root, targetSum, res, list);
        return res;
    }
    
    private void dfs(TreeNode root, int ts, List<List<Integer>> res, List<Integer> list){
        if(root == null) return;
        
        list.add(root.val);
        
        // Found a leaf node, if targetSum becomes zero after adding leaf node value then a path is found, add the path to the result list
        if(root.left == null && root.right == null){
            if((ts-root.val)==0) res.add(new ArrayList<>(list));
            return;
        }
        
        // Traverse left part(reduce targetSum by node value), and backtrack (by deleting node from list) after completing the left subtree
        if(root.left != null){
            dfs(root.left, ts-root.val, res, list);
            list.remove(list.size()-1);   
        }
        
        
        // Traverse right part and backtrack
        if(root.right != null){
            dfs(root.right, ts-root.val, res, list);
            list.remove(list.size()-1);    
        }
        
    }
}
