https://leetcode.com/problems/count-numbers-with-unique-digits/description/


357. Count Numbers with Unique Digits
Medium
Topics
Companies
Hint
Given an integer n, return the count of all numbers with unique digits, x, where 0 <= x < 10n.

 

Example 1:

Input: n = 2
Output: 91
Explanation: The answer should be the total numbers in the range of 0 â‰¤ x < 100, excluding 11,22,33,44,55,66,77,88,99
Example 2:

Input: n = 0
Output: 1
 

Constraints:

0 <= n <= 8


# java

public class Solution {
	public static int countNumbersWithUniqueDigits(int n) {
		if (n > 10) {
			return countNumbersWithUniqueDigits(10);
		}
		int count = 1; // x == 0
		long max = (long) Math.pow(10, n);

		boolean[] used = new boolean[10];

		for (int i = 1; i < 10; i++) {
			used[i] = true;
			count += search(i, max, used);
			used[i] = false;
		}

		return count;
	}

	private static int search(long prev, long max, boolean[] used) {
		int count = 0;
		if (prev < max) {
			count += 1;
		} else {
			return count;
		}

		for (int i = 0; i < 10; i++) {
			if (!used[i]) {
				used[i] = true;
				long cur = 10 * prev + i;
				count += search(cur, max, used);
				used[i] = false;
			}
		}

		return count;
	}
}


or


class Solution {
    public int countNumbersWithUniqueDigits(int n) {
        if (n == 0) {
            return 1;
        }
        int total = 10;
        int prod = 9;
        for (int i = 2; i < n + 1; i++) {
            total += prod * (11 - i);
            prod *= 11 - i;
        }
        return total;
    }
}


or


class Solution {
    public int countNumbersWithUniqueDigits(int n) 
    {
	/*
	    9 * 9 + 10 for n = 2
        9 * 9 * 8 + 10 for n = 3
        9 * 9 * 8 * 7 + 10 for n = 4
        9 * 9 * 8 * 7 * 6 + 10 for n = 5
	*/	
        if(n == 0)
            return 1;
        
        if(n == 1)
            return 10;
        
        int product =9;
        int result = 10;
        
        for(int i=2; i<=n; i++)
        {
            product = product * (11-i);
            result += product;
        }
        
        return result;
    }
}

or


class Solution {

    public int countNumbersWithUniqueDigits(int n) {
        int res[] = new int[n+1];
        res[0] = 1;

        for(int i=1;i<=n;i++){
            int j = i-1, m = 9, val = 9;
            while(j>0){
                val*=m;
                m--;
                j--;
            }
            res[i] = val+res[i-1];
        }
        return res[n];
    }
}


or

class Solution {

    public int helper(int[] freq, int idx, int n){
        if( idx == n)return 1;

        int count = 1;
        
        for(int i=0;i<10;i++){
            if((freq[i] != 1) && (i!=0 || idx != 0 )){
                freq[i] = 1;
                count+=helper(freq, idx+1, n);
                freq[i] = 0;
            }
        }
        return count;
    }

    public int countNumbersWithUniqueDigits(int n) {
        if(n == 0)return 1;
        return helper(new int[10], 0, n);

    }
}


or


class Solution {

    public int helper(int[] freq, int idx, int n,HashMap<String, Integer> map){
        if( idx == n)return 1;
        String key = Arrays.toString(freq)+"|"+idx;
        if(map.containsKey(key))return map.get(key);
        int count = 1;
        
        for(int i=0;i<10;i++){
            if((freq[i] != 1) && (i!=0 || idx != 0 )){
                freq[i] = 1;
                count+=helper(freq, idx+1, n, map);
                freq[i] = 0;
            }
        }
        map.put(key, count);
        return count;
    }

    public int countNumbersWithUniqueDigits(int n) {
        if(n == 0)return 1;
        HashMap<String, Integer> map = new HashMap<>();
        return helper(new int[10], 0, n, map);

    }
}
