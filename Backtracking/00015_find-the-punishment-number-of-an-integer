https://leetcode.com/problems/find-the-punishment-number-of-an-integer/description/

2698. Find the Punishment Number of an Integer
Medium
Topics
Companies
Hint
Given a positive integer n, return the punishment number of n.

The punishment number of n is defined as the sum of the squares of all integers i such that:

1 <= i <= n
The decimal representation of i * i can be partitioned into contiguous substrings such that the sum of the integer values of these substrings equals i.
 

Example 1:

Input: n = 10
Output: 182
Explanation: There are exactly 3 integers i in the range [1, 10] that satisfy the conditions in the statement:
- 1 since 1 * 1 = 1
- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 and 1 with a sum equal to 8 + 1 == 9.
- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 and 0 with a sum equal to 10 + 0 == 10.
Hence, the punishment number of 10 is 1 + 81 + 100 = 182
Example 2:

Input: n = 37
Output: 1478
Explanation: There are exactly 4 integers i in the range [1, 37] that satisfy the conditions in the statement:
- 1 since 1 * 1 = 1. 
- 9 since 9 * 9 = 81 and 81 can be partitioned into 8 + 1. 
- 10 since 10 * 10 = 100 and 100 can be partitioned into 10 + 0. 
- 36 since 36 * 36 = 1296 and 1296 can be partitioned into 1 + 29 + 6.
Hence, the punishment number of 37 is 1 + 81 + 100 + 1296 = 1478
 

Constraints:

1 <= n <= 1000



# java


class Solution {

    public boolean findPartitions(
        int startIndex,
        int sum,
        String stringNum,
        int target,
        int[][] memo
    ) {
        // Check if partition is valid
        if (startIndex == stringNum.length()) {
            return sum == target;
        }

        // Invalid partition found, so we return false
        if (sum > target) return false;

        // If the result for this state is already calculated, return it
        if (memo[startIndex][sum] != -1) return memo[startIndex][sum] == 1;

        boolean partitionFound = false;

        // Iterate through all possible substrings starting with startIndex
        for (
            int currentIndex = startIndex;
            currentIndex < stringNum.length();
            currentIndex++
        ) {
            // Create partition
            String currentString = stringNum.substring(
                startIndex,
                currentIndex + 1
            );
            int addend = Integer.parseInt(currentString);

            // Recursively check if valid partition can be found
            partitionFound =
                partitionFound ||
                findPartitions(
                    currentIndex + 1,
                    sum + addend,
                    stringNum,
                    target,
                    memo
                );
            if (partitionFound) {
                memo[startIndex][sum] = 1;
                return true;
            }
        }

        // Memoize the result for future reference and return its result
        memo[startIndex][sum] = 0;
        return false;
    }

    public int punishmentNumber(int n) {
        int punishmentNum = 0;
        // Iterate through numbers in range [1, n]
        for (int currentNum = 1; currentNum <= n; currentNum++) {
            int squareNum = currentNum * currentNum;
            String stringNum = Integer.toString(squareNum);

            // Initialize values in memoization array
            int[][] memoArray = new int[stringNum.length()][currentNum + 1];
            for (int[] row : memoArray) {
                java.util.Arrays.fill(row, -1);
            }

            // Check if valid partition can be found and add squared number if so
            if (findPartitions(0, 0, stringNum, currentNum, memoArray)) {
                punishmentNum += squareNum;
            }
        }
        return punishmentNum;
    }
}



or


class Solution {

    public boolean canPartition(String stringNum, int target) {
        // Valid Partition Found
        if (stringNum.isEmpty() && target == 0) {
            return true;
        }

        // Invalid Partition Found
        if (target < 0) {
            return false;
        }

        // Recursively check all partitions for a valid partition
        for (int index = 0; index < stringNum.length(); index++) {
            String left = stringNum.substring(0, index + 1);
            String right = stringNum.substring(index + 1);
            int leftNum = Integer.parseInt(left);

            if (canPartition(right, target - leftNum)) {
                return true;
            }
        }
        return false;
    }

    public int punishmentNumber(int n) {
        int punishmentNum = 0;

        // Iterate through numbers in range [1, n]
        for (int currentNum = 1; currentNum <= n; currentNum++) {
            int squareNum = currentNum * currentNum;

            // Check if valid partition can be found and add squared number if so
            if (canPartition(Integer.toString(squareNum), currentNum)) {
                punishmentNum += squareNum;
            }
        }
        return punishmentNum;
    }
}


or


class Solution {

    public boolean canPartition(int num, int target) {
        // Invalid partition found
        if (target < 0 || num < target) {
            return false;
        }

        // Valid partition found
        if (num == target) {
            return true;
        }

        // Recursively check all partitions for a valid partition
        return (
            canPartition(num / 10, target - (num % 10)) ||
            canPartition(num / 100, target - (num % 100)) ||
            canPartition(num / 1000, target - (num % 1000))
        );
    }

    public int punishmentNumber(int n) {
        int punishmentNum = 0;

        // Iterate through numbers in range [1, n]
        for (int currentNum = 1; currentNum <= n; currentNum++) {
            int squareNum = currentNum * currentNum;

            // Check if valid partition can be found and add squared number if so
            if (canPartition(squareNum, currentNum)) {
                punishmentNum += squareNum;
            }
        }
        return punishmentNum;
    }
}




or


class Solution {
    public int punishmentNumber(int n) {
        int[] arr = {1,9,10,36,45,55,82,91,99,100,235,297,369,370,379,414,657,675,703,756,792,909,918,945,964,990,991,999,1000};
        int sum = 0;
        for(int i=0;i<arr.length;i++){
            if(arr[i]<=n) sum += arr[i]*arr[i];
            else if(arr[i]>n) break;
        }
        return sum;
    }
}


or


class Solution {
    public int punishmentNumber(int n) {
        //to store punishment number
        int punishmentNum = 0;

        //traverse the array
        for(int curr = 1;curr <= n ;curr++){

            //finding square
            int square = curr*curr;
            
            if(canPartition(square,curr))
              punishmentNum += square;
        }

        return punishmentNum;

    }
    public boolean canPartition(int num, int target){
        //invalid
        if(num < target || target < 0)
          return false;

        if(num == target)
          return true;

        return (canPartition(num/10,target-(num%10)) || canPartition(num/100,target-(num%100)) || canPartition(num/1000,target-(num%1000)));
    }
}


or


class Solution {
    public int punishmentNumber(int n) {
        //to store punishment number
        int punishmentNum = 0;

        //traverse the array
        for(int curr = 1;curr <= n ;curr++){

            //finding square
            int square = curr*curr;
            
            if(canPartition(square,curr))
              punishmentNum += square;
        }

        return punishmentNum;

    }
    public boolean canPartition(int num, int target){
        //invalid
        if(num < target || target < 0)
          return false;

        if(num == target)
          return true;

        return (canPartition(num/10,target-(num%10)) || canPartition(num/100,target-(num%100)) || canPartition(num/1000,target-(num%1000)));
    }
}



or


class Solution {
    public int punishmentNumber(int n) {
        int sum = 0;
        for (int i = 1; i <= n; i++) {
            if (canPartition(String.valueOf(i * i), 0, i)) {
                sum += (i * i);
            }
        }
        return sum;
    }

    private boolean canPartition(String num, int index, int target) {
        if (index == num.length()) return target == 0;

        int sum = 0;
        for (int i = index; i < num.length(); i++) {
            sum = sum * 10 + (num.charAt(i) - '0');
            if (sum > target) break;
            if (canPartition(num, i + 1, target - sum)) return true;
        }
        return false;
    }
}
