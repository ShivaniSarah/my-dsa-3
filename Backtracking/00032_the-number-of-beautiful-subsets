https://leetcode.com/problems/the-number-of-beautiful-subsets/description/


2597. The Number of Beautiful Subsets
Medium
Topics
Companies
Hint
You are given an array nums of positive integers and a positive integer k.

A subset of nums is beautiful if it does not contain two integers with an absolute difference equal to k.

Return the number of non-empty beautiful subsets of the array nums.

A subset of nums is an array that can be obtained by deleting some (possibly none) elements from nums. Two subsets are different if and only if the chosen indices to delete are different.

 

Example 1:

Input: nums = [2,4,6], k = 2
Output: 4
Explanation: The beautiful subsets of the array nums are: [2], [4], [6], [2, 6].
It can be proved that there are only 4 beautiful subsets in the array [2,4,6].
Example 2:

Input: nums = [1], k = 1
Output: 1
Explanation: The beautiful subset of the array nums is [1].
It can be proved that there is only 1 beautiful subset in the array [1].
 

Constraints:

1 <= nums.length <= 18
1 <= nums[i], k <= 1000


# java


class Solution {
    private HashMap<Integer, Integer> freq;

    private int beautifulSubsets(int[] nums, int k, int i) {
        if (i == nums.length) { // base case
            return 1;
        }
        int result = beautifulSubsets(nums, k, i + 1); // nums[i] not taken
        if (!freq.containsKey(nums[i] - k) && !freq.containsKey(nums[i] + k)) { // check if we can take nums[i]
            freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1);
            result += beautifulSubsets(nums, k, i + 1); // nums[i] taken
            freq.put(nums[i], freq.get(nums[i]) - 1);
            if (freq.get(nums[i]) == 0) {
                freq.remove(nums[i]);
            }
        }
        return result;
    }

    public int beautifulSubsets(int[] nums, int k) {
        freq = new HashMap<Integer, Integer>();
        return beautifulSubsets(nums, k, 0) - 1; // -1 for empty subset
    }
}


or


class Solution {
    private HashMap<Integer, Integer> freq;

    private int beautifulSubsets(int[] nums, int k, int i) {
        if (i == nums.length) { // base case
            return 1;
        }
        int result = beautifulSubsets(nums, k, i + 1); // nums[i] not taken
        if (!freq.containsKey(nums[i] - k)) { // check if we can take nums[i]
            freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1);
            result += beautifulSubsets(nums, k, i + 1); // nums[i] taken
            freq.put(nums[i], freq.get(nums[i]) - 1);
            if (freq.get(nums[i]) == 0) {
                freq.remove(nums[i]);
            }
        }
        return result;
    }

    public int beautifulSubsets(int[] nums, int k) {
        freq = new HashMap<Integer, Integer>();
        Arrays.sort(nums);
        return beautifulSubsets(nums, k, 0) - 1; // -1 for empty subset
    }
}


or


class Solution {
    int[][] s;

    private int beautifulSubsets(int n, int k, int i) {
        if (i == n) {
            return 1;
        }
        int skip = beautifulSubsets(n, k, i + 1); // 1 * f(i + 1)
        int take = (1 << s[i][1]) - 1; // take s[i]
        if (i + 1 < n && s[i + 1][0] - s[i][0] == k) { // next number is s[i] + k
            take *= beautifulSubsets(n, k, i + 2);
        } else {
            take *= beautifulSubsets(n, k, i + 1);
        }
        return skip + take;
    }

    public int beautifulSubsets(int[] nums, int k) {
        int result = 1;
        Map<Integer, Map<Integer, Integer>> freq = new TreeMap<>();
        // {remainder : {num :    frequency}}
        // map is sorted based on num to get subset of form [x, x + k, x + 2k, ...]
        for (int x: nums) { // splitting subsets based on remainder and calculating frequency
            Map<Integer, Integer> fr = freq.getOrDefault(x % k, new TreeMap<>());
            fr.put(x, fr.getOrDefault(x, 0) + 1);
            freq.put(x % k, fr);
        }
        for (Map<Integer, Integer> fr: freq.values()) { // loop for s1, s2, ...
            s = fr.entrySet().stream()
                  .map(e -> new int[]{e.getKey(), e.getValue()})
                  .toArray(int[][]::new);
            result *= beautifulSubsets(s.length, k, 0); // f(s1) * f(s2) ...
        }
        return result - 1; // -1 for empty subset
    }
}


or


class Solution {
    int[][] s;
    int[] count;

    private int beautifulSubsets(int n, int k, int i) {
        if (i == n) {
            return 1;
        }
        if (count[i] != -1) {
            return count[i];
        }
        int skip = beautifulSubsets(n, k, i + 1);
        int take = (1 << s[i][1]) - 1;
        if (i + 1 < n && s[i + 1][0] - s[i][0] == k) {
            take *= beautifulSubsets(n, k, i + 2);
        } else {
            take *= beautifulSubsets(n, k, i + 1);
        }
        return count[i] = skip + take;
    }

    public int beautifulSubsets(int[] nums, int k) {
        int result = 1;
        Map<Integer, Map<Integer, Integer>> freq = new TreeMap<>();
        for (int x: nums) {
            Map<Integer, Integer> fr = freq.getOrDefault(x % k, new TreeMap<>());
            fr.put(x, fr.getOrDefault(x, 0) + 1);
            freq.put(x % k, fr);
        }
        for (Map<Integer, Integer> fr: freq.values()) {
            s = fr.entrySet().stream()
                  .map(e -> new int[]{e.getKey(), e.getValue()})
                  .toArray(int[][]::new);
            count = new int[fr.size()];
            Arrays.fill(count, -1);
            result *= beautifulSubsets(s.length, k, 0);
        }
        return result - 1;
    }
}


or


class Solution {
    public int beautifulSubsets(int[] nums, int k) {
        int result = 1;
        Map<Integer, Map<Integer, Integer>> freq = new TreeMap<>();
        for (int x: nums) {
            Map<Integer, Integer> fr = freq.getOrDefault(x % k, new TreeMap<>());
            fr.put(x, fr.getOrDefault(x, 0) + 1);
            freq.put(x % k, fr);
        }
        for (Map<Integer, Integer> fr: freq.values()) {
            int n = fr.size();
            int[][] s = fr.entrySet().stream()
                          .map(e -> new int[]{e.getKey(), e.getValue()})
                          .toArray(int[][]::new);
            int[] count = new int[n + 1];
            count[n] = 1;
            for (int i = n - 1; i >= 0; i--) {
                int skip = count[i + 1];
                int take = (1 << s[i][1]) - 1;
                if (i + 1 < n && s[i + 1][0] - s[i][0] == k) {
                    take *= count[i + 2];
                } else {
                    take *= count[i + 1];
                }
                count[i] = skip + take;
            }
            result *= count[0];
        }
        return result - 1;
    }
}


or


class Solution {
    public int beautifulSubsets(int[] nums, int k) {
        int result = 1;
        Map<Integer, Map<Integer, Integer>> freq = new TreeMap<>();
        for (int x: nums) {
            Map<Integer, Integer> fr = freq.getOrDefault(x % k, new TreeMap<>());
            fr.put(x, fr.getOrDefault(x, 0) + 1);
            freq.put(x % k, fr);
        }
        for (Map<Integer, Integer> fr: freq.values()) {
            int n = fr.size(), curr = 1, next1 = 1, next2 = 0;
            int[][] s = fr.entrySet().stream()
                          .map(e -> new int[]{e.getKey(), e.getValue()})
                          .toArray(int[][]::new);
            for (int i = n - 1; i >= 0; i--) {
                int skip = next1;
                int take = (1 << s[i][1]) - 1;
                if (i + 1 < n && s[i + 1][0] - s[i][0] == k) {
                    take *= next2;
                } else {
                    take *= next1;
                }
                curr = skip + take;
                next2 = next1; next1 = curr;
            }
            result *= curr;
        }
        return result - 1;
    }
}


or


class Solution {
    public int beautifulSubsets(int[] nums, int k) {
        int result = 1;
        Map<Integer, Map<Integer, Integer>> freq = new TreeMap<>();
        for (int x: nums) {
            Map<Integer, Integer> fr = freq.getOrDefault(x % k, new TreeMap<>());
            fr.put(x, fr.getOrDefault(x, 0) + 1);
            freq.put(x % k, fr);
        }
        for (Map<Integer, Integer> fr: freq.values()) {
            int prevNum = -k, prev2 = 0, prev1 = 1, curr = 1;
            for (Map.Entry<Integer, Integer> entry: fr.entrySet()) {
                int num = entry.getKey(), f = entry.getValue();
                int skip = prev1;
                int take = ((1 << f) - 1) * (num - prevNum == k ? prev2 : prev1);
                curr = skip + take;
                prev2 = prev1; prev1 = curr;
                prevNum = num;
            }
            result *= curr;
        }
        return result - 1;
    }
}
