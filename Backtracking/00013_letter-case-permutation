https://leetcode.com/problems/letter-case-permutation/description/


# java


784. Letter Case Permutation
Medium
Topics
Companies
Given a string s, you can transform every letter individually to be lowercase or uppercase to create another string.

Return a list of all possible strings we could create. Return the output in any order.

 

Example 1:

Input: s = "a1b2"
Output: ["a1b2","a1B2","A1b2","A1B2"]
Example 2:

Input: s = "3z4"
Output: ["3z4","3Z4"]
 

Constraints:

1 <= s.length <= 12
s consists of lowercase English letters, uppercase English letters, and digits.



#  java

class Solution {
    
    void recurse(char[] str, int pos, List<String> result) {
        //If we have reached a leaf in the recursion tree, save the result.
        if (pos == str.length) {
            result.add(new String(str));
            return;
        }
        
        //If char is not a letter, no processing required.
        if (Character.isLetter(str[pos])) {
            //If uppercase char, we make it lower case, and recurse.
            if (Character.isUpperCase(str[pos])) {
                str[pos] = Character.toLowerCase(str[pos]);
                
                //Start a new branch in the recursion tree, exploring options that are possible only if we had changed the case.
                recurse(str, pos + 1, result);
                
                //Backtracking. We undo the change so that we can start a new branch in the recursion tree.
                str[pos] = Character.toUpperCase(str[pos]);
            }
            //If lowercase, then we make it upper case, and recurse.
            else {
                str[pos] = Character.toUpperCase(str[pos]);
                recurse(str, pos + 1, result);
                //Backtracking as explained above.
                str[pos] = Character.toLowerCase(str[pos]);
            }
        }
        //This branch explores options that are possible only if the previously performed change (if any) hadn't happened.
        recurse(str, pos + 1,  result);
    }
    
    public List<String> letterCasePermutation(String S) {
        List<String> result = new ArrayList<>();
        recurse(S.toCharArray(), 0, result);
        return result;
    }
}


or


class Solution {
    List<String> ans = new ArrayList<>();

    public List<String> letterCasePermutation(String s) {
        generate(s.toCharArray(), 0);
        return ans;
    }

    public void generate(char[] arr, int idx) {
        if (idx == arr.length) {
            ans.add(new String(arr));
            return;
        }

        if (Character.isDigit(arr[idx])) {
            generate(arr, idx + 1);
            return;
        }

        arr[idx] = Character.toLowerCase(arr[idx]);
        generate(arr, idx + 1);

        arr[idx] = Character.toUpperCase(arr[idx]);
        generate(arr, idx + 1);
    }
}

// TC: O(n * 2^n), SC: O(n)



or


class Solution {
    public List<String> letterCasePermutation(String str) {
        List<String> permutations = new ArrayList<>();
        if (str == null) {
            return permutations;
        }
        
        permutations.add(str);
        
        for (int i=0; i<str.length(); i++) {
            if (Character.isLetter(str.charAt(i))) {
                int n = permutations.size();
                
                for (int j=0; j<n; j++) {
                    char[] chs = permutations.get(j).toCharArray();
                    if (Character.isUpperCase(chs[i])) {
                        chs[i] = Character.toLowerCase(chs[i]);
                    } else {
                        chs[i] = Character.toUpperCase(chs[i]);
                    }
                    
                    permutations.add(String.valueOf(chs));
                }
            }
        }
        
        return permutations;
    }
}


or



class Solution {
    	public List<String> letterCasePermutation(String S) {
        List<String> result = new ArrayList<>();
        letterCasePermutation(S, 0, result, "");
        return result;
    }
    
    private void letterCasePermutation(String s, int idx, List<String> result, String current) {
        if (idx == s.length()) {
            result.add(current);
        } else {
            char c = s.charAt(idx);
            letterCasePermutation(s, idx + 1, result, current + c);
            if (Character.isLetter(c))
                letterCasePermutation(s, idx + 1, result,
                        current + (Character.isUpperCase(c) ? Character.toLowerCase(c) : Character.toUpperCase(c)));
        }
    }
}
