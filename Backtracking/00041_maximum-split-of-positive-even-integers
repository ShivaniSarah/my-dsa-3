https://leetcode.com/problems/maximum-split-of-positive-even-integers/description/


2178. Maximum Split of Positive Even Integers
Medium
Topics
Companies
Hint
You are given an integer finalSum. Split it into a sum of a maximum number of unique positive even integers.

For example, given finalSum = 12, the following splits are valid (unique positive even integers summing up to finalSum): (12), (2 + 10), (2 + 4 + 6), and (4 + 8). Among them, (2 + 4 + 6) contains the maximum number of integers. Note that finalSum cannot be split into (2 + 2 + 4 + 4) as all the numbers should be unique.
Return a list of integers that represent a valid split containing a maximum number of integers. If no valid split exists for finalSum, return an empty list. You may return the integers in any order.

 

Example 1:

Input: finalSum = 12
Output: [2,4,6]
Explanation: The following are valid splits: (12), (2 + 10), (2 + 4 + 6), and (4 + 8).
(2 + 4 + 6) has the maximum number of integers, which is 3. Thus, we return [2,4,6].
Note that [2,6,4], [6,2,4], etc. are also accepted.
Example 2:

Input: finalSum = 7
Output: []
Explanation: There are no valid splits for the given finalSum.
Thus, we return an empty array.
Example 3:

Input: finalSum = 28
Output: [6,8,2,12]
Explanation: The following are valid splits: (2 + 26), (6 + 8 + 2 + 12), and (4 + 24). 
(6 + 8 + 2 + 12) has the maximum number of integers, which is 4. Thus, we return [6,8,2,12].
Note that [10,2,4,12], [6,2,4,16], etc. are also accepted.
 

Constraints:

1 <= finalSum <= 1010



# java


class Solution {
       public List<Long> maximumEvenSplit(long f) {
        LinkedList<Long> ans = new LinkedList<>();
        if (f % 2 == 0) {
            long i = 2;
            while (i <= f) {
                ans.offer(i);
                f -= i;
                i += 2;
            } 
            ans.offer(f + ans.pollLast());
        }
        return ans;
    }
}


or


class Solution {
    public List<Long> maximumEvenSplit(long finalSum) {
        List<Long> res = new ArrayList<Long>();
        //odd sum cannot be divided into even numbers
        if(finalSum % 2 != 0) {
            return res;
        }
        //Greedy approach, try to build the total sum using minimum unique even nos
        long currNum = 2;
        long remainingSum = finalSum;
        //as long as we can add subtract this number from remaining sum
        while(currNum <= remainingSum) {
            res.add(currNum);
            remainingSum -= currNum;//reducing remaining sum
            currNum += 2;//next even number
        }
        //now, remaining sum cannot be fulfilled by any larger even number
        //so extract the largest even number we added to the last index of res, and make it even larger by adding this current remaining sum
        //add remaining sum to the last element
        long last = res.remove(res.size()-1);
        res.add(last+remainingSum);
        return res;
    }
}


or


class Solution {
    public List<Long> maximumEvenSplit(long finalSum) {
        List<Long> res = new ArrayList<>();
        if (finalSum % 2 != 0)
            return res;

        long num = 2;
        while (finalSum >= num) {
            res.add(num);
            finalSum -= num;
            num += 2;
        }

        // Add the leftover to the last element to keep the sum correct
        if (finalSum > 0) {
            long last = res.remove(res.size() - 1);
            res.add(last + finalSum);
        }

        return res;
    }
}


or


class Solution {
    public List<Long> maximumEvenSplit(long finalSum) {
        if(finalSum % 2 != 0) {
            return new ArrayList<>();
        }

        List<Long> result = new ArrayList<>();
        long currentNum = 0;
        long currentSum = 0;

        while (currentSum < finalSum) {
            currentNum += 2;
            currentSum += currentNum;
            result.add(currentNum);
        }

        if(currentSum != finalSum) {
            long diff = currentSum - finalSum;
            result.remove((int) (diff / 2) - 1);
        }

        return result;
    }
}


or


class Solution {
    public List<Long> maximumEvenSplit(long finalSum) {
        if(finalSum%2 != 0) {
            return new ArrayList<>();
        }
        
        long sum = 0;
        long i = 2;
        
        List<Long> answer = new ArrayList<>();
        
        // Keep adding all the even integers starting from 2 until the sum becomes greater than finalSum
        while(sum <= finalSum) {
            if(sum + i > finalSum)
                break;
            sum = sum + i;
            answer.add(i);
            i = i+2;
        }
        
        if(sum == finalSum) {
            return answer;
        }
        
        /* Remove the last element and add the remaining difference to the last number and return the answer.
        For example: Input - 8
        We first add 2, then 4
        Now we check 2+4+6 is ater than 8. So we pop the last element and add
        the difference to it.
        We remove 4. Then add 4+2 which is 6. We then add 6 into the list to get 
        [2,6]. */
        int lastElementIndex = answer.size() - 1;
        long lastElement = answer.get(lastElementIndex);
        answer.remove(lastElementIndex);
        answer.add(lastElement + (finalSum - sum));
        return answer;
        
    }
}


or


class Solution {
    public List<Long> maximumEvenSplit(long finalSum) {
        List<Long> output = new ArrayList();
        if (finalSum % 2 != 0) return output;
        
        long i = 2;
        while (i <= finalSum) {
            output.add(i);
            finalSum -= i;
            i += 2;
        }
        if(finalSum != 0) output.set(output.size() - 1, output.get(output.size() - 1) + finalSum);
        return output;
    }
}


or


class Solution {
    public List<Long> maximumEvenSplit(long finalSum) {
        if (finalSum % 2 != 0) return new ArrayList();
        
        int low = 0, high = (int) Math.sqrt(finalSum);
        while (low < high) {
            int mid = (low + high) / 2;
            if(sumOfFirstKEvens(finalSum, mid)) low = mid + 1;
            else high = mid;
        }
        
        List<Long> output = new ArrayList();
        for (int digit = 1; digit < low; digit++) {
            output.add((long) 2 * digit);
            finalSum -= 2 * digit;
        }
        output.add(finalSum);
        return output;
    }
    
    boolean sumOfFirstKEvens(long finalSum, int mid) {
        long reminder = finalSum - (long) mid * (mid + 1);
        if(reminder > 2 * mid) return true;
        return false;
    }
}


or


