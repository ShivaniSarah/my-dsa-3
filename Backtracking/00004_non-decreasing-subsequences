https://leetcode.com/problems/non-decreasing-subsequences/description/

491. Non-decreasing Subsequences
Medium
Topics
Companies
Given an integer array nums, return all the different possible non-decreasing subsequences of the given array with at least two elements. You may return the answer in any order.

 

Example 1:

Input: nums = [4,6,7,7]
Output: [[4,6],[4,6,7],[4,6,7,7],[4,7],[4,7,7],[6,7],[6,7,7],[7,7]]
Example 2:

Input: nums = [4,4,3,2,1]
Output: [[4,4]]
 

Constraints:

1 <= nums.length <= 15
-100 <= nums[i] <= 100


# java


class Solution {
    int[] arr;
    HashSet<List<Integer>> hashSet = new HashSet<>();
    public List<List<Integer>> findSubsequences(int[] nums) {
        arr = nums;
        List<Integer> arrayList = new ArrayList<>();
        recursion(arrayList,0);
        List<List<Integer>> result = new ArrayList<>(hashSet);
        return result;
    }

    public void recursion(List<Integer> arrayList, int index){
        if(arrayList.size()>=2) hashSet.add(new ArrayList(arrayList));

        for(int i = index;i<arr.length;i++){
            if(arrayList.size() == 0 || arr[i]>= arrayList.get(arrayList.size()-1)){
                arrayList.add(arr[i]);
                recursion(arrayList,i+1);
                arrayList.remove(arrayList.size()-1);
            }
        }

    }
}


or


class Solution {
    Set<List<Integer>> lists;
    public List<List<Integer>> findSubsequences(int[] nums) {
        lists = new HashSet<>();
        recursion(nums,0,new ArrayList());
        
        return new ArrayList(lists);
    }
    void recursion(int[] nums,int curr,List<Integer> temp)
    {
        if(temp.size() >= 2)
            lists.add(new ArrayList(temp));
            
        for(int i=curr;i<nums.length;i++)
        {
            if(temp.size()==0 || temp.get(temp.size()-1) <= nums[i])
            {
                temp.add(nums[i]);
                recursion(nums,i+1,temp);
                temp.remove(temp.size()-1);
            }
        }
    }
}

or


class Solution {
    public void solve(int[] nums, int index, List<Integer> output, Set<List<Integer>> ans) {
        // base case: if we have reached the end of the input array
        if (index >= nums.length) {
            // only add the output if it has more than one element
            if (output.size() > 1) {
                ans.add(new ArrayList<>(output));
            }
            return;
        }
        
        // if the output is empty or the current element is greater than or equal to the last element in the output
        if (output.isEmpty() || nums[index] >= output.get(output.size() - 1)) {
            // add the current element to the output and recursively call solve
            output.add(nums[index]);
            solve(nums, index+1, output, ans);
            // remove the last element from the output before returning
            output.remove(output.size() - 1);
        }
        
        // recursively call solve without adding the current element to the output
        solve(nums, index+1, output, ans);
    }
    
    public List<List<Integer>> findSubsequences(int[] nums) {
        // use a set to store the unique sub sequences
        Set<List<Integer>> ans = new HashSet<>();
        solve(nums, 0, new ArrayList<>(), ans);
        return new ArrayList<>(ans);
    }
}


or



class Solution {
    public List<List<Integer>> findSubsequences(int[] nums) {
        List<List<Integer>> ans = new ArrayList<>();
        gen(0, nums, ans, new ArrayList<>());
        return ans;
    }

    private void gen(int cur, int[] nums, List<List<Integer>> ans, List<Integer> tmp){
        if (cur == nums.length){
            if (tmp.size() > 1){
                ans.add(new ArrayList<>(tmp));
            }
            return;
        }

        if (cur == 0 || tmp.isEmpty() || tmp.get(tmp.size() - 1) != nums[cur]){
            gen(cur + 1, nums, ans, tmp); // not-pick option
        }
        if (tmp.isEmpty() || tmp.get(tmp.size() - 1) <= nums[cur]){
            tmp.add(nums[cur]);
            gen(cur + 1, nums, ans, tmp); // pick option
            tmp.remove(tmp.size() - 1);
        }
    }
}
