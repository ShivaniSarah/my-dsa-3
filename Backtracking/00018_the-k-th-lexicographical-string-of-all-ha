https://leetcode.com/problems/the-k-th-lexicographical-string-of-all-happy-strings-of-length-n/description/


1415. The k-th Lexicographical String of All Happy Strings of Length n
Medium
Topics
Companies
Hint
A happy string is a string that:

consists only of letters of the set ['a', 'b', 'c'].
s[i] != s[i + 1] for all values of i from 1 to s.length - 1 (string is 1-indexed).
For example, strings "abc", "ac", "b" and "abcbabcbcb" are all happy strings and strings "aa", "baa" and "ababbc" are not happy strings.

Given two integers n and k, consider a list of all happy strings of length n sorted in lexicographical order.

Return the kth string of this list or return an empty string if there are less than k happy strings of length n.

 

Example 1:

Input: n = 1, k = 3
Output: "c"
Explanation: The list ["a", "b", "c"] contains all happy strings of length 1. The third string is "c".
Example 2:

Input: n = 1, k = 4
Output: ""
Explanation: There are only 3 happy strings of length 1.
Example 3:

Input: n = 3, k = 9
Output: "cab"
Explanation: There are 12 different happy string of length 3 ["aba", "abc", "aca", "acb", "bab", "bac", "bca", "bcb", "cab", "cac", "cba", "cbc"]. You will find the 9th string = "cab"
 

Constraints:

1 <= n <= 10
1 <= k <= 100


 #java

class Solution {

    List<String> happyStrings = new ArrayList<>();

    public String getHappyString(int n, int k) {
        String currentString = "";
        // Generate all happy strings of length n
        generateHappyStrings(n, currentString);

        // Check if there are at least k happy strings
        if (happyStrings.size() < k) return "";

        return happyStrings.get(k - 1);
    }

    protected void generateHappyStrings(int n, String currentString) {
        // If the current string has reached the desired length, add it to the
        // list
        if (currentString.length() == n) {
            happyStrings.add(currentString);
            return;
        }

        // Try adding each character ('a', 'b', 'c') to the current string
        for (char currentChar = 'a'; currentChar <= 'c'; currentChar++) {
            // Skip if the current character is the same as the last character
            if (
                currentString.length() > 0 &&
                currentString.charAt(currentString.length() - 1) == currentChar
            ) continue;

            // Recursively generate the next character
            generateHappyStrings(n, currentString + currentChar);
        }
    }
}


or

class Solution {
    static int count = 0;
    static String res = "";
    public String getHappyString(int n, int k) {
        count = 0;
        res = "";
        backtrack(n, k, new StringBuilder(), ' ');
        return res;
    }

    private static void backtrack(int n, int k, StringBuilder sb, char lastChar) {
        if(sb.length() == n) {
            if(++count == k) {
                res = sb.toString();
            }
            return;
        }

        char[] chars = {'a', 'b', 'c'};
        for(int i = 0 ; i < chars.length ; i++) {
            char c = chars[i];
            if(c != lastChar) {
                sb.append(c);
                backtrack(n,k,sb,c);
                sb.setLength(sb.length()-1);
                if(!res.isEmpty()) return; 
            }   
        }
    }
}


or


import java.util.*;
class Solution {
    public String getHappyString(int n, int k) {
        Queue<String> q = new LinkedList<>();
        q.offer("a");
        q.offer("b");
        q.offer("c");
        List<String> happyStrings = new ArrayList<>();
        
        while (!q.isEmpty()) {
            String s = q.poll();
            if (s.length() == n) {
                happyStrings.add(s);
                continue;
            }
            for (char ch : new char[]{'a', 'b', 'c'}) {
                if (s.charAt(s.length() - 1) != ch) {
                    q.offer(s + ch);
                }
            }
        }
        
        return k > happyStrings.size() ? "" : happyStrings.get(k - 1);
    }
}
