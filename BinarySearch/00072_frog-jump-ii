https://leetcode.com/problems/frog-jump-ii/description/


2498. Frog Jump II
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array stones sorted in strictly increasing order representing the positions of stones in a river.

A frog, initially on the first stone, wants to travel to the last stone and then return to the first stone. However, it can jump to any stone at most once.

The length of a jump is the absolute difference between the position of the stone the frog is currently on and the position of the stone to which the frog jumps.

More formally, if the frog is at stones[i] and is jumping to stones[j], the length of the jump is |stones[i] - stones[j]|.
The cost of a path is the maximum length of a jump among all jumps in the path.

Return the minimum cost of a path for the frog.

 

Example 1:


Input: stones = [0,2,5,6,7]
Output: 5
Explanation: The above figure represents one of the optimal paths the frog can take.
The cost of this path is 5, which is the maximum length of a jump.
Since it is not possible to achieve a cost of less than 5, we return it.
Example 2:


Input: stones = [0,3,9]
Output: 9
Explanation: 
The frog can jump directly to the last stone and come back to the first stone. 
In this case, the length of each jump will be 9. The cost for the path will be max(9, 9) = 9.
It can be shown that this is the minimum achievable cost.
 

Constraints:

2 <= stones.length <= 105
0 <= stones[i] <= 109
stones[0] == 0
stones is sorted in a strictly increasing order.



# java


class Solution {
  public int maxJump(int[] stones) {
    // Let's denote the forwarding path as F and the backwarding path as B.
    // "F1 B2 B1 F2" is no better than "F1 B2 F2 B1" since the distance between
    // F1 and F2 increase, resulting a larger `ans`.
    int ans = stones[1] - stones[0]; // If there're only two stones.
    for (int i = 2; i < stones.length; ++i)
      ans = Math.max(ans, stones[i] - stones[i - 2]);
    return ans;
  }
}



or


// bets
class Solution {
    public int maxJump(int[] stones) {
        int ans = stones[1] - stones[0];
        for (int i = 2; i < stones.length; ++i) {
            ans = Math.max(ans, stones[i] - stones[i - 2]);
        }
        return ans;
    }
}


or


class Solution {
    public int maxJump(int[] stones) {
         int n = stones.length;
         int res = 0;
         if(n == 2 || n == 3){
            return stones[n-1] -stones[0];
         }
         for(int i = 0;i<n-2;i++){
            int curr = stones[i+2] - stones[i];
            res = Math.max(res,curr);
         }
         return res;
    }
}


or


class Solution {
    public int maxJump(int[] stones) {
        int ans = 0;
        int n = stones.length;
        if(stones.length == 2) return stones[1] - stones[0];
        int[] dist = new int[n];
        dist[n-1] = 0;
        dist[n-2] = stones[n-1] - stones[n-2];
        for(int i=n-3;i>=0;i--) {
            int going = Math.max(stones[i+1] - stones[i], dist[i+1]);
            int coming = Math.max(stones[i+2] - stones[i], dist[i+2]);
            dist[i] = Math.max(going, coming);
        }
        return dist[0];
    }
}


or


class Solution {
    public int maxJump(int[] stones) {
        //  Applying Binary Search on the possible jumps
        int n= stones.length;
        int left= 1;
        int right= stones[n-1]-stones[0];

        int minJump= right;

        while(left <= right){
            int mid= (left+right)/2;

            boolean possible= check(stones, mid);

            if(possible){
                minJump= mid;
                right= mid-1;                
            }
            else{
                left= mid+1;
            }
        }

        return minJump;
    }

    public boolean check(int[] stones, int maxJump){
        //  Let's jump by skipping one-one stone
        int n= stones.length;
        HashSet<Integer> visited= new HashSet<>();

        //  Reaching to the end
        for(int i=0; i<n; i++){

            if(i == n-1){
                break;
            }
            else if(i+1 == n-1){
                if(stones[i+1]-stones[i] <= maxJump){
                    if(i != 0){
                        visited.add(i);
                    }
                    break;
                }
                else{
                    return false;
                }
            }
            else if( stones[i+2]-stones[i] <= maxJump ){
                //  Marking the prev stone as visited
                if(i != 0){
                    visited.add(i);
                }
                i++;
            }
            else{
                return false;
            }
        }

        //  Reaching to the start
        for(int i=n-1; i>=0; i--){

            if(i == 0){
                break;
            }
            if(i-1 == 0){
                if(stones[i]-stones[i-1] <= maxJump){
                    break;
                }
                else{
                    return false;
                }
            }

            else if( visited.contains(i-1) ){
                if(stones[i]-stones[i-2] <= maxJump){
                    i--;
                }
                else{
                    return false;
                }
            }
        }

        return true;
    }
}

or


import java.util.*;

class Solution {
   
    int n=0;
    public int maxJump(int[] stones) {
        n=stones.length;
        int ans=0;
        int str=0,end=stones[n-1]-stones[0];
        while (str<=end){
            int mid=str+(end-str)/2;
            boolean isPossible=isItPossibleToComplete(mid,stones);
            System.out.println(mid+" : "+isPossible);
            if(isPossible){
                ans=mid;
                end=mid-1;
            }else{
                str=mid+1;
            }

        }
        return ans;
    }
    public boolean isItPossibleToComplete(int maxGap,int[] stones){
        int i=0,lastTaken=0;
        boolean[] arr=new boolean[n];
        while (i<n){
            lastTaken=i;
            int j=i+1;
            while (j<n && stones[j]-stones[i]<=maxGap){
                if(!arr[j]){
                    lastTaken=j;
                }
                j++;
            }
            if(lastTaken==n-1){
                break;
            }
            if(lastTaken==i){
                return false;
            }
            i=lastTaken;
            arr[i]=true;
        }
        i=n-1;
        lastTaken=n-1;
        while (i>=0){
            lastTaken=i;
            int j=i-1 ;
                  while (j>=0 && stones[i]-stones[j]<=maxGap){
                      if(!arr[j]){
                          lastTaken=j;
                      }
                      j--;
            }
            if(lastTaken==0){
                break;
            }
            if(lastTaken==i){
                return false;
            }
            i=lastTaken;
            arr[i]=true;

        }
        return true;

    }
}



