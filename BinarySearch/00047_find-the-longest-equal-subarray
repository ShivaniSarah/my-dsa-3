https://leetcode.com/problems/find-the-longest-equal-subarray/description/


2831. Find the Longest Equal Subarray
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums and an integer k.

A subarray is called equal if all of its elements are equal. Note that the empty subarray is an equal subarray.

Return the length of the longest possible equal subarray after deleting at most k elements from nums.

A subarray is a contiguous, possibly empty sequence of elements within an array.

 

Example 1:

Input: nums = [1,3,2,3,1,3], k = 3
Output: 3
Explanation: It's optimal to delete the elements at index 2 and index 4.
After deleting them, nums becomes equal to [1, 3, 3, 3].
The longest equal subarray starts at i = 1 and ends at j = 3 with length equal to 3.
It can be proven that no longer equal subarrays can be created.
Example 2:

Input: nums = [1,1,2,2,1,1], k = 2
Output: 4
Explanation: It's optimal to delete the elements at index 2 and index 3.
After deleting them, nums becomes equal to [1, 1, 1, 1].
The array itself is an equal subarray, so the answer is 4.
It can be proven that no longer equal subarrays can be created.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= nums.length
0 <= k <= nums.length



# java

class Solution {
  public int longestEqualSubarray(List<Integer> nums, int k) {
    int ans = 0;
    Map<Integer, Integer> count = new HashMap<>();

    for (int l = 0, r = 0; r < nums.size(); ++r) {
      ans = Math.max(ans, count.merge(nums.get(r), 1, Integer::sum));
      while (r - l + 1 - k > ans)
        count.merge(nums.get(l++), -1, Integer::sum);
    }

    return ans;
  }
}


or


class Solution {
  public int longestEqualSubarray(List<Integer> nums, int k) {
    int ans = 0;
    Map<Integer, Integer> count = new HashMap<>();

    // l and r track the maximum window instead of the valid window.
    for (int l = 0, r = 0; r < nums.size(); ++r) {
      ans = Math.max(ans, count.merge(nums.get(r), 1, Integer::sum));
      if (r - l + 1 - k > ans)
        count.merge(nums.get(l++), -1, Integer::sum);
    }

    return ans;
  }
}


or



class Solution {
    public int longestEqualSubarray(List<Integer> nums, int k) {
        Map<Integer, Integer> cnt = new HashMap<>();
        int mx = 0, l = 0;
        for (int r = 0; r < nums.size(); ++r) {
            cnt.merge(nums.get(r), 1, Integer::sum);
            mx = Math.max(mx, cnt.get(nums.get(r)));
            if (r - l + 1 - mx > k) {
                cnt.merge(nums.get(l++), -1, Integer::sum);
            }
        }
        return mx;
    }
}


or


class Solution {
        public int longestEqualSubarray(List<Integer> A, int k) {
        int maxf = 0, i = 0, n = A.size();
        Map<Integer, Integer> count = new HashMap<>();
        for (int j = 0; j < n; j++) {
            count.put(A.get(j), count.getOrDefault(A.get(j), 0) + 1);
            maxf = Math.max(maxf, count.get(A.get(j)));
            if (j - i + 1 - maxf > k) {
                count.put(A.get(i), count.get(A.get(i)) - 1);
                i++;
            }
        }
        return maxf;
    }
}


or


class Solution {
    int longestEqualSubarray(List<Integer> nums, int k) {
    int ans = 1;
    Map<Integer, List<Integer>> mp = new HashMap<>();
    for (int i = 0; i < nums.size(); ++i)  mp.computeIfAbsent(nums.get(i), key -> new ArrayList<>()).add(i);
    for (Map.Entry<Integer, List<Integer>> entry : mp.entrySet()) {
        List<Integer> indices = entry.getValue();          
        int i = 1, j = 0, other = 0;
        while (i < indices.size()) {
            other += indices.get(i) - indices.get(i - 1) - 1;
            while (other > k) { other -= indices.get(j + 1) - indices.get(j) - 1;   j++; }                
            ans = Math.max(ans, i - j + 1);
            i++;
        }
    }
    return ans;
}
}


or


class Solution {
    public int longestEqualSubarray(List<Integer> nums, int k) {
        HashMap<Integer, ArrayList<Integer>> map = new HashMap<>();
        for(int i=0; i<nums.size(); i++){
            if(map.containsKey(nums.get(i)))
                map.get(nums.get(i)).add(i);
            else{
                map.put(nums.get(i), new ArrayList<>());
                map.get(nums.get(i)).add(i);
            }
        }

        int ans=0;
        for(int num: map.keySet()){
            ArrayList<Integer> arr = map.get(num);
            int i=0, j=0;

            while(i < arr.size() && j < arr.size()){
                if((arr.get(j) - arr.get(i)) - (j - i) <= k){
                    ans = Math.max(ans, j - i + 1);
                    j++;
                }
                else{
                    i++;
                }
            }

        }

        return ans;
    }
}



or



class Solution {
    HashMap<Integer, List<Integer>> hm = new HashMap<>();
    public int longestEqualSubarray(List<Integer> nums, int k) {
        int max = 0;
        int limit = k;
        
        // Store the occurrence index of the element
        for(int i = 0; i < nums.size();i++){
            int num = nums.get(i);
            if(!hm.containsKey(num)) hm.put(num, new ArrayList<>());
            hm.get(num).add(i);
        }
        
        
        
        for(Integer num: hm.keySet()){
            // Reset the k-limit for each element
            k = limit;
            
            // Use a queue to keep track of the previous index as well as to check the current size
            Queue<Integer> queue = new LinkedList<>();
            List<Integer> list = hm.get(num);

            int curr = list.get(0);
            queue.add(curr);
            int localMax = 1;
            for(int i = 1 ; i < list.size(); i++){
                int next = list.get(i);

                k -= (next - (curr + 1));
                
                while(k < 0){   // if k-limit is exceeded
                    Integer start = queue.poll();
                    if(queue.isEmpty()) k = limit;
                    else k += (queue.peek() - (start + 1));
                }
                
                queue.add(next);
                curr = next;
                localMax = Math.max(queue.size(), localMax); // keep track of the longest subarray length of the element
            }
            
            max = Math.max(localMax, max);
        }
        
        return max;
    }
}



or


class Solution {
    public int longestEqualSubarray(List<Integer> nums, int k) {
        HashMap<Integer,Integer> freqMap = new HashMap<>();
        int windowStart =0;
        int maxFreq = 0;
        for(int windowEnd=0; windowEnd<nums.size(); windowEnd++){
            int num = nums.get(windowEnd);
            int freq = freqMap.getOrDefault(num, 0);
            freqMap.put(num, freq + 1);

            maxFreq = Math.max(maxFreq, freq+1);

            // If window end - window start + 1 - maximumEqualElements is > K
            // then move window to the right by doing
            // windowStart++ and decrease the frequencry.
            if(windowEnd - windowStart + 1 - maxFreq > k) {
                freqMap.put(nums.get(windowStart), freqMap.get(nums.get(windowStart))-1);
                windowStart++;
            }
        }
        return maxFreq;
    }
}


or


class Solution {
    int check(int len, int[] nums, int k){
        int[] freq = new int[nums.length+1];
        int max = 0;
        for(int i=0;i<len;++i){
            freq[nums[i]]++;
            max = Math.max(freq[nums[i]], max);
        }
        int slow = 0, fast = len;
        while(fast < nums.length){
            --freq[nums[slow]];
            ++freq[nums[fast]];
            max = Math.max(freq[nums[fast]], max);
            ++fast; ++slow;
        }
        return len - max <= k ? max : -1;
    }
    public int longestEqualSubarray(List<Integer> nums, int k) {
        int n = nums.size();
        int[] arr = new int[n];
        for(int i=0;i<n;++i){
            arr[i] = nums.get(i);
        }
        int low = k, high = n;
        int ans = 0;
        while(low <= high){
            int mid = low + high >> 1;
            int a = check(mid, arr, k);
            if(a != -1){
                ans = Math.max(ans, a);
                low = mid + 1;
            }
            else{
                high = mid - 1;
            }
        }
        return ans;
    }
}


