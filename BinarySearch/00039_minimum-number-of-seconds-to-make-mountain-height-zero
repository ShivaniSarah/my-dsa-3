https://leetcode.com/problems/minimum-number-of-seconds-to-make-mountain-height-zero/description/

3296. Minimum Number of Seconds to Make Mountain Height Zero
Medium
Topics
Companies
Hint
You are given an integer mountainHeight denoting the height of a mountain.

You are also given an integer array workerTimes representing the work time of workers in seconds.

The workers work simultaneously to reduce the height of the mountain. For worker i:

To decrease the mountain's height by x, it takes workerTimes[i] + workerTimes[i] * 2 + ... + workerTimes[i] * x seconds. For example:
To reduce the height of the mountain by 1, it takes workerTimes[i] seconds.
To reduce the height of the mountain by 2, it takes workerTimes[i] + workerTimes[i] * 2 seconds, and so on.
Return an integer representing the minimum number of seconds required for the workers to make the height of the mountain 0.

 

Example 1:

Input: mountainHeight = 4, workerTimes = [2,1,1]

Output: 3

Explanation:

One way the height of the mountain can be reduced to 0 is:

Worker 0 reduces the height by 1, taking workerTimes[0] = 2 seconds.
Worker 1 reduces the height by 2, taking workerTimes[1] + workerTimes[1] * 2 = 3 seconds.
Worker 2 reduces the height by 1, taking workerTimes[2] = 1 second.
Since they work simultaneously, the minimum time needed is max(2, 3, 1) = 3 seconds.

Example 2:

Input: mountainHeight = 10, workerTimes = [3,2,2,4]

Output: 12

Explanation:

Worker 0 reduces the height by 2, taking workerTimes[0] + workerTimes[0] * 2 = 9 seconds.
Worker 1 reduces the height by 3, taking workerTimes[1] + workerTimes[1] * 2 + workerTimes[1] * 3 = 12 seconds.
Worker 2 reduces the height by 3, taking workerTimes[2] + workerTimes[2] * 2 + workerTimes[2] * 3 = 12 seconds.
Worker 3 reduces the height by 2, taking workerTimes[3] + workerTimes[3] * 2 = 12 seconds.
The number of seconds needed is max(9, 12, 12, 12) = 12 seconds.

Example 3:

Input: mountainHeight = 5, workerTimes = [1]

Output: 15

Explanation:

There is only one worker in this example, so the answer is workerTimes[0] + workerTimes[0] * 2 + workerTimes[0] * 3 + workerTimes[0] * 4 + workerTimes[0] * 5 = 15.

 

Constraints:

1 <= mountainHeight <= 105
1 <= workerTimes.length <= 104
1 <= workerTimes[i] <= 106



# java


class Solution {
  public long minNumberOfSeconds(int mountainHeight, int[] workerTimes) {
    long l = 1;
    long r = (long) Arrays.stream(workerTimes).min().getAsInt() * mountainHeight *
             (mountainHeight + 1) / 2;

    while (l < r) {
      final long m = (l + r) / 2;
      if (getReducedHeight(workerTimes, m) < mountainHeight)
        l = m + 1;
      else
        r = m;
    }

    return l;
  }

  // Returns the total height reduced by all workers in `m` seconds.
  private int getReducedHeight(int[] workerTimes, long m) {
    int reducedHeight = 0;
    for (int workerTime : workerTimes)
      // The height `x` that a worker with working time `w` reduces in `m`
      // seconds.
      // w * (1 + 2 + ... + x) <= m
      //       (1 + x) * x / 2 <= m / w
      //   x^2 + x - 2 * m / w <= 0
      //                     x <= (-1 + sqrt(1 + 8 * m / w)) / 2
      reducedHeight += (int) ((-1 + Math.sqrt(1 + 8 * m / workerTime)) / 2);
    return reducedHeight;
  }
}


or



class Solution {
    private int mountainHeight;
    private int[] workerTimes;

    public long minNumberOfSeconds(int mountainHeight, int[] workerTimes) {
        this.mountainHeight = mountainHeight;
        this.workerTimes = workerTimes;
        long l = 1, r = (long) 1e16;
        while (l < r) {
            long mid = (l + r) >> 1;
            if (check(mid)) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }

    private boolean check(long t) {
        long h = 0;
        for (int wt : workerTimes) {
            h += (long) (Math.sqrt(t * 2.0 / wt + 0.25) - 0.5);
        }
        return h >= mountainHeight;
    }
}




or




class Solution {
    public long minNumberOfSeconds(int mountainHeight, int[] workerTimes) {
        long low = 1, high = (long) 1e18, result = high;
        
        while (low <= high) {
            long mid = (low + high) / 2;
            
            if (canReduceMountain(mountainHeight, workerTimes, mid)) {
                result = mid;
                high = mid - 1;
            } else {
                low = mid + 1;
            }
        }
        
        return result;
    }
    
    private boolean canReduceMountain(int mountainHeight, int[] workerTimes, long maxTime) {
        long totalReduction = 0;
        
        for (int time : workerTimes) {
            long low = 1, high = mountainHeight;
            
            while (low <= high) {
                long mid = (low + high) / 2;
                long cost = (mid * (mid + 1)) / 2 * time;
                
                if (cost <= maxTime) {
                    low = mid + 1;
                } else {
                    high = mid - 1;
                }
            }
            
            totalReduction += high;
            if (totalReduction >= mountainHeight) {
                return true;
            }
        }
        
        return totalReduction >= mountainHeight;
    }
}


or


class Solution {
    public long minNumberOfSeconds(int mountainHeight, int[] workerTimes) {
        long left = 1, right = (long) 1e18; 
        
        while (left < right) {
            long mid = left + (right - left) / 2;
            if (canFinish(mountainHeight, workerTimes, mid)) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }

    private boolean canFinish(int mountainHeight, int[] workerTimes, long maxTime) {
        long totalReducedHeight = 0;

        for (int time : workerTimes) {
            long maxHeight = (long) (-1 + Math.sqrt(1 + 8 * maxTime / time)) / 2;
            totalReducedHeight += maxHeight;
            if (totalReducedHeight >= mountainHeight) {
                return true;
            }
        }
        return totalReducedHeight >= mountainHeight;
    }
}



