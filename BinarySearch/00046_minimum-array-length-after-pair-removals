https://leetcode.com/problems/minimum-array-length-after-pair-removals/description/


2856. Minimum Array Length After Pair Removals
Medium
Topics
Companies
Hint
Given an integer array num sorted in non-decreasing order.

You can perform the following operation any number of times:

Choose two indices, i and j, where nums[i] < nums[j].
Then, remove the elements at indices i and j from nums. The remaining elements retain their original order, and the array is re-indexed.
Return the minimum length of nums after applying the operation zero or more times.

 

Example 1:

Input: nums = [1,2,3,4]

Output: 0

Explanation:



Example 2:

Input: nums = [1,1,2,2,3,3]

Output: 0

Explanation:



Example 3:

Input: nums = [1000000000,1000000000]

Output: 2

Explanation:

Since both numbers are equal, they cannot be removed.

Example 4:

Input: nums = [2,3,4,4,4]

Output: 1

Explanation:



 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109
nums is sorted in non-decreasing order.


# java


class Solution {
  public int minLengthAfterRemovals(List<Integer> nums) {
    final int n = nums.size();
    Map<Integer, Integer> count = new HashMap<>();
    int maxFreq = 0;

    for (final int num : nums)
      count.merge(num, 1, Integer::sum);

    for (final int freq : count.values())
      maxFreq = Math.max(maxFreq, freq);

    // The number with the maximum frequency cancel all the other numbers.
    if (maxFreq <= n / 2)
      return n % 2;
    // The number with the maximum frequency cancel all the remaining numbers.
    return maxFreq - (n - maxFreq);
  }
}


or


class Solution {
    public int minLengthAfterRemovals(List<Integer> nums) {
        Map<Integer, Integer> cnt = new HashMap<>();
        for (int x : nums) {
            cnt.merge(x, 1, Integer::sum);
        }
        PriorityQueue<Integer> pq = new PriorityQueue<>(Comparator.reverseOrder());
        for (int x : cnt.values()) {
            pq.offer(x);
        }
        int ans = nums.size();
        while (pq.size() > 1) {
            int x = pq.poll();
            int y = pq.poll();
            x--;
            y--;
            if (x > 0) {
                pq.offer(x);
            }
            if (y > 0) {
                pq.offer(y);
            }
            ans -= 2;
        }
        return ans;
    }
}


or


     class Solution {
         public int minLengthAfterRemovals(List<Integer> nums) {
           int len = nums.size();
           int ans = nums.size(), i = 0, j = (len + 1) / 2;
           while(i < len/ 2 && j < len) {
           if (nums.get(i) < nums.get(j)) {
               ans-=2;
           }
          i++;
          j++;
       }
      return ans;
      }
   }


or


class Solution {
    public int minLengthAfterRemovals(List<Integer> nums) {
        int N = nums.size(), max = 1, temp = 1;
        for(int i = 1; i < N; i++){
            if(nums.get(i) - nums.get(i - 1) == 0){
                temp++;
                if(max < temp)
                    max = temp;
            }else
                temp = 1;
        }
        if(max > N / 2)
            return (max * 2 - N);
        if(N % 2 == 1)
            return 1;
        return 0;
    }
}



or



