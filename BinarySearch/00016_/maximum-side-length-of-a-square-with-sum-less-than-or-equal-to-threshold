https://leetcode.com/problems/maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold/description/

1292. Maximum Side Length of a Square with Sum Less than or Equal to Threshold
Medium
Topics
Companies
Hint
Given a m x n matrix mat and an integer threshold, return the maximum side-length of a square with a sum less than or equal to threshold or return 0 if there is no such square.

 

Example 1:


Input: mat = [[1,1,3,2,4,3,2],[1,1,3,2,4,3,2],[1,1,3,2,4,3,2]], threshold = 4
Output: 2
Explanation: The maximum side length of square with sum less than 4 is 2 as shown.
Example 2:

Input: mat = [[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2],[2,2,2,2,2]], threshold = 1
Output: 0
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n <= 300
0 <= mat[i][j] <= 104
0 <= threshold <= 105


# java


class Solution {
  public int maxSideLength(int[][] mat, int threshold) {
    final int m = mat.length;
    final int n = mat[0].length;
    int ans = 0;
    int[][] prefix = new int[m + 1][n + 1];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        prefix[i + 1][j + 1] = mat[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        for (int length = ans; length < Math.min(m - i, n - j); ++length) {
          if (squareSum(prefix, i, j, i + length, j + length) > threshold)
            break;
          ans = Math.max(ans, length + 1);
        }

    return ans;
  }

  private int squareSum(int[][] prefix, int r1, int c1, int r2, int c2) {
    return prefix[r2 + 1][c2 + 1] - prefix[r1][c2 + 1] - prefix[r2 + 1][c1] + prefix[r1][c1];
  }
}



or



class Solution {
    private int m;
    private int n;
    private int threshold;
    private int[][] s;

    public int maxSideLength(int[][] mat, int threshold) {
        m = mat.length;
        n = mat[0].length;
        this.threshold = threshold;
        s = new int[m + 1][n + 1];
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                s[i][j] = s[i - 1][j] + s[i][j - 1] - s[i - 1][j - 1] + mat[i - 1][j - 1];
            }
        }
        int l = 0, r = Math.min(m, n);
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }

    private boolean check(int k) {
        for (int i = 0; i < m - k + 1; ++i) {
            for (int j = 0; j < n - k + 1; ++j) {
                if (s[i + k][j + k] - s[i][j + k] - s[i + k][j] + s[i][j] <= threshold) {
                    return true;
                }
            }
        }
        return false;
    }
}



or



class Solution {
    public int maxSideLength(int[][] mat, int threshold) {

        // Binary search solution
        
        int numRows = mat.length;
        int numCols = mat[0].length;
        
        // First, calculate the prefix sum matrix
        int[][] prefixSum = new int[numRows + 1][numCols + 1];
        // add padding so that edge cases are dealt with more smoothly.
        // we keep the prefixSum of mat[0][0] at prefixSum[1][1] and so on
        
        for (int r = 1; r <= numRows; r++) {
            for (int c = 1; c <= numCols; c++) {
                prefixSum[r][c] = prefixSum[r - 1][c] + prefixSum[r][c-1] - prefixSum[r-1][c-1] + mat[r-1][c-1];
            }
        }
        
        int lower = 0;
        int upper = Math.min(numRows, numCols) - 1;
        // size = number of extended columns
        
        // Use binary search to guess the size 
        while (lower <= upper) {
            int size = lower + (upper - lower)/2;
            // r and c of prefix sum matrix
            int minSumSubMat = Integer.MAX_VALUE;
            
            // With the current size, find the smallest sum starting from different places in the matrix
            for (int r = 1; r + size <= numRows; r++) {
                for (int c = 1; c + size <= numCols; c++) {
                   int sumSubMat = prefixSum[r + size][c + size] - 
                        prefixSum[r-1][c + size] - 
                        prefixSum[r + size][c - 1] + 
                        prefixSum[r-1][c-1];
                    // the added part is subtracted twice
                    if (sumSubMat < minSumSubMat) minSumSubMat = sumSubMat;
                }
            }
            
            if (minSumSubMat <= threshold) {
                lower = size + 1;
            } else {
                upper = size - 1;
            }
        }
        
        return lower;
    }
}



or



class Solution {
    public int maxSideLength(int[][] mat, int threshold) {
         int r = mat.length, c = mat[0].length;
        int[][] pre = new int[r+1][c+1];
        for (int i = 1; i <= r; i++) {
            for (int j = 1; j <= c; j++) {
                pre[i][j] = pre[i-1][j] + pre[i][j-1] - pre[i-1][j-1] + mat[i-1][j-1];
            }
        }
        
        int res = 0, l = 0;
        for (int i = 0; i <= r; i++) {
            for (int j = 0; j <= c; j++) {
                while (i + l <= r && j + l <= c &&
                      (pre[i+l][j+l]-pre[i+l][j]-pre[i][j+l]+pre[i][j] <= threshold)) {
                    res = l++;
                }
            }
        }
        return res;
    }
}




or



class Solution {
public static int maxSideLength(int[][] mat, int threshold) {
        int ans = 0;
        for (int i = 0; i < mat.length; i++) {
            for (int j = 0; j < mat[0].length; j++) {
                int s = 1, e = Math.min(mat.length, mat[0].length);
                while (s <= e) {
                    int mid = s + (e - s) / 2;
                    if (mid + i > mat.length || mat[0].length < mid + j) e=mid-1;
                    else if (SumMatrix(mat, i, j, mid) <= threshold) {
                        s = mid + 1;
                         if (mid > ans) {
                            ans = mid;
                        }
                    } else e = mid - 1;
                }
            }
        }
        return ans;
    }


    public static int SumMatrix(int[][] mat, int start, int end, int val) {
        int sum = 0;
        for (int i = start; i < start + val; i++) {
            for (int j = end; j < end + val; j++) {
                sum += mat[i][j];
            }
        }
        return sum;
    }
}
