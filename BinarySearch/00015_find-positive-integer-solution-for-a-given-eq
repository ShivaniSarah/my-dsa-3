https://leetcode.com/problems/find-positive-integer-solution-for-a-given-equation/description/


1237. Find Positive Integer Solution for a Given Equation
Medium
Topics
Companies
Hint
Given a callable function f(x, y) with a hidden formula and a value z, reverse engineer the formula and return all positive integer pairs x and y where f(x,y) == z. You may return the pairs in any order.

While the exact formula is hidden, the function is monotonically increasing, i.e.:

f(x, y) < f(x + 1, y)
f(x, y) < f(x, y + 1)
The function interface is defined like this:

interface CustomFunction {
public:
  // Returns some positive integer f(x, y) for two positive integers x and y based on a formula.
  int f(int x, int y);
};
We will judge your solution as follows:

The judge has a list of 9 hidden implementations of CustomFunction, along with a way to generate an answer key of all valid pairs for a specific z.
The judge will receive two inputs: a function_id (to determine which implementation to test your code with), and the target z.
The judge will call your findSolution and compare your results with the answer key.
If your results match the answer key, your solution will be Accepted.
 

Example 1:

Input: function_id = 1, z = 5
Output: [[1,4],[2,3],[3,2],[4,1]]
Explanation: The hidden formula for function_id = 1 is f(x, y) = x + y.
The following positive integer values of x and y make f(x, y) equal to 5:
x=1, y=4 -> f(1, 4) = 1 + 4 = 5.
x=2, y=3 -> f(2, 3) = 2 + 3 = 5.
x=3, y=2 -> f(3, 2) = 3 + 2 = 5.
x=4, y=1 -> f(4, 1) = 4 + 1 = 5.
Example 2:

Input: function_id = 2, z = 5
Output: [[1,5],[5,1]]
Explanation: The hidden formula for function_id = 2 is f(x, y) = x * y.
The following positive integer values of x and y make f(x, y) equal to 5:
x=1, y=5 -> f(1, 5) = 1 * 5 = 5.
x=5, y=1 -> f(5, 1) = 5 * 1 = 5.
 

Constraints:

1 <= function_id <= 9
1 <= z <= 100
It is guaranteed that the solutions of f(x, y) == z will be in the range 1 <= x, y <= 1000.
It is also guaranteed that f(x, y) will fit in 32 bit signed integer if 1 <= x, y <= 1000.


# java


class Solution {
  public List<List<Integer>> findSolution(CustomFunction customfunction, int z) {
    List<List<Integer>> ans = new LinkedList<>();
    int x = 1;
    int y = 1000;

    while (x <= 1000 && y >= 1) {
      int f = customfunction.f(x, y);
      if (f < z)
        ++x;
      else if (f > z)
        --y;
      else
        ans.add(Arrays.asList(x++, y--));
    }

    return ans;
  }
}


or


/*
 * // This is the custom function interface.
 * // You should not implement it, or speculate about its implementation
 * class CustomFunction {
 *     // Returns f(x, y) for any given positive integers x and y.
 *     // Note that f(x, y) is increasing with respect to both x and y.
 *     // i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x, y + 1)
 *     public int f(int x, int y);
 * };
 */

class Solution {
    public List<List<Integer>> findSolution(CustomFunction customfunction, int z) {
        List<List<Integer>> ans = new ArrayList<>();
        for (int x = 1; x <= 1000; ++x) {
            int l = 1, r = 1000;
            while (l < r) {
                int mid = (l + r) >> 1;
                if (customfunction.f(x, mid) >= z) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            if (customfunction.f(x, l) == z) {
                ans.add(Arrays.asList(x, l));
            }
        }
        return ans;
    }
}


or

/*
 * // This is the custom function interface.
 * // You should not implement it, or speculate about its implementation
 * class CustomFunction {
 *     // Returns f(x, y) for any given positive integers x and y.
 *     // Note that f(x, y) is increasing with respect to both x and y.
 *     // i.e. f(x, y) < f(x + 1, y), f(x, y) < f(x, y + 1)
 *     public int f(int x, int y);
 * };
 */

class Solution {
    public List<List<Integer>> findSolution(CustomFunction func, int z) {
        List<List<Integer>> result= new ArrayList<>();

        for(int i=1; i<= 1000; i++){
            int x= i;

            int left= 1;
            int right= 1000;

            while(left <= right){
                int y= (left+right)/2;

                int val= func.f(x, y);
                if(val == z){
                    List<Integer> l1= new ArrayList<>();
                    l1.add(x);
                    l1.add(y);

                    result.add(l1);
                    break;
                }
                else if(val > z){
                    right= y-1;
                }
                else{
                    left= y+1;
                }
            }
        }

        return result;
    }
}



or



class Solution {
    public List<List<Integer>> findSolution(CustomFunction customfunction, int z) {
        List<List<Integer>> ans=new ArrayList<>();
        int x=1,y=1000;
        while(x<1000 && y>0)
        {
            int cal=customfunction.f(x,y);
            if(cal>z)--y;
            else if(cal<z) ++x;
            else ans.add(Arrays.asList(x++, y--));
        }
        return ans;
    }
    
}


or




class Solution {
    public List<List<Integer>> findSolution(CustomFunction customfunction, int z) {
        List<List<Integer>> result = new ArrayList<>();
        for (int i = 1; i <= 1000; ++i) {
            int x = 1, y = 1000;
            while (x < y) {
                int mid = (x + y) >> 1;
                if (customfunction.f(i, mid) >= z) {
                    y = mid;
                } else {
                    x = mid + 1;
                }
            }
            if (customfunction.f(i, x) == z) {
                result.add(Arrays.asList(i, x));
            }
        }
        return result;
    }
}


or



    public List<List<Integer>> findSolution(CustomFunction customfunction, int z) {
        List<List<Integer>> res = new ArrayList();
        //scan x values
        for (int x = 1; x <=1000; x++) {
            //check treshold values - if min > z or max < z
            if (customfunction.f(x, 1) > z || customfunction.f(x, 1000) < z)
                break;
            //init y values for binary search lookup
            int l = 1, r = 1000;
            //binary search loop
            while (l < r) {
                //mid point for this iteration
                int y = (r + l) /2;
                int z1 = customfunction.f(x, y);
                //we found the solution  for this x - move to x + 1
                if (z1 == z) {
                    List<Integer> sol = new ArrayList();
                    sol.add(x);
                    sol.add(y);
                    res.add(sol);
                    break;
                }
                //change search window for next binary search iteration
                if (z1 > z ) 
                    r = y;
                else 
                    l = y + 1;
            }
        }
        return res;
    }



