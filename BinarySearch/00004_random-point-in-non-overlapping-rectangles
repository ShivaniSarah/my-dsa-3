https://leetcode.com/problems/random-point-in-non-overlapping-rectangles/description/

497. Random Point in Non-overlapping Rectangles
Medium
Topics
Companies
You are given an array of non-overlapping axis-aligned rectangles rects where rects[i] = [ai, bi, xi, yi] indicates that (ai, bi) is the bottom-left corner point of the ith rectangle and (xi, yi) is the top-right corner point of the ith rectangle. Design an algorithm to pick a random integer point inside the space covered by one of the given rectangles. A point on the perimeter of a rectangle is included in the space covered by the rectangle.

Any integer point inside the space covered by one of the given rectangles should be equally likely to be returned.

Note that an integer point is a point that has integer coordinates.

Implement the Solution class:

Solution(int[][] rects) Initializes the object with the given rectangles rects.
int[] pick() Returns a random integer point [u, v] inside the space covered by one of the given rectangles.
 

Example 1:


Input
["Solution", "pick", "pick", "pick", "pick", "pick"]
[[[[-2, -2, 1, 1], [2, 2, 4, 6]]], [], [], [], [], []]
Output
[null, [1, -2], [1, -1], [-1, -2], [-2, -2], [0, 0]]

Explanation
Solution solution = new Solution([[-2, -2, 1, 1], [2, 2, 4, 6]]);
solution.pick(); // return [1, -2]
solution.pick(); // return [1, -1]
solution.pick(); // return [-1, -2]
solution.pick(); // return [-2, -2]
solution.pick(); // return [0, 0]
 

Constraints:

1 <= rects.length <= 100
rects[i].length == 4
-109 <= ai < xi <= 109
-109 <= bi < yi <= 109
xi - ai <= 2000
yi - bi <= 2000
All the rectangles do not overlap.
At most 104 calls will be made to pick.



# java


class Solution {
  public Solution(int[][] rects) {
    this.rects = rects;
    areas = new int[rects.length];
    for (int i = 0; i < rects.length; ++i)
      areas[i] = getArea(rects[i]) + (i > 0 ? areas[i - 1] : 0);
  }

  public int[] pick() {
    final int target = rand.nextInt(areas[areas.length - 1]);
    final int index = firstGreater(areas, target);
    final int[] r = rects[index];
    return new int[] {
        rand.nextInt(r[2] - r[0] + 1) + r[0],
        rand.nextInt(r[3] - r[1] + 1) + r[1],
    };
  }

  private int[][] rects;
  private int[] areas;
  private Random rand = new Random();

  private int getArea(int[] r) {
    return (r[2] - r[0] + 1) * (r[3] - r[1] + 1);
  }

  private int firstGreater(int[] arr, int target) {
    final int i = Arrays.binarySearch(arr, target + 1);
    return i < 0 ? -i - 1 : i;
  }
}



or



class Solution {
    private int[] s;
    private int[][] rects;
    private Random random = new Random();

    public Solution(int[][] rects) {
        int n = rects.length;
        s = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            s[i + 1] = s[i] + (rects[i][2] - rects[i][0] + 1) * (rects[i][3] - rects[i][1] + 1);
        }
        this.rects = rects;
    }

    public int[] pick() {
        int n = rects.length;
        int v = 1 + random.nextInt(s[n]);
        int left = 0, right = n;
        while (left < right) {
            int mid = (left + right) >> 1;
            if (s[mid] >= v) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        int[] rect = rects[left - 1];
        return new int[] {rect[0] + random.nextInt(rect[2] - rect[0] + 1),
            rect[1] + random.nextInt(rect[3] - rect[1] + 1)};
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(rects);
 * int[] param_1 = obj.pick();
 */



or


class Solution {
    
    int[][] rects;
    TreeMap<Integer, Integer> weightedRectIndex = new TreeMap<>();
    int nPoints = 0;
    
    Random rng = new Random();

    public Solution(int[][] rects) {
        this.rects = rects;
        int index = 0;
        for (int[] rect : rects) {
		    // inserts cumulative weight key pointing to rectangle index
            weightedRectIndex.put(nPoints, index++);
            nPoints += width(rect) * height(rect);
        }
    }
    
    public int[] pick() {
	    // generates random point within total weight
        int point = rng.nextInt(nPoints);
		// finds appropriate rectangle
        var entry = weightedRectIndex.floorEntry(point);
		// find point within the current rectangle
        int rectPoint = point - entry.getKey();
        int[] rect = rects[entry.getValue()];
        return new int[]{
            rect[0] + rectPoint % width(rect), 
            rect[1] + rectPoint / width(rect)};
    }
    
    private int width(int[] rect) {
        return rect[2] - rect[0] + 1;
    }
    
    private int height(int[] rect) {
        return rect[3] - rect[1] + 1;
    }
}

/**
 * Your Solution object will be instantiated and called as such:
 * Solution obj = new Solution(rects);
 * int[] param_1 = obj.pick();
 */



or



class Solution {
    
    Random random;
    TreeMap<Integer,int[]> map;
    int areaSum = 0;
    
    public Solution(int[][] rects) {
        this.random = new Random();
        this.map = new TreeMap<>();
        
        for(int i = 0; i < rects.length; i++){
            int [] rectangeCoordinates = rects[i];
            int length = rectangeCoordinates[2] - rectangeCoordinates[0] + 1 ; // +1 as we need to consider edges also.
            int breadth = rectangeCoordinates[3] - rectangeCoordinates[1] + 1 ;
            
            areaSum += length * breadth;
            
            map.put(areaSum,rectangeCoordinates);
            
        }
        
    }
    
    public int[] pick() {
        int key = map.ceilingKey(random.nextInt(areaSum) + 1); //Don't forget to +1 here, because we need [1,area] while nextInt generates [0,area-1]
        
        int [] rectangle = map.get(key);
        
        int length = rectangle[2] - rectangle[0] + 1 ; // +1 as we need to consider edges also.
        int breadth = rectangle[3] - rectangle[1] + 1 ;
        
        int x = rectangle[0] + random.nextInt(length); //return random length from starting position of x
        int y = rectangle[1] + random.nextInt(breadth); // return random breadth from starting position of y
        
        return new int[]{x,y};
        
    }
}

or


class Solution {
    int[][] rects;
    int[] range;
    int totArea = 0;
    Random r = new Random();

    public Solution(int[][] rects) {
        this.rects = rects;
        range = new int[rects.length];
        int id = 0; 
        for(int[] rect : rects){
            int area = Math.abs((rect[2]-rect[0]+1) * (rect[3]-rect[1]+1));
            this.totArea = this.totArea + area;
            range[id++] = totArea;
        }
    }
    
    public int[] pick() {
        
        int[] res = new int[2];
        int area = r.nextInt(totArea+1);
        int index = 0;
        
        while(index < range.length && range[index] < area){
            index++;
        }
        
        int[] rect = rects[index];
     
        res[0] = rect[0] + (r.nextInt(rect[2]-rect[0]+1));
        res[1] = rect[1] + (r.nextInt(rect[3]-rect[1]+1));

        return res;
        
    }
}

or

//====================Binary Search Approch========================


class Solution {
    int[][] rects;
    int[] range;
    int totArea = 0;
    Random r = new Random();

    public Solution(int[][] rects) {
        this.rects = rects;
        range = new int[rects.length];
        int id = 0; 
        for(int[] rect : rects){
            int area = Math.abs((rect[2]-rect[0]+1) * (rect[3]-rect[1]+1));
            this.totArea = this.totArea + area;
            range[id++] = totArea;
        }
    }
    
    public int[] pick() {
        
        int[] res = new int[2];
        int area = r.nextInt(totArea+1);
        
        /*
        
        Solution without binary search
        
        int index = 0;
        while(index < range.length && range[index] < area){
            index++;
        }
        
        */
        
        int index = bs(area, 0, range.length-1);
        
        int[] rect = rects[index];
     
        res[0] = rect[0] + (r.nextInt(rect[2]-rect[0]+1));
        res[1] = rect[1] + (r.nextInt(rect[3]-rect[1]+1));

        return res;
        
    }
    
    public int bs(int area, int start , int end){
        
        int mid = 0;
        while(start != end){
            mid = ((end+start)/2);
            if(area >= range[mid]){
                 start = mid+1; 
            }else{
               end = mid;
            }
        }
        return start;
    }
}



