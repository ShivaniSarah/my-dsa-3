https://leetcode.com/problems/count-number-of-rectangles-containing-each-point/description/


2250. Count Number of Rectangles Containing Each Point
Medium
Topics
Companies
Hint
You are given a 2D integer array rectangles where rectangles[i] = [li, hi] indicates that ith rectangle has a length of li and a height of hi. You are also given a 2D integer array points where points[j] = [xj, yj] is a point with coordinates (xj, yj).

The ith rectangle has its bottom-left corner point at the coordinates (0, 0) and its top-right corner point at (li, hi).

Return an integer array count of length points.length where count[j] is the number of rectangles that contain the jth point.

The ith rectangle contains the jth point if 0 <= xj <= li and 0 <= yj <= hi. Note that points that lie on the edges of a rectangle are also considered to be contained by that rectangle.

 

Example 1:


Input: rectangles = [[1,2],[2,3],[2,5]], points = [[2,1],[1,4]]
Output: [2,1]
Explanation: 
The first rectangle contains no points.
The second rectangle contains only the point (2, 1).
The third rectangle contains the points (2, 1) and (1, 4).
The number of rectangles that contain the point (2, 1) is 2.
The number of rectangles that contain the point (1, 4) is 1.
Therefore, we return [2, 1].
Example 2:


Input: rectangles = [[1,1],[2,2],[3,3]], points = [[1,3],[1,1]]
Output: [1,3]
Explanation:
The first rectangle contains only the point (1, 1).
The second rectangle contains only the point (1, 1).
The third rectangle contains the points (1, 3) and (1, 1).
The number of rectangles that contain the point (1, 3) is 1.
The number of rectangles that contain the point (1, 1) is 3.
Therefore, we return [1, 3].
 

Constraints:

1 <= rectangles.length, points.length <= 5 * 104
rectangles[i].length == points[j].length == 2
1 <= li, xj <= 109
1 <= hi, yj <= 100
All the rectangles are unique.
All the points are unique.



# java


class Solution {
  public int[] countRectangles(int[][] rectangles, int[][] points) {
    int[] ans = new int[points.length];
    List<Integer>[] yToXs = new List[101];

    for (int i = 0; i < 101; ++i)
      yToXs[i] = new ArrayList<>();

    for (int[] r : rectangles)
      yToXs[r[1]].add(r[0]);

    for (List<Integer> xs : yToXs)
      Collections.sort(xs);

    for (int i = 0; i < points.length; ++i) {
      int count = 0;
      for (int y = points[i][1]; y < 101; ++y) {
        List<Integer> xs = yToXs[y];
        count += xs.size() - firstGreaterEqual(xs, points[i][0]);
      }
      ans[i] = count;
    }

    return ans;
  }

  private int firstGreaterEqual(List<Integer> indices, int target) {
    final int i = Collections.binarySearch(indices, target);
    return i < 0 ? -i - 1 : i;
  }
}


or


class Solution {
    public int[] countRectangles(int[][] rectangles, int[][] points) {
        int n = 101;
        List<Integer>[] d = new List[n];
        Arrays.setAll(d, k -> new ArrayList<>());
        for (int[] r : rectangles) {
            d[r[1]].add(r[0]);
        }
        for (List<Integer> v : d) {
            Collections.sort(v);
        }
        int m = points.length;
        int[] ans = new int[m];
        for (int i = 0; i < m; ++i) {
            int x = points[i][0], y = points[i][1];
            int cnt = 0;
            for (int h = y; h < n; ++h) {
                List<Integer> xs = d[h];
                int left = 0, right = xs.size();
                while (left < right) {
                    int mid = (left + right) >> 1;
                    if (xs.get(mid) >= x) {
                        right = mid;
                    } else {
                        left = mid + 1;
                    }
                }
                cnt += xs.size() - left;
            }
            ans[i] = cnt;
        }
        return ans;
    }
}


or

// bs

class Solution {
    public int[] countRectangles(int[][] rectangles, int[][] points) {
        int max = Integer.MIN_VALUE;
        
        TreeMap<Integer, List<Integer>> rects = new TreeMap<>();
        for(int[] rect : rectangles) {
            if (!rects.containsKey(rect[1])) {
                rects.put(rect[1], new ArrayList<Integer>());
            }
            
            rects.get(rect[1]).add(rect[0]);
            max = Math.max(max, rect[1]);
        }
        
        for(int k : rects.keySet()) {
            Collections.sort(rects.get(k));
        }
        
        int[] ans = new int[points.length];
        for(int i = 0; i < points.length; i++) {
            if (points[i][1] > max) {
                continue;
            }

            int count = 0;
            
            for(int key : rects.subMap(points[i][1], max + 1).keySet()) {
                List<Integer> y = rects.get(key);
                
                count += binarySearch(y, points[i][0]);
            }
            
            ans[i] = count;
        }

        return ans;
    }
    
    private int binarySearch(List<Integer> vals, int val) {
        int lo = 0;
        int hi = vals.size() - 1;
        int id = -1;
        
        while(lo <= hi) {
            int mid = lo + (hi - lo) / 2;
            
            if (vals.get(mid) < val) {
                lo = mid + 1;
            } else {
                id = mid;
                hi = mid - 1;
            }
        }
        
        if (id < 0) {
            return 0;
        }
        
        return vals.size() - id;
    }
}

or


class Solution {
    public int[] countRectangles(int[][] rectangles, int[][] points) {
        int[] res = new int[points.length];
        List<List<Integer>> group = new ArrayList<>(101);
        for(int i = 0; i < 101; i++){
            group.add(new ArrayList<>());
        }
        
        for(int[] rec : rectangles){
            int l = rec[0];
            int h = rec[1];
            group.get(h).add(l);
        }
        
        for(int i = 0; i < 101; i++){
            Collections.sort(group.get(i));   
        }
        
        for(int i = 0; i < points.length; i++){
            int count = 0;
            int x = points[i][0];
            int y = points[i][1];
            for(int j = y; j < 101; j++){
                List<Integer> cur = group.get(j);
                int index = binarySearch(cur, x);
                count += cur.size() - index;
            }
            res[i] = count;
        }

        return res;
    }
    
    private int binarySearch(List<Integer> list, int x){
        int left = 0;
        int right = list.size();
        while(left < right){
            int mid = left + (right - left) / 2;
            if(list.get(mid) >= x){
                right = mid;
            } else{
                left = mid + 1;
            }
        }
        return left;
    }
}



or


// bs

class Solution {
  public int[] countRectangles(int[][] rectangles, int[][] points) {
    // group by y, as 1 <= y <= 100
    int limit = 101;
    List<List<Integer>> group = new ArrayList<>(limit);
    for (int i = 0; i < limit; i++) {
      group.add(new ArrayList<>());
    }

    for (int[] rectangle : rectangles) {
      group.get(rectangle[1]).add(rectangle[0]);
    }

    // sort each group
    for (int i = 0; i < limit; i++) {
      group.get(i).sort(Comparator.naturalOrder());
    }

    int m = points.length;
    int[] result = new int[m];

    for (int i = 0; i < m; i++) {
      int count = 0;
      for (int j = points[i][1]; j < limit; j++) {
        List<Integer> part = group.get(j);
        int index = Collections.binarySearch(part, points[i][0]);
        if (index < 0) {
          index = -index - 1;
        }

        count += part.size() - index;
      }
      result[i] = count;
    }
    return result;
  }
}


or



import java.util.Arrays;

class Solution {
    public int[] countRectangles(int[][] rectangles, int[][] points) {
        int n = rectangles.length, Q = points.length;
        int[][] es = new int[n + Q][];
        for (int i = 0; i < n; i++) {
            es[i] = rectangles[i];
        }
        for (int i = 0; i < Q; i++) {
            es[n + i] = new int[]{points[i][0], points[i][1], i};
        }
        Arrays.sort(es, (x, y) -> {
            if (x[0] != y[0]) {
                return -(x[0] - y[0]);
            }
            return x.length - y.length;
        });
        int[] ct = new int[101];
        int[] ans = new int[Q];
        for (int[] e : es) {
            if (e.length == 2) {
                for (int i = 0; i <= e[1]; i++) {
                    ct[i]++;
                }
            } else {
                ans[e[2]] = ct[e[1]];
            }
        }
        return ans;
    }
}


or



class Solution {
    public int binarySearch(List<Integer> l , int x){
        int low = 0 , high = l.size() - 1;
        int retval = 0;
        while(low <= high){
            int mid = (low + high) >> 1;
            if(l.get(mid) >= x){
                retval = l.size() - mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return retval;
    }
    public int[] countRectangles(int[][] rectangles, int[][] points) {
        Arrays.sort(rectangles,(a,b) -> a[0] - b[0]);
        Map<Integer,List<Integer>> map = new HashMap<>();
        int n = points.length;
        int[] ans = new int[n];
        for(int[] r : rectangles){
            int x = r[0], y = r[1];
            List<Integer> l = map.getOrDefault(y,new ArrayList<>());
            l.add(x);
            if(!map.containsKey(y)){
                map.put(y,l);    
            }
        }
        for(int i = 0 ; i < n ; i++){
            int x = points[i][0], y = points[i][1];
            int cnt = 0;
            for(int j = 100 ; j >= y ; j--){
                if(map.containsKey(j)){
                    cnt += binarySearch(map.get(j),x);
                }
            }
            ans[i] = cnt;
        }
        
        return ans;
    }
}




