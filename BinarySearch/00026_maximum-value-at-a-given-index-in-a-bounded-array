https://leetcode.com/problems/maximum-value-at-a-given-index-in-a-bounded-array/


1802. Maximum Value at a Given Index in a Bounded Array
Medium
Topics
Companies
Hint
You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:

nums.length == n
nums[i] is a positive integer where 0 <= i < n.
abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.
The sum of all the elements of nums does not exceed maxSum.
nums[index] is maximized.
Return nums[index] of the constructed array.

Note that abs(x) equals x if x >= 0, and -x otherwise.

 

Example 1:

Input: n = 4, index = 2,  maxSum = 6
Output: 2
Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.
There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].
Example 2:

Input: n = 6, index = 1,  maxSum = 10
Output: 3
 

Constraints:

1 <= n <= maxSum <= 109
0 <= index < n



# java


1802. Maximum Value at a Given Index in a Bounded Array
Medium
Topics
Companies
Hint
You are given three positive integers: n, index, and maxSum. You want to construct an array nums (0-indexed) that satisfies the following conditions:

nums.length == n
nums[i] is a positive integer where 0 <= i < n.
abs(nums[i] - nums[i+1]) <= 1 where 0 <= i < n-1.
The sum of all the elements of nums does not exceed maxSum.
nums[index] is maximized.
Return nums[index] of the constructed array.

Note that abs(x) equals x if x >= 0, and -x otherwise.

 

Example 1:

Input: n = 4, index = 2,  maxSum = 6
Output: 2
Explanation: nums = [1,2,2,1] is one array that satisfies all the conditions.
There are no arrays that satisfy all the conditions and have nums[2] == 3, so 2 is the maximum nums[2].
Example 2:

Input: n = 6, index = 1,  maxSum = 10
Output: 3
 

Constraints:

1 <= n <= maxSum <= 109
0 <= index < n


# java




class Solution {
  public int maxValue(int n, int index, int maxSum) {
    maxSum -= n;

    int l = 0;
    int r = maxSum;

    // Find the first value x s.t. if A[index] = x, then sum(A) >= maxSum.
    while (l < r) {
      final int m = (l + r) / 2;
      if (getSum(n, index, m) >= maxSum)
        r = m;
      else
        l = m + 1;
    }

    return getSum(n, index, l) > maxSum ? l : l + 1;
  }

  // Returns the minimum sum if nums[index] = x.
  private long getSum(int n, int index, int x) {
    long l = Math.min(index, x - 1);
    long r = Math.min(n - index, x);
    long lSum = ((x - 1) + (x - 1 - l + 1)) * l / 2;
    long rSum = (x + (x - r + 1)) * r / 2;
    return lSum + rSum;
  }
}



or



class Solution {
    public int maxValue(int n, int index, int maxSum) {
        int left = 1, right = maxSum;
        while (left < right) {
            int mid = (left + right + 1) >>> 1;
            if (sum(mid - 1, index) + sum(mid, n - index) <= maxSum) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private long sum(long x, int cnt) {
        return x >= cnt ? (x + x - cnt + 1) * cnt / 2 : (x + 1) * x / 2 + cnt - x;
    }
}



or



class Solution {
    private long getSum(int index, int value, int n) {
        long count = 0;
        
        // On index's left:
        // If value > index, there are index + 1 numbers in the arithmetic sequence:
        // [value - index, ..., value - 1, value].
        // Otherwise, there are value numbers in the arithmetic sequence:
        // [1, 2, ..., value - 1, value], plus a sequence of length (index - value + 1) of 1s. 
        if (value > index) {
            count += (long)(value + value - index) * (index + 1) / 2;
        } else {
            count += (long)(value + 1) * value / 2 + index - value + 1;
        };
        // On index's right:
        // If value >= n - index, there are n - index numbers in the arithmetic sequence:
        // [value, value - 1, ..., value - n + 1 + index].
        // Otherwise, there are value numbers in the arithmetic sequence:
        // [value, value - 1, ..., 1], plus a sequence of length (n - index - value) of 1s. 
        if (value >= n - index) {
            count += (long)(value + value - n + 1 + index) * (n - index) / 2;
        } else {
            count += (long)(value + 1) * value / 2 + n - index - value;
        }   
        
        return count - value;
        
    }
    public int maxValue(int n, int index, int maxSum) {
        int left = 1, right = maxSum;
        while (left < right) {
            int mid = (left + right + 1) / 2;
            if (getSum(index, mid, n) <= maxSum) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        
        return left;
    }
}



or



 // This method will give you answer of the setup where our peak element is ans at index idx and we have n elements
// So we have two part of array one is the left part (1, 1... 2, 3 ... max - 1) and then (max, max - 1, max - 2, 1 ... 1)
// so you can think of it as we have few extraOnes on both left and right parts and then an AP array which goes upto max
        
// Left part I have taken till max - 1 and right part I have taken from max.
// calcPart takes (first value of AP, number of elements)
        
class Solution {
    public int maxValue(int n, int index, int maxSum) {
        long lt=index;
        long rt=n-index-1;
        long st=1;
        long end=maxSum;
        while(st<=end) {
            long mid=st+(end-st)/2;
            long m=mid-1;
            long ls=0;
            long rs=0;
            if(m>=lt) {
                long notInRange=m-lt;
                ls=m*(m+1)/2-(notInRange)*(notInRange+1)/2;
            }
            else {
                ls=m*(m+1)/2+1*(lt-m);
            }
            if(m>=rt) {
                long notInRange=m-rt;
                rs=m*(m+1)/2-(notInRange)*(notInRange+1)/2;
            }
            else {
                rs=m*(m+1)/2+1*(rt-m);
            }
            long sum=rs+ls+mid;
            if(sum>maxSum) {
                end=mid-1;
            }
            else {
                st=mid+1;
            }
        }
        return (int)end;
    }
}



or




class Solution {
    public int maxValue(int n, int index, int maxSum) {
        long lo=1 , hi = Integer.MAX_VALUE , result=0;
        
        while(lo<=hi){
            
            long mid= lo + (hi-lo)/2;
            
            long left=Sum(Math.min(index,mid-1),mid); //  here using 0 not 4 as number of element in left  sum will handle that negative part array will look like [0,0,0,0,1,2]. if i choose number of element is left as 4 array will look like [-3,-2,-1,0,1,2]
            left+=Math.max(0,index-mid+1);  //[1,1,1,1,1,2] to make these zeroes one
            
            long right=Sum(Math.min(n-index-1,mid-1),mid);
            right+=Math.max(0,(n-index-mid));
                
            if(left+right+mid<=maxSum){
                result=mid;  //mid is valid but not sure its the maximum answer or not . so lo=mid+1 in next step
                lo=mid+1;
            }else{
                hi=mid-1;
            }    
        }
        
        return (int)result;
    }
    
   private long Sum(long noofElement,long x){
        return x*(noofElement) - ((noofElement*(noofElement+1))/2);
    }
}


or



class Solution {
    public int maxValue(int n, int index, int maxSum) {
    int sum = n;
    int l = index, r = index;
    int res = 1;  //intial height

    while(sum + (r-l+1) <= maxSum) {
        sum += r-l+1;
		
		// ensuring l doesn't go below 0 && r doesn't go beyond n-1
        l = l == 0 ? 0 : l-1;
        r = r == n-1 ? r : r+1;
        res++;   

		//optimizing once l == 0 and r == n-1 as we need to add n in each step
        if(l == 0 && r == n-1) {
            int steps = 0;
            steps += (maxSum - sum)/n;
            sum += (steps * n);
            res += steps;
        }
    }

    return res;
}
}



or



