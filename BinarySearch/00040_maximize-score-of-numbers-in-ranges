https://leetcode.com/problems/maximize-score-of-numbers-in-ranges/description/

3281. Maximize Score of Numbers in Ranges
Medium
Topics
Companies
Hint
You are given an array of integers start and an integer d, representing n intervals [start[i], start[i] + d].

You are asked to choose n integers where the ith integer must belong to the ith interval. The score of the chosen integers is defined as the minimum absolute difference between any two integers that have been chosen.

Return the maximum possible score of the chosen integers.

 

Example 1:

Input: start = [6,0,3], d = 2

Output: 4

Explanation:

The maximum possible score can be obtained by choosing integers: 8, 0, and 4. The score of these chosen integers is min(|8 - 0|, |8 - 4|, |0 - 4|) which equals 4.

Example 2:

Input: start = [2,6,13,13], d = 5

Output: 5

Explanation:

The maximum possible score can be obtained by choosing integers: 2, 7, 13, and 18. The score of these chosen integers is min(|2 - 7|, |2 - 13|, |2 - 18|, |7 - 13|, |7 - 18|, |13 - 18|) which equals 5.

 

Constraints:

2 <= start.length <= 105
0 <= start[i] <= 109
0 <= d <= 109


# java


class Solution {
    private int[] start;
    private int d;

    public int maxPossibleScore(int[] start, int d) {
        Arrays.sort(start);
        this.start = start;
        this.d = d;
        int n = start.length;
        int l = 0, r = start[n - 1] + d - start[0];
        while (l < r) {
            int mid = (l + r + 1) >>> 1;
            if (check(mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }

    private boolean check(int mi) {
        long last = Long.MIN_VALUE;
        for (int st : start) {
            if (last + mi > st + d) {
                return false;
            }
            last = Math.max(st, last + mi);
        }
        return true;
    }
}



or



class Solution {
  public int maxPossibleScore(int[] start, int d) {
    Arrays.sort(start);

    long l = 0;
    long r = (start[start.length - 1] + d) - start[0] + 1;

    while (l < r) {
      final long m = (l + r) / 2;
      if (isPossible(start, d, m))
        l = m + 1;
      else
        r = m;
    }

    return (int) (l - 1);
  }

  private boolean isPossible(int[] start, int d, long m) {
    long lastPick = start[0];
    for (int i = 1; i < start.length; ++i) {
      if (lastPick + m > start[i] + d)
        return false;
      lastPick = Math.max(lastPick + m, (long) start[i]);
    }
    return true;
  }
}



or



class Solution {
    public int maxPossibleScore(int[] start, int d) {
        int low = 0;
        int high = Integer.MAX_VALUE;
        int res = -1;
        Arrays.sort(start);

        while(low <= high){
            int mid = low + (high - low)/2;

            if(isValid(start, d, mid)){
                res = mid;
                low = mid + 1;
            }

            else high = mid - 1;
        }

        return res;
    }

    private boolean isValid(int[] nums, int d, int mid){
        int n = nums.length;
        int prev = nums[0];

        for(int i=1;i<n;i++){
            if(prev + mid > nums[i] + d) return false;
            prev = Math.max(nums[i], prev + mid);
        }

        return true;
    }
}


or



class Solution {
    public boolean isPossible(int[] nums , int d , int mid){
        int prev = nums[0];
        
        for(int i = 1; i < nums.length; i++){
            int min = prev + mid;

            if(min > nums[i] + d){
                return false;
            }

            prev = Math.max(nums[i] , min);
        }
        return true;
    }
    public int maxPossibleScore(int[] start, int d) {
        int n = start.length;
        int ans = 0;

        Arrays.sort(start);

        int s = 0;
        int e = Integer.MAX_VALUE;

        while(s <= e){
            int mid = s + (e - s) / 2;
            
            if(isPossible(start , d , mid)){
                ans = mid;
                s = mid + 1;
            }
            else{
                e = mid - 1;
            }
        }
        return ans;
        

    }
}



or


class Solution {
    public int maxPossibleScore(int[] start, int d) {
        Arrays.sort(start);
        int n = start.length;
        int l = 0;
        int r = start[n - 1] - start[0] + d + 1;

        while (l < r) {
            int m = l + (r - l) / 2;
            if (isPossible(start, d, m)) {
                l = m + 1;
            } else {
                r = m;
            }
        }
        return l - 1;
    }

    private boolean isPossible(int[] start, int d, int score) {
        int pre = start[0];
        for (int i = 1; i < start.length; i++) {
            if (start[i] + d - pre < score) {
                return false;
            }
            pre = Math.max(start[i], pre + score);
        }
        return true;
    }
}



or


class Solution {
    boolean helper(int[] nums, int d, long score) {
        int n = nums.length;
        long stored = nums[0];
        for (int i = 1; i < n; i++) {
            long min = stored + score;
            if (min > nums[i] + d) {
                return false;
            }
            stored = Math.max(nums[i], min);
        }
        return true;
    }
    
    public int maxPossibleScore(int[] nums, int d) {
        int n = nums.length;
        Arrays.sort(nums);
        long s = 0;
        long e = Integer.MAX_VALUE;
        int res = 0;
        while (s <= e) {
            long mid = s + (e - s) / 2;
            if (helper(nums, d, mid)) {
                res = (int) mid;
                s = mid + 1;
            } else {
                e = mid - 1;
            }
        }
        return res;
    }
}



or



