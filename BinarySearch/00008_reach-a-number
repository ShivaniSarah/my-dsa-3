https://leetcode.com/problems/reach-a-number/description/


754. Reach a Number
Medium
Topics
Companies
You are standing at position 0 on an infinite number line. There is a destination at position target.

You can make some number of moves numMoves so that:

On each move, you can either go left or right.
During the ith move (starting from i == 1 to i == numMoves), you take i steps in the chosen direction.
Given the integer target, return the minimum number of moves required (i.e., the minimum numMoves) to reach the destination.

 

Example 1:

Input: target = 2
Output: 3
Explanation:
On the 1st move, we step from 0 to 1 (1 step).
On the 2nd move, we step from 1 to -1 (2 steps).
On the 3rd move, we step from -1 to 2 (3 steps).
Example 2:

Input: target = 3
Output: 2
Explanation:
On the 1st move, we step from 0 to 1 (1 step).
On the 2nd move, we step from 1 to 3 (2 steps).
 

Constraints:

-109 <= target <= 109
target != 0


# java


class Solution {
  public int reachNumber(int target) {
    final int newTarget = Math.abs(target);
    int ans = 0;
    int pos = 0;

    while (pos < newTarget)
      pos += ++ans;
    while ((pos - newTarget) % 2 == 1)
      pos += ++ans;

    return ans;
  }
}


or



class Solution {
    public int reachNumber(int target) {
        target = Math.abs(target);
        int s = 0, k = 0;
        while (true) {
            if (s >= target && (s - target) % 2 == 0) {
                return k;
            }
            ++k;
            s += k;
        }
    }
}


or


class Solution {
    public int reachNumber(int target) {
        target = Math.abs(target);
        int k = 0;
        while (target > 0)
            target -= ++k;
        return target % 2 == 0 ? k : k + 1 + k%2;
    }
}


or


class Solution {
    public int reachNumber(int target) {
        int sum =0 ,steps = 0;
        if(target ==0) return 0;
        target = Math.abs(target);
        while(sum< target){
            sum+=steps;
            steps++;
        }
        
        while(((sum-target)%2!=0)){
            sum+=steps;
            steps++;
        }
        return steps-1;

    }
}


or



class Solution {
    public int reachNumber(int target) {
        
		//convert negative target to positive
        if(target<0){
            target*=-1;
        }
        
        int start = 1;
        int end = target; 
        int numMoves = 0;
        long finalPosition = 0;
        
        while(start<=end){
            int mid = start+(end-start)/2;
			
			// here we consider n = mid then n*(n+1)/2 becomes mid*(mid+1)/2
            long sum = (long)mid*(mid+1)/2;
            
			
            if(sum>=target){
			//if difference is even direct binary search
                finalPosition = sum;
                numMoves = mid;
                end = mid-1;
            }
            else{
                start = mid+1;
              }
          }
            
        int difference = (int)(finalPosition - target);
                //if difference is odd
                if(difference%2!=0){
                    
					//if n+1 is odd
                    if((numMoves+1)%2!=0){
                        numMoves+=1;
                    }
                    else{
					//if n+1 is even, then n+2 is odd
                        numMoves+=2;
                    }  
                }
     return numMoves;           
    }        
}


or


