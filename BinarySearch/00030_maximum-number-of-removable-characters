https://leetcode.com/problems/maximum-number-of-removable-characters/


1898. Maximum Number of Removable Characters
Medium
Topics
Companies
Hint
You are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).

You want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.

Return the maximum k you can choose such that p is still a subsequence of s after the removals.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

 

Example 1:

Input: s = "abcacb", p = "ab", removable = [3,1,0]
Output: 2
Explanation: After removing the characters at indices 3 and 1, "abcacb" becomes "accb".
"ab" is a subsequence of "accb".
If we remove the characters at indices 3, 1, and 0, "abcacb" becomes "ccb", and "ab" is no longer a subsequence.
Hence, the maximum k is 2.
Example 2:

Input: s = "abcbddddd", p = "abcd", removable = [3,2,1,4,5,6]
Output: 1
Explanation: After removing the character at index 3, "abcbddddd" becomes "abcddddd".
"abcd" is a subsequence of "abcddddd".
Example 3:

Input: s = "abcab", p = "abc", removable = [0,1,2,3,4]
Output: 0
Explanation: If you remove the first index in the array removable, "abc" is no longer a subsequence.
 

Constraints:

1 <= p.length <= s.length <= 105
0 <= removable.length < s.length
0 <= removable[i] < s.length
p is a subsequence of s.
s and p both consist of lowercase English letters.
The elements in removable are distinct.



# java



1898. Maximum Number of Removable Characters
Medium
Topics
Companies
Hint
You are given two strings s and p where p is a subsequence of s. You are also given a distinct 0-indexed integer array removable containing a subset of indices of s (s is also 0-indexed).

You want to choose an integer k (0 <= k <= removable.length) such that, after removing k characters from s using the first k indices in removable, p is still a subsequence of s. More formally, you will mark the character at s[removable[i]] for each 0 <= i < k, then remove all marked characters and check if p is still a subsequence.

Return the maximum k you can choose such that p is still a subsequence of s after the removals.

A subsequence of a string is a new string generated from the original string with some characters (can be none) deleted without changing the relative order of the remaining characters.

 

Example 1:

Input: s = "abcacb", p = "ab", removable = [3,1,0]
Output: 2
Explanation: After removing the characters at indices 3 and 1, "abcacb" becomes "accb".
"ab" is a subsequence of "accb".
If we remove the characters at indices 3, 1, and 0, "abcacb" becomes "ccb", and "ab" is no longer a subsequence.
Hence, the maximum k is 2.
Example 2:

Input: s = "abcbddddd", p = "abcd", removable = [3,2,1,4,5,6]
Output: 1
Explanation: After removing the character at index 3, "abcbddddd" becomes "abcddddd".
"abcd" is a subsequence of "abcddddd".
Example 3:

Input: s = "abcab", p = "abc", removable = [0,1,2,3,4]
Output: 0
Explanation: If you remove the first index in the array removable, "abc" is no longer a subsequence.
 

Constraints:

1 <= p.length <= s.length <= 105
0 <= removable.length < s.length
0 <= removable[i] < s.length
p is a subsequence of s.
s and p both consist of lowercase English letters.
The elements in removable are distinct.



# java


class Solution {
  public int maximumRemovals(String s, String p, int[] removable) {
    int l = 0;
    int r = removable.length + 1;

    while (l < r) {
      final int m = (l + r) / 2;
      final String removed = remove(s, removable, m);
      if (isSubsequence(p, removed))
        l = m + 1;
      else
        r = m;
    }

    return l - 1;
  }

  private String remove(final String s, int[] removable, int k) {
    StringBuilder sb = new StringBuilder(s);
    for (int i = 0; i < k; ++i)
      sb.setCharAt(removable[i], '*');
    return sb.toString();
  }

  private boolean isSubsequence(final String p, final String s) {
    int i = 0; // p's index
    for (int j = 0; j < s.length(); ++j)
      if (p.charAt(i) == s.charAt(j))
        if (++i == p.length())
          return true;
    return false;
  }
}


or



class Solution {
    public int maximumRemovals(String s, String p, int[] rem) {
        int l = 0, r = rem.length;
        int[] map = new int[s.length()];
        Arrays.fill(map, rem.length);
        for (int i = 0; i < rem.length; ++i)
            map[rem[i]] = i;
        while (l < r) {
            int m = (l + r + 1) / 2, j = 0;
            for (int i = 0; i < s.length() && j < p.length(); ++i)
                if (map[i] >= m && s.charAt(i) == p.charAt(j))
                    ++j;
            if (j == p.length())
                l = m;
            else
                r = m - 1;
        }
        return l;
    }
}


or


class Solution {
    public int maximumRemovals(String s, String p, int[] removable) {
        int left = 0, right = removable.length;

        while (left < right) {
            int middle = (right + left + 1) / 2;
            String afterRemoval = remove(s, removable, middle);
            if (isSubsequence(p, afterRemoval, p.length(), afterRemoval.length()))
                left = middle;
            else
                right = middle - 1;
        }

        return left;
    }

    private String remove(String s, int[] removable, int k) {
        char[] symbols = s.toCharArray();
        for (int i = 0; i < k; i++) {
            symbols[removable[i]] = Character.MIN_VALUE;
        }
        return String.valueOf(symbols);
    }

    private boolean isSubsequence(String subSequence, String word, int subSequenceChar, int wordChar) {
        if (subSequenceChar == 0) return true;
        if (wordChar == 0) return false;

        if (subSequence.charAt(subSequenceChar - 1) == word.charAt(wordChar - 1))
            return isSubsequence(subSequence, word, subSequenceChar - 1, wordChar - 1);

        return isSubsequence(subSequence, word, subSequenceChar, wordChar - 1);
    }
}


or


// best

class Solution {
    // This is to check if p is subsequence of s. Time complexity will be O(s.length());
    public boolean isSubsequence(char[] s, char[] p){
        int i = 0, j = 0;
        while(i < s.length && j < p.length){
            if(s[i] == p[j]){
                i++;
                j++;
            }
            else i++;
        }

        // If our j pointer reaches the end of P string or P char[] then P is a subsequence of S so return TRUE otherwise return FALSE.
        return j == p.length;
    }

    public int maximumRemovals(String s, String p, int[] removable) {
        char[] sChar = s.toCharArray();
        char[] pChar = p.toCharArray();
        int l = 0;
        int r = removable.length - 1;

        while(l <= r){
            int mid = l + (r-l)/2;

            // Let's check till the mid point of removable array and find whether after removing all those indices from s, p remains a subsequence of s or not? I used '* to indicate that I removed those indices.'
            for(int i = l; i <= mid; i++) sChar[removable[i]] = '*';

            // If it is a subsequence then this might be possible that the value of K is more but we are only checking till mid so we need to move right, hence l = mid+1;
            if(isSubsequence(sChar, pChar)){
                l = mid+1;
            }

            // If we remove the indices till mid point but our K is less i.e, we can't remove mid+1(we start our iteration considering 0 indexed) numbers of elements then it might be possible that our K is less than mid+1. so we need to move left. Since we have already checked till mid now we need to set our r = mid-1.
            else{
                for(int i = l; i <= mid; i++) sChar[removable[i]] = s.charAt(removable[i]);
                r = mid - 1;
            }
        }

        // Since we have programmed based on 0 indexed our r might go to -1 or our r value will stay at the end index of removable array so to find out toal number of K we need to do r+1;
        return r+1;

        // Time complexity for this method will be Time complexity for (isSubsequence() * BinarySearch(removable)) so total TIme complexity will be O(s.length*log(removable.length));
    }
}


or


