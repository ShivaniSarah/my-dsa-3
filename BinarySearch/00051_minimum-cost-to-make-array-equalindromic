https://leetcode.com/problems/minimum-cost-to-make-array-equalindromic/description/

2967. Minimum Cost to Make Array Equalindromic
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums having length n.

You are allowed to perform a special move any number of times (including zero) on nums. In one special move you perform the following steps in order:

Choose an index i in the range [0, n - 1], and a positive integer x.
Add |nums[i] - x| to the total cost.
Change the value of nums[i] to x.
A palindromic number is a positive integer that remains the same when its digits are reversed. For example, 121, 2552 and 65756 are palindromic numbers whereas 24, 46, 235 are not palindromic numbers.

An array is considered equalindromic if all the elements in the array are equal to an integer y, where y is a palindromic number less than 109.

Return an integer denoting the minimum possible total cost to make nums equalindromic by performing any number of special moves.

 

Example 1:

Input: nums = [1,2,3,4,5]
Output: 6
Explanation: We can make the array equalindromic by changing all elements to 3 which is a palindromic number. The cost of changing the array to [3,3,3,3,3] using 4 special moves is given by |1 - 3| + |2 - 3| + |4 - 3| + |5 - 3| = 6.
It can be shown that changing all elements to any palindromic number other than 3 cannot be achieved at a lower cost.
Example 2:

Input: nums = [10,12,13,14,15]
Output: 11
Explanation: We can make the array equalindromic by changing all elements to 11 which is a palindromic number. The cost of changing the array to [11,11,11,11,11] using 5 special moves is given by |10 - 11| + |12 - 11| + |13 - 11| + |14 - 11| + |15 - 11| = 11.
It can be shown that changing all elements to any palindromic number other than 11 cannot be achieved at a lower cost.
Example 3:

Input: nums = [22,33,22,33,22]
Output: 22
Explanation: We can make the array equalindromic by changing all elements to 22 which is a palindromic number. The cost of changing the array to [22,22,22,22,22] using 2 special moves is given by |33 - 22| + |33 - 22| = 22.
It can be shown that changing all elements to any palindromic number other than 22 cannot be achieved at a lower cost.
 

Constraints:

1 <= n <= 105
1 <= nums[i] <= 109


# java


class Solution {
  public long minimumCost(int[] nums) {
    Arrays.sort(nums);
    final int median = nums[nums.length / 2];
    final int nextPalindrome = getPalindrome(median, 1);
    final int prevPalindrome = getPalindrome(median, -1);
    return Math.min(cost(nums, nextPalindrome), cost(nums, prevPalindrome));
  }

  // Returns the cost to change all the numbers to `palindrome`.
  private long cost(int[] nums, int palindrome) {
    return Arrays.stream(nums).mapToLong(num -> Math.abs(palindrome - num)).sum();
  }

  // Returns the palindrome `p`, where p = num + a * delta and a > 0.
  private int getPalindrome(int num, int delta) {
    while (!isPalindrome(num))
      num += delta;
    return num;
  }

  private boolean isPalindrome(int num) {
    final String original = Integer.toString(num);
    final String reversed = new StringBuilder(original).reverse().toString();
    return original.equals(reversed);
  }
}



or



public class Solution {
    private static long[] ps;
    private int[] nums;

    static {
        ps = new long[2 * (int) 1e5];
        for (int i = 1; i <= 1e5; i++) {
            String s = Integer.toString(i);
            String t1 = new StringBuilder(s).reverse().toString();
            String t2 = new StringBuilder(s.substring(0, s.length() - 1)).reverse().toString();
            ps[2 * i - 2] = Long.parseLong(s + t1);
            ps[2 * i - 1] = Long.parseLong(s + t2);
        }
        Arrays.sort(ps);
    }

    public long minimumCost(int[] nums) {
        this.nums = nums;
        Arrays.sort(nums);
        int i = Arrays.binarySearch(ps, nums[nums.length / 2]);
        i = i < 0 ? -i - 1 : i;
        long ans = 1L << 60;
        for (int j = i - 1; j <= i + 1; j++) {
            if (0 <= j && j < ps.length) {
                ans = Math.min(ans, f(ps[j]));
            }
        }
        return ans;
    }

    private long f(long x) {
        long ans = 0;
        for (int v : nums) {
            ans += Math.abs(v - x);
        }
        return ans;
    }
}



or



class Solution {
    public long minimumCost(int[] nums) {
        Arrays.sort(nums);
        int med=0,len=nums.length;
        med=nums[len/2];
        int num1=palindrome1(med),num2=palindrome2(med);
        long sum1=findsum(nums,num1),sum2=findsum(nums,num2);
        return sum1 > sum2 ? sum2 : sum1;
    }
    private int palindrome1(int num)
    {
        while(!check(num))
        {
            num--;
        }
        return  num;
    }
    private int palindrome2(int num)
    {
        while(!check(num))
        {
            num++;
        }
        return num;
    }
    private boolean check(int n)
    {
        long dup=n,rev=0;
        while(dup!=0)
        {
            rev=rev*10+(dup%10);
            dup/=10;
        }
        return rev==n;
    }
    private long findsum(int nums[], int n)
    {
        long sum=0;
        for(int i=0;i<nums.length;i++)
        {
            sum=sum+Math.abs(n-nums[i]);
        }
        return sum;
    }
}


or

// best

class Solution {
    public long minimumCost(int[] nums) {
        int n = nums.length;
        Arrays.sort(nums);
        int middle = nums[n/2];
        int inc = middle;
        int dec = middle;

        while(!isPal(inc)) inc++; 
        while(!isPal(dec)) dec--;

        return Math.min(calculateCost(nums,inc), calculateCost(nums,dec));
    }


    public boolean isPal(int n) {
        int r, sum = 0, temp;
        temp = n;
        while (n > 0) {
            r = n % 10; 
            sum = (sum * 10) + r;
            n = n / 10;
        }
        return temp == sum;
    }

    public long calculateCost(int[] nums, int r) {
        long cost = 0;
        for (int n: nums) cost += Math.abs(n - r);
        return cost;
    }
}

or


class Solution {
    // Function to check if a number is palindrome
    private boolean checkPalindrome(int x) {
        String str = Integer.toString(x);
        return str.equals(new StringBuilder(str).reverse().toString());
    }

    // Function to calculate the result
    private long add(int[] arr, int target) {
        long result = 0;
        for (int elem : arr) 
            result += Math.abs(elem - target);

        return result;
    }

    public long minimumCost(int[] nums) {
        Arrays.sort(nums);
        int midIndex = nums.length / 2;

        int mid;
        if (nums.length % 2 == 1) {
            mid = nums[midIndex];
            if (checkPalindrome(mid))
                return add(nums, mid);
        } 
        else {
            mid = (nums[midIndex] + nums[midIndex - 1]) / 2;
            if (checkPalindrome(mid))
                return add(nums, mid);
        }

        int p1 = mid + 1;
        int p2 = mid - 1;

        while (!(checkPalindrome(p1) && checkPalindrome(p2))) {
            if (!checkPalindrome(p1))
                p1++;
            if (!checkPalindrome(p2))
                p2--;
        }
        return Math.min(add(nums, p1), add(nums, p2));
    }
}


or



import java.util.Arrays;

public class Solution {
    public boolean isPal(int n) {
        long r, sum = 0, temp;
        temp = n;
        while (n > 0) {
            r = n % 10;
            sum = (sum * 10) + r;
            n = n / 10;
        }
        return temp == sum;
    }

    public long calculateCost(int[] nums, int r) {
        long cost = 0;
        for (int n : nums) {
            cost += Math.abs(n - r);
        }
        return cost;
    }

    public long minimumCost(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        int middle = 0;
        if (n == 1) return 0;

        if (n % 2 != 0) {
            middle = nums[n / 2];
        } else {
            middle = (nums[(n + 1) / 2] + nums[n / 2]) / 2;
        }
        long ans = 1e15;
        if (isPal(middle)) {
            ans = calculateCost(nums, middle);
        }

        long low = middle - 1;
        long high = middle + 1;
        long left = -1, right = -1;
        while (left == -1 || right == -1) {
            if (left == -1 && isPal((int) low)) {
                left = low;
            }
            if (right == -1 && isPal((int) high)) {
                right = high;
            }
            low--;
            high++;
        }

        return Math.min(ans, Math.min(calculateCost(nums, (int) right), calculateCost(nums, (int) left)));
    }
}



