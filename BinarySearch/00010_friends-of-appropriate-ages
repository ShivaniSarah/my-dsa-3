https://leetcode.com/problems/friends-of-appropriate-ages/description/

825. Friends Of Appropriate Ages
Medium
Topics
Companies
There are n persons on a social media website. You are given an integer array ages where ages[i] is the age of the ith person.

A Person x will not send a friend request to a person y (x != y) if any of the following conditions is true:

age[y] <= 0.5 * age[x] + 7
age[y] > age[x]
age[y] > 100 && age[x] < 100
Otherwise, x will send a friend request to y.

Note that if x sends a request to y, y will not necessarily send a request to x. Also, a person will not send a friend request to themself.

Return the total number of friend requests made.

 

Example 1:

Input: ages = [16,16]
Output: 2
Explanation: 2 people friend request each other.
Example 2:

Input: ages = [16,17,18]
Output: 2
Explanation: Friend requests are made 17 -> 16, 18 -> 17.
Example 3:

Input: ages = [20,30,100,110,120]
Output: 3
Explanation: Friend requests are made 110 -> 100, 120 -> 110, 120 -> 100.
 

Constraints:

n == ages.length
1 <= n <= 2 * 104
1 <= ages[i] <= 120


 #java


class Solution {
  public int numFriendRequests(int[] ages) {
    int ans = 0;
    int[] count = new int[121];

    for (final int age : ages)
      ++count[age];

    for (int ageA = 1; ageA <= 120; ++ageA)
      for (int ageB = 1; ageB <= 120; ++ageB) {
        final int countA = count[ageA];
        final int countB = count[ageB];
        if (countA > 0 && countB > 0 && request(ageA, ageB))
          if (ageA == ageB)
            ans += countA * (countB - 1);
          else
            ans += countA * countB;
      }

    return ans;
  }

  private boolean request(int ageA, int ageB) {
    return !(ageB <= 0.5 * ageA + 7 || ageB > ageA || ageB > 100 && ageA < 100);
  }
}


or


class Solution {
    public int numFriendRequests(int[] ages) {
        int[] counter = new int[121];
        for (int age : ages) {
            ++counter[age];
        }
        int ans = 0;
        for (int i = 1; i < 121; ++i) {
            int n1 = counter[i];
            for (int j = 1; j < 121; ++j) {
                int n2 = counter[j];
                if (!(j <= 0.5 * i + 7 || j > i || (j > 100 && i < 100))) {
                    ans += n1 * n2;
                    if (i == j) {
                        ans -= n2;
                    }
                }
            }
        }
        return ans;
    }
}



or


class Solution {
    public int numFriendRequests(int[] ages) {
        int[] count = new int[121];
        for (int age: ages) count[age]++;

        int ans = 0;
        for (int ageA = 0; ageA <= 120; ageA++) {
            int countA = count[ageA];
            for (int ageB = 0; ageB <= 120; ageB++) {
                int countB = count[ageB];
                if (ageA * 0.5 + 7 >= ageB) continue;
                if (ageA < ageB) continue;
                if (ageA < 100 && 100 < ageB) continue;
                ans += countA * countB;
                if (ageA == ageB) ans -= countA;
            }
        }

        return ans;
    }
}



or


class Solution {
    private boolean helper(int i, int j){
        return !((j <= i*0.5+7) || (j>i) || (j>100 && i<100));
    }


    public int numFriendRequests(int[] ages) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int i:ages){
            map.put(i, map.getOrDefault(i, 0)+1);
        }

        int res=0;
        for(var i:map.keySet()){
            for(var j:map.keySet()){
                if(helper(i, j)) {
                    res += map.get(i) * (map.get(j) - (i==j?1:0));
                }
            }
        }
        return res;
    }
}


or


// binary tree

//     the basic intution of this code is to sort the array
//     and for each element we must search the first index where the condition age[y]>0.5*age[x]+7 is satisified 
//     after that we just need to subtract the index of the array and the starting index to get no of pairs
//     but there is  a trick here as array contains duplicate elements if we calculate ans for ages=[16,16]
//     we will get wrong ans 
//     so we maintain hashmap named index which contains last index of the element
//     we also maintain an hashmap named count which contains count of each element
//     we must now just iterate through keys of hashmap named index and search the first index satisfiying the given
//     condition and keep the count of no of pairs
class Solution {
    private int solve(int ages[],int start,int end,int num){
        int flag=-1;
        while(start<=end){
            int mid=start+(end-start)/2;
            if(ages[mid]>(.5*num+7)){
                flag=1;
                end=mid-1;
            }
            else{
                start=mid+1;
            }
        }
//         this flag is the check whether there is any element which satisfies the conndition 
//          if no such element is found we return -1 
        if(flag==-1){
            return -1;
        }
        return start;
    }
    public int numFriendRequests(int[] ages) {
//         to apply binary search we are sorting 
        Arrays.sort(ages); 
        int c=0;
        HashMap<Integer,Integer>index=new HashMap<>();
        HashMap<Integer,Integer>count=new HashMap<>();
//         storing the count of each element as well as the last index of each element
        for(int i=0;i<ages.length;i++){
            index.put(ages[i],i);
            count.put(ages[i],count.getOrDefault(ages[i],0)+1);
        }
// iterating through the hashmap keys and find the first index where the condition age[y]>0.5*age[x]+7 is satisfied
//  the function will returen index subtract start current index from start index  add 1 to include that index and add the final result to c
        for(int x:index.keySet()){
            int k=solve(ages,0,index.get(x)-1,x);
          
            if(k!=-1){
            c+=((index.get(x)-k)*count.get(x));
            }
          
        }
        return c;
    }
}
// Pls do Upvote if you like :)




or


// bs


class Solution {
    public int numFriendRequests(int[] ages) {
        Arrays.sort(ages);
        int n = ages.length, ans = 0;
        int [] cnt = new int[121];
        for (int i = 0; i<n; i++) {
            int lo = 0, hi = i-1, res = -1;
            // lower bound
            while (lo<=hi) {
                int mid = (lo+hi)/2;
                if (0.5*ages[i]+7.0>=ages[mid]) {
                    lo = mid+1;
                }
                else {
                    hi = mid-1;
                    res = mid;
                }
            }
            if (res!=-1) {
                ans+=(i-res); 
                ans+=cnt[ages[i]];
            }
            cnt[ages[i]]++;
        }
        return ans;
    }
}


or


// tp


class Solution {
    public int numFriendRequests(int[] ages) {
        Arrays.sort(ages);
        int left = 0, i = 0, result = 0, prev = 0;
        for(i = 1; i < ages.length; i++) {
            while(left < i && ages[left] <= 0.5*ages[i]+7) left++;
            while(prev < i && ages[i] != ages[prev]) prev++;
            if(ages[i] == ages[prev] && ages[i] > 0.5*ages[i]+7) result+=i-prev;
            result+=i-left;
        }
        return result;
    }
}


or


class Solution {
    public int numFriendRequests(int[] ages) {
        int map[]=new int[121];
        for(int j=0;j<ages.length;j++){
            map[ages[j]]++;
        }

        for(int i=1;i<=120;i++){
            map[i]+=map[i-1];
        }
        int totalFriend=0;
        for(int i=0;i<ages.length;i++){
            int cond=ages[i]/2+7;
            if(cond>=ages[i]){
                continue;
            }
            totalFriend+=map[ages[i]]-map[cond]-1;
        }
        return totalFriend;
    }
}


or

class Solution {
    public int numFriendRequests(int[] ages) {
        int map[]=new int[121];
        for(int j=0;j<ages.length;j++){
            map[ages[j]]++;
        }

        for(int i=1;i<=120;i++){
            map[i]+=map[i-1];
        }
        int totalFriend=0;
        for(int i=0;i<ages.length;i++){
            int cond=ages[i]/2+7;
            if(cond>=ages[i]){
                continue;
            }
            totalFriend+=map[ages[i]]-map[cond]-1;
        }
        return totalFriend;
    }
}


