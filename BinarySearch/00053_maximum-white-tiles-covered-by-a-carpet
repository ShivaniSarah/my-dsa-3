https://leetcode.com/problems/maximum-white-tiles-covered-by-a-carpet/description/


2271. Maximum White Tiles Covered by a Carpet
Medium
Topics
Companies
Hint
You are given a 2D integer array tiles where tiles[i] = [li, ri] represents that every tile j in the range li <= j <= ri is colored white.

You are also given an integer carpetLen, the length of a single carpet that can be placed anywhere.

Return the maximum number of white tiles that can be covered by the carpet.

 

Example 1:


Input: tiles = [[1,5],[10,11],[12,18],[20,25],[30,32]], carpetLen = 10
Output: 9
Explanation: Place the carpet starting on tile 10. 
It covers 9 white tiles, so we return 9.
Note that there may be other places where the carpet covers 9 white tiles.
It can be shown that the carpet cannot cover more than 9 white tiles.
Example 2:


Input: tiles = [[10,11],[1,1]], carpetLen = 2
Output: 2
Explanation: Place the carpet starting on tile 10. 
It covers 2 white tiles, so we return 2.
 

Constraints:

1 <= tiles.length <= 5 * 104
tiles[i].length == 2
1 <= li <= ri <= 109
1 <= carpetLen <= 109
The tiles are non-overlapping.


# java


class Solution {
  public int maximumWhiteTiles(int[][] tiles, int carpetLen) {
    if (Arrays.stream(tiles).anyMatch(tile -> tile[1] - tile[0] + 1 >= carpetLen))
      return carpetLen;

    int ans = 0;
    List<Integer> starts = new ArrayList<>();
    int[] prefix = new int[tiles.length + 1];

    Arrays.sort(tiles, Comparator.comparingInt(tile -> tile[0]));

    for (int[] tile : tiles)
      starts.add(tile[0]);

    for (int i = 0; i < tiles.length; ++i) {
      final int length = tiles[i][1] - tiles[i][0] + 1;
      prefix[i + 1] = prefix[i] + length;
    }

    for (int i = 0; i < tiles.length; ++i) {
      final int s = tiles[i][0];
      final int carpetEnd = s + carpetLen - 1;
      final int endIndex = firstGreater(starts, carpetEnd) - 1;
      final int notCover = Math.max(0, tiles[endIndex][1] - carpetEnd);
      ans = Math.max(ans, prefix[endIndex + 1] - prefix[i] - notCover);
    }

    return ans;
  }

  private int firstGreater(List<Integer> arr, int target) {
    final int i = Collections.binarySearch(arr, target + 1);
    return i < 0 ? -i - 1 : i;
  }
}


or


class Solution {
    public int maximumWhiteTiles(int[][] tiles, int carpetLen) {
        Arrays.sort(tiles, (a, b) -> a[0] - b[0]);
        int n = tiles.length;
        int s = 0, ans = 0;
        for (int i = 0, j = 0; i < n; ++i) {
            while (j < n && tiles[j][1] - tiles[i][0] + 1 <= carpetLen) {
                s += tiles[j][1] - tiles[j][0] + 1;
                ++j;
            }
            if (j < n && tiles[i][0] + carpetLen > tiles[j][0]) {
                ans = Math.max(ans, s + tiles[i][0] + carpetLen - tiles[j][0]);
            } else {
                ans = Math.max(ans, s);
            }
            s -= (tiles[i][1] - tiles[i][0] + 1);
        }
        return ans;
    }
}




or



class Solution
{
    public int maximumWhiteTiles(int[][] tiles, int carpetLen)
    {
        Arrays.sort(tiles,(a,b)->{return a[0]-b[0];});
        int x = 0;
        int y = 0;
        long maxCount = 0;
        long count = 0;
        
        while(y < tiles.length && x <= y)
        {
            long start = tiles[x][0];
            long end = tiles[y][1];
            
            if(end-start+1 <= carpetLen) 
            {
                count += tiles[y][1] - tiles[y][0]+1;
                maxCount = Math.max(maxCount,count);
                y++;
            }
            else 
            {
                long midDist = start+carpetLen-1;
                long s = tiles[y][0];
                long e = tiles[y][1];
                if(midDist <= e && midDist >= s)  maxCount = Math.max(maxCount,count+midDist-s+1);
                count -= tiles[x][1] - tiles[x][0] + 1;
                x++;
            }
        }
        return (int)maxCount;
    }
}


or


class Solution {
    public int maximumWhiteTiles(int[][] tiles, int cLen) {
        Arrays.sort(tiles,(a,b)->{
            if(a[0]!=b[0])
                return a[0] - b[0];
            else
                return a[1] - b[1];
        });
        
        int n = tiles.length;
        int[]psum = new int[n];
        
        int val = 0;
        for(int i=0;i<n;i++)
        {
            val += (tiles[i][1] - tiles[i][0] + 1);
            psum[i] = val;
        }
        
        int max = 0;
        
        for(int i=0;i<n;i++)
        {
            int st = tiles[i][0];
            int find = st + cLen - 1;
            int idx = binarySearch(tiles,find);
            int sum = (idx-2>=0 && i-1>=0) ? psum[idx-2] - psum[i-1]: 0;
            if(idx-2>=0  && i==0)
                sum = psum[idx-2];
            if(find >= tiles[idx-1][1])
                sum+= (tiles[idx-1][1] - tiles[idx-1][0] + 1);
            else
                sum+= (find - tiles[idx-1][0] + 1);
            max = Math.max(max,sum);
        }
        return max;
    }
    
    public int binarySearch(int[][] tiles, int find)
    {
        int st = 0;
        int end = tiles.length;
        while(st<end)
        {
            int mid = st + (end - st)/2;
            if(tiles[mid][0] <= find)
                st = mid+1;
            else
                end = mid;
        }
        return st;
    }
}


or


class Solution {
    public int maximumWhiteTiles(int[][] tiles, int carpetLen) {
        Arrays.sort(tiles, (a, b) ->  a[0] - b[0]);
        int n = tiles.length;
        int[] prefix = new int[n];
        int max = 0;
        for(int i = 0; i < n; i++){
            prefix[i] = (i > 0 ? prefix[i-1] : 0) + tiles[i][1] - tiles[i][0] + 1;
        }
        for(int i = 0; i < n; i++){
            int start = tiles[i][0];
            int end = tiles[i][0] + carpetLen - 1;
            //Find the index in which the end will lying in
            int index = helper(tiles, end, i, n - 1);
            
            int sum = prefix[index] - (i > 0 ? prefix[i-1] : 0);
            if(end < tiles[index][1]){
                sum -= tiles[index][1] - end;
            }
            max = Math.max(max, sum);
        }
        return max;
    }
    public int helper(int[][] tiles, int target, int left, int right){
        while(right - left > 1){
            int mid = left + (right-left)/2;
            //If target is on the left of mid
            if(tiles[mid][1] >= target){
                right = mid;
            }else{ // tiles[mid][1] < target => definitely will be on the right
                left = mid;
            }
        }
        // l1 l2 r1 r2
        if(tiles[right][0] <= target){
            return right;
        }
        return left;
    }
}


or


