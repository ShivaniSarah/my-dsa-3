https://leetcode.com/problems/magnetic-force-between-two-balls/description/


1552. Magnetic Force Between Two Balls
Medium
Topics
Companies
Hint
In the universe Earth C-137, Rick discovered a special form of magnetic force between two balls if they are put in his new invented basket. Rick has n empty baskets, the ith basket is at position[i], Morty has m balls and needs to distribute the balls into the baskets such that the minimum magnetic force between any two balls is maximum.

Rick stated that magnetic force between two different balls at positions x and y is |x - y|.

Given the integer array position and the integer m. Return the required force.

 

Example 1:


Input: position = [1,2,3,4,7], m = 3
Output: 3
Explanation: Distributing the 3 balls into baskets 1, 4 and 7 will make the magnetic force between ball pairs [3, 3, 6]. The minimum magnetic force is 3. We cannot achieve a larger minimum magnetic force than 3.
Example 2:

Input: position = [5,4,3,2,1,1000000000], m = 2
Output: 999999999
Explanation: We can use baskets 1 and 1000000000.
 

Constraints:

n == position.length
2 <= n <= 105
1 <= position[i] <= 109
All integers in position are distinct.
2 <= m <= position.length



# java


class Solution {
  public int maxDistance(int[] position, int m) {
    Arrays.sort(position);

    int l = 1;
    int r = position[position.length - 1] - position[0];

    while (l < r) {
      final int mid = r - (r - l) / 2;
      if (numBalls(position, mid) >= m) // There're too many balls.
        l = mid;
      else // There're too few balls.
        r = mid - 1;
    }

    return l;
  }

  private int numBalls(int[] position, int force) {
    int balls = 0;
    int prevPosition = -force;
    for (final int pos : position)
      if (pos - prevPosition >= force) {
        balls++;
        prevPosition = pos;
      }
    return balls;
  }
}


or


class Solution {
    public int maxDistance(int[] position, int m) {
        Arrays.sort(position);
        int left = 1, right = position[position.length - 1];
        while (left < right) {
            int mid = (left + right + 1) >>> 1;
            if (check(position, mid, m)) {
                left = mid;
            } else {
                right = mid - 1;
            }
        }
        return left;
    }

    private boolean check(int[] position, int f, int m) {
        int prev = position[0];
        int cnt = 1;
        for (int i = 1; i < position.length; ++i) {
            int curr = position[i];
            if (curr - prev >= f) {
                prev = curr;
                ++cnt;
            }
        }
        return cnt >= m;
    }
}



or



class Solution {

    // Check if we can place 'm' balls at 'position'
    // with each ball having at least 'x' gap.
    private boolean canPlaceBalls(int x, int[] position, int m) {
        // Place the first ball at the first position.
        int prevBallPos = position[0];
        int ballsPlaced = 1;

        // Iterate on each 'position' and place a ball there if we can place it.
        for (int i = 1; i < position.length && ballsPlaced < m; ++i) {
            int currPos = position[i];
            // Check if we can place the ball at the current position.
            if (currPos - prevBallPos >= x) {
                ballsPlaced += 1;
                prevBallPos = currPos;
            }
        }
        // If all 'm' balls are placed, return 'true'.
        return ballsPlaced == m;
    }

    public int maxDistance(int[] position, int m) {
        int answer = 0;
        int n = position.length;
        Arrays.sort(position);

        // Initial search space.
        int low = 1;
        int high = (int) Math.ceil(position[n - 1] / (m - 1.0));
        while (low <= high) {
            int mid = low + (high - low) / 2;
            // If we can place all balls having a gap at least 'mid',
            if (canPlaceBalls(mid, position, m)) {
                // then 'mid' can be our answer,
                answer = mid;
                // and discard the left half search space.
                low = mid + 1;
            } else {
                // Discard the right half search space.
                high = mid - 1;
            }
        }
        return answer;
    }
}


or




class Solution {
    public int maxDistance(int[] position, int m) {
        Arrays.sort(position);
        int lo = 1;
        int hi = (position[position.length-1]-position[0])/(m-1);
        int ans = 1;
        while(lo<=hi)
        {
            int mid = lo+(hi-lo)/2;
            if(canWePlace(position, mid, m))
            {
                ans = mid;
                lo=mid+1;
            }
            else
            {
                hi = mid-1;
            }
        }
        return ans;
    }
    private boolean canWePlace(int[] arr, int dist, int cows)
    {
        int cntCows=1;
        int last = arr[0];
        for(int i=0;i<arr.length;i++)
        {
            if(arr[i]-last>=dist)
            {
                cntCows++;
                last = arr[i];
            }
            if(cntCows>=cows)
            {
                return true;
            }
        }
        return false;
    }
}



or



class Solution {
    public int maxDistance(int[] position, int m) {
        Arrays.sort(position);
        int l = 1, r = position[position.length - 1] - position[0];
        int ans = -1;
        while (l <= r) {
            int mid = l + (r - l) / 2;
            int lastPosition = position[0], balls = 1;
            for (int i = 1; i < position.length; i++) {
                if (position[i] - lastPosition >= mid) {
                    lastPosition = position[i];
                    balls++;
                }
            }
            if (balls >= m) {
                ans = mid;
                l = mid + 1;
            } else {
                r = mid - 1;
            }
        }
        return ans;
    }
}



or



class Solution {
    // Helper function to check if it's possible to place 'm' balls with at least 'gap' distance apart
    private boolean canPlaceBalls(int gap, int[] positions, int m) {
        int lastPosition = positions[0]; // Position of the last placed ball
        // Assuming that one ball is already placed, 
        // we keep remaining balls as m - 1
        int ballsRemaining = m - 1;      // Number of balls left to place

        // Iterate over the positions to try placing the remaining balls
        for (int i = 1; i < positions.length && ballsRemaining > 0; i++) {
            // Check if the current position is at least 'gap' distance from the last placed ball
            if (positions[i] - lastPosition >= gap) {
                ballsRemaining--;            // Place the ball
                lastPosition = positions[i]; // Update the position of the last placed ball
            }
        }
        return ballsRemaining == 0; // Return true if all balls are placed successfully
    }

    // Function to find the maximum minimum distance between any two balls
    public int maxDistance(int[] positions, int m) {
        Arrays.sort(positions); // Sort the positions to facilitate binary search
        int n = positions.length;

        // Initialize the binary search range
        int left = 1; // Minimum possible gap
        int right = positions[n - 1] - positions[0]; // Maximum possible gap
        int maxMinDistance = -1;

        // Perform binary search
        while (left <= right) {
            int mid = (left + right) / 2;

            // Check if it's possible to place all balls with at least 'mid' distance apart
            if (canPlaceBalls(mid, positions, m)) {
                maxMinDistance = mid; // Update the result
                left = mid + 1;       // Try for a larger gap
            } else {
                right = mid - 1;      // Try for a smaller gap
            }
        }
        return maxMinDistance; // Return the maximum minimum distance
    }
}

