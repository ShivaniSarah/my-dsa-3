https://leetcode.com/problems/compare-strings-by-frequency-of-the-smallest-character/description/


1170. Compare Strings by Frequency of the Smallest Character
Medium
Topics
Companies
Hint
Let the function f(s) be the frequency of the lexicographically smallest character in a non-empty string s. For example, if s = "dcce" then f(s) = 2 because the lexicographically smallest character is 'c', which has a frequency of 2.

You are given an array of strings words and another array of query strings queries. For each query queries[i], count the number of words in words such that f(queries[i]) < f(W) for each W in words.

Return an integer array answer, where each answer[i] is the answer to the ith query.

 

Example 1:

Input: queries = ["cbd"], words = ["zaaaz"]
Output: [1]
Explanation: On the first query we have f("cbd") = 1, f("zaaaz") = 3 so f("cbd") < f("zaaaz").
Example 2:

Input: queries = ["bbb","cc"], words = ["a","aa","aaa","aaaa"]
Output: [1,2]
Explanation: On the first query only f("bbb") < f("aaaa"). On the second query both f("aaa") and f("aaaa") are both > f("cc").
 

Constraints:

1 <= queries.length <= 2000
1 <= words.length <= 2000
1 <= queries[i].length, words[i].length <= 10
queries[i][j], words[i][j] consist of lowercase English letters.


# java



class Solution {
  public int[] numSmallerByFrequency(String[] queries, String[] words) {
    int[] ans = new int[queries.length];
    int[] wordsFreq = new int[words.length];

    for (int i = 0; i < words.length; ++i)
      wordsFreq[i] = f(words[i]);
    Arrays.sort(wordsFreq);

    for (int i = 0; i < queries.length; ++i) {
      final int freq = f(queries[i]);
      ans[i] = words.length - firstGreater(wordsFreq, 0, wordsFreq.length, freq);
    }

    return ans;
  }

  private int f(final String word) {
    int count = 0;
    char currentChar = 'z' + 1;

    for (final char c : word.toCharArray())
      if (c < currentChar) {
        currentChar = c;
        count = 1;
      } else if (c == currentChar) {
        ++count;
      }

    return count;
  }

  private int firstGreater(int[] nums, int l, int r, int value) {
    while (l < r) {
      final int m = (l + r) / 2;
      if (nums[m] > value)
        r = m;
      else
        l = m + 1;
    }
    return l;
  }
}


or



class Solution {
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        int n = words.length;
        int[] nums = new int[n];
        for (int i = 0; i < n; ++i) {
            nums[i] = f(words[i]);
        }
        Arrays.sort(nums);
        int m = queries.length;
        int[] ans = new int[m];
        for (int i = 0; i < m; ++i) {
            int x = f(queries[i]);
            int l = 0, r = n;
            while (l < r) {
                int mid = (l + r) >> 1;
                if (nums[mid] > x) {
                    r = mid;
                } else {
                    l = mid + 1;
                }
            }
            ans[i] = n - l;
        }
        return ans;
    }

    private int f(String s) {
        int[] cnt = new int[26];
        for (int i = 0; i < s.length(); ++i) {
            ++cnt[s.charAt(i) - 'a'];
        }
        for (int x : cnt) {
            if (x > 0) {
                return x;
            }
        }
        return 0;
    }
}



or


class Solution {
       public int[] numSmallerByFrequency(String[] queries, String[] words) {
        //create arrays to save func for each query and word
        int[] q = new int[queries.length];
        int[] w = new int[words.length];
        //fill q and w for each array member
        for (int i = 0; i < q.length; i++) {
            q[i] = getFunc(queries[i]);
        }
        for (int i = 0; i < w.length; i++) {
            w[i] = getFunc(words[i]);
        }
        //because we care only of the number of elements we can utilize binary search
        //we sort the array of funcs for words and then find first element that is greater
        //then q[i]. Then based on indexes we can conclud how much elements are greater or 
        //smaller
        Arrays.sort(w);
        int[] res = new int[q.length];
        for (int i = 0; i < q.length; i++) {
            int l = 0, r = w.length - 1;
            while (l <= r) {
                int m = (r + l) / 2;
                if (w[m] <= q[i]) {
                    l = m + 1;
                } else {
                    r = m - 1;
                }
            }
            res[i] = w.length - l;
        }
        return res;
    }
    
    int getFunc(String s) {
        char chr = 'z';
        int count = 0;
        //iterate over every character, keep current running smallest character. If we found the same one
        //increment count, if lesser - start counter from 1. If this character is greater - ignore it
        for (char ch : s.toCharArray()) {
            if (ch < chr) {
                count = 1;
                chr = ch;
            } else if (chr == ch) {
                count++;
            }
        }
        return count;
    }
}



or



class Solution {
    public int findSmallestOccurence(String s) {
        int freq = 0;
        char smallestChar = 'z';
        for (char ch : s.toCharArray()) {
            if (ch < smallestChar) {
                smallestChar = ch;
                freq = 1;
            } else if (ch == smallestChar) freq++;
        }
        return freq;
    }
    public int findPosition(int[] array, int element) {
        //higher position
        int low = 0, high = array.length-1;
        while (low <= high) {
            int mid = low + (high-low)/2;
            if (array[mid] > element) high = mid-1;
            else if (array[mid] <= element) low = mid+1;
        }
        return low;
    }
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        int[] result = new int[queries.length];
        int[] q = new int[queries.length], w = new int[words.length];
        
        for (int i=0; i<queries.length; i++) {
            q[i] = findSmallestOccurence(queries[i]);
        }
        for(int i=0; i<words.length; i++) {
            w[i] = findSmallestOccurence(words[i]);
        }
        Arrays.sort(w);
        for (int i=0; i<q.length; i++) {
            int index =  findPosition(w, q[i]);
            result[i] = words.length-index;
        }
        return result;
    }
}


or


class Solution {
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        // Calculate words values
        // Sort them
        // Binary search for each query to find index
        
        int[] wordvals = new int[words.length];
        
        for (int i = 0; i < words.length; i++) {
            wordvals[i] = calculate(words[i]);
        }
        
        Arrays.sort(wordvals);
        
        int[] result = new int[queries.length];
        
        for (int i = 0; i < queries.length; i++) {
            result[i] = wordvals.length - binarysearch(calculate(queries[i]), wordvals);
        }
        
        return result;
    }
    
    private int calculate(String s) {
        char curr = 'z' + 1;
        int ct = 0;
        for (char c : s.toCharArray()) {
            if (c < curr) {
                curr = c;
                ct = 1;
            }
            else if (curr == c) {
                ct ++;
            }
        }
        return ct;
    }
    
    private int binarysearch(int i, int[] nums) {
        int lo = 0; 
        int hi = nums.length - 1;
        
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (nums[mid] > i) {
                hi = mid - 1;
            }
            else {
                lo = mid + 1;
            }
        }
        
        return lo;
    }
}


or





class Solution {
    public int[] numSmallerByFrequency(String[] queries, String[] words) {
        
        int [] fCount = new int[11];
        
        for(String word : words){
            int count = getFCount(word);
            fCount[count]++;
        }
        
        
        int sum = 0;
        for(int i=0;i<fCount.length;i++){
            sum += fCount[i];
            fCount[i] = sum;
        }
        
        int [] res = new int[queries.length];
        
        for(int i=0;i<queries.length;i++){
            
            int count = getFCount(queries[i]);
            res[i] = fCount[fCount.length -1] - fCount[count];
        }
        
        return res; 
    }
    
    public int getFCount(String word){
        int [] count = new int[26];
            
        for(int i=0;i<word.length();i++){
            count[word.charAt(i)-'a']++;
        }

        for(int i=0;i<count.length;i++){            
            if(count[i] != 0){
                return count[i];
            }
        }
        
        return 0;
    }
}



