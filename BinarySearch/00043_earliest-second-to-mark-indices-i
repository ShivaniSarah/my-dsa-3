https://leetcode.com/problems/earliest-second-to-mark-indices-i/description/

3048. Earliest Second to Mark Indices I
Medium
Topics
Companies
Hint
You are given two 1-indexed integer arrays, nums and, changeIndices, having lengths n and m, respectively.

Initially, all indices in nums are unmarked. Your task is to mark all indices in nums.

In each second, s, in order from 1 to m (inclusive), you can perform one of the following operations:

Choose an index i in the range [1, n] and decrement nums[i] by 1.
If nums[changeIndices[s]] is equal to 0, mark the index changeIndices[s].
Do nothing.
Return an integer denoting the earliest second in the range [1, m] when all indices in nums can be marked by choosing operations optimally, or -1 if it is impossible.

 

Example 1:

Input: nums = [2,2,0], changeIndices = [2,2,2,2,3,2,2,1]
Output: 8
Explanation: In this example, we have 8 seconds. The following operations can be performed to mark all indices:
Second 1: Choose index 1 and decrement nums[1] by one. nums becomes [1,2,0].
Second 2: Choose index 1 and decrement nums[1] by one. nums becomes [0,2,0].
Second 3: Choose index 2 and decrement nums[2] by one. nums becomes [0,1,0].
Second 4: Choose index 2 and decrement nums[2] by one. nums becomes [0,0,0].
Second 5: Mark the index changeIndices[5], which is marking index 3, since nums[3] is equal to 0.
Second 6: Mark the index changeIndices[6], which is marking index 2, since nums[2] is equal to 0.
Second 7: Do nothing.
Second 8: Mark the index changeIndices[8], which is marking index 1, since nums[1] is equal to 0.
Now all indices have been marked.
It can be shown that it is not possible to mark all indices earlier than the 8th second.
Hence, the answer is 8.
Example 2:

Input: nums = [1,3], changeIndices = [1,1,1,2,1,1,1]
Output: 6
Explanation: In this example, we have 7 seconds. The following operations can be performed to mark all indices:
Second 1: Choose index 2 and decrement nums[2] by one. nums becomes [1,2].
Second 2: Choose index 2 and decrement nums[2] by one. nums becomes [1,1].
Second 3: Choose index 2 and decrement nums[2] by one. nums becomes [1,0].
Second 4: Mark the index changeIndices[4], which is marking index 2, since nums[2] is equal to 0.
Second 5: Choose index 1 and decrement nums[1] by one. nums becomes [0,0].
Second 6: Mark the index changeIndices[6], which is marking index 1, since nums[1] is equal to 0.
Now all indices have been marked.
It can be shown that it is not possible to mark all indices earlier than the 6th second.
Hence, the answer is 6.
Example 3:

Input: nums = [0,1], changeIndices = [2,2,2]
Output: -1
Explanation: In this example, it is impossible to mark all indices because index 1 isn't in changeIndices.
Hence, the answer is -1.
 

Constraints:

1 <= n == nums.length <= 2000
0 <= nums[i] <= 109
1 <= m == changeIndices.length <= 2000
1 <= changeIndices[i] <= n



# java


class Solution {
  public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {
    int l = 0;
    int r = changeIndices.length + 1;

    while (l < r) {
      final int m = (l + r) / 2;
      if (canMark(nums, changeIndices, m))
        r = m;
      else
        l = m + 1;
    }

    return l <= changeIndices.length ? l : -1;
  }

  // Returns true if all indices of `nums` can be marked within `second`.
  private boolean canMark(int[] nums, int[] changeIndices, int second) {
    int numMarked = 0;
    int decrement = 0;
    // indexToLastSecond[i] := the last second to mark the index i
    int[] indexToLastSecond = new int[nums.length];
    Arrays.fill(indexToLastSecond, -1);

    for (int i = 0; i < second; ++i)
      indexToLastSecond[changeIndices[i] - 1] = i;

    for (int i = 0; i < second; ++i) {
      final int index = changeIndices[i] - 1; // Convert to 0-indexed.
      if (i == indexToLastSecond[index]) {
        // Reach the last occurrence of the number.
        // So, the current second will be used to mark the index.
        if (nums[index] > decrement)
          // The decrement is less than the number to be marked.
          return false;
        decrement -= nums[index];
        ++numMarked;
      } else {
        ++decrement;
      }
    }

    return numMarked == nums.length;
  }
}


or



class Solution {
    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {
        int l = 0;
        int r = changeIndices.length + 1;
        while (l < r) {
            final int m = (l + r) / 2;
            if (canMark(nums, changeIndices, m)) {
                r = m;
            } else {
                l = m + 1;
            }
        }
        return l <= changeIndices.length ? l : -1;
    }

    private boolean canMark(int[] nums, int[] changeIndices, int second) {
        int numMarked = 0;
        int decrement = 0;
        // indexToLastSecond[i] := the last second to mark the index i
        int[] indexToLastSecond = new int[nums.length];
        Arrays.fill(indexToLastSecond, -1);

        for (int i = 0; i < second; ++i) {
            indexToLastSecond[changeIndices[i] - 1] = i;
        }

        for (int i = 0; i < second; ++i) {
            // Convert to 0-indexed.
            final int index = changeIndices[i] - 1;
            if (i == indexToLastSecond[index]) {
                // Reach the last occurrence of the number.
                // So, the current second will be used to mark the index.
                if (nums[index] > decrement) {
                    // The decrement is less than the number to be marked.
                    return false;
                }
                decrement -= nums[index];
                ++numMarked;
            } else {
                ++decrement;
            }
        }
        return numMarked == nums.length;
    }
}



or



class Solution {
    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {
        int sum = 0,n = nums.length,s = changeIndices.length;
 
        for(int i : nums){
           sum +=  i; 
           if(sum>s)return -1;
        } 
 
        int l = sum, h = s-1,res = -2;

        while(l<=h){
           int m = (l+h)>>1; 
          
           if(check(m,nums,changeIndices)){
              res = m ;
              h = m-1;
           }else l = m+1;
        }
       
        return res+1;
    }

    boolean check(int m,int nums[],int[] cidx){
       var vis = new HashSet<Integer>(); 
       var list = new ArrayList<Integer>(); 
       
      for(int i = m; i>=0; i--){
         if(!vis.contains(cidx[i]))list.add(i);
         vis.add(cidx[i]);
      }
        
      if(vis.size() != nums.length)return false;
      
      int moves = 0; 

      for(int i = list.size()-1; i>=0; i--){
         moves += list.get(i)-(i==list.size()-1?-1:list.get(i+1))-1;
         moves -= nums[cidx[list.get(i)]-1]; 
         if(moves<0)return false;
      }
 
      return true;
   }
}





or







class Solution {
    public int earliestSecondToMarkIndices(int[] nums, int[] changeIndices) {
        int n = nums.length;
        int[] changeIndicesAdjusted = Arrays.stream(changeIndices).map(index -> index - 1).toArray();
        int low = 0, high = changeIndices.length - 1;
        while (low < high) {
            int mid = (low + high) / 2;
            if (isPossible(nums, changeIndicesAdjusted, mid)) high = mid;
            else low = mid + 1;
        }
		// Delay Marking as Much as Possible
        return isPossible(nums, changeIndicesAdjusted, low) ? low + 1 : -1;
    }

	// isPossible method is called to check if it's possible to mark all indices in s seconds while delaying marking as much as possible.
    private boolean isPossible(int[] nums, int[] changeIndices, int s) {
        int n = nums.length;
        int[] last = new int[n];
        Arrays.fill(last, -1);
        for (int i = 0; i <= s; i++) { // Latest Point to Mark an Index
            last[changeIndices[i]] = i;
        }
        int marked = 0, operations = 0;
        for (int i = 0; i <= s; i++) { // Store Decrement Operations
            if (i == last[changeIndices[i]]) {
                if (nums[changeIndices[i]] > operations) return false;
                operations -= nums[changeIndices[i]];
                marked++;
            } else {
                operations++;
            }
        }
        return marked == n;
    }
}



or




