https://leetcode.com/problems/minimum-absolute-sum-difference/description/


1818. Minimum Absolute Sum Difference
Medium
Topics
Companies
Hint
You are given two positive integer arrays nums1 and nums2, both of length n.

The absolute sum difference of arrays nums1 and nums2 is defined as the sum of |nums1[i] - nums2[i]| for each 0 <= i < n (0-indexed).

You can replace at most one element of nums1 with any other element in nums1 to minimize the absolute sum difference.

Return the minimum absolute sum difference after replacing at most one element in the array nums1. Since the answer may be large, return it modulo 109 + 7.

|x| is defined as:

x if x >= 0, or
-x if x < 0.
 

Example 1:

Input: nums1 = [1,7,5], nums2 = [2,3,5]
Output: 3
Explanation: There are two possible optimal solutions:
- Replace the second element with the first: [1,7,5] => [1,1,5], or
- Replace the second element with the third: [1,7,5] => [1,5,5].
Both will yield an absolute sum difference of |1-2| + (|1-3| or |5-3|) + |5-5| = 3.
Example 2:

Input: nums1 = [2,4,6,8,10], nums2 = [2,4,6,8,10]
Output: 0
Explanation: nums1 is equal to nums2 so no replacement is needed. This will result in an 
absolute sum difference of 0.
Example 3:

Input: nums1 = [1,10,4,4,2,7], nums2 = [9,3,5,1,7,4]
Output: 20
Explanation: Replace the first element with the second: [1,10,4,4,2,7] => [10,10,4,4,2,7].
This yields an absolute sum difference of |10-9| + |10-3| + |4-5| + |4-1| + |2-7| + |7-4| = 20
 

Constraints:

n == nums1.length
n == nums2.length
1 <= n <= 105
1 <= nums1[i], nums2[i] <= 105


# java



class Solution {
    public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
        final int mod = (int) 1e9 + 7;
        int[] nums = nums1.clone();
        Arrays.sort(nums);
        int s = 0, n = nums.length;
        for (int i = 0; i < n; ++i) {
            s = (s + Math.abs(nums1[i] - nums2[i])) % mod;
        }
        int mx = 0;
        for (int i = 0; i < n; ++i) {
            int d1 = Math.abs(nums1[i] - nums2[i]);
            int d2 = 1 << 30;
            int j = search(nums, nums2[i]);
            if (j < n) {
                d2 = Math.min(d2, Math.abs(nums[j] - nums2[i]));
            }
            if (j > 0) {
                d2 = Math.min(d2, Math.abs(nums[j - 1] - nums2[i]));
            }
            mx = Math.max(mx, d1 - d2);
        }
        return (s - mx + mod) % mod;
    }

    private int search(int[] nums, int x) {
        int left = 0, right = nums.length;
        while (left < right) {
            int mid = (left + right) >>> 1;
            if (nums[mid] >= x) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}



or




class Solution {
  public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
    final int MOD = 1_000_000_007;
    long sumDiff = 0;
    long maxDecrement = 0;
    TreeSet<Integer> sorted = new TreeSet<>();

    for (final int num : nums1)
      sorted.add(num);

    for (int i = 0; i < nums1.length; ++i) {
      final long currDiff = (long) Math.abs(nums1[i] - nums2[i]);
      sumDiff += currDiff;
      Integer ceiling = sorted.ceiling(nums2[i]);
      Integer floor = sorted.floor(nums2[i]);
      if (ceiling != null)
        maxDecrement = Math.max(maxDecrement, currDiff - (long) Math.abs(ceiling - nums2[i]));
      if (floor != null)
        maxDecrement = Math.max(maxDecrement, currDiff - (long) Math.abs(floor - nums2[i]));
    }

    return (int) ((sumDiff - maxDecrement) % MOD);
  }
}


or



class Solution {
    public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
        int[] tempNum  = nums1.clone();
        Arrays.sort( tempNum );
        long totalDiff = 0;
        
        for( int i = 0 ; i < nums1.length; i++ )
            totalDiff += Math.abs( nums1[i]-nums2[i] );
        
        long result = totalDiff;
        for( int i= 0; i < nums2.length; i++ )
        {
            int index = find_index( tempNum, nums2[i]);
            
            int leftIndex = index == 0 ? index : index-1;
            int rightIndex = index == tempNum.length ? index-1 : index;
            
            int diff = Math.min( Math.abs( nums2[i] - tempNum[leftIndex] ), Math.abs( nums2[i] - tempNum[rightIndex] ) );
            
            result = Math.min( result, totalDiff-Math.abs(nums1[i] -nums2[i] ) + diff);
           
        }
    return (int) ( result % 1000000007);    
    }
    
    public int find_index(int[] arr, int K)
    {

        int left = 0;
        int right = arr.length-1;

        // Traverse the search space
        while (left < right)
        {
            int mid = (left + right) / 2;
            
            if (arr[mid] == K)
                return mid;
            else if (arr[mid] > K)
                right = mid;
            else
                left = mid + 1;
        }

        // Return insert position / Minimal left index which satisfies arr[left ] > K
        return left;
    }
}



or




import static java.lang.Math.abs;

import java.util.Comparator;
import java.util.Map.Entry;
import java.util.TreeMap;

class Solution {

  public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
        boolean[] countingNums1 = new boolean[100001];
        int[] diffNums2 = new int[100001];
        
        long absoluteSumDiff = 0;
        for (int i = 0; i < nums1.length; i++) {
            int absoluteDiff = Math.abs(nums1[i]-nums2[i]);
            countingNums1[nums1[i]] = true;
            diffNums2[nums2[i]] = Math.max(absoluteDiff, diffNums2[nums2[i]]);
            absoluteSumDiff += absoluteDiff;
        }
        
        int num1 = -100000;
        int num2 = -100000;
        int diff = 0;
        int maxProfit = 0;
        for (int num = 1; num < 100001; num++) {
            if (countingNums1[num]) {
                maxProfit = Math.max(diff - num + num2, maxProfit);
                num1 = num;
            }
            
            if (diffNums2[num] > 0) {
                maxProfit = Math.max(diffNums2[num] - num + num1, maxProfit);
                if (diff - num + num2 < diffNums2[num]) {
                    diff = diffNums2[num];
                    num2 = num;
                }
            }
        }
        
        return (int)((absoluteSumDiff - maxProfit) % 1_000_000_007);
    }

}



or



class Solution {

      public int minAbsoluteSumDiff(int[] nums1, int[] nums2) {
        int mod=(int)Math.pow(10,9)+7;
        int sum=0;
        int n=nums1.length;
        int maxDifference=-1; 
        int maxIndex=-1;
        for(int i=0;i<n;i++){
            int diff=Math.abs(nums1[i]-nums2[i]);
            sum=(sum%mod + diff%mod)%mod;
            
            if(diff>maxDifference){
                maxDifference=diff;
                maxIndex=i;
            }
        }
        
        sum-=maxDifference;
        
        int min=maxDifference;
        int val2=nums2[maxIndex];
        for(int i=0;i<n;i++){
            int val1=nums1[i];
            min=Math.min(min,Math.abs(val1-val2));
        }
        
        sum+=min;
        
        return sum;
    }

}


