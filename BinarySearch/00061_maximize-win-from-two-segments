https://leetcode.com/problems/maximize-win-from-two-segments/description/


2555. Maximize Win From Two Segments
Medium
Topics
Companies
Hint
There are some prizes on the X-axis. You are given an integer array prizePositions that is sorted in non-decreasing order, where prizePositions[i] is the position of the ith prize. There could be different prizes at the same position on the line. You are also given an integer k.

You are allowed to select two segments with integer endpoints. The length of each segment must be k. You will collect all prizes whose position falls within at least one of the two selected segments (including the endpoints of the segments). The two selected segments may intersect.

For example if k = 2, you can choose segments [1, 3] and [2, 4], and you will win any prize i that satisfies 1 <= prizePositions[i] <= 3 or 2 <= prizePositions[i] <= 4.
Return the maximum number of prizes you can win if you choose the two segments optimally.

 

Example 1:

Input: prizePositions = [1,1,2,2,3,3,5], k = 2
Output: 7
Explanation: In this example, you can win all 7 prizes by selecting two segments [1, 3] and [3, 5].
Example 2:

Input: prizePositions = [1,2,3,4], k = 0
Output: 2
Explanation: For this example, one choice for the segments is [3, 3] and [4, 4], and you will be able to get 2 prizes. 
 

Constraints:

1 <= prizePositions.length <= 105
1 <= prizePositions[i] <= 109
0 <= k <= 109 
prizePositions is sorted in non-decreasing order.



# java


class Solution {
  public int maximizeWin(int[] prizePositions, int k) {
    int ans = 0;
    // dp[i] := the maximum number of prizes to choose the first i
    // `prizePositions`
    int[] dp = new int[prizePositions.length + 1];

    for (int i = 0, j = 0; i < prizePositions.length; ++i) {
      while (prizePositions[i] - prizePositions[j] > k)
        ++j;
      final int covered = i - j + 1;
      dp[i + 1] = Math.max(dp[i], covered);
      ans = Math.max(ans, dp[j] + covered);
    }

    return ans;
  }
}


or



class Solution {
    public int maximizeWin(int[] prizePositions, int k) {
        int n = prizePositions.length;
        int[] f = new int[n + 1];
        int ans = 0;
        for (int i = 1; i <= n; ++i) {
            int x = prizePositions[i - 1];
            int j = search(prizePositions, x - k);
            ans = Math.max(ans, f[j] + i - j);
            f[i] = Math.max(f[i - 1], i - j);
        }
        return ans;
    }

    private int search(int[] nums, int x) {
        int left = 0, right = nums.length;
        while (left < right) {
            int mid = (left + right) >> 1;
            if (nums[mid] >= x) {
                right = mid;
            } else {
                left = mid + 1;
            }
        }
        return left;
    }
}


or

class Solution {
        public int maximizeWin(int[] A, int k) {
        int res = 0, n = A.length, j = 0, dp[] = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            while (A[j] < A[i] - k)
                ++j;
            dp[i + 1] = Math.max(dp[i], i - j + 1);
            res = Math.max(res, i - j + 1 + dp[j]);
        }
        return res;
    }
}


or


class Solution {
    public int maximizeWin(int[] a, int k) {
        int j=0,i=0;
        int n = a.length;
        int dp[]=new int[n+1];
        int ans =0;
        for(i=0;i<a.length;i++)
        {
            while(a[i]-a[j]>k)
            j++;
            dp[i+1] = Math.max(dp[i],i-j+1);
            ans = Math.max(ans,dp[j]+i-j+1);

        }
        return ans;
    }
}



or



class Solution {
    public int maximizeWin(int[] prizePositions, int k) {
        int n = prizePositions.length;
        int[] maxPrizesFrom = new int[n];
        int[] prizesInWindow = new int[n];

        // Compute prizesInWindow[i] = number of prizes from i to the farthest index with prizePositions[j] <= prizePositions[i] + k
        for (int i = 0; i < n; i++) {
            int j = upperBound(prizePositions, prizePositions[i] + k);
            prizesInWindow[i] = j - i;
        }

        // maxPrizesFrom[i] = max number of prizes from position i to end
        maxPrizesFrom[n - 1] = prizesInWindow[n - 1];
        for (int i = n - 2; i >= 0; i--) {
            maxPrizesFrom[i] = Math.max(prizesInWindow[i], maxPrizesFrom[i + 1]);
        }

        int maxTotal = 0;
        for (int i = 0; i < n; i++) {
            int j = i + prizesInWindow[i];
            int second = (j < n) ? maxPrizesFrom[j] : 0;
            maxTotal = Math.max(maxTotal, prizesInWindow[i] + second);
        }

        return maxTotal;
    }

    // Finds the first index where arr[i] > val (upper bound)
    private int upperBound(int[] arr, int val) {
        int low = 0, high = arr.length, ans = arr.length;
        while (low < high) {
            int mid = (low + high) / 2;
            if (arr[mid] > val) {
                ans = mid;
                high = mid;
            } else {
                low = mid + 1;
            }
        }
        return ans;
    }
}



