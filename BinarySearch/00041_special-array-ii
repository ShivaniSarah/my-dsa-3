https://leetcode.com/problems/special-array-ii/description/


3152. Special Array II
Medium
Topics
Companies
Hint
An array is considered special if every pair of its adjacent elements contains two numbers with different parity.

You are given an array of integer nums and a 2D integer matrix queries, where for queries[i] = [fromi, toi] your task is to check that subarray nums[fromi..toi] is special or not.

Return an array of booleans answer such that answer[i] is true if nums[fromi..toi] is special.

 

Example 1:

Input: nums = [3,4,1,2,6], queries = [[0,4]]

Output: [false]

Explanation:

The subarray is [3,4,1,2,6]. 2 and 6 are both even.

Example 2:

Input: nums = [4,3,1,6], queries = [[0,2],[2,3]]

Output: [false,true]

Explanation:

The subarray is [4,3,1]. 3 and 1 are both odd. So the answer to this query is false.
The subarray is [1,6]. There is only one pair: (1,6) and it contains numbers with different parity. So the answer to this query is true.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105
1 <= queries.length <= 105
queries[i].length == 2
0 <= queries[i][0] <= queries[i][1] <= nums.length - 1



# java


class Solution {
  public boolean[] isArraySpecial(int[] nums, int[][] queries) {
    boolean[] ans = new boolean[queries.length];
    // parityIds[i] := the id of the parity group that nums[i] belongs to
    int[] parityIds = new int[nums.length];
    int id = 0;
    parityIds[0] = id;

    for (int i = 1; i < nums.length; ++i) {
      if (nums[i] % 2 == nums[i - 1] % 2)
        ++id;
      parityIds[i] = id;
    }

    for (int i = 0; i < queries.length; ++i) {
      final int from = queries[i][0];
      final int to = queries[i][1];
      ans[i] = parityIds[from] == parityIds[to];
    }

    return ans;
  }
}


or



class Solution {
    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] d = new int[n];
        for (int i = 1; i < n; ++i) {
            if (nums[i] % 2 != nums[i - 1] % 2) {
                d[i] = d[i - 1];
            } else {
                d[i] = i;
            }
        }
        int m = queries.length;
        boolean[] ans = new boolean[m];
        for (int i = 0; i < m; ++i) {
            ans[i] = d[queries[i][1]] <= queries[i][0];
        }
        return ans;
    }
}


or



class Solution {

    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        boolean[] ans = new boolean[queries.length];
        ArrayList<Integer> violatingIndices = new ArrayList<>();

        for (int i = 1; i < nums.length; i++) {
            // same parity, found violating index
            if (nums[i] % 2 == nums[i - 1] % 2) {
                violatingIndices.add(i);
            }
        }

        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            int start = query[0];
            int end = query[1];

            boolean foundViolatingIndex = binarySearch(
                start + 1,
                end,
                violatingIndices
            );

            if (foundViolatingIndex) {
                ans[i] = false;
            } else {
                ans[i] = true;
            }
        }

        return ans;
    }

    private boolean binarySearch(
        int start,
        int end,
        ArrayList<Integer> violatingIndices
    ) {
        int left = 0;
        int right = violatingIndices.size() - 1;
        while (left <= right) {
            int mid = left + (right - left) / 2;
            int violatingIndex = violatingIndices.get(mid);

            if (violatingIndex < start) {
                // check right half
                left = mid + 1;
            } else if (violatingIndex > end) {
                // check left half
                right = mid - 1;
            } else {
                // violatingIndex falls in between start and end
                return true;
            }
        }

        return false;
    }
}


or


class Solution {

    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        boolean[] ans = new boolean[queries.length];
        int[] prefix = new int[nums.length];
        prefix[0] = 0;

        for (int i = 1; i < nums.length; i++) {
            if (nums[i] % 2 == nums[i - 1] % 2) {
                // new violative index found
                prefix[i] = prefix[i - 1] + 1;
            } else {
                prefix[i] = prefix[i - 1];
            }
        }

        for (int i = 0; i < queries.length; i++) {
            int[] query = queries[i];
            int start = query[0];
            int end = query[1];

            ans[i] = prefix[end] - prefix[start] == 0;
        }

        return ans;
    }
}


or


class Solution {

    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] maxReach = new int[n];

        // Step 1: Compute the maximum reachable index for each starting index from last to first
        maxReach[n - 1] = n - 1; // The last index can only reach itself
        for (int i = n - 2; i >= 0; i--) {
            // Check if adjacent elements have different parity
            if ((nums[i] % 2) != (nums[i + 1] % 2)) {
                maxReach[i] = maxReach[i + 1]; // Extend the reach
            } else {
                maxReach[i] = i; // Can only reach itself
            }
        }

        boolean[] ans = new boolean[queries.length];

        // Step 2: Answer each query based on precomputed 'maxReach'
        for (int i = 0; i < queries.length; i++) {
            int start = queries[i][0];
            int end = queries[i][1];

            // Check if the query range [start, end] lies within the max reachable range
            ans[i] = end <= maxReach[start];
        }

        return ans;
    }
}



or



class Solution {
    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        boolean[] ans = new boolean[queries.length];
        int[] ps = new int[nums.length];
        for(int i=1;i<nums.length;i++){
            ps[i] = ps[i-1];
            if(nums[i-1]%2 == nums[i]%2){
                ps[i]++;
            }
        }
        for(int i=0;i<queries.length;i++){
            int from = queries[i][0],to = queries[i][1];
            int cnt = ps[to] - ps[from];
            ans[i] = cnt>0 ? false : true;
        }
        return ans;
    }
}



or



class Solution {
    public boolean[] isArraySpecial(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] prefix = new int[n]; // Prefix array to count special pairs
        boolean[] result = new boolean[queries.length]; // Result array
        
        // Step 1: Build the prefix array
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1];
            if ((nums[i - 1] % 2 == 0 && nums[i] % 2 == 0) || 
                (nums[i - 1] % 2 != 0 && nums[i] % 2 != 0)) {
                prefix[i]++;
            }
        }

        // Step 2: Process each query
        for (int i = 0; i < queries.length; i++) {
            int left = queries[i][0];
            int right = queries[i][1];
            
            // Calculate the number of special pairs in the range
            int specialCount = prefix[right] - (left > 0 ? prefix[left] : 0);
            
            // If no special pairs, the result is true; otherwise, false
            result[i] = (specialCount == 0);
        }

        return result;
    }
}


or



class Solution {
    public boolean[] isArraySpecial(int[] A , int[][] Q){
        List<Integer> B = new ArrayList<>();
        for(int i = 1 ; i < A.length ; i++){
            if(A[i] % 2 == A[i - 1] % 2){
                B.add(i);
            }
        }
        boolean[] ans = new boolean[Q.length];
        for(int i = 0 ; i < Q.length ; i++){
            int L = BinarySearch(Q[i][0] , B);
            int R = BinarySearch(Q[i][1] , B);
            if(R - L == 0) ans[i] = true;
            else ans[i] = false;
        }
        return ans;
    }

    private int BinarySearch(int Target , List<Integer> B){
        int Pos = B.size();
        int low = 0 , high = B.size() - 1;
        while(low <= high){
            int mid = (low + high)/2;
            if(B.get(mid) > Target){
                Pos = mid;
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return Pos;
    }
}


or

class Solution {
    public boolean[] isArraySpecial(int[] A, int[][] Q) {
        int[] P = new int[A.length];
        for(int i = 1 ; i < A.length ; i++){
            P[i] = P[i-1] + (A[i-1] % 2 != A[i] % 2 ? 1 : 0);
        }
        boolean[] ans = new boolean[Q.length];
        for(int i = 0 ; i < Q.length ; i++){
            int Count = P[Q[i][1]] - P[Q[i][0]];
            int Total = Q[i][1] - Q[i][0];
            if(Total == Count) ans[i] = true;
            else ans[i] = false;
        }
        return ans;
    }
}


