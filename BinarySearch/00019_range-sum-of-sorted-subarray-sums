https://leetcode.com/problems/range-sum-of-sorted-subarray-sums/description/

1508. Range Sum of Sorted Subarray Sums
Medium
Topics
Companies
Hint
You are given the array nums consisting of n positive integers. You computed the sum of all non-empty continuous subarrays from the array and then sorted them in non-decreasing order, creating a new array of n * (n + 1) / 2 numbers.

Return the sum of the numbers from index left to index right (indexed from 1), inclusive, in the new array. Since the answer can be a huge number return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,2,3,4], n = 4, left = 1, right = 5
Output: 13 
Explanation: All subarray sums are 1, 3, 6, 10, 2, 5, 9, 3, 7, 4. After sorting them in non-decreasing order we have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 1 to ri = 5 is 1 + 2 + 3 + 3 + 4 = 13. 
Example 2:

Input: nums = [1,2,3,4], n = 4, left = 3, right = 4
Output: 6
Explanation: The given array is the same as example 1. We have the new array [1, 2, 3, 3, 4, 5, 6, 7, 9, 10]. The sum of the numbers from index le = 3 to ri = 4 is 3 + 3 = 6.
Example 3:

Input: nums = [1,2,3,4], n = 4, left = 1, right = 10
Output: 50
 

Constraints:

n == nums.length
1 <= nums.length <= 1000
1 <= nums[i] <= 100
1 <= left <= right <= n * (n + 1) / 2


# java


class Solution {
    public int rangeSum(int[] nums, int n, int left, int right) {
        int[] arr = new int[n * (n + 1) / 2];
        for (int i = 0, k = 0; i < n; ++i) {
            int s = 0;
            for (int j = i; j < n; ++j) {
                s += nums[j];
                arr[k++] = s;
            }
        }
        Arrays.sort(arr);
        int ans = 0;
        final int mod = (int) 1e9 + 7;
        for (int i = left - 1; i < right; ++i) {
            ans = (ans + arr[i]) % mod;
        }
        return ans;
    }
}


or



// bf brute


class Solution {

    public int rangeSum(int[] nums, int n, int left, int right) {
        ArrayList<Integer> storeSubarray = new ArrayList<>();
        for (int i = 0; i < nums.length; i++) {
            int sum = 0;
            // Iterate through all indices ahead of the current index.
            for (int j = i; j < nums.length; j++) {
                sum += nums[j];
                storeSubarray.add(sum);
            }
        }
        // Sort all subarray sum values in increasing order.
        Collections.sort(storeSubarray);

        // Find the sum of all values between left and right.
        int rangeSum = 0, mod = (int) 1e9 + 7;
        for (int i = left - 1; i <= right - 1; i++) {
            rangeSum = (rangeSum + storeSubarray.get(i)) % mod;
        }
        return rangeSum;
    }
}


or


class Solution {

    public int rangeSum(int[] nums, int n, int left, int right) {
        PriorityQueue<int[]> pq = new PriorityQueue<>(
            new Comparator<int[]>() {
                @Override
                public int compare(int[] o1, int[] o2) {
                    return o1[0] - o2[0];
                }
            }
        );
        for (int i = 0; i < n; i++) {
            pq.offer(new int[] { nums[i], i });
        }

        int ans = 0, mod = 1000000007;
        for (int i = 1; i <= right; i++) {
            int[] p = pq.poll();
            if (i >= left) ans = (ans + p[0]) % mod;
            if (p[1] < n - 1) {
                p[0] += nums[++p[1]];
                pq.offer(p);
            }
        }
        return ans;
    }
}



or


import java.util.*;

public class Solution {

    private static final int MOD = 1000000007;

    public int rangeSum(int[] nums, int n, int left, int right) {
        long result =
            (sumOfFirstK(nums, n, right) - sumOfFirstK(nums, n, left - 1)) %
            MOD;
        // Ensure non-negative result
        return (int) ((result + MOD) % MOD);
    }

    // Helper function to count subarrays with sum <= target and their total sum.
    private Map.Entry<Integer, Long> countAndSum(
        int[] nums,
        int n,
        int target
    ) {
        int count = 0;
        long currentSum = 0, totalSum = 0, windowSum = 0;
        for (int j = 0, i = 0; j < n; ++j) {
            currentSum += nums[j];
            windowSum += nums[j] * (j - i + 1);
            while (currentSum > target) {
                windowSum -= currentSum;
                currentSum -= nums[i++];
            }
            count += j - i + 1;
            totalSum += windowSum;
        }
        return new AbstractMap.SimpleEntry<>(count, totalSum);
    }

    // Helper function to find the sum of the first k smallest subarray sums.
    private long sumOfFirstK(int[] nums, int n, int k) {
        int minSum = Arrays.stream(nums).min().getAsInt();
        int maxSum = Arrays.stream(nums).sum();
        int left = minSum, right = maxSum;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (countAndSum(nums, n, mid).getKey() >= k) right = mid - 1;
            else left = mid + 1;
        }
        Map.Entry<Integer, Long> result = countAndSum(nums, n, left);
        // There can be more subarrays with the same sum of left.
        return result.getValue() - left * (result.getKey() - k);
    }
}



or


class Solution {
    public int rangeSum(int[] nums, int n, int left, int right) {
        final int MOD = 1000000007;
        
        int[] prefix = new int[n + 1];
        for (int i = 0; i < n; i++) {
            prefix[i + 1] = prefix[i] + nums[i];
        }
        
        PriorityQueue<Integer> minHeap = new PriorityQueue<>();
        
        for (int i = 1; i <= n; i++) {
            for (int j = 0; j < i; j++) {
                minHeap.offer(prefix[i] - prefix[j]);
            }
        }
        
        long result = 0;
        for (int i = 1; i <= right; i++) {
            int sum_value = minHeap.poll();
            if (i >= left) {
                result = (result + sum_value) % MOD;
            }
        }
        
        return (int) result;
    }
}



or




class Solution {
    public int rangeSum(int[] nums, int n, int left, int right) {
        List<Integer> subarraySum = new ArrayList<>();
        
        // Calculating sum of subarrays
        for (int i = 0; i < nums.length; i++) {
            int sum = 0;
            for (int j = i; j < nums.length; j++) {
                sum += nums[j];
                subarraySum.add(sum);
            }
        }
        
        // Sort the subarray sums
        Collections.sort(subarraySum);
        
        // Return the result
        long result = 0;
        int mod = (int)(1e9 + 7);
        for (int i = left - 1; i < right; i++) {
            result = (result + subarraySum.get(i)) % mod;
        }
        return (int)result;
    }
}


or


// best

class Solution {
    private static final int mod = 1000000007;

    private static class Pair {
        int count;
        long total;

        Pair(int count, long total) {
            this.count = count;
            this.total = total;
        }
    }

    private static Pair fSumOfK(int[] nums, int n, int target) {
        long currSum = 0, window = 0, total = 0;
        int count = 0;
        for (int i = 0, j = 0; j < n; j++) {
            currSum += nums[j];
            window += nums[j] * (j - i + 1);
            while (target < currSum) {
                window -= currSum;
                currSum -= nums[i++];
            }
            total += window;
            count += j - i + 1;
        }
        return new Pair(count, total % mod);
    }

    private static int findSum(int[] nums, int n, int k) {
        long right = Arrays.stream(nums).sum();
        int left = Arrays.stream(nums).min().getAsInt();
        while (left <= right) {
            int mid = (left + (int) right) / 2;
            if (fSumOfK(nums, n, mid).count >= k) {
                right = mid - 1;
            } else {
                left = mid + 1;
            }
        }
        Pair result = fSumOfK(nums, n, left);
        return (int) ((result.total - left * (result.count - k)) % mod);
    }

    public int rangeSum(int[] nums, int n, int left, int right) {
        int res = (findSum(nums, n, right) - findSum(nums, n, left - 1)) % mod;
        return res;
    }
}

