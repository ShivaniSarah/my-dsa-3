https://leetcode.com/problems/maximum-distance-between-a-pair-of-values/description/


1855. Maximum Distance Between a Pair of Values
Medium
Topics
Companies
Hint
You are given two non-increasing 0-indexed integer arrays nums1​​​​​​ and nums2​​​​​​.

A pair of indices (i, j), where 0 <= i < nums1.length and 0 <= j < nums2.length, is valid if both i <= j and nums1[i] <= nums2[j]. The distance of the pair is j - i​​​​.

Return the maximum distance of any valid pair (i, j). If there are no valid pairs, return 0.

An array arr is non-increasing if arr[i-1] >= arr[i] for every 1 <= i < arr.length.

 

Example 1:

Input: nums1 = [55,30,5,4,2], nums2 = [100,20,10,10,5]
Output: 2
Explanation: The valid pairs are (0,0), (2,2), (2,3), (2,4), (3,3), (3,4), and (4,4).
The maximum distance is 2 with pair (2,4).
Example 2:

Input: nums1 = [2,2,2], nums2 = [10,10,1]
Output: 1
Explanation: The valid pairs are (0,0), (0,1), and (1,1).
The maximum distance is 1 with pair (0,1).
Example 3:

Input: nums1 = [30,29,19,5], nums2 = [25,25,25,25,25]
Output: 2
Explanation: The valid pairs are (2,2), (2,3), (2,4), (3,3), and (3,4).
The maximum distance is 2 with pair (2,4).
 

Constraints:

1 <= nums1.length, nums2.length <= 105
1 <= nums1[i], nums2[j] <= 105
Both nums1 and nums2 are non-increasing.



# java


class Solution {
  public int maxDistance(int[] nums1, int[] nums2) {
    int ans = 0;
    int i = 0;
    int j = 0;

    while (i < nums1.length && j < nums2.length)
      if (nums1[i] > nums2[j])
        ++i;
      else
        ans = Math.max(ans, j++ - i);

    return ans;
  }
}




or




class Solution {
  public int maxDistance(int[] nums1, int[] nums2) {
    int i = 0;
    int j = 0;

    for (; i < nums1.length && j < nums2.length; ++j)
      if (nums1[i] > nums2[j])
        ++i;

    return i == j ? 0 : j - i - 1;
  }
}





or



class Solution {
    public int maxDistance(int[] nums1, int[] nums2) {
        int ans = 0;
        int m = nums1.length, n = nums2.length;
        for (int i = 0; i < m; ++i) {
            int left = i, right = n - 1;
            while (left < right) {
                int mid = (left + right + 1) >> 1;
                if (nums2[mid] >= nums1[i]) {
                    left = mid;
                } else {
                    right = mid - 1;
                }
            }
            ans = Math.max(ans, left - i);
        }
        return ans;
    }
}


or



class Solution {
   public int maxDistance(int[] n1, int[] n2) {
    int i = 0, j = 0, res = 0;
    while (i < n1.length && j < n2.length)
        if (n1[i] > n2[j])
            ++i;
        else
            res = Math.max(res, j++ - i);
    return res;
}
}


or


class Solution {
    public int maxDistance(int[] nums1, int[] nums2) {
        int max = 0;
        for (int i = 0; i < nums1.length; i++) {
            int r = nums2.length - 1;
            int l = i;
            int m = i;
            while (l <= r) {
                m = l + (r - l) / 2;
                if (nums1[i] > nums2[m]) {
                    r = m - 1;
                } else if (nums1[i] == nums2[m]) {
                    l = m + 1;
                } else {
                    l = m + 1;
                }
            }
            if (r < 0) {
                continue;
            }
            max = Math.max(max, r - i);
        }
        return max;
    }
}



or


class Solution {
    public int maxDistance(int[] nums1, int[] nums2) {
        int i = 0;
        int j = 0;
        int ans = 0;
        while(i<nums1.length && j<nums2.length){
            if(nums1[i] <= nums2[j]){
                ans = Math.max(ans,j-i);
                j++; 
            }
            else{
                i++;
            }  
            
        }
        return ans;
    }
}



