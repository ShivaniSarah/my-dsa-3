https://leetcode.com/problems/find-latest-group-of-size-m/description/

1562. Find Latest Group of Size M
Medium
Topics
Companies
Hint
Given an array arr that represents a permutation of numbers from 1 to n.

You have a binary string of size n that initially has all its bits set to zero. At each step i (assuming both the binary string and arr are 1-indexed) from 1 to n, the bit at position arr[i] is set to 1.

You are also given an integer m. Find the latest step at which there exists a group of ones of length m. A group of ones is a contiguous substring of 1's such that it cannot be extended in either direction.

Return the latest step at which there exists a group of ones of length exactly m. If no such group exists, return -1.

 

Example 1:

Input: arr = [3,5,1,2,4], m = 1
Output: 4
Explanation: 
Step 1: "00100", groups: ["1"]
Step 2: "00101", groups: ["1", "1"]
Step 3: "10101", groups: ["1", "1", "1"]
Step 4: "11101", groups: ["111", "1"]
Step 5: "11111", groups: ["11111"]
The latest step at which there exists a group of size 1 is step 4.
Example 2:

Input: arr = [3,1,5,4,2], m = 2
Output: -1
Explanation: 
Step 1: "00100", groups: ["1"]
Step 2: "10100", groups: ["1", "1"]
Step 3: "10101", groups: ["1", "1", "1"]
Step 4: "10111", groups: ["1", "111"]
Step 5: "11111", groups: ["11111"]
No group of size 2 exists during any step.
 

Constraints:

n == arr.length
1 <= m <= n <= 105
1 <= arr[i] <= n
All integers in arr are distinct.


# java


class Solution {
  public int findLatestStep(int[] arr, int m) {
    if (arr.length == m)
      return arr.length;

    int ans = -1;
    int step = 0;
    // sizes[i] := the size of the group starting from i or ending in i
    // (1-indexed)
    int[] sizes = new int[arr.length + 2];

    for (final int i : arr) {
      ++step;
      // In the previous step, there exists a group with a size of m.
      if (sizes[i - 1] == m || sizes[i + 1] == m)
        ans = step - 1;
      final int head = i - sizes[i - 1];
      final int tail = i + sizes[i + 1];
      sizes[head] = tail - head + 1;
      sizes[tail] = tail - head + 1;
    }

    return ans;
  }
}


or



class Solution {
    private int[] p;
    private int[] size;

    public int findLatestStep(int[] arr, int m) {
        int n = arr.length;
        if (m == n) {
            return n;
        }
        boolean[] vis = new boolean[n];
        p = new int[n];
        size = new int[n];
        for (int i = 0; i < n; ++i) {
            p[i] = i;
            size[i] = 1;
        }
        int ans = -1;
        for (int i = 0; i < n; ++i) {
            int v = arr[i] - 1;
            if (v > 0 && vis[v - 1]) {
                if (size[find(v - 1)] == m) {
                    ans = i;
                }
                union(v, v - 1);
            }
            if (v < n - 1 && vis[v + 1]) {
                if (size[find(v + 1)] == m) {
                    ans = i;
                }
                union(v, v + 1);
            }
            vis[v] = true;
        }
        return ans;
    }

    private int find(int x) {
        if (p[x] != x) {
            p[x] = find(p[x]);
        }
        return p[x];
    }

    private void union(int a, int b) {
        int pa = find(a), pb = find(b);
        if (pa == pb) {
            return;
        }
        p[pa] = pb;
        size[pb] += size[pa];
    }
}


or



class Solution {
    public int findLatestStep(int[] arr, int m) {
        		int n = arr.length;
        if(m == n)
            return n;
        
        TreeSet<Integer> walls = new TreeSet<Integer>();
        walls.add(0);
        walls.add(n+1);
        
        for(int i=n-1;i>=0;i--){
            int left = walls.floor(arr[i]);
            int right = walls.ceiling(arr[i]);
            if(arr[i]-left-1 == m || right-arr[i]-1 == m)
                return i;
            walls.add(arr[i]);
        }
        
        return -1;
    }
}



or



class Solution {
    public int findLatestStep(int[] A, int m) {
        int res = -1, n = A.length;
        if (n == m) return n;
        int[] length = new int[n + 2];
        for (int i = 0; i < n; ++i) {
            int a = A[i], left = length[a - 1], right = length[a + 1];
            length[a - left] = length[a + right] = left + right + 1;
            if (left == m || right == m) res = i;
        }
        return res;
    }
}



or



class Solution {
    public int findLatestStep(int[] arr, int m) {
        int n = arr.length;
        if (m == n) return n;
        int step = -1;
        int[] map = new int[n + 1];
        int countOfM = 0;
        for (int i = 0; i < arr.length; i++) {
            int current = arr[i];
            int count = 1;
            int leftSpan = 0;
            int rightSpan = 0;
			// If the left side is not 0
            if (current - 1 > 0 && map[current - 1] != 0) {
				// count how many 1s does left side have
                leftSpan = map[current - 1];
				// cause we connect left and right side. 
                if (leftSpan == m) {
                    countOfM--;
                }
				// modify our count of 1s
                count += leftSpan;
				// update the left side
                map[current - 1] = 0;
                
            }
            if (current + 1 <= n && map[current + 1] != 0) {
                rightSpan = map[current + 1];
                if (rightSpan == m) {
                    countOfM--;
                }
                count += rightSpan;
                map[current + 1] = 0;
            }
            
            map[current - leftSpan] = count;
            map[current + rightSpan] = count;
            if (count == m) countOfM++;
            if (countOfM > 0) step = i + 1;
        }
        return step;
    }
}


or




class Solution {
    int[] par, size, count, bits;    
    // par: parent array, tells about whose it the parent of ith element
    // size: it tells the size of component
    // count: it tells the count of islands (1111 etc) of size i;
    // count[3] = 4: ie -> there are 4 islands of size 3
    
    public int find(int u) {
        if (u == par[u]) return u;
        par[u] = find(par[u]);
        return par[u];
    }
    
    public void union(int u, int v) {
        // union is performed over parents of elements not nodes itself
        int p1 = find(u), p2 = find(v);
        if (p1 == p2) return;
        
        // decrease the count of islands of size p1, p2
        count[size[p1]]--;
        count[size[p2]]--;
        
        // now merge
        par[p2] = p1;
        
        // adjust sizes
        size[p1] += size[p2];
        
        // adjust the count of islands of new size ie: size of p1
        count[size[p1]]++;
    }
    
    public int findLatestStep(int[] arr, int m) {
        int n = arr.length;
        par = new int[n + 1];
        size = new int[n + 1];
        count = new int[n + 1];
        bits = new int[n + 2];
        
        for (int i = 0; i < n; i++) {
            par[i] = i;
            size[i] = 1;
        }
        
        int ans = -1;
        for (int i = 0; i < n; i++) {
            int idx = arr[i];
            // set the bit
            bits[idx] = 1;
            // increase the count of islands of size 1
            count[1]++;
            
            if (bits[idx - 1] > 0) {
                union(idx, idx - 1);
            }   
            if (bits[idx + 1] > 0) {
                union(idx, idx + 1);
            }
            
            // check if island of size m exists
            if (count[m] > 0) {
                ans = i + 1;
                // as it is 1 based indexing
            }
        }
        return ans;
    }
}



or


class Solution {
    public int findLatestStep(int[] A, int m) {
        int res = -1, n = A.length;
        if (n == m) return n;
        int[] length = new int[n + 2];
        for (int i = 0; i < n; ++i) {
            int a = A[i], left = length[a - 1], right = length[a + 1];
            length[a - left] = length[a + right] = left + right + 1;
            if (left == m || right == m) res = i;
        }
        return res;
    }
}


or


