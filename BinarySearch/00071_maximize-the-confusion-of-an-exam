https://leetcode.com/problems/maximize-the-confusion-of-an-exam/description/

2024. Maximize the Confusion of an Exam
Medium
Topics
Companies
Hint
A teacher is writing a test with n true/false questions, with 'T' denoting true and 'F' denoting false. He wants to confuse the students by maximizing the number of consecutive questions with the same answer (multiple trues or multiple falses in a row).

You are given a string answerKey, where answerKey[i] is the original answer to the ith question. In addition, you are given an integer k, the maximum number of times you may perform the following operation:

Change the answer key for any question to 'T' or 'F' (i.e., set answerKey[i] to 'T' or 'F').
Return the maximum number of consecutive 'T's or 'F's in the answer key after performing the operation at most k times.

 

Example 1:

Input: answerKey = "TTFF", k = 2
Output: 4
Explanation: We can replace both the 'F's with 'T's to make answerKey = "TTTT".
There are four consecutive 'T's.
Example 2:

Input: answerKey = "TFFT", k = 1
Output: 3
Explanation: We can replace the first 'T' with an 'F' to make answerKey = "FFFT".
Alternatively, we can replace the second 'T' with an 'F' to make answerKey = "TFFF".
In both cases, there are three consecutive 'F's.
Example 3:

Input: answerKey = "TTFTTFTT", k = 1
Output: 5
Explanation: We can replace the first 'F' to make answerKey = "TTTTTFTT"
Alternatively, we can replace the second 'F' to make answerKey = "TTFTTTTT". 
In both cases, there are five consecutive 'T's.
 

Constraints:

n == answerKey.length
1 <= n <= 5 * 104
answerKey[i] is either 'T' or 'F'
1 <= k <= n



# java


class Solution {
  public int maxConsecutiveAnswers(String answerKey, int k) {
    int ans = 0;
    int maxCount = 0;
    int[] count = new int[2];

    for (int l = 0, r = 0; r < answerKey.length(); ++r) {
      maxCount = Math.max(maxCount, ++count[answerKey.charAt(r) == 'T' ? 1 : 0]);
      while (maxCount + k < r - l + 1)
        --count[answerKey.charAt(l++) == 'T' ? 1 : 0];
      ans = Math.max(ans, r - l + 1);
    }

    return ans;
  }
}


or



class Solution {
    public int maxConsecutiveAnswers(String answerKey, int k) {
        return Math.max(get('T', k, answerKey), get('F', k, answerKey));
    }

    public int get(char c, int k, String answerKey) {
        int l = 0, r = 0;
        while (r < answerKey.length()) {
            if (answerKey.charAt(r++) == c) {
                --k;
            }
            if (k < 0 && answerKey.charAt(l++) == c) {
                ++k;
            }
        }
        return r - l;
    }
}




or



class Solution {
    public int maxConsecutiveAnswers(String answerKey, int k) {
        int countF = 0; int countT=0;
        int i = 0; int j = 0;
        int ans = 0;
        while(j<answerKey.length()){
            if(answerKey.charAt(j)=='F')countF++;
            else countT++;
            while (Math.min(countF,countT)>k){
                if(answerKey.charAt(i)=='F')countF--;
                else countT--;
                i++;
            }
            ans = Math.max(ans,countF+countT);
            j++;
        }
        return ans;
    }
}



or



class Solution {
    public int maxConsecutiveAnswers(String answerKey, int k) {
        int n = answerKey.length();
        int maxConsecutive = 0;
        int maxCount = 0;
        int left = 0;
        int[] counts = new int[26];
        
        for (int right = 0; right < n; right++) {
            counts[answerKey.charAt(right) - 'A']++;
            maxCount = Math.max(maxCount, counts[answerKey.charAt(right) - 'A']);
            
            while (right - left + 1 - maxCount > k) {
                counts[answerKey.charAt(left) - 'A']--;
                left++;
            }
            
            maxConsecutive = Math.max(maxConsecutive, right - left + 1);
        }
        
        return maxConsecutive;
    }
}



or


class Solution {



    private int bs(int[] ps , int n ,int I, int k){

        int lo = I+1;
        int hi = n-1;
        int idx = -1;
        int prevTrue = (I==0) ? 0 : ps[I-1];

        // TTTTTFFFFFFF
        while(lo<=hi){
            int mid = lo+((hi-lo)/2); // (lo+hi)>>1
            int currTrue = ps[mid]-prevTrue;
            int currLen = mid-I+1;
            int currFalse = currLen-currTrue;
            if(currTrue <= k || currFalse <= k){// 
                lo = mid+1;
                idx = mid;
            }
            else{
                hi = mid-1;
            }
        }

        return idx;

    }
    public int maxConsecutiveAnswers(String s, int k) {
        int n = s.length();

        int[] ps = new int[n];// count of True
        ps[0] = (s.charAt(0) == 'T') ? 1:0;
        for(int i=1;i<n;i++){
            if(s.charAt(i) == 'T'){
                ps[i] = ps[i-1]+1;
            }
            else{
                ps[i] = ps[i-1];
            }   
        }
        int ans = 1;
        for(int i=0;i<n;i++){
            int idx = bs(ps,n,i,k);
            if(idx == -1){
                continue;
            }
            int len = idx-i+1;
            ans = Math.max(ans,len);
        }
        return ans;
    }
}



