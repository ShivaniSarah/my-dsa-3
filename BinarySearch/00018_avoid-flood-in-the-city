https://leetcode.com/problems/avoid-flood-in-the-city/description/


1488. Avoid Flood in The City
Medium
Topics
Companies
Hint
Your country has an infinite number of lakes. Initially, all the lakes are empty, but when it rains over the nth lake, the nth lake becomes full of water. If it rains over a lake that is full of water, there will be a flood. Your goal is to avoid floods in any lake.

Given an integer array rains where:

rains[i] > 0 means there will be rains over the rains[i] lake.
rains[i] == 0 means there are no rains this day and you can choose one lake this day and dry it.
Return an array ans where:

ans.length == rains.length
ans[i] == -1 if rains[i] > 0.
ans[i] is the lake you choose to dry in the ith day if rains[i] == 0.
If there are multiple valid answers return any of them. If it is impossible to avoid flood return an empty array.

Notice that if you chose to dry a full lake, it becomes empty, but if you chose to dry an empty lake, nothing changes.

 

Example 1:

Input: rains = [1,2,3,4]
Output: [-1,-1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day full lakes are [1,2,3]
After the fourth day full lakes are [1,2,3,4]
There's no day to dry any lake and there is no flood in any lake.
Example 2:

Input: rains = [1,2,0,0,2,1]
Output: [-1,-1,2,1,-1,-1]
Explanation: After the first day full lakes are [1]
After the second day full lakes are [1,2]
After the third day, we dry lake 2. Full lakes are [1]
After the fourth day, we dry lake 1. There is no full lakes.
After the fifth day, full lakes are [2].
After the sixth day, full lakes are [1,2].
It is easy that this scenario is flood-free. [-1,-1,1,2,-1,-1] is another acceptable scenario.
Example 3:

Input: rains = [1,2,0,1,2]
Output: []
Explanation: After the second day, full lakes are  [1,2]. We have to dry one lake in the third day.
After that, it will rain over lakes [1,2]. It's easy to prove that no matter which lake you choose to dry in the 3rd day, the other one will flood.
 

Constraints:

1 <= rains.length <= 105
0 <= rains[i] <= 109



# java


class Solution {
  public int[] avoidFlood(int[] rains) {
    int[] ans = new int[rains.length];
    Arrays.fill(ans, -1);
    Map<Integer, Integer> lakeIdToFullDay = new HashMap<>();
    TreeSet<Integer> emptyDays = new TreeSet<>(); // indices of rains[i] == 0

    for (int i = 0; i < rains.length; ++i) {
      final int lakeId = rains[i];
      if (lakeId == 0) {
        emptyDays.add(i);
        continue;
      }
      if (lakeIdToFullDay.containsKey(lakeId)) {
        final int fullDay = lakeIdToFullDay.get(lakeId);
        // The lake was full in a previous day. Greedily find the closest day
        // to make the lake empty.
        Integer emptyDay = emptyDays.higher(fullDay);
        if (emptyDay == null) // Not found.
          return new int[] {};
        // Empty the lake at this day.
        ans[emptyDay] = lakeId;
        emptyDays.remove(emptyDay);
      }
      // The lake with `lakeId` becomes full at the day `i`.
      lakeIdToFullDay.put(lakeId, i);
    }

    // Empty an arbitrary lake if there are remaining empty days.
    for (final int emptyDay : emptyDays)
      ans[emptyDay] = 1;

    return ans;
  }
}



or



class Solution {
    public int[] avoidFlood(int[] rains) {
        int n = rains.length;
        int[] ans = new int[n];
        Arrays.fill(ans, -1);
        TreeSet<Integer> sunny = new TreeSet<>();
        Map<Integer, Integer> rainy = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            int v = rains[i];
            if (v > 0) {
                if (rainy.containsKey(v)) {
                    Integer t = sunny.higher(rainy.get(v));
                    if (t == null) {
                        return new int[0];
                    }
                    ans[t] = v;
                    sunny.remove(t);
                }
                rainy.put(v, i);
            } else {
                sunny.add(i);
                ans[i] = 1;
            }
        }
        return ans;
    }
}


or


class Solution {
    public int[] avoidFlood(int[] rains) {
        // the previous appeared idx of rains[i]
        Map<Integer, Integer> map = new HashMap<>();
        TreeSet<Integer> zeros = new TreeSet<>();
        int[] res = new int[rains.length];
        for (int i = 0; i < rains.length; i++) {
            if (rains[i] == 0) {
                zeros.add(i);
            } else {
                if (map.containsKey(rains[i])) {
                    // find the location of zero that can be used to empty rains[i]
                    Integer next = zeros.ceiling(map.get(rains[i]));
                    if (next == null) return new int[0];
                    res[next] = rains[i];
                    zeros.remove(next);
                }
                res[i] = -1;
				map.put(rains[i], i);
            }
        }
        for (int i : zeros) res[i] = 1;
        return res;
    }
}


or


class Solution {
    int getNearestDryDay(List<Integer> dryDays, int targetDay) //returns the nearest dry day after targetDay
    {
        int low = 0, high = dryDays.size() - 1;
        int ans = -1, index = -1;
        while(low <= high)
        {
            int mid = low + (high - low) / 2;
            int currDay = dryDays.get(mid);
            if (currDay > targetDay) { index = mid; ans = currDay; high = mid - 1; }
            else low = mid + 1;
        }
        if (index != -1) dryDays.remove(index);
        return ans;
    }
    public int[] avoidFlood(int[] rains) 
    {
        HashMap<Integer, Integer>fullMap = new HashMap(); //{lakeIdx : day} 
        int n = rains.length;
        int[] ans = new int[n];
        Arrays.fill(ans, 1);
        //=========================================================
        List<Integer>dryDays = new ArrayList();
        for (int i = 0; i < n; i++) //i denotes the ith day
        {
            int lakeIdx = rains[i]; 
            if (lakeIdx == 0) { dryDays.add(i); continue; }  //no rain over any lake
            
            if (fullMap.containsKey(lakeIdx)) //if current lake is already full
            {
                int lastDrenchedDay = fullMap.get(lakeIdx); //day when "lakeIdx"th lake was last drenched
                int nearestDryDay = getNearestDryDay(dryDays, lastDrenchedDay);
                
                if (nearestDryDay == -1) return new int[]{};
                ans[nearestDryDay] = lakeIdx;
            }
            fullMap.put(lakeIdx, i);
            ans[i] = -1;
        }
        //===========================================================
        return ans;
    }
}


