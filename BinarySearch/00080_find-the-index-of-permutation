https://leetcode.com/problems/find-the-index-of-permutation/description/

3109. Find the Index of Permutation ðŸ”’
Description
Given an array perm of length n which is a permutation of [1, 2, ..., n], return the index of perm in the lexicographically sorted array of all of the permutations of [1, 2, ..., n].

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: perm = [1,2]

Output: 0

Explanation:

There are only two permutations in the following order:

[1,2], [2,1]

And [1,2] is at index 0.

Example 2:

Input: perm = [3,1,2]

Output: 4

Explanation:

There are only six permutations in the following order:

[1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], [3,2,1]

And [3,1,2] is at index 4.

 

Constraints:

1 <= n == perm.length <= 105
perm is a permutation of [1, 2, ..., n].


# java


class FenwickTree {
  public FenwickTree(int n) {
    sums = new int[n + 1];
  }

  public void add(int i, int delta) {
    while (i < sums.length) {
      sums[i] += delta;
      i += lowbit(i);
    }
  }

  public int get(int i) {
    int sum = 0;
    while (i > 0) {
      sum += sums[i];
      i -= lowbit(i);
    }
    return sum;
  }

  private int[] sums;

  private static int lowbit(int i) {
    return i & -i;
  }
}

class Solution {
  public int getPermutationIndex(int[] perm) {
    final int MOD = 1_000_000_007;
    final int n = perm.length;
    int ans = 0;
    FenwickTree tree = new FenwickTree(n);
    int[] fact = new int[n + 1]; // fact[i] := i!
    Arrays.fill(fact, 1);

    for (int i = 2; i <= n; ++i)
      fact[i] = (int) ((fact[i - 1] * (long) i) % MOD);

    for (int i = 0; i < n; ++i) {
      final int num = perm[i];
      // the number of unused numbers less than `num`
      final int unusedNums = num - 1 - tree.get(num - 1);
      final int suffixLength = fact[n - 1 - i];
      ans = (int) ((ans + unusedNums * (long) suffixLength) % MOD);
      tree.add(num, 1);
    }

    return ans;
  }
}



or



class BinaryIndexedTree {
    private int n;
    private int[] c;

    public BinaryIndexedTree(int n) {
        this.n = n;
        this.c = new int[n + 1];
    }

    public void update(int x, int delta) {
        for (; x <= n; x += x & -x) {
            c[x] += delta;
        }
    }

    public int query(int x) {
        int s = 0;
        for (; x > 0; x -= x & -x) {
            s += c[x];
        }
        return s;
    }
}

class Solution {
    public int getPermutationIndex(int[] perm) {
        final int mod = (int) 1e9 + 7;
        long ans = 0;
        int n = perm.length;
        BinaryIndexedTree tree = new BinaryIndexedTree(n + 1);
        long[] f = new long[n];
        f[0] = 1;
        for (int i = 1; i < n; ++i) {
            f[i] = f[i - 1] * i % mod;
        }
        for (int i = 0; i < n; ++i) {
            int cnt = perm[i] - 1 - tree.query(perm[i]);
            ans = (ans + cnt * f[n - i - 1] % mod) % mod;
            tree.update(perm[i], 1);
        }
        return (int) ans;
    }
}
