https://leetcode.com/problems/maximum-beauty-of-an-array-after-applying-operation/


2779. Maximum Beauty of an Array After Applying Operation
Medium
Topics
Companies
Hint
You are given a 0-indexed array nums and a non-negative integer k.

In one operation, you can do the following:

Choose an index i that hasn't been chosen before from the range [0, nums.length - 1].
Replace nums[i] with any integer from the range [nums[i] - k, nums[i] + k].
The beauty of the array is the length of the longest subsequence consisting of equal elements.

Return the maximum possible beauty of the array nums after applying the operation any number of times.

Note that you can apply the operation to each index only once.

A subsequence of an array is a new array generated from the original array by deleting some elements (possibly none) without changing the order of the remaining elements.

 

Example 1:

Input: nums = [4,6,1,2], k = 2
Output: 3
Explanation: In this example, we apply the following operations:
- Choose index 1, replace it with 4 (from range [4,8]), nums = [4,4,1,2].
- Choose index 3, replace it with 4 (from range [0,4]), nums = [4,4,1,4].
After the applied operations, the beauty of the array nums is 3 (subsequence consisting of indices 0, 1, and 3).
It can be proven that 3 is the maximum possible length we can achieve.
Example 2:

Input: nums = [1,1,1,1], k = 10
Output: 4
Explanation: In this example we don't have to apply any operations.
The beauty of the array nums is 4 (whole array).
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i], k <= 105



# java



class Solution {
  public int maximumBeauty(int[] nums, int k) {
    int ans = 0;

    Arrays.sort(nums);

    for (int l = 0, r = 0; r < nums.length; ++r) {
      while (nums[r] - nums[l] > 2 * k)
        ++l;
      ans = Math.max(ans, r - l + 1);
    }

    return ans;
  }
}



or



class Solution {
  public int maximumBeauty(int[] nums, int k) {
    // l and r track the maximum window instead of the valid window.
    int l = 0;
    int r = 0;

    Arrays.sort(nums);

    for (r = 0; r < nums.length; ++r)
      if (nums[r] - nums[l] > 2 * k)
        ++l;

    return r - l;
  }
}





or




class Solution {
    public int maximumBeauty(int[] nums, int k) {
        int m = Arrays.stream(nums).max().getAsInt() + k * 2 + 2;
        int[] d = new int[m];
        for (int x : nums) {
            d[x]++;
            d[x + k * 2 + 1]--;
        }
        int ans = 0, s = 0;
        for (int x : d) {
            s += x;
            ans = Math.max(ans, s);
        }
        return ans;
    }
}


or



class Solution {

    public int maximumBeauty(int[] nums, int k) {
        Arrays.sort(nums);
        int maxBeauty = 0;

        for (int i = 0; i < nums.length; i++) {
            // Find the farthest index where the value is within the range [nums[i], nums[i] + 2*k]
            int upperBound = findUpperBound(nums, nums[i] + 2 * k);
            // Update the maximum beauty based on the current range
            maxBeauty = Math.max(maxBeauty, upperBound - i + 1);
        }
        return maxBeauty;
    }

    // Helper function to find the largest index where arr[index] <= val
    private int findUpperBound(int[] arr, int val) {
        int low = 0, high = arr.length - 1, result = 0;

        // Perform binary search to find the upper bound
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] <= val) {
                result = mid; // Update the result and move to the right half
                low = mid + 1;
            } else {
                high = mid - 1; // Move to the left half
            }
        }
        return result;
    }
}


or





class Solution {

    public int maximumBeauty(int[] nums, int k) {
        Arrays.sort(nums);
        int right = 0; // Pointer for the end of the valid range
        int maxBeauty = 0;

        // Iterate through the array with the left pointer
        for (int left = 0; left < nums.length; left++) {
            // Expand the right pointer while the range condition is met
            while (right < nums.length && nums[right] - nums[left] <= 2 * k) {
                right++;
            }
            // Update the maximum beauty based on the current range
            // We do not add 1 here as right is already pointing to one position beyond the valid range.
            maxBeauty = Math.max(maxBeauty, right - left);
        }
        return maxBeauty;
    }
}



or



class Solution {

    public int maximumBeauty(int[] nums, int k) {
        // If there's only one element, the maximum beauty is 1
        if (nums.length == 1) return 1;

        int maxBeauty = 0;
        int maxValue = 0;

        // Find the maximum value in the array
        for (int num : nums) maxValue = Math.max(maxValue, num);

        // Create an array to keep track of the count changes
        int[] count = new int[maxValue + 1];

        // Update the count array for each value's range [val - k, val + k]
        for (int num : nums) {
            count[Math.max(num - k, 0)]++; // Increment at the start of the range
            count[Math.min(num + k + 1, maxValue)]--; // Decrement after the range
        }

        int currentSum = 0; // Tracks the running sum of counts
        // Calculate the prefix sum and find the maximum value
        for (int val : count) {
            currentSum += val;
            maxBeauty = Math.max(maxBeauty, currentSum);
        }

        return maxBeauty;
    }
}



or


class Solution {
    public int maximumBeauty(int[] nums, int k) {
        int[] freq = new int[100001];
        int x_max = 0, x_min = 0;
        for (int x : nums) {
            freq[x]++;
            x_max = Math.max(x_max, x);
            x_min = Math.min(x_min, x);
        }
        int cnt = 0, maxCnt = 0;
        for (int l = x_min, r = x_min; r <= x_max; r++) {
            cnt += freq[r];
            while (r - l > 2 * k) {
                cnt -= freq[l];
                l++;
            }
            maxCnt = Math.max(maxCnt, cnt);
        }
        return maxCnt;
    }
}



or


import java.util.Arrays;

class Solution {
    public int maximumBeauty(int[] nums, int k) {
        Arrays.sort(nums);
        int res = 0;
        int left = 0;
        
        for (int right = 0; right < nums.length; right++) {
            int diff = nums[right] - nums[left];
            while (diff > 2 * k) {
                left++;
                diff = nums[right] - nums[left];
            }
            res = Math.max(res, right - left + 1);
        }
        return res;
    }
}



