https://leetcode.com/problems/separate-squares-i/description/

3453. Separate Squares I
Medium
Topics
Companies
Hint
You are given a 2D integer array squares. Each squares[i] = [xi, yi, li] represents the coordinates of the bottom-left point and the side length of a square parallel to the x-axis.

Find the minimum y-coordinate value of a horizontal line such that the total area of the squares above the line equals the total area of the squares below the line.

Answers within 10-5 of the actual answer will be accepted.

Note: Squares may overlap. Overlapping areas should be counted multiple times.

 

Example 1:

Input: squares = [[0,0,1],[2,2,1]]

Output: 1.00000

Explanation:



Any horizontal line between y = 1 and y = 2 will have 1 square unit above it and 1 square unit below it. The lowest option is 1.

Example 2:

Input: squares = [[0,0,2],[1,1,1]]

Output: 1.16667

Explanation:



The areas are:

Below the line: 7/6 * 2 (Red) + 1/6 (Blue) = 15/6 = 2.5.
Above the line: 5/6 * 2 (Red) + 5/6 (Blue) = 15/6 = 2.5.
Since the areas above and below the line are equal, the output is 7/6 = 1.16667.

 

Constraints:

1 <= squares.length <= 5 * 104
squares[i] = [xi, yi, li]
squares[i].length == 3
0 <= xi, yi <= 109
1 <= li <= 109
The total area of all the squares will not exceed 1012.



# java


class Solution {
  public double separateSquares(int[][] squares) {
    final double halfArea =
        Arrays.stream(squares).mapToDouble(square -> Math.pow(square[2], 2)).sum() / 2;
    List<int[]> events = new ArrayList<>();

    for (int[] square : squares) {
      final int y = square[1];
      final int l = square[2];
      events.add(new int[] {y, 1, l});     // start of square
      events.add(new int[] {y + l, 0, l}); // end of square
    }

    events.sort(Comparator.comparingInt(event -> event[0]));

    double area = 0;
    int width = 0;
    int prevY = 0;

    for (int[] event : events) {
      final int y = event[0];
      final int l = event[2];
      final double areaGain = width * (long) (y - prevY);
      if (area + areaGain >= halfArea)
        return prevY + (halfArea - area) / width;
      area += areaGain;
      width += (event[1] == 1) ? l : -l;
      prevY = y;
    }

    throw new IllegalArgumentException();
  }
}


or



class Solution {
    private double helper(double line, int[][] squares) {
        double aAbove = 0, aBelow = 0;
        for (int i = 0; i < squares.length; i++) {
            int x = squares[i][0], y = squares[i][1], l = squares[i][2];
            double total = (double) l * l;
            
            if (line <= y) {
                aAbove += total;
            } else if (line >= y + l) {
                aBelow += total;
            } else {
                // The line intersects the square.
                double aboveHeight = (y + l) - line;
                double belowHeight = line - y;
                aAbove += l * aboveHeight;
                aBelow += l * belowHeight;
            }
        }
        return aAbove - aBelow;
    }

    public double separateSquares(int[][] squares) {
        double lo = 0, hi = 2*1e9;

        for (int i = 0; i < 60; i++) {
            double mid = (lo + hi) / 2.0;
            double diff = helper(mid, squares);
            
            if (diff > 0)
                lo = mid;
            else
                hi = mid;
        }
        
        return hi;
    }
}


or


class Solution {
    public boolean check(int[][] squares, double y) {
        double area = 0;
        for(int[] square: squares) {
            int bl_x = square[0];
            int bl_y = square[1];

            int tr_x = square[0] + square[2];
            int tr_y = square[1] + square[2];

            int width = square[2];
            
            double bottomHeight = bl_y >= y ? 0 : tr_y <= y ? square[2] : y - bl_y;
            double topHeight = square[2] - bottomHeight;

            area = area + width * bottomHeight;
            area = area - width * topHeight;
        }

        return area < 0;
    }
    
    public double separateSquares(int[][] squares) {
        double i = 0, j = Integer.MAX_VALUE;
        // double ans = -1;
        while(i + 0.00001 <= j) {
            double mid = i + ( j - i ) / 2;
            if(check(squares, mid)) { // checks if bottom area is lesser
                // ans = mid;
                i = mid;
            } else {
                j = mid;
            }
        }
        return i + (j - i) / 2;
    }
}



or



