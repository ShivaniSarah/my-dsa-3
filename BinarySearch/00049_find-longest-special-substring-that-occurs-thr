https://leetcode.com/problems/find-longest-special-substring-that-occurs-thrice-ii/description/


2982. Find Longest Special Substring That Occurs Thrice II
Medium
Topics
Companies
Hint
You are given a string s that consists of lowercase English letters.

A string is called special if it is made up of only a single character. For example, the string "abc" is not special, whereas the strings "ddd", "zz", and "f" are special.

Return the length of the longest special substring of s which occurs at least thrice, or -1 if no special substring occurs at least thrice.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Input: s = "aaaa"
Output: 2
Explanation: The longest special substring which occurs thrice is "aa": substrings "aaaa", "aaaa", and "aaaa".
It can be shown that the maximum length achievable is 2.
Example 2:

Input: s = "abcdef"
Output: -1
Explanation: There exists no special substring which occurs at least thrice. Hence return -1.
Example 3:

Input: s = "abcaba"
Output: 1
Explanation: The longest special substring which occurs thrice is "a": substrings "abcaba", "abcaba", and "abcaba".
It can be shown that the maximum length achievable is 1.
 

Constraints:

3 <= s.length <= 5 * 105
s consists of only lowercase English letters.



# java


class Solution {
  public int maximumLength(String s) {
    final int n = s.length();
    int ans = -1;
    int runningLen = 0;
    char prevLetter = '@';
    // counts[i][j] := the frequency of ('a' + i) repeating j times
    int[][] counts = new int[26][n + 1];

    for (final char c : s.toCharArray())
      if (c == prevLetter) {
        ++counts[c - 'a'][++runningLen];
      } else {
        runningLen = 1;
        ++counts[c - 'a'][runningLen];
        prevLetter = c;
      }

    for (int[] count : counts) {
      ans = Math.max(ans, getMaxFreq(count, n));
    }

    return ans;
  }

  // Returns the maximum frequency that occurs more than three times.
  private int getMaxFreq(int[] count, int maxFreq) {
    int times = 0;
    for (int freq = maxFreq; freq >= 1; --freq) {
      times += count[freq];
      if (times >= 3)
        return freq;
    }
    return -1;
  }
}


or



class Solution {
    private String s;
    private int n;

    public int maximumLength(String s) {
        this.s = s;
        n = s.length();
        int l = 0, r = n;
        while (l < r) {
            int mid = (l + r + 1) >> 1;
            if (check(mid)) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l == 0 ? -1 : l;
    }

    private boolean check(int x) {
        int[] cnt = new int[26];
        for (int i = 0; i < n;) {
            int j = i + 1;
            while (j < n && s.charAt(j) == s.charAt(i)) {
                j++;
            }
            int k = s.charAt(i) - 'a';
            cnt[k] += Math.max(0, j - i - x + 1);
            if (cnt[k] >= 3) {
                return true;
            }
            i = j;
        }
        return false;
    }
}


or



class Solution {

    public int maximumLength(String s) {
        int[][] frequency = new int[26][s.length() + 1];
        char previousCharacter = s.charAt(0);
        int substringLength = 1;

        frequency[s.charAt(0) - 'a'][1] = 1;
        int ans = -1;

        for (int charIdx = 1; charIdx < s.length(); charIdx++) {
            char currentCharacter = s.charAt(charIdx);
            // If the current character is equal to the previous character, add it to the
            // mapping and increment the substring length.
            if (currentCharacter == previousCharacter) {
                substringLength++;
                int count = 1;
                frequency[currentCharacter - 'a'][substringLength] += 1;
            } else {
                // Otherwise, reset substring length to 1.
                previousCharacter = currentCharacter;
                substringLength = 1;
                frequency[currentCharacter - 'a'][1] += 1;
            }
        }

        // Calculate the cumulative sum from the end for every character and find the
        // maximum possible answer.
        for (int charIdx = 0; charIdx < 26; charIdx++) {
            for (int len = s.length() - 1; len >= 1; len--) {
                frequency[charIdx][len] += frequency[charIdx][len + 1];
                if (frequency[charIdx][len] >= 3) {
                    ans = Math.max(ans, len);
                    break;
                }
            }
        }

        return ans;
    }
}



or



class Solution {

    // Method to return the minimum of three values
    public int min(int a, int b, int c) {
        return a < Math.min(b, c) ? a : Math.min(b, c);
    }

    public int maximumLength(String s) {
        int substringLength = 0, ans = -1;
        char previousCharacter = '\0';
        int[][] substringLengths = new int[26][3];

        // Initialize the substringLengths array to -1
        for (int charIdx = 0; charIdx < 26; charIdx++) {
            for (int lenIdx = 0; lenIdx < 3; lenIdx++) {
                substringLengths[charIdx][lenIdx] = -1;
            }
        }

        for (char character : s.toCharArray()) {
            if (character == previousCharacter) {
                substringLength++;
            } else {
                substringLength = 1;
                previousCharacter = character;
            }

            // Replace the minimum frequency with the current length if it is greater
            int index = character - 'a';
            int minLength = min(
                substringLengths[index][0],
                substringLengths[index][1],
                substringLengths[index][2]
            );
            if (substringLength > minLength) {
                if (substringLengths[index][0] == minLength) {
                    substringLengths[index][0] = substringLength;
                } else if (substringLengths[index][1] == minLength) {
                    substringLengths[index][1] = substringLength;
                } else {
                    substringLengths[index][2] = substringLength;
                }
            }
        }

        // Find the character with the maximum value of its minimum frequency
        for (int charIdx = 0; charIdx < 26; charIdx++) {
            ans = Math.max(
                ans,
                min(
                    substringLengths[charIdx][0],
                    substringLengths[charIdx][1],
                    substringLengths[charIdx][2]
                )
            );
        }

        return ans;
    }
}



or


class Solution {
    public int maximumLength(String s) {
        int n = s.length();
        int[][] freq = new int[26][n + 1];
        char pre = s.charAt(0);

        int len = 1;
        freq[s.charAt(0) - 'a'][1] = 1;
        int ans = -1;

        for (int i = 1; i < n; i++) {
            char cur = s.charAt(i);
            if (cur == pre) {
                len++;
                int count = 1;
                freq[cur - 'a'][len] += 1;
            } else {
                freq[cur - 'a'][1] += 1;
                pre = cur;
                len = 1;
            }
        }

        for (int i = 0; i < 26; i++) {
            int preSum = 0;
            for (int j = n; j >= 1; j--) {
                preSum += freq[i][j];
                if (preSum >= 3) {
                    ans = Math.max(ans, j);
                    break;
                }
            }
        }

        return ans;
    }
}



or



class Solution {
    public int maximumLength(String s) {
        HashMap<Character,ArrayList<Integer>> pos = new HashMap<>();
        char prev = 'A';
        int count = 1, n = s.length();
        for(int i = 0;i<n;i++){
            
            char val = s.charAt(i);
            pos.putIfAbsent(val,new ArrayList<>());
            int j =i+1;
            boolean flag = false;
            while(j<n && s.charAt(i) == s.charAt(j)){
                
                    count++;
                    flag = true;
                
                
                ++j;
            }
            pos.get(val).add(count);
            if(flag)i = j-1;
            
            count = 1;
            
        }

        // binary search lon(n)*26 {26 is to check every time we are checking all 26 is possible or not of length mid}
        int ans = -1;
        int l = 1, r =s.length()-1;

        while(l<=r){
            int mid = l +(r-l)/2;
            if(isPossible(mid,pos)){
                l = mid+1;
                ans = Math.max(ans,mid);
            }
            else{
                r = mid-1;
            }

        }
        return ans;
    }
    static boolean isPossible(int mid,HashMap<Character,ArrayList<Integer>> pos){
        for(Map.Entry<Character,ArrayList<Integer>> it : pos.entrySet()){
            int count = 0;
            for(Integer val: it.getValue()){
                count += Math.max(0,val-mid+1);
            }
            if(count >=3) return true;
        }
        return false;
    }
}



or


class Solution {
    // Indexes of each character
    HashMap<Character, ArrayList<Integer>> m = new HashMap<>();
    int[] dp;
    int n;
    public int maximumLength(String s) {
        n = s.length();
        // dp[i]: len of special substring ending at i
        dp = new int[n];
        for (int i=0;i<n;i++) {
            m.putIfAbsent(s.charAt(i), new ArrayList<>());
            m.get(s.charAt(i)).add(i);
            dp[i] = (i==0||s.charAt(i)!=s.charAt(i-1))?1:dp[i-1]+1;
        }
        // Binary search the length of the longest special substring
        int l = 1, r = n; 
        while (l+1<r) {
            int mid = l+(r-l)/2;
            if (checkOk(mid)) l=mid;
            else r = mid;
        }
        if (checkOk(r)) return r;
        if (checkOk(l)) return l;
        return -1;
    }
    // Iterate every index of each character
    // Count whether there are at least 3 indexes such that dp[idx] >= guessed length
    boolean checkOk(int len) {
        for (var lst : m.values()) {
            if (lst.size()<len) continue;
            int cnt = 0;
            for (int idx : lst) {
                if (dp[idx] >= len) cnt ++;
                if (cnt >= 3) return true;
            }
        }
        return false;
    }
}


or


