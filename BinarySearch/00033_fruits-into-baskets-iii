https://leetcode.com/problems/fruits-into-baskets-iii/description/


3479. Fruits Into Baskets III
Medium
Topics
Companies
Hint
You are given two arrays of integers, fruits and baskets, each of length n, where fruits[i] represents the quantity of the ith type of fruit, and baskets[j] represents the capacity of the jth basket.

From left to right, place the fruits according to these rules:

Each fruit type must be placed in the leftmost available basket with a capacity greater than or equal to the quantity of that fruit type.
Each basket can hold only one type of fruit.
If a fruit type cannot be placed in any basket, it remains unplaced.
Return the number of fruit types that remain unplaced after all possible allocations are made.

 

Example 1:

Input: fruits = [4,2,5], baskets = [3,5,4]

Output: 1

Explanation:

fruits[0] = 4 is placed in baskets[1] = 5.
fruits[1] = 2 is placed in baskets[0] = 3.
fruits[2] = 5 cannot be placed in baskets[2] = 4.
Since one fruit type remains unplaced, we return 1.

Example 2:

Input: fruits = [3,6,1], baskets = [6,4,7]

Output: 0

Explanation:

fruits[0] = 3 is placed in baskets[0] = 6.
fruits[1] = 6 cannot be placed in baskets[1] = 4 (insufficient capacity) but can be placed in the next available basket, baskets[2] = 7.
fruits[2] = 1 is placed in baskets[1] = 4.
Since all fruits are successfully placed, we return 0.

 

Constraints:

n == fruits.length == baskets.length
1 <= n <= 105
1 <= fruits[i], baskets[i] <= 109


# java

class Solution {
    public int numOfUnplacedFruits(int[] fruits, int[] baskets) {
        int n = baskets.length;
        int N = 1;
        while(N <= n) N <<= 1;
        // Build the segment tree
        int[] segTree = new int[N << 1];
        for (int i = 0; i < n; i++)
        segTree[N + i] = baskets[i];
        for (int i = N - 1; i > 0; i--) 
        segTree[i] = Math.max(segTree[2 * i], segTree[2 * i + 1]);
        int count = 0;
        for (int i = 0; i < n; ++i) {
            int x = fruits[i];
            int index = 1; // Start from the root of the segment tree
            if (segTree[index] < x) {
                count++;
                continue;
            }
            // Query the first valid basket
            while (index < N) {
                if (segTree[index * 2] >= x) 
                index *= 2;
                else
                index = index * 2 + 1;
            }
            // Mark the found basket as used and update the segment tree
            segTree[index] = -1;
            while (index > 1) {
                index >>= 1;
                segTree[index] = Math.max(segTree[2 * index], segTree[2 * index + 1]);
            }
        }
        return count;     
    }
}



or



int mx[1<<18];

struct semiPerfectSegmentTree{
    int n, N;

    semiPerfectSegmentTree(vector<int>& a){
        n = a.size();
        N = 1 << int(log2(n));
        if(N < n) N <<= 1;
        for(int i=0; i<n; i++) mx[N|i] = a[i];
        for(int i=n+N; i<N<<1; i++) mx[i] = 0;
        for(int i=N-1; i; i--){
            mx[i] = max(mx[i<<1], mx[i<<1|1]);
        }
    }

    void update(int pos, int val){
        for(mx[pos] = val; pos>1; pos >>= 1){
            mx[pos>>1] = max(mx[pos], mx[pos^1]);
        }
    }

    int walk(int val){
        int pos = 1;
        while(pos < N){
            if(mx[pos<<=1] < val) pos |= 1;
        }
        return pos;
    }

    bool get_basket(int val){
        if(val > mx[1]){
            return 1;
        }
        int w = walk(val);
        //cout << "W: " << w << '\n';
        update(w, 0);
        return 0;
    }
};

class Solution {
public:
    int numOfUnplacedFruits(vector<int>& fruits, vector<int>& baskets) {
        semiPerfectSegmentTree tree = semiPerfectSegmentTree(baskets);
        //tree.debug();
        int ans = 0;
        for(int i=0; i<fruits.size(); i++){
            ans += tree.get_basket(fruits[i]);
        }
        return ans;
    }
};
