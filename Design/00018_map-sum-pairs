https://leetcode.com/problems/map-sum-pairs/description/

677. Map Sum Pairs
Medium
Topics
Companies
Design a map that allows you to do the following:

Maps a string key to a given value.
Returns the sum of the values that have a key with a prefix equal to a given string.
Implement the MapSum class:

MapSum() Initializes the MapSum object.
void insert(String key, int val) Inserts the key-val pair into the map. If the key already existed, the original key-value pair will be overridden to the new one.
int sum(string prefix) Returns the sum of all the pairs' value whose key starts with the prefix.
 

Example 1:

Input
["MapSum", "insert", "sum", "insert", "sum"]
[[], ["apple", 3], ["ap"], ["app", 2], ["ap"]]
Output
[null, null, 3, null, 5]

Explanation
MapSum mapSum = new MapSum();
mapSum.insert("apple", 3);  
mapSum.sum("ap");           // return 3 (apple = 3)
mapSum.insert("app", 2);    
mapSum.sum("ap");           // return 5 (apple + app = 3 + 2 = 5)
 

Constraints:

1 <= key.length, prefix.length <= 50
key and prefix consist of only lowercase English letters.
1 <= val <= 1000
At most 50 calls will be made to insert and sum.


# java


class TrieNode {
  public TrieNode[] children = new TrieNode[26];
  public int sum = 0;
}

class MapSum {
  public void insert(final String key, int val) {
    final int diff = val - keyToVal.getOrDefault(key, 0);
    TrieNode node = root;
    for (final char c : key.toCharArray()) {
      final int i = c - 'a';
      if (node.children[i] == null)
        node.children[i] = new TrieNode();
      node = node.children[i];
      node.sum += diff;
    }
    keyToVal.put(key, val);
  }

  public int sum(String prefix) {
    TrieNode node = root;
    for (final char c : prefix.toCharArray()) {
      final int i = c - 'a';
      if (node.children[i] == null)
        return 0;
      node = node.children[i];
    }
    return node.sum;
  }

  private TrieNode root = new TrieNode();
  private Map<String, Integer> keyToVal = new HashMap<>();
}


or


class Trie {
    private Trie[] children = new Trie[26];
    private int val;

    public void insert(String w, int x) {
        Trie node = this;
        for (int i = 0; i < w.length(); ++i) {
            int idx = w.charAt(i) - 'a';
            if (node.children[idx] == null) {
                node.children[idx] = new Trie();
            }
            node = node.children[idx];
            node.val += x;
        }
    }

    public int search(String w) {
        Trie node = this;
        for (int i = 0; i < w.length(); ++i) {
            int idx = w.charAt(i) - 'a';
            if (node.children[idx] == null) {
                return 0;
            }
            node = node.children[idx];
        }
        return node.val;
    }
}

class MapSum {
    private Map<String, Integer> d = new HashMap<>();
    private Trie trie = new Trie();

    public MapSum() {
    }

    public void insert(String key, int val) {
        int x = val - d.getOrDefault(key, 0);
        d.put(key, val);
        trie.insert(key, x);
    }

    public int sum(String prefix) {
        return trie.search(prefix);
    }
}

/**
 * Your MapSum object will be instantiated and called as such:
 * MapSum obj = new MapSum();
 * obj.insert(key,val);
 * int param_2 = obj.sum(prefix);
 */


or


class MapSum {

    TrieNode root;
    class TrieNode {
        Map<Character, TrieNode> children = new HashMap<>();
        int sum = 0;
        TrieNode(int val){
            this.sum = val;
        }
    }
    Map<String, Integer> mapVal;
    
    /** Initialize your data structure here. */
    public MapSum() {
        root = new TrieNode(0);
        mapVal = new HashMap<>();
    }
    
    public void insert(String key, int val) {
        int diff = val - mapVal.getOrDefault(key, 0);
        mapVal.put(key, val);        
        TrieNode curr = root;
        for(char c: key.toCharArray()){            
            if(curr.children.containsKey(c)) 
				curr.children.get(c).sum += diff;
            else curr.children.put(c, new TrieNode(diff));            
            curr = curr.children.get(c);
        }
    }
    
    public int sum(String prefix) {
        TrieNode curr = root;    
        for (char c : prefix.toCharArray()){
            curr = curr.children.get(c);
            if(curr == null) return 0;  
        }
        return curr.sum;
    }
}


or


class MapSum {

    Map<String, Integer> mapVal;
    Map<String, Integer> prefixSum;
    
    /** Initialize your data structure here. */
    public MapSum() {
        mapVal = new HashMap<>();
        prefixSum = new HashMap<>();
    }
    
    public void insert(String key, int val) {
        int diff = val - mapVal.getOrDefault(key, 0);
        mapVal.put(key, val);
        StringBuilder sb = new StringBuilder();
        for(char c: key.toCharArray()){
            sb.append(c);
            String prefix = sb.toString();
            prefixSum.put(prefix, prefixSum.getOrDefault(prefix, 0) + diff);
        }
    }
    
    public int sum(String prefix) {
        return prefixSum.getOrDefault(prefix, 0);
    }
}


or


class MapSum {

    Map<String, Integer> map;

    /** Initialize your data structure here. */
    public MapSum() {
        map = new HashMap<>();
    }
    
    public void insert(String key, int val) {
        map.put(key, val);
    }
    
    public int sum(String prefix) {
        int result = 0;
        for(String key : map.keySet()){
            if(key.startsWith(prefix))
                result += map.get(key);
        }
        return result;
    }
}

or


class MapSum {
    Map<String, Integer> map;
    Map<String, Integer> score;
    public MapSum() {
        map = new HashMap();
        score = new HashMap();
    }
    public void insert(String key, int val) {
        int delta = val - map.getOrDefault(key, 0);
        map.put(key, val);
        String prefix = "";
        for (char c: key.toCharArray()) {
            prefix += c;
            score.put(prefix, score.getOrDefault(prefix, 0) + delta);
        }
    }
    public int sum(String prefix) {
        return score.getOrDefault(prefix, 0);
    }
}
