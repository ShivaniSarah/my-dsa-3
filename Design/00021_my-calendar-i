https://leetcode.com/problems/my-calendar-i/description/


729. My Calendar I
Medium
Topics
Companies
Hint
You are implementing a program to use as your calendar. We can add a new event if adding the event will not cause a double booking.

A double booking happens when two events have some non-empty intersection (i.e., some moment is common to both events.).

The event can be represented as a pair of integers startTime and endTime that represents a booking on the half-open interval [startTime, endTime), the range of real numbers x such that startTime <= x < endTime.

Implement the MyCalendar class:

MyCalendar() Initializes the calendar object.
boolean book(int startTime, int endTime) Returns true if the event can be added to the calendar successfully without causing a double booking. Otherwise, return false and do not add the event to the calendar.
 

Example 1:

Input
["MyCalendar", "book", "book", "book"]
[[], [10, 20], [15, 25], [20, 30]]
Output
[null, true, false, true]

Explanation
MyCalendar myCalendar = new MyCalendar();
myCalendar.book(10, 20); // return True
myCalendar.book(15, 25); // return False, It can not be booked because time 15 is already booked by another event.
myCalendar.book(20, 30); // return True, The event can be booked, as the first event takes every time less than 20, but not including 20.
 

Constraints:

0 <= start < end <= 109
At most 1000 calls will be made to book.


# java


import java.util.Map;
import java.util.TreeMap;

class MyCalendar {

    private final TreeMap<Integer, Integer> tm = new TreeMap<>();

    public MyCalendar() {
    }

    public boolean book(int start, int end) {
        Map.Entry<Integer, Integer> ent = tm.floorEntry(start);
        if (ent != null && ent.getValue() > start) {
            return false;
        }
        ent = tm.ceilingEntry(start);
        if (ent != null && ent.getKey() < end) {
            return false;
        }
        tm.put(start, end);
        return true;
    }
}

/**
 * Your MyCalendar object will be instantiated and called as such: MyCalendar
 * obj = new MyCalendar(); boolean param_1 = obj.book(start,end);
 */



or


public class MyCalendar {
    List<int[]> calendar;

    MyCalendar() {
        calendar = new ArrayList();
    }

    public boolean book(int start, int end) {
        for (int[] iv: calendar) {
            if (iv[0] < end && start < iv[1]) {
                return false;
            }
        }
        calendar.add(new int[]{start, end});
        return true;
    }
}


or


class MyCalendar {
    TreeMap<Integer, Integer> calendar;

    MyCalendar() {
        calendar = new TreeMap();
    }

    public boolean book(int start, int end) {
        Integer prev = calendar.floorKey(start),
                next = calendar.ceilingKey(start);
        if ((prev == null || calendar.get(prev) <= start) &&
                (next == null || end <= next)) {
            calendar.put(start, end);
            return true;
        }
        return false;
    }
}


or


class Node{
    int start,end;
    Node left;
    Node right;
    public Node(int start , int end){
        this.start=start;
        this.end=end;
        left=null;
        right=null;
    }
}

class MyCalendar {
    
    Node root ;
    

    public MyCalendar() {
        this.root = null;
        
    }
    
    public boolean insert(Node parent , int s , int e){
        if (parent.start>=e){
            if(parent.left==null){
                parent.left=new Node(s,e);
                return true;
            }
            else{
                return insert(parent.left,s,e);
            }
        }
        else if (parent.end<=s){
            if(parent.right==null){
                parent.right=new Node(s,e);
                return true;
            }
            else{
                return insert(parent.right,s,e);
            }
        }
        
            return false;
    }
    
    public boolean book(int start, int end) {
        if(root == null){
            root= new Node(start,end);
            return true;
        }
        else{
            return insert(root,start,end);
        }
        
        
        
    }
}

