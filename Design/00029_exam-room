https://leetcode.com/problems/exam-room/description/

855. Exam Room
Medium
Topics
Companies
There is an exam room with n seats in a single row labeled from 0 to n - 1.

When a student enters the room, they must sit in the seat that maximizes the distance to the closest person. If there are multiple such seats, they sit in the seat with the lowest number. If no one is in the room, then the student sits at seat number 0.

Design a class that simulates the mentioned exam room.

Implement the ExamRoom class:

ExamRoom(int n) Initializes the object of the exam room with the number of the seats n.
int seat() Returns the label of the seat at which the next student will set.
void leave(int p) Indicates that the student sitting at seat p will leave the room. It is guaranteed that there will be a student sitting at seat p.
 

Example 1:

Input
["ExamRoom", "seat", "seat", "seat", "seat", "leave", "seat"]
[[10], [], [], [], [], [4], []]
Output
[null, 0, 9, 4, 2, null, 5]

Explanation
ExamRoom examRoom = new ExamRoom(10);
examRoom.seat(); // return 0, no one is in the room, then the student sits at seat number 0.
examRoom.seat(); // return 9, the student sits at the last seat number 9.
examRoom.seat(); // return 4, the student sits at the last seat number 4.
examRoom.seat(); // return 2, the student sits at the last seat number 2.
examRoom.leave(4);
examRoom.seat(); // return 5, the student sits at the last seat number 5.

 

Constraints:

1 <= n <= 109
It is guaranteed that there is a student sitting at seat p.
At most 104 calls will be made to seat and leave.



# java



class ExamRoom {

    int capacity; // this is just to keep track of the max allowed size
    TreeSet<Integer> seats; 
	/* why treeset, because seats will be sorted automatically 
	   and get first()/last() element in log(n) time. 
	*/
    
    public ExamRoom(int n) {
        this.capacity=n;
        this.seats = new TreeSet<>();
    }
    
    public int seat() {
        int seatNumber=0;
		/*
		  Return 0 for first attempt ( as mentioned in question)
		  Otherwise, we need to calculate the max distance by checking the whole treeset : O(n) time. 
		  Note that "distance" variable is initialized to first appearing seat,
		  why because the distance calculation is based on current seat and the seat before that. 
		  Find the maximum distance and update the seat number accordingly.
		  distance calculation -> (current seat - previous seat )/ 2
		  Update the max distance at each step.
		  New seat number will be ->  previous seat number + max distance 
		  
		  Now, before returning the end result,  check for one more edge case:
		  That is, if the max distance calculated is less than ->  capacity-1-seats.last()
		  
		  Why because -> if last seat number in treeset is far from last position, 
		  then  the largest distance possible is the last position.
		  
		*/
        if(seats.size() > 0){
            Integer prev=null;
            int distance = seats.first();
            for(Integer seat : seats){
                if(prev != null){
                    int d = (seat-prev)/2;
                    if(distance < d){
                        distance=d;
                        seatNumber=prev+distance;
                    }
                }
                prev = seat;
            }
            
            if(distance < capacity-1-seats.last()){
                seatNumber = capacity-1;
            }
        }
        seats.add(seatNumber);
        return seatNumber;
    }
    
    public void leave(int p) {
        seats.remove(p); 
		/* simply remove the seat number from treeset
		 and treeset will be automatically adjust its order in log(n) time. 
		*/
    }
}



/**
 * Your ExamRoom object will be instantiated and called as such:
 * ExamRoom obj = new ExamRoom(n);
 * int param_1 = obj.seat();
 * obj.leave(p);
 */

or


class Node {
  public Node prev;
  public Node next;
  public int value;

  public Node(int value) {
    this.value = value;
  }
}

class ExamRoom {
  public ExamRoom(int n) {
    this.n = n;
    join(head, tail);
  }

  public int seat() {
    if (head.next == tail) {
      Node node = new Node(0);
      join(head, node);
      join(node, tail);
      map.put(0, node);
      return 0;
    }

    int prevStudent = -1;
    int maxDistToClosest = 0;
    int val = 0;     // the inserted value
    Node pos = null; // the inserted position

    for (Node node = head; node != tail; node = node.next) {
      if (prevStudent == -1) {         // We haven't insert anything before.
        maxDistToClosest = node.value; // the distance between it and the begining
        pos = node;
      } else if ((node.value - prevStudent) / 2 > maxDistToClosest) {
        maxDistToClosest = (node.value - prevStudent) / 2;
        val = (node.value + prevStudent) / 2;
        pos = node;
      }
      prevStudent = node.value;
    }

    if (n - 1 - tail.prev.value > maxDistToClosest) {
      pos = tail;
      val = n - 1;
    }

    Node insertedNode = new Node(val);
    join(pos.prev, insertedNode);
    join(insertedNode, pos);

    map.put(val, insertedNode);
    return val;
  }

  public void leave(int p) {
    Node removedNode = map.get(p);
    join(removedNode.prev, removedNode.next);
  }

  private int n;
  private Node head = new Node(-1);
  private Node tail = new Node(-1);
  private Map<Integer, Node> map = new HashMap<>(); // {p: student iterator}

  private void join(Node node1, Node node2) {
    node1.next = node2;
    node2.prev = node1;
  }

  private void remove(Node node) {
    join(node.prev, node.next);
  }
}



or



class ExamRoom {
    private TreeSet<int[]> ts = new TreeSet<>((a, b) -> {
        int d1 = dist(a), d2 = dist(b);
        return d1 == d2 ? a[0] - b[0] : d2 - d1;
    });
    private Map<Integer, Integer> left = new HashMap<>();
    private Map<Integer, Integer> right = new HashMap<>();
    private int n;

    public ExamRoom(int n) {
        this.n = n;
        add(new int[] {-1, n});
    }

    public int seat() {
        int[] s = ts.first();
        int p = (s[0] + s[1]) >> 1;
        if (s[0] == -1) {
            p = 0;
        } else if (s[1] == n) {
            p = n - 1;
        }
        del(s);
        add(new int[] {s[0], p});
        add(new int[] {p, s[1]});
        return p;
    }

    public void leave(int p) {
        int l = left.get(p), r = right.get(p);
        del(new int[] {l, p});
        del(new int[] {p, r});
        add(new int[] {l, r});
    }

    private int dist(int[] s) {
        int l = s[0], r = s[1];
        return l == -1 || r == n ? r - l - 1 : (r - l) >> 1;
    }

    private void add(int[] s) {
        ts.add(s);
        left.put(s[1], s[0]);
        right.put(s[0], s[1]);
    }

    private void del(int[] s) {
        ts.remove(s);
        left.remove(s[1]);
        right.remove(s[0]);
    }
}

/**
 * Your ExamRoom object will be instantiated and called as such:
 * ExamRoom obj = new ExamRoom(n);
 * int param_1 = obj.seat();
 * obj.leave(p);
 */



or


class ExamRoom {
    int N;
    TreeSet<Integer> seats;
    public ExamRoom(int n) {
        seats = new TreeSet<>(); // ordered set to keep track of students
        this.N = n;
    }
    
    public int seat() {
        int student = 0;
        
        if (seats.size() > 0) { // if at least one student, otherwise seat at 0
            int dist = seats.first(); // the student at lowest seat 
            Integer prev = null; 
            for (Integer seat: seats) { 
                if (prev != null) { 
                    int d = (seat - prev)/2; // every time we see a new student we can seat them between 2 other students
                    if (d > dist) { // select the max range
                        dist = d; 
                        student = prev + d; 
                    }
                }
                prev = seat; 
            }
            if (N - 1 - seats.last() > dist) {
                student = N-1;
            }
        }
        seats.add(student);
        return student;
    }
    
    public void leave(int p) {
        seats.remove(p);
    }
}

/**
 * Your ExamRoom object will be instantiated and called as such:
 * ExamRoom obj = new ExamRoom(n);
 * int param_1 = obj.seat();
 * obj.leave(p);
 */
