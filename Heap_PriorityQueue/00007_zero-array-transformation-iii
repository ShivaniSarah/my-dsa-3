https://leetcode.com/problems/zero-array-transformation-iii/description/

3362. Zero Array Transformation III
Medium
Topics
Companies
Hint
You are given an integer array nums of length n and a 2D array queries where queries[i] = [li, ri].

Each queries[i] represents the following action on nums:

Decrement the value at each index in the range [li, ri] in nums by at most 1.
The amount by which the value is decremented can be chosen independently for each index.
A Zero Array is an array with all its elements equal to 0.

Return the maximum number of elements that can be removed from queries, such that nums can still be converted to a zero array using the remaining queries. If it is not possible to convert nums to a zero array, return -1.

 

Example 1:

Input: nums = [2,0,2], queries = [[0,2],[0,2],[1,1]]

Output: 1

Explanation:

After removing queries[2], nums can still be converted to a zero array.

Using queries[0], decrement nums[0] and nums[2] by 1 and nums[1] by 0.
Using queries[1], decrement nums[0] and nums[2] by 1 and nums[1] by 0.
Example 2:

Input: nums = [1,1,1,1], queries = [[1,3],[0,2],[1,3],[1,2]]

Output: 2

Explanation:

We can remove queries[2] and queries[3].

Example 3:

Input: nums = [1,2,3,4], queries = [[0,3]]

Output: -1

Explanation:

nums cannot be converted to a zero array even after using all the queries.

 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105
1 <= queries.length <= 105
queries[i].length == 2
0 <= li <= ri < nums.length


# java



class Solution {
  public int maxRemoval(int[] nums, int[][] queries) {
    int queryIndex = 0;
    Queue<Integer> available = new PriorityQueue<>(Collections.reverseOrder()); // available `r`s
    Queue<Integer> running = new PriorityQueue<>();                             // running `r`s

    Arrays.sort(queries, Comparator.comparingInt((int[] query) -> query[0]));

    for (int i = 0; i < nums.length; ++i) {
      while (queryIndex < queries.length && queries[queryIndex][0] <= i)
        available.offer(queries[queryIndex++][1]);
      while (!running.isEmpty() && running.peek() < i)
        running.poll();
      while (nums[i] > running.size()) {
        if (available.isEmpty() || available.peek() < i)
          return -1;
        running.offer(available.poll());
      }
    }

    return available.size();
  }
}



or


class Solution {
        public int maxRemoval(int[] A, int[][] queries) {
        int n = A.length, nq = queries.length;
        Arrays.sort(queries, (a, b) -> a[0] - b[0]);
        PriorityQueue<Integer> h = new PriorityQueue<>(); // min heap
        int[] end = new int[n + 1];
        int cur = 0, j = 0;
        for (int i = 0; i < n; ++i) {
            cur -= end[i];
            while (j < nq && queries[j][0] <= i) {
                h.offer(-queries[j][1]); // Add negative for min-heap
                j++;
            }
            while (cur < A[i]) {
                if (h.isEmpty() || -h.peek() < i) {
                    return -1;
                }
                end[-h.poll() + 1]++;
                cur++;
            }
        }
        return h.size();
    }
}


or


class Solution {
    public int maxRemoval(int[] nums, int[][] queries) {
        // need to iterate over queries with starting point asc
        Arrays.sort(queries, (a, b) -> a[0] == b[0] ? b[1] - a[1] : a[0] - b[0]);
        int[] effect = new int[nums.length + 1];
        int res = 0;
        // here we store active queries which we can use to cover nums[i]
        Queue<int[]> pq = new PriorityQueue<>((a, b) -> b[1] - a[1]);
        int j = 0; // queries index
        // now for each index
        for (int i = 0; i < nums.length; i++) {
            // queries we can no longer use
            while (!pq.isEmpty() && pq.peek()[1] < i) {
                pq.poll();
            }

            // same here, moving j over unused queries
            while (j < queries.length && queries[j][1] < i) {
                j++;
            }

            // while our cumulative effect is less than the effect we need
            while (effect[i] < nums[i]) {
                boolean used = false;
                // all the queries we can potentially use go to queue
                while (j < queries.length && queries[j][0] <= i) {
                    pq.add(queries[j]);
                    j++;
                }
                // why we can use some query
                if (!pq.isEmpty()) {
                    int[] tmp = pq.poll();
                    // can't use it - went over its ending
                    if (tmp[1] < i) {
                        continue;
                    }
                    // now let's add cumulative effect
                    effect[i]++;
                    // at this point query ends and we need to take back the effect
                    effect[tmp[1] + 1]--;
                    res++; // using the query
                    used = true;
                }
                // if we can't cover the i - we're out
                if (!used) {
                    return -1;
                }
            }
            // works as prefix sum to cover the ending queries
            effect[i + 1] += effect[i];
        }
        // everything unused is what we can throw off
        return queries.length - res;
    }
}


or


class Solution {
    public int maxRemoval(int[] nums, int[][] queries) {
        int len = nums.length, size = queries.length;
        HashMap<Integer, LinkedList<Integer>> start2ends = 
            new HashMap<Integer, LinkedList<Integer>>();
        for (int[] query: queries) {
            Integer start = query[0], end = query[1];
            if (!start2ends.containsKey(start)) {
                LinkedList<Integer> list = new LinkedList<Integer>();
                list.add(end);
                start2ends.put(start, list);
            } else {
                LinkedList<Integer> existing = start2ends.get(start);
                existing.add(end);
            }
        }
        PriorityQueue<Integer> availEnds = new PriorityQueue<Integer>(
            (a, b) -> b - a
        );
        PriorityQueue<Integer> activeEnds = new PriorityQueue<Integer>(
            (a, b) -> a - b
        );


        int kept = 0;
        int reduceBy = 0;
        for (int i = 0; i < len; i++) {
            // add available ends here
            if (start2ends.containsKey(i)) {
                LinkedList<Integer> existing = start2ends.get(i);
                for (Integer end: existing) {
                    availEnds.offer(end);
                }
            }

            // delete obsolete active ends here
            while (activeEnds.size() > 0) {
                Integer top = activeEnds.peek();
                if (top < i) {
                    activeEnds.poll();
                    reduceBy--;
                }
                else    break;
            }

            int val = nums[i];
            int rmg = val - reduceBy;
            if (rmg > 0) {
                if (availEnds.size() < rmg)  return -1;

                for (int j = 0; j < rmg; j++) {
                    Integer end = availEnds.peek();
                    // invalid end!!
                    if (end < i)    return -1;

                    activeEnds.offer(availEnds.poll());
                }
                reduceBy += rmg;
                kept += rmg;
            }
        }


        int result = size - kept;
        return result;
    }
}


or


class Solution {
    public int maxRemoval(int[] n, int[][] q) {
        Arrays.sort(q, (o1,o2)->(o1[0]-o2[0]));
        int qi=0, c=0, a=0;
        int[] d = new int[n.length+1];

        PriorityQueue<Integer> pq = new PriorityQueue<>(Collections.reverseOrder());

        for(int ni=0;ni<n.length; ni++){
            c+=d[ni];
            if(c<n[ni]){
                for(; qi<q.length&&q[qi][0]<=ni; qi++){
                    if(q[qi][1]<ni);
                    else pq.add(q[qi][1]);
                }
                while(c<n[ni]){
                    if(pq.isEmpty() || pq.peek()<ni)return -1;
                    c++; d[pq.poll()+1]--; a++;
                }
            }
        }
        return q.length-a;
    }
}


or


