https://leetcode.com/problems/most-frequent-ids/description/


3092. Most Frequent IDs
Medium
Topics
Companies
Hint
The problem involves tracking the frequency of IDs in a collection that changes over time. You have two integer arrays, nums and freq, of equal length n. Each element in nums represents an ID, and the corresponding element in freq indicates how many times that ID should be added to or removed from the collection at each step.

Addition of IDs: If freq[i] is positive, it means freq[i] IDs with the value nums[i] are added to the collection at step i.
Removal of IDs: If freq[i] is negative, it means -freq[i] IDs with the value nums[i] are removed from the collection at step i.
Return an array ans of length n, where ans[i] represents the count of the most frequent ID in the collection after the ith step. If the collection is empty at any step, ans[i] should be 0 for that step.

 

Example 1:

Input: nums = [2,3,2,1], freq = [3,2,-3,1]

Output: [3,3,2,2]

Explanation:

After step 0, we have 3 IDs with the value of 2. So ans[0] = 3.
After step 1, we have 3 IDs with the value of 2 and 2 IDs with the value of 3. So ans[1] = 3.
After step 2, we have 2 IDs with the value of 3. So ans[2] = 2.
After step 3, we have 2 IDs with the value of 3 and 1 ID with the value of 1. So ans[3] = 2.

Example 2:

Input: nums = [5,5,3], freq = [2,-2,1]

Output: [2,0,1]

Explanation:

After step 0, we have 2 IDs with the value of 5. So ans[0] = 2.
After step 1, there are no IDs. So ans[1] = 0.
After step 2, we have 1 ID with the value of 3. So ans[2] = 1.

 

Constraints:

1 <= nums.length == freq.length <= 105
1 <= nums[i] <= 105
-105 <= freq[i] <= 105
freq[i] != 0
The input is generated such that the occurrences of an ID will not be negative in any step.


# java


class Solution {
  public long[] mostFrequentIDs(int[] nums, int[] freq) {
    long[] ans = new long[nums.length];
    Map<Integer, Long> numCount = new HashMap<>();      // {num: freq}
    TreeMap<Long, Integer> freqCount = new TreeMap<>(); // {num's freq: freq}

    for (int i = 0; i < nums.length; ++i) {
      final int num = nums[i];
      final int f = freq[i];
      if (numCount.containsKey(num)) {
        final long numFreq = numCount.get(num);
        if (freqCount.merge(numFreq, -1, Integer::sum) == 0)
          freqCount.remove(numFreq);
      }
      final long newFreq = numCount.getOrDefault(num, 0L) + f;
      if (newFreq == 0) {
        numCount.remove(num);
      } else {
        numCount.put(num, newFreq);
        freqCount.merge(newFreq, 1, Integer::sum);
      }
      ans[i] = freqCount.isEmpty() ? 0 : freqCount.lastKey();
    }

    return ans;
  }
}



or



class Solution {
    public long[] mostFrequentIDs(int[] nums, int[] freq) {
        Map<Integer, Long> cnt = new HashMap<>();
        Map<Long, Integer> lazy = new HashMap<>();
        int n = nums.length;
        long[] ans = new long[n];
        PriorityQueue<Long> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (int i = 0; i < n; ++i) {
            int x = nums[i], f = freq[i];
            lazy.merge(cnt.getOrDefault(x, 0L), 1, Integer::sum);
            cnt.merge(x, (long) f, Long::sum);
            pq.add(cnt.get(x));
            while (!pq.isEmpty() && lazy.getOrDefault(pq.peek(), 0) > 0) {
                lazy.merge(pq.poll(), -1, Integer::sum);
            }
            ans[i] = pq.isEmpty() ? 0 : pq.peek();
        }
        return ans;
    }
}



or



class Solution {
    public long[] mostFrequentIDs(int[] nums, int[] freq) {
    long[] ans = new long[nums.length];
    HashMap<Integer, Long> idToFreqMap = new HashMap<>();
    TreeMap<Long, Integer> freqToIdCountMap = new TreeMap<>();
    for(int i = 0; i < nums.length; ++i){
        if(idToFreqMap.getOrDefault(nums[i], 0L) != 0){
            freqToIdCountMap.put(idToFreqMap.get(nums[i]), freqToIdCountMap.get(idToFreqMap.get(nums[i])) - 1);
            if(freqToIdCountMap.get(idToFreqMap.get(nums[i]) ) == 0) freqToIdCountMap.remove(idToFreqMap.get(nums[i]));   
        }
        idToFreqMap.put(nums[i], idToFreqMap.getOrDefault(nums[i], 0L) + freq[i]);
        freqToIdCountMap.put(idToFreqMap.get(nums[i]), freqToIdCountMap.getOrDefault(idToFreqMap.get(nums[i]), 0) + 1);
        ans[i] = freqToIdCountMap.lastKey();
    }
    return ans;
}
}



or



class Solution {
    public long[] mostFrequentIDs(int[] nums, int[] freq) {
    long[] ans = new long[nums.length];
    HashMap<Integer, Long> idToFreqMap = new HashMap<>();
    PriorityQueue<Pair<Long, Integer>> maxHeap = new PriorityQueue<>((a, b) -> Long.compare(b.getKey(), a.getKey()));
    for(int i = 0; i < nums.length; ++i){
        idToFreqMap.put(nums[i], idToFreqMap.getOrDefault(nums[i], 0L) + freq[i]);
        maxHeap.add(new Pair<>(idToFreqMap.get(nums[i]), nums[i]));
        while(idToFreqMap.get(maxHeap.peek().getValue()) != maxHeap.peek().getKey()) maxHeap.poll();
        ans[i] = maxHeap.peek().getKey();
    }
    return ans;
}
}


or


class Solution {
     HashMap<Integer, Long> idToFreq = new HashMap<>();
  TreeMap<Long, Set<Integer>> freqToIds = new TreeMap<>();

  public long[] mostFrequentIDs(int[] nums, int[] freq) {
    int size = nums.length;
    long[] result = new long[size];
    for (int i = 0; i < size; i++) {
      int id = nums[i];
      long addedFreq = freq[i];
      long oldFreq = idToFreq.getOrDefault(id, 0L);
      long newFreq = addedFreq + oldFreq;
      updateIdToFreq(id, newFreq);
      updateFreqToIds(id, oldFreq, newFreq);
      result[i] = freqToIds.lastKey();
    }
    return result;
  }

  private void updateIdToFreq(int id, long newFreq) {
    idToFreq.put(id, newFreq);
  }

  private void updateFreqToIds(int id, long oldFreq, long newFreq) {
    if (oldFreq != 0) {
      freqToIds.get(oldFreq).remove(id);
      if(freqToIds.get(oldFreq).size() == 0) 
        freqToIds.remove(oldFreq);
    }
    if (!freqToIds.containsKey(newFreq))
      freqToIds.put(newFreq, new HashSet<>());
    freqToIds.get(newFreq).add(id);
  }

}


or


