https://leetcode.com/problems/find-the-kth-largest-integer-in-the-array/description/


1985. Find the Kth Largest Integer in the Array
Medium
Topics
Companies
Hint
You are given an array of strings nums and an integer k. Each string in nums represents an integer without leading zeros.

Return the string that represents the kth largest integer in nums.

Note: Duplicate numbers should be counted distinctly. For example, if nums is ["1","2","2"], "2" is the first largest integer, "2" is the second-largest integer, and "1" is the third-largest integer.

 

Example 1:

Input: nums = ["3","6","7","10"], k = 4
Output: "3"
Explanation:
The numbers in nums sorted in non-decreasing order are ["3","6","7","10"].
The 4th largest integer in nums is "3".
Example 2:

Input: nums = ["2","21","12","1"], k = 3
Output: "2"
Explanation:
The numbers in nums sorted in non-decreasing order are ["1","2","12","21"].
The 3rd largest integer in nums is "2".
Example 3:

Input: nums = ["0","0"], k = 2
Output: "0"
Explanation:
The numbers in nums sorted in non-decreasing order are ["0","0"].
The 2nd largest integer in nums is "0".
 

Constraints:

1 <= k <= nums.length <= 104
1 <= nums[i].length <= 100
nums[i] consists of only digits.
nums[i] will not have any leading zeros.



# java



class Solution {
  // Similar to 215. Kth Largest Element in an Array
  public String kthLargestNumber(String[] nums, int k) {
    Queue<String> minHeap = new PriorityQueue<>(
        Comparator.comparingInt(String::length).thenComparing(String::compareTo));

    for (final String num : nums) {
      minHeap.offer(num);
      if (minHeap.size() > k)
        minHeap.poll();
    }

    return minHeap.poll();
  }
}



or


class Solution {
    public String kthLargestNumber(String[] nums, int k) {
        Arrays.sort(
            nums, (a, b) -> a.length() == b.length() ? b.compareTo(a) : b.length() - a.length());
        return nums[k - 1];
    }
}



or



class Solution {
    public String kthLargestNumber(String[] nums, int k) {
        
        int n=nums.length;
        
        Arrays.sort(nums,(a,b)->{
            if(a.length()>b.length()) return 1;
            else if(b.length()>a.length()) return -1;
            else{
              return isgreater(a,b);   
            }
        });
        return nums[n-k];        
    }
    
    public static int isgreater(String a,String b){
        
        int n=a.length();
        
        for(int i=0;i<n;i++){
            int a1=Integer.parseInt(""+a.charAt(i));
            int b1=Integer.parseInt(""+b.charAt(i));
            if(a1>b1) return 1;
            if(b1>a1) return -1;
        }
        return 0;
    }
}


or


TIME COMPLEXITY : O(n * log(k))

import java.math.BigInteger;
class Solution {
    public String kthLargestNumber(String[] arr, int k) {
    PriorityQueue<BigInteger> pq = new PriorityQueue<>();
        for(int i = 0; i < arr.length; i++){
            if(i < k){
                pq.add(new BigInteger(arr[i]));
            }else {
                BigInteger val = new BigInteger(arr[i]);
                if(val.compareTo(pq.peek()) > 0){
                    pq.remove();
                    pq.add(val);
                }
            }
        }
        return pq.remove().toString();
    }
}

/*
TIME COMPLEXITY : O(n * log(n))

import java.math.BigInteger;
class Solution {
    public String kthLargestNumber(String[] arr, int k) {
    PriorityQueue<BigInteger> pq = new PriorityQueue<>(Collections.reverseOrder());
        for (String s : arr) pq.add(new BigInteger(s));
        
        while (k != 1) {
            pq.remove();
            k--;
        }
        return pq.remove()+"";
    }
}

/*
TIME COMPLEXITY : O(n * log(n)

import java.math.BigInteger;
class Solution {
    public String kthLargestNumber(String[] nums, int k) {
      BigInteger[] arr = new BigInteger[nums.length];
        for(int i=0;i<arr.length;i++){
           arr[i]=new BigInteger(nums[i]);
        }
        Arrays.sort(arr);
        BigInteger result= arr[arr.length-k];
        return result.toString();
    }
}
*/



or


class Solution {
    public String kthLargestNumber(String[] nums, int k) {
        if (nums == null || nums.length == 0)
            return "";
        int length = nums.length;
        PriorityQueue<String> minHeap = new PriorityQueue<>((s1, s2) -> {
            if (s1.length() == s2.length()) 
                return s1.compareTo(s2);
            else
                return Integer.compare(s1.length(), s2.length());
        });
        for (String num : nums) {
            minHeap.offer(num);
            if (minHeap.size() > k) {
                minHeap.poll();
            }
        }
        return minHeap.poll();
    }
}

or



class Solution {
     public String kthLargestNumber(String[] nums, int k) {
     Arrays.sort(nums);
        Arrays.sort(nums, (String a, String b)->a.length()-b.length());
        return nums[nums.length-k];
     }
}


or


class Solution {
       public String kthLargestNumber(String[] nums, int k) {
        PriorityQueue<String> p = new PriorityQueue<>((s1, s2) -> {
            if (s1.length() == s2.length()) 
                return s1.compareTo(s2);
            else
                return Integer.compare(s1.length(), s2.length());
        });
        
       for(String n:nums){
           p.offer(n);
           if(p.size() > k){
               p.poll();
           }
       } 
        
        return p.poll();
    }
}


or


class Solution {
    public String kthLargestNumber(String[] nums, int k) {
//Making the priority queue using custom comparator(*Discussed below*)
        PriorityQueue<String> pq=new PriorityQueue<>((a,b)->a.length()==b.length()?
            a.compareTo(b): a.length()-b.length());
        for(String n: nums){
            pq.add(n);
//Deleting the kth largest everytime, so that pq contains only the largest k elements
            if(pq.size()>k) pq.poll();
        }
//Returning the minimum element in pq
        return pq.poll();
    }
}
