https://leetcode.com/problems/most-popular-video-creator/description/

2456. Most Popular Video Creator
Medium
Topics
Companies
Hint
You are given two string arrays creators and ids, and an integer array views, all of length n. The ith video on a platform was created by creators[i], has an id of ids[i], and has views[i] views.

The popularity of a creator is the sum of the number of views on all of the creator's videos. Find the creator with the highest popularity and the id of their most viewed video.

If multiple creators have the highest popularity, find all of them.
If multiple videos have the highest view count for a creator, find the lexicographically smallest id.
Note: It is possible for different videos to have the same id, meaning that ids do not uniquely identify a video. For example, two videos with the same ID are considered as distinct videos with their own viewcount.

Return a 2D array of strings answer where answer[i] = [creatorsi, idi] means that creatorsi has the highest popularity and idi is the id of their most popular video. The answer can be returned in any order.

 

Example 1:

Input: creators = ["alice","bob","alice","chris"], ids = ["one","two","three","four"], views = [5,10,5,4]

Output: [["alice","one"],["bob","two"]]

Explanation:

The popularity of alice is 5 + 5 = 10.
The popularity of bob is 10.
The popularity of chris is 4.
alice and bob are the most popular creators.
For bob, the video with the highest view count is "two".
For alice, the videos with the highest view count are "one" and "three". Since "one" is lexicographically smaller than "three", it is included in the answer.

Example 2:

Input: creators = ["alice","alice","alice"], ids = ["a","b","c"], views = [1,2,2]

Output: [["alice","b"]]

Explanation:

The videos with id "b" and "c" have the highest view count.
Since "b" is lexicographically smaller than "c", it is included in the answer.

 

Constraints:

n == creators.length == ids.length == views.length
1 <= n <= 105
1 <= creators[i].length, ids[i].length <= 5
creators[i] and ids[i] consist only of lowercase English letters.
0 <= views[i] <= 105


# java


class Solution {
    public List<List<String>> mostPopularCreator(String[] creators, String[] ids, int[] views) {
        int n = ids.length;
        Map<String, Long> cnt = new HashMap<>(n);
        Map<String, Integer> d = new HashMap<>(n);
        for (int k = 0; k < n; ++k) {
            String c = creators[k], i = ids[k];
            long v = views[k];
            cnt.merge(c, v, Long::sum);
            if (!d.containsKey(c) || views[d.get(c)] < v
                || (views[d.get(c)] == v && ids[d.get(c)].compareTo(i) > 0)) {
                d.put(c, k);
            }
        }
        long mx = 0;
        for (long x : cnt.values()) {
            mx = Math.max(mx, x);
        }
        List<List<String>> ans = new ArrayList<>();
        for (var e : cnt.entrySet()) {
            if (e.getValue() == mx) {
                String c = e.getKey();
                ans.add(List.of(c, ids[d.get(c)]));
            }
        }
        return ans;
    }
}


or


class Creator {
  public long popularity; // the popularity sum
  public String videoId;  // the video id that has the maximum view
  public int maxView;     // the maximum view of the creator
  public Creator(long popularity, String videoId, int maxView) {
    this.popularity = popularity;
    this.videoId = videoId;
    this.maxView = maxView;
  }
}

class Solution {
  public List<List<String>> mostPopularCreator(String[] creators, String[] ids, int[] views) {
    List<List<String>> ans = new ArrayList<>();
    Map<String, Creator> nameToCreator = new HashMap<>();
    long maxPopularity = 0;

    for (int i = 0; i < creators.length; ++i) {
      if (!nameToCreator.containsKey(creators[i])) {
        nameToCreator.put(creators[i], new Creator(views[i], ids[i], views[i]));
        maxPopularity = Math.max(maxPopularity, (long) views[i]);
        continue;
      }
      Creator creator = nameToCreator.get(creators[i]);
      creator.popularity += views[i];
      maxPopularity = Math.max(maxPopularity, (long) creator.popularity);
      if (creator.maxView < views[i] ||
          creator.maxView == views[i] && creator.videoId.compareTo(ids[i]) > 0) {
        creator.videoId = ids[i];
        creator.maxView = views[i];
      }
    }

    for (Map.Entry<String, Creator> entry : nameToCreator.entrySet())
      if (entry.getValue().popularity == maxPopularity)
        ans.add(Arrays.asList(entry.getKey(), entry.getValue().videoId));

    return ans;
  }
}


or


import java.util.*;

class Solution {
    public List<List<String>> mostPopularCreator(String[] creators, String[] ids, int[] views) {
        Map<String, long[]> mappedData = new HashMap<>();
        Map<String, String> popularVideoMap = new HashMap<>();
        long highestPopularity = 0;

        for (int i = 0; i < creators.length; i++) {
            String creator = creators[i];
            String id = ids[i];
            int view = views[i];

            if (!mappedData.containsKey(creator)) {
                mappedData.put(creator, new long[]{view, view});
                popularVideoMap.put(creator, id);
            } else {
                long[] prev = mappedData.get(creator);
                prev[0] += view;

                String currentPopularId = popularVideoMap.get(creator);
                if (view > prev[1] || (view == prev[1] && id.compareTo(currentPopularId) < 0)) {
                    prev[1] = view;
                    popularVideoMap.put(creator, id);
                }
            }
            highestPopularity = Math.max(highestPopularity, mappedData.get(creator)[0]);
        }

        List<List<String>> result = new ArrayList<>();
        for (Map.Entry<String, long[]> entry : mappedData.entrySet()) {
            if (entry.getValue()[0] == highestPopularity) {
                String creator = entry.getKey();
                result.add(Arrays.asList(creator, popularVideoMap.get(creator)));
            }
        }
        return result;
    }
}


or




class view{
String idname;
int views;
view(String idname,int views){
    this.idname=idname;
    this.views=views;
}
}

class Solution {
    public List<List<String>> mostPopularCreator(String[] creators, String[] ids, int[] views) {
    
    ArrayList<List<String>>ans=new ArrayList<>();

    HashMap<String,Long>mp=new HashMap<>();

    HashMap<String,PriorityQueue<view>>hp=new HashMap<>();

    long maxi=(long)-1;

    for(int i=0;i<creators.length;i++){
    
    mp.put(creators[i],mp.getOrDefault(creators[i],(long)0)+(long)views[i]);

    maxi=Math.max(mp.get(creators[i]),maxi);

    if(!hp.containsKey(creators[i])){
        hp.put(creators[i],new PriorityQueue<view>((view a,view b)->
        a.views==b.views?a.idname.compareTo(b.idname):b.views-a.views));
    }
    

    view curr=new view(ids[i],views[i]);

    hp.get(creators[i]).add(curr);

    }

    for(String a:mp.keySet()){

    ArrayList<String>arr=new ArrayList<>();

    if(mp.get(a)==maxi){

    arr.add(a);

    arr.add(hp.get(a).peek().idname);

    }
    if(arr.size()>0)
    ans.add(arr);

    }

    return ans;
        
    }
}


or



