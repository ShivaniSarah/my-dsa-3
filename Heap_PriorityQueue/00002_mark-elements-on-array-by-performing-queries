https://leetcode.com/problems/mark-elements-on-array-by-performing-queries/description/


3080. Mark Elements on Array by Performing Queries
Medium
Topics
Companies
Hint
You are given a 0-indexed array nums of size n consisting of positive integers.

You are also given a 2D array queries of size m where queries[i] = [indexi, ki].

Initially all elements of the array are unmarked.

You need to apply m queries on the array in order, where on the ith query you do the following:

Mark the element at index indexi if it is not already marked.
Then mark ki unmarked elements in the array with the smallest values. If multiple such elements exist, mark the ones with the smallest indices. And if less than ki unmarked elements exist, then mark all of them.
Return an array answer of size m where answer[i] is the sum of unmarked elements in the array after the ith query.

 

Example 1:

Input: nums = [1,2,2,1,2,3,1], queries = [[1,2],[3,3],[4,2]]

Output: [8,3,0]

Explanation:

We do the following queries on the array:

Mark the element at index 1, and 2 of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are nums = [1,2,2,1,2,3,1]. The sum of unmarked elements is 2 + 2 + 3 + 1 = 8.
Mark the element at index 3, since it is already marked we skip it. Then we mark 3 of the smallest unmarked elements with the smallest indices, the marked elements now are nums = [1,2,2,1,2,3,1]. The sum of unmarked elements is 3.
Mark the element at index 4, since it is already marked we skip it. Then we mark 2 of the smallest unmarked elements with the smallest indices if they exist, the marked elements now are nums = [1,2,2,1,2,3,1]. The sum of unmarked elements is 0.
Example 2:

Input: nums = [1,4,2,3], queries = [[0,1]]

Output: [7]

Explanation: We do one query which is mark the element at index 0 and mark the smallest element among unmarked elements. The marked elements will be nums = [1,4,2,3], and the sum of unmarked elements is 4 + 3 = 7.

 

Constraints:

n == nums.length
m == queries.length
1 <= m <= n <= 105
1 <= nums[i] <= 105
queries[i].length == 2
0 <= indexi, ki <= n - 1


# jav

class Solution {
  public long[] unmarkedSumArray(int[] nums, int[][] queries) {
    long[] ans = new long[queries.length];
    boolean[] marked = new boolean[nums.length];
    long sum = Arrays.stream(nums).asLongStream().sum();
    // (nums[i], i)
    Queue<Pair<Integer, Integer>> minHeap =
        new PriorityQueue<>(Comparator.comparingInt(Pair<Integer, Integer>::getKey)
                                .thenComparingInt(Pair<Integer, Integer>::getValue));

    for (int i = 0; i < nums.length; ++i)
      minHeap.offer(new Pair<>(nums[i], i));

    for (int queryIndex = 0; queryIndex < queries.length; ++queryIndex) {
      final int index = queries[queryIndex][0];
      final int k = queries[queryIndex][1];
      if (!marked[index]) {
        marked[index] = true;
        sum -= nums[index];
      }
      for (int popped = 0; popped < k && !minHeap.isEmpty();) {
        final int num = minHeap.peek().getKey();
        final int i = minHeap.poll().getValue();
        if (!marked[i]) {
          marked[i] = true;
          sum -= num;
          ++popped;
        }
      }
      ans[queryIndex] = sum;
    }

    return ans;
  }
}


or



class Solution {
    public long[] unmarkedSumArray(int[] nums, int[][] queries) {
        int n = nums.length;
        long s = Arrays.stream(nums).asLongStream().sum();
        boolean[] mark = new boolean[n];
        int[][] arr = new int[n][0];
        for (int i = 0; i < n; ++i) {
            arr[i] = new int[] {nums[i], i};
        }
        Arrays.sort(arr, (a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
        int m = queries.length;
        long[] ans = new long[m];
        for (int i = 0, j = 0; i < m; ++i) {
            int index = queries[i][0], k = queries[i][1];
            if (!mark[index]) {
                mark[index] = true;
                s -= nums[index];
            }
            for (; k > 0 && j < n; ++j) {
                if (!mark[arr[j][1]]) {
                    mark[arr[j][1]] = true;
                    s -= arr[j][0];
                    --k;
                }
            }
            ans[i] = s;
        }
        return ans;
    }
}


or



class Solution {
    public long[] unmarkedSumArray(int[] nums, int[][] queries) {
        HashSet<Integer> nm = new HashSet<>();
        PriorityQueue<Integer> pq =new PriorityQueue<>();
        long val= 0 ;
        for(int i=0;i<nums.length;i++)
        {
            nm.add(i);
            pq.add(nums[i]);
            val+=nums[i];
        }
        int lent = queries.length;
        
        HashMap<Integer,Queue<Integer>> h = new HashMap<>();
        for(int i=0;i<nums.length;i++){
            
            int val1 = nums[i];
            if(h.get(val1)==null){
                Queue<Integer> q = new LinkedList<>();
                q.add(i);
                h.put(val1,q);
            }else{
                Queue<Integer>  q= h.get(val1);
                q.add(i);
            }
        }
        long ans[] = new long[lent];
        for(int i=0;i<lent;i++)
        {
            int left = queries[i][0];
            int right = queries[i][1];   
            long sum = 0;
            if(nm.contains(left)){
                nm.remove(left);
                val-=nums[left];
            }
            
            while(right>0)
            {    
                if(pq.size()>0)
                {
                    int val2 = pq.poll();
                    Queue<Integer> indexes = h.get(val2);
                    int ind3 = indexes.remove();
                    
                    if(nm.contains(ind3))
                    {
                        right--;
                        nm.remove(ind3);
                        val-=nums[ind3];
                    }
                }
                else
                {
                    break;
                }
            }
            ans[i] = val;
        }
        return ans;
    }
}



or



class Solution {
    public long[] unmarkedSumArray(int[] nums, int[][] q) {
        HashSet<Integer> hs=new HashSet<>(); // To store all visited index
        long sum=0;
        
        int[] check=new int[nums.length]; // Store index as per smallest value
        long[] ans=new long[q.length];
        for(int e:nums)
            sum+=e;
        TreeMap<Integer,ArrayList<Integer>> tm=new TreeMap<>();
        // TreeMap to get the nums value in sorted order as key and all index storing that key is stored in arraylist as values.
        // For nums=[1,2,2,1,2,3,1]
        // tm = (1 (0,3,6), 2 (2,4) , 3 (5)) --> (key, value) format
        for(int i=0;i<nums.length;i++){
            if(!tm.containsKey(nums[i])){
                ArrayList<Integer> arr=new ArrayList<>();
                arr.add(i);
                tm.put(nums[i],arr);
            }
            else{
                tm.get(nums[i]).add(i);
            }
        }
        int ind=0;
        for (Map.Entry<Integer,ArrayList<Integer>> e : tm.entrySet()){
            ArrayList<Integer> a=e.getValue();
            for(int h=0;h<a.size();h++){
                check[ind]=a.get(h);
                ind++;
            }
        }
        int now=0;
        for(int i=0;i<q.length;i++){
            if(!hs.contains(q[i][0])){
                sum-=nums[q[i][0]];
                hs.add(q[i][0]);
            }
                
            int count=q[i][1];
            for(int j=0;j<count;j++){
                if(now!=check.length){
                    if(!hs.contains(check[now])){
                        sum-=nums[check[now]];
                        hs.add(check[now]);
                    }
                    else
                        j--; // if it already contains then we need one more round of iteration
                    now++;
                }
            }
            ans[i]=sum;
        }
        return ans;
    }
}


or



class Solution {
    private long sum(int nums[], int[] q,  PriorityQueue<int[]> data , long sum, HashSet<Integer> marked){
        if(sum == 0)    return 0;
       
        int k = q[1];
        if(nums[q[0]]>0)
            sum-=nums[q[0]];
        marked.add(q[0]);
        
        nums[q[0]] = -1;
        
      
       
        int i=0;
        while(i<k && data.size()>0){
            i++;
            int[] temp = data.poll();
            if(marked.contains(temp[1])) {i--;continue;}
            sum-=temp[0];
            nums[temp[1]] = -1;
            marked.add(temp[1]);
            
        }
        
      
        return sum;
    }
    
    
    public long[] unmarkedSumArray(int[] nums, int[][] queries) {
        long[] ans = new long[queries.length];
        PriorityQueue<int[]> data = new PriorityQueue<>((a, b)->{
            if(a[0]-b[0] == 0)  return a[1]-b[1];
                
            return a[0]-b[0];
 });
        
        
        long s = 0;
        HashSet<Integer> marked = new HashSet<>();
        
        for(int i=0;i<nums.length;i++){
             s+=nums[i];
            data.add(new int[]{nums[i], i});
        }
        
        for(int i=0;i<queries.length;i++){
            
            
            ans[i] = sum(nums, queries[i], data, s, marked);
            if(ans[i]<0)    ans[i]=0;
            s = ans[i];
            
        }
        return ans;
    }
}


or


class Solution {    

    public long[] unmarkedSumArray(int[] arr, int[][] query) {
        
        Queue<pair> pq=new PriorityQueue<>((a,b) ->{
            if(a.val==b.val)                 // if value is equal sort on basic of index
                return a.idx-b.idx;
            return a.val-b.val;        //else, sort on the basic of value(i.e smaller come first)
        });
        
        long tsum=0l;     // stroing total sum.
        for(int i=0;i<arr.length;i++){
            pq.add(new pair(arr[i], i));
            tsum+=arr[i];
        }
        
        int [] visited=new int[arr.length];   // marking visited index
        long[] ans=new long[query.length];
        int i=0;
        for(int a[] : query){
            
            int idx=a[0];      // geting index form query
            int k=a[1];        // total number of element marked in array correspondece to index.
            if(visited[idx]==0){//abhi tak visited nahi hua hai hence visited karo and tsum se substract karo
                tsum -= arr[idx];
                visited[idx]=1;     // marked visited index so that not take part it again .
            }
            while(!pq.isEmpty() && k!=0){    // yaha par k smallest ko remove karwa rahe hai.
                
                pair p=pq.poll();
                if(visited[p.idx]==0){ // jo visited nahi hai usko bas pick karenge 
                    visited[p.idx]=1;
                    tsum-=arr[p.idx];
                    k--;
                }
            }
            ans[i++]=tsum;
        }
        return ans;
    }
}
class pair{
    
    int val;  // storing value
    int idx;  // storing index of that value.
    pair(int val,int idx){
        this.val=val;
        this.idx=idx;
    }
}



or


import java.util.*;

class Solution {
    public static class Pair {
        int val;
        int ind;

        public Pair(int val, int ind) {
            this.val = val;
            this.ind = ind;
        }
    }

    public long[] unmarkedSumArray(int[] nums, int[][] queries) {
        int n = queries.length;
        long[] ans = new long[n];
        boolean[] vis = new boolean[nums.length];
        PriorityQueue<Pair> q = new PriorityQueue<>((a, b) -> {
            if (a.val != b.val) {
                return a.val - b.val;
            }
            return a.ind - b.ind;
        });

        long sum = 0; 
        for (int i = 0; i < nums.length; i++) {
            sum += nums[i];
            q.add(new Pair(nums[i], i));
        }

        for (int i = 0; i < n; i++) {
            int ind = queries[i][0];
            int k = queries[i][1];
            if (!vis[ind]) {
                vis[ind] = true;
                sum -= nums[ind];
            }

            while (!q.isEmpty() && k > 0) {
                Pair temp = q.poll();
                if (!vis[temp.ind] && nums[temp.ind] > 0) {
                    vis[temp.ind] = true;
                    sum -= nums[temp.ind];
                    k--;
                }
            }

            ans[i] = sum < 0 ? 0 : sum;
        }

        return ans;
    }
}



or


class Solution {
    public long[] unmarkedSumArray(int[] nums, int[][] queries) {
        // maintaining sum of the entire array
        long sum = 0;
        int n = nums.length;
        // list : [value, idx]
        PriorityQueue<List<Integer>> pq = new PriorityQueue<>(
            new Comparator<List<Integer>>(){
                public int compare(List<Integer> l1, List<Integer> l2){
                    if(l1.get(0) < l2.get(0)){
                        return -1;
                    }
                    else if(l1.get(0) > l2.get(0)){
                        return 1;
                    }
                    else return l1.get(1) - l2.get(1);
                }
            }
        );
        long[] ans = new long[queries.length];
        for(int i = 0; i < n; i++){
            sum += nums[i];
            pq.offer(Arrays.asList(nums[i], i));
        }
        int idx = 0;
        int k = 0;
        List<Integer> curr;
        // marked array
        boolean[] visited = new boolean[n];
        for(int[] query : queries){
            if(!visited[query[0]]){
                // marking the index
                visited[query[0]] = true;
                // excluding marked values from total sum
                sum -= nums[query[0]];
            }
            k = query[1];
            while(!pq.isEmpty() && k > 0){
                curr = pq.poll();
                if(!visited[curr.get(1)]){
                    // marking the index
                    visited[curr.get(1)] = true;
                    // excluding marked values from total sum
                    sum -= nums[curr.get(1)];
                    k--;
                }
            }
            ans[idx++] = sum;
        }
        return ans;
    }
}





