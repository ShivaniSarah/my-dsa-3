https://leetcode.com/problems/reward-top-k-students/description/

2512. Reward Top K Students
Medium
Topics
Companies
Hint
You are given two string arrays positive_feedback and negative_feedback, containing the words denoting positive and negative feedback, respectively. Note that no word is both positive and negative.

Initially every student has 0 points. Each positive word in a feedback report increases the points of a student by 3, whereas each negative word decreases the points by 1.

You are given n feedback reports, represented by a 0-indexed string array report and a 0-indexed integer array student_id, where student_id[i] represents the ID of the student who has received the feedback report report[i]. The ID of each student is unique.

Given an integer k, return the top k students after ranking them in non-increasing order by their points. In case more than one student has the same points, the one with the lower ID ranks higher.

 

Example 1:

Input: positive_feedback = ["smart","brilliant","studious"], negative_feedback = ["not"], report = ["this student is studious","the student is smart"], student_id = [1,2], k = 2
Output: [1,2]
Explanation: 
Both the students have 1 positive feedback and 3 points but since student 1 has a lower ID he ranks higher.
Example 2:

Input: positive_feedback = ["smart","brilliant","studious"], negative_feedback = ["not"], report = ["this student is not studious","the student is smart"], student_id = [1,2], k = 2
Output: [2,1]
Explanation: 
- The student with ID 1 has 1 positive feedback and 1 negative feedback, so he has 3-1=2 points. 
- The student with ID 2 has 1 positive feedback, so he has 3 points. 
Since student 2 has more points, [2,1] is returned.
 

Constraints:

1 <= positive_feedback.length, negative_feedback.length <= 104
1 <= positive_feedback[i].length, negative_feedback[j].length <= 100
Both positive_feedback[i] and negative_feedback[j] consists of lowercase English letters.
No word is present in both positive_feedback and negative_feedback.
n == report.length == student_id.length
1 <= n <= 104
report[i] consists of lowercase English letters and spaces ' '.
There is a single space between consecutive words of report[i].
1 <= report[i].length <= 100
1 <= student_id[i] <= 109
All the values of student_id[i] are unique.
1 <= k <= n


# java


class Solution {
  public List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback,
                                   String[] report, int[] student_id, int k) {
    List<Integer> ans = new ArrayList<>();
    Pair<Integer, Integer>[] scoreAndIds = new Pair[report.length];
    Set<String> pos = Arrays.stream(positive_feedback).collect(Collectors.toSet());
    Set<String> neg = Arrays.stream(negative_feedback).collect(Collectors.toSet());

    for (int i = 0; i < report.length; ++i) {
      int score = 0;
      for (final String word : report[i].split(" ")) {
        if (pos.contains(word))
          score += 3;
        if (neg.contains(word))
          score -= 1;
      }
      scoreAndIds[i] = new Pair<>(score, student_id[i]);
    }

    Arrays.sort(scoreAndIds,
                Comparator.comparing(Pair<Integer, Integer>::getKey, Comparator.reverseOrder())
                    .thenComparing(Pair<Integer, Integer>::getValue));

    for (int i = 0; i < k; ++i)
      ans.add(scoreAndIds[i].getValue());
    return ans;
  }
}



or



class Solution {
    public List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback,
        String[] report, int[] student_id, int k) {
        Set<String> ps = new HashSet<>();
        Set<String> ns = new HashSet<>();
        for (var s : positive_feedback) {
            ps.add(s);
        }
        for (var s : negative_feedback) {
            ns.add(s);
        }
        int n = report.length;
        int[][] arr = new int[n][0];
        for (int i = 0; i < n; ++i) {
            int sid = student_id[i];
            int t = 0;
            for (var s : report[i].split(" ")) {
                if (ps.contains(s)) {
                    t += 3;
                } else if (ns.contains(s)) {
                    t -= 1;
                }
            }
            arr[i] = new int[] {t, sid};
        }
        Arrays.sort(arr, (a, b) -> a[0] == b[0] ? a[1] - b[1] : b[0] - a[0]);
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; ++i) {
            ans.add(arr[i][1]);
        }
        return ans;
    }
}


or


import java.util.*;

public class Solution {
    
    private class Compare implements Comparator<Pair<Integer, Integer>> {
        public int compare(Pair<Integer, Integer> a, Pair<Integer, Integer> b) {
            if (a.getKey() < b.getKey()) {
                return 1; // In Java's priority queue, a return value of 1 means "goes after"
            } else if (a.getKey().equals(b.getKey()) && a.getValue() > b.getValue()) {
                return 1;
            }
            return -1; // Adjusting the logic to fit Java's priority queue behavior
        }
    }
    
    public List<Integer> topStudents(String[] positiveFeedback, String[] negativeFeedback, String[] report, int[] studentId, int k) {
        Set<String> positiveFeedbackSet = new HashSet<>(Arrays.asList(positiveFeedback));
        Set<String> negativeFeedbackSet = new HashSet<>(Arrays.asList(negativeFeedback));
        
        PriorityQueue<Pair<Integer, Integer>> scores = new PriorityQueue<>(new Compare());
        
        for (int j = 0; j < report.length; j++) {
            String[] words = report[j].split("\\s+");
            int points = 0;
            for (String word : words) {
                if (positiveFeedbackSet.contains(word)) {
                    points += 3;
                } else if (negativeFeedbackSet.contains(word)) {
                    points -= 1;
                }
            }
            scores.add(new Pair<>(points, studentId[j]));
        }
        
        List<Integer> result = new ArrayList<>();
        while (k-- > 0 && !scores.isEmpty()) {
            result.add(scores.poll().getValue());
        }
        
        return result;
    }

    // Simple implementation of a Pair class, assuming it's not provided elsewhere
    public static class Pair<K, V> {
        private K key;
        private V value;

        public Pair(K key, V value) {
            this.key = key;
            this.value = value;
        }

        public K getKey() {
            return key;
        }

        public V getValue() {
            return value;
        }
    }
}


or



class Solution {
    class student {
        int id;
        int pts;
        student(int id, int pts) {
            this.id = id;
            this.pts = pts;
        }
    }

    public List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
        // Set<String> posFeedback = new HashSet<>(Arrays.asList(positive_feedback));
        // Set<String> negFeedback = new HashSet<>(Arrays.asList(negative_feedback));

        Set<String> posFeedback = new HashSet<>();
        Set<String> negFeedback = new HashSet<>();

        for (String s : positive_feedback) {
            posFeedback.add(s);
        }
        for (String s : negative_feedback) {
            negFeedback.add(s);
        }

        PriorityQueue<student> pq = new PriorityQueue<>(
            (a, b) -> a.pts == b.pts? a.id - b.id : b.pts - a.pts
        );

        int idx = 0;
        for (String r : report) {
            int pts = 0;
            for (String w : r.split(" ")) {
                if (posFeedback.contains(w)) pts += 3;
                if (negFeedback.contains(w)) pts -= 1;;
            }

            pq.offer(new student(student_id[idx++], pts));
        }

        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < k; i++) {
            ans.add(pq.poll().id);
        }

        return ans;
    }
}

// TC: O(f) + O(n * r * logn) + O(k * logn)
// SC: O(f + n + k)

// f -> size of feedback arrays
// n -> size report array
// r -> size of a word in report array


or



class Solution {
    public List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {

        // Create a map to store the marks for each word.
        Map<String, Integer> markingMap = new HashMap<>();

        for(int i=0; i<positive_feedback.length; i++) {
            String key = positive_feedback[i];
            if(!markingMap.containsKey(key)) {
                markingMap.put(key, 3);
            }
        }

        for(int i=0; i<negative_feedback.length; i++) {
            String key = negative_feedback[i];
            if(!markingMap.containsKey(key)) {
                markingMap.put(key, -1);
            }
        }

        // Create a priority queue to store the students in sorted order by their marks.
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> {
            if (a[0] > b[0]) {
                return -1;
            } else if (a[0] < b[0]) {
                return 1;
            } else {
                if (a[1] < b[1]) {
                return -1;
                } else if (a[1] > b[1]) {
                return 1;
                } else {
                return 0;
                }
            }
        });

        // Iterate over the report array and add the marks for each student to the priority queue.
        for(int index = 0; index < report.length; index++) {
            int marks = getMarks(report[index], markingMap);
            pq.offer(new int[]{marks, student_id[index]});
        }

        // Create a list to store the top k student IDs.
        List<Integer> ans = new ArrayList<>();

        // Iterate over the priority queue and add the top k students to the list.
        while(k-- > 0) {
            ans.add(pq.poll()[1]);
        }
        return ans;
    }

    // Calculates the marks for a student based on their report.
    private int getMarks(String report, Map<String, Integer> markingMap) {
        String[] arr = report.split(" ");
        int marks = 0;
        for(String s : arr) {
            if(markingMap.containsKey(s)) {
                marks += markingMap.get(s);
            }
        }
        return marks;
    }
}



or


class Solution {
    HashSet<String> pos = new HashSet<>();
    HashSet<String> neg = new HashSet<>();
    public List<Integer> topStudents(String[] positive_feedback, String[] negative_feedback, String[] report, int[] student_id, int k) {
        
        for(String s : positive_feedback){
            pos.add(s);
        }
        for(String s : negative_feedback){
            neg.add(s);
        }
        PriorityQueue<int []> pq = new PriorityQueue<>((a,b)->b[0]==a[0]?b[1]-a[1]:a[0]-b[0]);
        for(int i=0;i<report.length;i++){
            int [] temp = feedback(report[i],student_id[i]);
            pq.add(temp);
            if(i>=k){
                pq.poll();
            }
        }
        List<Integer> res = new ArrayList<>(k);
        while(pq.size()!=0){
            res.add(pq.poll()[1]);
        }
        Collections.reverse(res);
        return res;
    }
    private int [] feedback(String s,int std){

        int []res = new int[2];
        int tscore = 0;
        String [] tokens = s.split(" ");
        for(String ss : tokens){
            tscore += Match(ss);
        }
        res[0] = tscore;
        res[1] = std;
        return res;
    }
    private int Match(String s){
        
        if(pos.contains(s)){ // check is string is present in pos_feedback
            return 3;
        }
        if(neg.contains(s)){
            return -1;
        }
        return 0;
    } // Since a string cannot be present in both feedbacks therefore we can return score without checking in both the hashsets
}


or


