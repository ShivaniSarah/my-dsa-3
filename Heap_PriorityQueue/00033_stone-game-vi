https://leetcode.com/problems/stone-game-vi/description/


1686. Stone Game VI
Medium
Topics
Companies
Hint
Alice and Bob take turns playing a game, with Alice starting first.

There are n stones in a pile. On each player's turn, they can remove a stone from the pile and receive points based on the stone's value. Alice and Bob may value the stones differently.

You are given two integer arrays of length n, aliceValues and bobValues. Each aliceValues[i] and bobValues[i] represents how Alice and Bob, respectively, value the ith stone.

The winner is the person with the most points after all the stones are chosen. If both players have the same amount of points, the game results in a draw. Both players will play optimally. Both players know the other's values.

Determine the result of the game, and:

If Alice wins, return 1.
If Bob wins, return -1.
If the game results in a draw, return 0.
 

Example 1:

Input: aliceValues = [1,3], bobValues = [2,1]
Output: 1
Explanation:
If Alice takes stone 1 (0-indexed) first, Alice will receive 3 points.
Bob can only choose stone 0, and will only receive 2 points.
Alice wins.
Example 2:

Input: aliceValues = [1,2], bobValues = [3,1]
Output: 0
Explanation:
If Alice takes stone 0, and Bob takes stone 1, they will both have 1 point.
Draw.
Example 3:

Input: aliceValues = [2,4,3], bobValues = [1,6,7]
Output: -1
Explanation:
Regardless of how Alice plays, Bob will be able to have more points than Alice.
For example, if Alice takes stone 1, Bob can take stone 2, and Alice takes stone 0, Alice will have 6 points to Bob's 7.
Bob wins.
 

Constraints:

n == aliceValues.length == bobValues.length
1 <= n <= 105
1 <= aliceValues[i], bobValues[i] <= 100



# java


class Solution {
  public int stoneGameVI(int[] aliceValues, int[] bobValues) {
    final int n = aliceValues.length;
    int[][] values = new int[n][];

    for (int i = 0; i < n; ++i)
      values[i] = new int[] {aliceValues[i], bobValues[i]};

    Arrays.sort(values, Comparator.comparingInt(value -> - value[0] - value[1]));

    int a = 0;
    int b = 0;

    for (int i = 0; i < n; ++i)
      if (i % 2 == 0)
        a += values[i][0];
      else
        b += values[i][1];

    return Integer.compare(a, b);
  }
}


or



class Solution {
    public int stoneGameVI(int[] aliceValues, int[] bobValues) {
        int n = aliceValues.length;
        int[][] arr = new int[n][2];
        for (int i = 0; i < n; ++i) {
            arr[i] = new int[] {aliceValues[i] + bobValues[i], i};
        }
        Arrays.sort(arr, (a, b) -> b[0] - a[0]);
        int a = 0, b = 0;
        for (int i = 0; i < n; ++i) {
            int j = arr[i][1];
            if (i % 2 == 0) {
                a += aliceValues[j];
            } else {
                b += bobValues[j];
            }
        }
        if (a == b) {
            return 0;
        }
        return a > b ? 1 : -1;
    }
}


or



class Solution 
{
static class Pair
{
        int sum=0;
        int alice=0;
        int bob=0;
    public Pair(int sum,int alice, int bob)
{
    this.sum=sum;
	this.alice = alice;
	this.bob = bob;
}
}

// class to define user defined conparator
static class Compare {
	
	static  void compare(Pair arr[], int n)
	{
		// Comparator to sort the pair according to second element
		Arrays.sort(arr, new Comparator<Pair>() {
			@Override public int compare(Pair p1, Pair p2)
			{
				return p2.sum - p1.sum;
			}
		});
		
		
	}
}
    public int stoneGameVI(int[] aliceValues, int[] bobValues)
    {
        int n=aliceValues.length;
        Pair[] a=new Pair[n];
        for(int i=0;i<n;i++)
        {
            a[i]=new Pair(aliceValues[i]+bobValues[i],aliceValues[i],bobValues[i]);
        }
        Compare.compare(a,n);
         int al=0;int bo=0;
        for(int i=0;i<n;i++)
        {
            if(i%2==0)
            {
                al+=a[i].alice;
            }
            else
            {
                bo+=a[i].bob;
            }
        }
        return Integer.compare(al,bo);
    
    
    
    }
}


or



class Solution {
    public int stoneGameVI(int[] aliceValues, int[] bobValues) {
        int n = aliceValues.length;
        
        int[][] stoneValues = new int[n][3];
        
        for(int i = 0; i < n; i++){
            stoneValues[i] = new int[]{aliceValues[i], bobValues[i],  (aliceValues[i] + bobValues[i])};
        }
        
        //Sort the stones, based on sum of Alice and Bob stones values
        Arrays.sort(stoneValues, (a, b) -> (b[2] - a[2]));
        
        int aliceScore = 0;
        
        //Alternatively pick stone value from Alice and Bob, start with Alice
        for(int i = 0; i < n; i++){
            
            if(i % 2 == 0){
                //Append the Alice stone values
                aliceScore += stoneValues[i][0];
            }else{
                //Substract the Bob stones values
                aliceScore -= stoneValues[i][1];
            }
        }
        
        if(aliceScore > 0) return 1;
        if(aliceScore < 0) return -1;
        
        return 0;
    }
    
}


or

// bets


class Solution {
    public int stoneGameVI(int[] aliceValues, int[] bobValues) {
        // length of the array
        int len = aliceValues.length;
        int[][] arr = new int[len][];
        for(int i=0; i<len; i++){
            arr[i]=new int[]{aliceValues[i]+bobValues[i], aliceValues[i], bobValues[i]};
        }

        Arrays.sort(arr, (a,b)->Integer.compare(b[0], a[0]));
        int a=0, b=0;
        for(int i=0; i<len; i++){
            if(i%2 == 0){
                a += arr[i][1];
            } else{
                b += arr[i][2];
            }
        }
        return Integer.compare(a,b);
    }
}
