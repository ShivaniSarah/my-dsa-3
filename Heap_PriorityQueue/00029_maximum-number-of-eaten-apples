https://leetcode.com/problems/maximum-number-of-eaten-apples/description/

1705. Maximum Number of Eaten Apples
Medium
Topics
Companies
Hint
There is a special kind of apple tree that grows apples every day for n days. On the ith day, the tree grows apples[i] apples that will rot after days[i] days, that is on day i + days[i] the apples will be rotten and cannot be eaten. On some days, the apple tree does not grow any apples, which are denoted by apples[i] == 0 and days[i] == 0.

You decided to eat at most one apple a day (to keep the doctors away). Note that you can keep eating after the first n days.

Given two integer arrays days and apples of length n, return the maximum number of apples you can eat.

 

Example 1:

Input: apples = [1,2,3,5,2], days = [3,2,1,4,2]
Output: 7
Explanation: You can eat 7 apples:
- On the first day, you eat an apple that grew on the first day.
- On the second day, you eat an apple that grew on the second day.
- On the third day, you eat an apple that grew on the second day. After this day, the apples that grew on the third day rot.
- On the fourth to the seventh days, you eat apples that grew on the fourth day.
Example 2:

Input: apples = [3,0,0,0,0,2], days = [3,0,0,0,0,2]
Output: 5
Explanation: You can eat 5 apples:
- On the first to the third day you eat apples that grew on the first day.
- Do nothing on the fouth and fifth days.
- On the sixth and seventh days you eat apples that grew on the sixth day.
 

Constraints:

n == apples.length == days.length
1 <= n <= 2 * 104
0 <= apples[i], days[i] <= 2 * 104
days[i] = 0 if and only if apples[i] = 0.


# java


class Solution {
  public int eatenApples(int[] apples, int[] days) {
    final int n = apples.length;
    int ans = 0;
    // (the rotten day, the number of apples)
    Queue<Pair<Integer, Integer>> minHeap =
        new PriorityQueue<>(Comparator.comparingInt(Pair::getKey));

    for (int i = 0; i < n || !minHeap.isEmpty(); ++i) {
      // Remove the rotten apples.
      while (!minHeap.isEmpty() && minHeap.peek().getKey() <= i)
        minHeap.poll();
      // Add today's apples.
      if (i < n && apples[i] > 0)
        minHeap.offer(new Pair<>(i + days[i], apples[i]));
      // Eat one apple today.
      if (!minHeap.isEmpty()) {
        final int rottenDay = minHeap.peek().getKey();
        final int numApples = minHeap.poll().getValue();
        if (numApples > 1)
          minHeap.offer(new Pair<>(rottenDay, numApples - 1));
        ++ans;
      }
    }

    return ans;
  }
}


or


class Solution {
    public int eatenApples(int[] apples, int[] days) {
        PriorityQueue<int[]> q = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        int n = days.length;
        int ans = 0, i = 0;
        while (i < n || !q.isEmpty()) {
            if (i < n && apples[i] > 0) {
                q.offer(new int[] {i + days[i] - 1, apples[i]});
            }
            while (!q.isEmpty() && q.peek()[0] < i) {
                q.poll();
            }
            if (!q.isEmpty()) {
                var p = q.poll();
                ++ans;
                if (--p[1] > 0 && p[0] > i) {
                    q.offer(p);
                }
            }
            ++i;
        }
        return ans;
    }
}


or


class Solution {
    public int eatenApples(int[] apples, int[] days) {
        PriorityQueue<Apple> minHeap = new PriorityQueue<Apple>((a, b) -> (a.validDay - b.validDay));
        
        //start from day 1
        int currentDay = 1;
        int eatenAppleCount = 0;
        
        for(int i = 0; i < apples.length; i++){
            
            //add apple count and their valid day
            if(apples[i] > 0 && days[i] > 0) {
                
                //current day is included
                int validDay = currentDay + days[i] - 1;
                
                minHeap.add(new Apple(apples[i], validDay));
            }

            
            //check for eatable apple
            while(!minHeap.isEmpty()){
                //get that applen, with minimum valid date (going to expiry soon)
                Apple apple = minHeap.remove();
                
                if(apple.validDay >= currentDay){
                    //eat 1 apple
                    apple.count--;
                    
                    //increment count
                    eatenAppleCount++;

                    //add remaiing apple, if not gonna expiry current day
                    if(apple.count > 0 && apple.validDay > currentDay){
                        minHeap.add(apple);
                    }
                    
                    break;
                }
            }
           
            //move to the next day
            currentDay++;
        }
        
        
        //eat stored apple
        while(!minHeap.isEmpty()){
            Apple apple = minHeap.remove();

            if(apple.validDay >= currentDay){
                //eat 1 apple
                apple.count--;
                
                //increment count
                eatenAppleCount++;
                
                //add remaiing apple, if not gonna expiry current day
                if(apple.count > 0 && apple.validDay > currentDay){
                    minHeap.add(apple);
                }
                
                //apple is eaten in current day, now move to next day
                currentDay++;
            }
        }
        
        
        return eatenAppleCount;
    }
}


class Apple {
    int count;
    int validDay;
    
    public Apple(int count, int validDay){
        this.count = count;
        this.validDay = validDay;
    }
}


or


class Solution {
        public int eatenApples(int[] apples, int[] days) {
        int res = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
        int length = apples.length;
        for(int day = 0; day < 40001; day++){
            if (day < length){
                pq.add(new int[]{day + days[day]-1, apples[day]});
            }
            while (!pq.isEmpty()){
                int[] cur = pq.peek();
                if(cur[0] < day){
                    pq.poll();
                }else{
                    break;
                }
            }
            if (!pq.isEmpty()) {
                int[] cur = pq.poll();
                cur[1]--;
                res += 1;
                if(cur[1] > 0){
                    pq.add(cur);
                }
            }
        }
        return res;
    }
}




or



class Solution {
    class Basket{
        int appleCount;
        int day;
        Basket(int appleCount, int day){
            this.appleCount = appleCount;
            this.day = day;
        }
    }
    public int eatenApples(int[] apples, int[] days) {
        int n = apples.length;
        PriorityQueue<Basket> q = new PriorityQueue<>(n,(b1,b2) -> b1.day-b2.day);
        int i; // counter for day 
		int apple = 0; // count of consumed apple
        
        for(i=0; i<n; i++){
            while(q.peek()!=null && (q.peek().appleCount < 1 || q.peek().day < i+1)){
                q.poll();
            }
            if(apples[i] != 0 && days[i] !=0){
                q.add(new Basket(apples[i], i+days[i]));
            }
            if(q.peek()==null) continue;           
            q.peek().appleCount--;
            apple++;
        }
                
        while(q.peek() != null){
            Basket basket = q.poll();
            if(basket.day < i) continue;
            apple += Math.min(basket.appleCount, basket.day-i);
            i += Math.min(basket.appleCount, basket.day-i);
        }
        return apple;
    }
}


or


class Solution {
        public int eatenApples(int[] apples, int[] days) {
        int res = 0;
        PriorityQueue<int[]> pq = new PriorityQueue<int[]>((a, b) -> a[0] - b[0]);
        int length = apples.length;
        for(int day = 0; day < 40001; day++){
            if (day < length){
                pq.add(new int[]{day + days[day]-1, apples[day]});
            }
            while (!pq.isEmpty()){
                int[] cur = pq.peek();
                if(cur[0] < day){
                    pq.poll();
                }else{
                    break;
                }
            }
            if (!pq.isEmpty()) {
                int[] cur = pq.poll();
                cur[1]--;
                res += 1;
                if(cur[1] > 0){
                    pq.add(cur);
                }
            }
        }
        return res;
    }
}


