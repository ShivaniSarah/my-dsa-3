https://leetcode.com/problems/number-of-orders-in-the-backlog/description/


1801. Number of Orders in the Backlog
Medium
Topics
Companies
Hint
You are given a 2D integer array orders, where each orders[i] = [pricei, amounti, orderTypei] denotes that amounti orders have been placed of type orderTypei at the price pricei. The orderTypei is:

0 if it is a batch of buy orders, or
1 if it is a batch of sell orders.
Note that orders[i] represents a batch of amounti independent orders with the same price and order type. All orders represented by orders[i] will be placed before all orders represented by orders[i+1] for all valid i.

There is a backlog that consists of orders that have not been executed. The backlog is initially empty. When an order is placed, the following happens:

If the order is a buy order, you look at the sell order with the smallest price in the backlog. If that sell order's price is smaller than or equal to the current buy order's price, they will match and be executed, and that sell order will be removed from the backlog. Else, the buy order is added to the backlog.
Vice versa, if the order is a sell order, you look at the buy order with the largest price in the backlog. If that buy order's price is larger than or equal to the current sell order's price, they will match and be executed, and that buy order will be removed from the backlog. Else, the sell order is added to the backlog.
Return the total amount of orders in the backlog after placing all the orders from the input. Since this number can be large, return it modulo 109 + 7.

 

Example 1:


Input: orders = [[10,5,0],[15,2,1],[25,1,1],[30,4,0]]
Output: 6
Explanation: Here is what happens with the orders:
- 5 orders of type buy with price 10 are placed. There are no sell orders, so the 5 orders are added to the backlog.
- 2 orders of type sell with price 15 are placed. There are no buy orders with prices larger than or equal to 15, so the 2 orders are added to the backlog.
- 1 order of type sell with price 25 is placed. There are no buy orders with prices larger than or equal to 25 in the backlog, so this order is added to the backlog.
- 4 orders of type buy with price 30 are placed. The first 2 orders are matched with the 2 sell orders of the least price, which is 15 and these 2 sell orders are removed from the backlog. The 3rd order is matched with the sell order of the least price, which is 25 and this sell order is removed from the backlog. Then, there are no more sell orders in the backlog, so the 4th order is added to the backlog.
Finally, the backlog has 5 buy orders with price 10, and 1 buy order with price 30. So the total number of orders in the backlog is 6.
Example 2:


Input: orders = [[7,1000000000,1],[15,3,0],[5,999999995,0],[5,1,1]]
Output: 999999984
Explanation: Here is what happens with the orders:
- 109 orders of type sell with price 7 are placed. There are no buy orders, so the 109 orders are added to the backlog.
- 3 orders of type buy with price 15 are placed. They are matched with the 3 sell orders with the least price which is 7, and those 3 sell orders are removed from the backlog.
- 999999995 orders of type buy with price 5 are placed. The least price of a sell order is 7, so the 999999995 orders are added to the backlog.
- 1 order of type sell with price 5 is placed. It is matched with the buy order of the highest price, which is 5, and that buy order is removed from the backlog.
Finally, the backlog has (1000000000-3) sell orders with price 7, and (999999995-1) buy orders with price 5. So the total number of orders = 1999999991, which is equal to 999999984 % (109 + 7).
 

Constraints:

1 <= orders.length <= 105
orders[i].length == 3
1 <= pricei, amounti <= 109
orderTypei is either 0 or 1.



# java



class Solution {
  public int getNumberOfBacklogOrders(int[][] orders) {
    final int MOD = 1_000_000_007;
    int ans = 0;
    Queue<int[]> buysMaxHeap = new PriorityQueue<>(Comparator.comparingInt(a -> - a[0]));
    Queue<int[]> sellsMinHeap = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));

    for (int[] order : orders) {
      if (order[2] == 0)
        buysMaxHeap.offer(order);
      else
        sellsMinHeap.offer(order);
      while (!buysMaxHeap.isEmpty() && !sellsMinHeap.isEmpty() &&
             buysMaxHeap.peek()[0] >= sellsMinHeap.peek()[0]) {
        final int minAmount = Math.min(buysMaxHeap.peek()[1], sellsMinHeap.peek()[1]);
        buysMaxHeap.peek()[1] -= minAmount;
        sellsMinHeap.peek()[1] -= minAmount;
        if (buysMaxHeap.peek()[1] == 0)
          buysMaxHeap.poll();
        if (sellsMinHeap.peek()[1] == 0)
          sellsMinHeap.poll();
      }
    }

    while (!buysMaxHeap.isEmpty()) {
      ans += buysMaxHeap.poll()[1];
      ans %= MOD;
    }

    while (!sellsMinHeap.isEmpty()) {
      ans += sellsMinHeap.poll()[1];
      ans %= MOD;
    }

    return ans;
  }
}


or


class Solution {
    public int getNumberOfBacklogOrders(int[][] orders) {
        PriorityQueue<int[]> buy = new PriorityQueue<>((a, b) -> b[0] - a[0]);
        PriorityQueue<int[]> sell = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (var e : orders) {
            int p = e[0], a = e[1], t = e[2];
            if (t == 0) {
                while (a > 0 && !sell.isEmpty() && sell.peek()[0] <= p) {
                    var q = sell.poll();
                    int x = q[0], y = q[1];
                    if (a >= y) {
                        a -= y;
                    } else {
                        sell.offer(new int[] {x, y - a});
                        a = 0;
                    }
                }
                if (a > 0) {
                    buy.offer(new int[] {p, a});
                }
            } else {
                while (a > 0 && !buy.isEmpty() && buy.peek()[0] >= p) {
                    var q = buy.poll();
                    int x = q[0], y = q[1];
                    if (a >= y) {
                        a -= y;
                    } else {
                        buy.offer(new int[] {x, y - a});
                        a = 0;
                    }
                }
                if (a > 0) {
                    sell.offer(new int[] {p, a});
                }
            }
        }
        long ans = 0;
        final int mod = (int) 1e9 + 7;
        while (!buy.isEmpty()) {
            ans += buy.poll()[1];
        }
        while (!sell.isEmpty()) {
            ans += sell.poll()[1];
        }
        return (int) (ans % mod);
    }
}



or



class Solution {
    
    PriorityQueue<Order> buyBackLog;
    PriorityQueue<Order> sellBackLog;
    
    static int MOD = 1_000_000_007;
    
    
    public int getNumberOfBacklogOrders(int[][] orders) {
        
        //max heap, heapify on price
        buyBackLog = new PriorityQueue<Order>((a, b) -> (b.price - a.price));
        //min heap, heapify on price
        sellBackLog = new PriorityQueue<Order>((a, b) -> (a.price - b.price));
        
        
        //handle all order
        for(int[] order : orders){
            int price     = order[0];
            int quantity  = order[1];
            int orderType = order[2];
            
            if(orderType == 0){
                //buy order 
                handleBuyOrder(new Order(price, quantity));
                
            }else if(orderType == 1){ 
                //sell order
                handleSellOrder(new Order(price, quantity));
            }
        }
        
        long counts = 0L;
        
        //count buy backlog
        while(!buyBackLog.isEmpty()){
            counts += buyBackLog.remove().quantity; 
            counts %= MOD;
        }
        
        //count sell backlog
        while(!sellBackLog.isEmpty()){
            counts += sellBackLog.remove().quantity; 
            counts %= MOD;
        }
        
        
        return (int) (counts % MOD);
    }
    
    
    
    
    private void handleBuyOrder(Order buyOrder){
        //just add buyorder, if there is no sell back log
        if(sellBackLog.isEmpty()){
            buyBackLog.add(buyOrder);
            return;
        }
        
        
        while(!sellBackLog.isEmpty() && buyOrder.price >= sellBackLog.peek().price && buyOrder.quantity > 0){
            //selloder with minumum price
            Order sellOrder = sellBackLog.remove();
            
            if(buyOrder.quantity >= sellOrder.quantity){
                buyOrder.quantity -= sellOrder.quantity;
                sellOrder.quantity = 0;
            } else {
                //decrement sell order, add remaining sellorder
                sellOrder.quantity -= buyOrder.quantity;
                sellBackLog.add(sellOrder);
                
                buyOrder.quantity = 0;
            }
        }
        
        //add reaming buyorder
        if(buyOrder.quantity > 0){
            buyBackLog.add(buyOrder);
        }
    }
    
    
    private void handleSellOrder(Order sellOrder){
        //just add sell order, if there is no buy backlog
        if(buyBackLog.isEmpty()){
            sellBackLog.add(sellOrder);
            return;
        }
        
        
        while(!buyBackLog.isEmpty() && buyBackLog.peek().price >= sellOrder.price && sellOrder.quantity > 0){
            //buy order with maximum price
            Order buyOrder = buyBackLog.remove();
            
            if(sellOrder.quantity >= buyOrder.quantity){
                sellOrder.quantity -= buyOrder.quantity;
                buyOrder.quantity = 0;
                
            }else{
                //decrement buy order quantity, add remaining buyorder
                buyOrder.quantity -= sellOrder.quantity;
                buyBackLog.add(buyOrder);
                
                sellOrder.quantity = 0;
            }
        }
        
        //add remaining sell order
        if(sellOrder.quantity > 0){
            sellBackLog.add(sellOrder);
        }
    }
}

class Order{
    int price;
    int quantity;
    
    public Order(int price, int quantity){
        this.price = price;
        this.quantity = quantity;
    }
}


or


class Order implements Comparable<Order> {
    int price, amount, orderType;
    Order(int price, int amount, int orderType) {
        this.price = price;
        this.amount = amount;
        this.orderType = orderType;
    }
    
    @Override
    public int compareTo(Order order) {
        return this.price - order.price;
    }
}

class Solution {
    static final int  BUY = 0, SELL = 1, mod = 1000000007;
    public int getNumberOfBacklogOrders(int[][] orders) {
        PriorityQueue<Order> sellBacklog = new PriorityQueue<>();
        PriorityQueue<Order> buyBacklog = new PriorityQueue<>(Collections.reverseOrder());
        for(int[] order: orders) {
            int price = order[0], amount = order[1], orderType = order[2];
            Order orderInstance = new Order(price, amount, orderType);
            if(orderType == SELL) {
                Order topBuy = buyBacklog.peek();
                while(topBuy != null && 
                      topBuy.price >= orderInstance.price && 
                      orderInstance.amount > 0) {
                    int buysRemaining = Math.max(0, topBuy.amount - orderInstance.amount);
                    int orderRemainig = Math.max(0, orderInstance.amount - topBuy.amount);
                    topBuy.amount = buysRemaining;
                    if(buysRemaining == 0) {
                        buyBacklog.poll();
                    }
                    orderInstance.amount = orderRemainig;    
                    topBuy = buyBacklog.peek();
                }
                if(orderInstance.amount > 0) {
                    sellBacklog.add(orderInstance);
                }
            } else {
                Order topSell = sellBacklog.peek();
                while(topSell != null && 
                      topSell.price <= orderInstance.price && 
                      orderInstance.amount > 0) {
                    int sellsRemaining = Math.max(0, topSell.amount - orderInstance.amount);
                    int orderRemaining = Math.max(0, orderInstance.amount - topSell.amount);
                    topSell.amount = sellsRemaining;
                    if(sellsRemaining == 0) {
                        sellBacklog.poll();
                    }
                    orderInstance.amount = orderRemaining;
                    topSell = sellBacklog.peek();
                }
                if(orderInstance.amount > 0) {
                    buyBacklog.add(orderInstance);
                }
            }
        }
        int total = 0;
        while(!sellBacklog.isEmpty()) {
            Order sell = sellBacklog.poll();
            total = (total + sell.amount) % mod;
        }
        while (!buyBacklog.isEmpty()) {
            Order buy = buyBacklog.poll();
            total = (total + buy.amount) % mod;
        }
        return total;
    }
}


or


class Solution {
    public int getNumberOfBacklogOrders(final int[][] orders) {
        final Queue<int[]> buy = new PriorityQueue<>((a, b) -> b[0] - a[0]);
        final Queue<int[]> sell = new PriorityQueue<>((a, b) -> a[0] - b[0]);

        for(final int[] order : orders) {
            if(order[2] == 0)
                buy.offer(new int[] { order[0], order[1] });
            else
                sell.offer(new int[] { order[0], order[1] });

            while(!buy.isEmpty() && !sell.isEmpty() && sell.peek()[0] <= buy.peek()[0]) {
                final int[] sellOrder = sell.peek(), buyOrder = buy.peek();

                final int processed = Math.min(sellOrder[1], buyOrder[1]);

                sellOrder[1] -= processed;
                buyOrder[1] -= processed;

                if(sellOrder[1] == 0)
                    sell.poll();

                if(buyOrder[1] == 0)
                    buy.poll();
            }
        }

        int backlog = 0;

        while(!buy.isEmpty())
            backlog = (backlog + buy.poll()[1]) % 1000000007;

        while(!sell.isEmpty())
            backlog = (backlog + sell.poll()[1]) % 1000000007;

        return backlog;
    }
}


or


class Solution {
    final static int MOD = (int) (1e9 + 7);
    class Order{
        int price;
        int amount;
        Order(int price, int amount){
            this.price = price;
            this.amount = amount;
        }
    }
    public int getNumberOfBacklogOrders(int[][] orders) {
        PriorityQueue<Order> sell = new PriorityQueue<>((Order o1,Order o2)->{
            return o1.price - o2.price;
        });
        PriorityQueue<Order> buy = new PriorityQueue<>((Order o1,Order o2)->{
            return o2.price - o1.price;
        });

        boolean flag;
        for(int[] ord : orders){
            int amount = ord[1];
            int price = ord[0];
            if(ord[2] == 0){ //buy
                while(amount>0 && !sell.isEmpty() && sell.peek().price<=price){
                    Order front = sell.poll();
                    if(front.amount>=amount){
                        front.amount = front.amount - amount;
                        amount = 0;
                        if(front.amount>0)  sell.add(front);
                    }    
                    else
                        amount = amount - front.amount;          
                }
                if(amount > 0)  buy.add(new Order(price, amount));
            }else{ //sell
                while(amount>0 && !buy.isEmpty() && buy.peek().price>=price){
                    Order front = buy.poll();
                    if(front.amount>=amount){
                        front.amount = front.amount - amount;
                        amount = 0;
                        if(front.amount>0)  buy.add(front);
                    }    
                    else
                        amount = amount - front.amount;         
                }
                if(amount > 0)  sell.add(new Order(price, amount));
            }
        }
        long ans = 0;
        while(!sell.isEmpty())
            ans= (ans + sell.poll().amount) % MOD;
        
        while(!buy.isEmpty())
            ans= (ans + buy.poll().amount) % MOD;

        return (int) ans%MOD;
        
    }
}


or



/**
 * @param {number[][]} orders
 * @return {number}
 */
/*
 URL := https://leetcode.com/problems/number-of-orders-in-the-backlog/
1801. Number of Orders in the Backlog
Market orders placed in batches @ given prices.
Greedy look -> largestPriceBuy,smallestPriceSell
Both sides are auction market driven.
Do these buy-sell order backlogs ever clear up?

Steps
(A) Match the order
(B) Execute the order
(C) Remove the order from the backlog OR add the order to the baclog

 Stock markets driven by order backlogs and PME : Price Matching Engine
 number backlog orders = num(buy_backlog) + num(sell_backlog)
 Markets prioritize the buy and sell orders
 */
class Solution {

    public int getNumberOfBacklogOrders(int[][] orders) {
        long numberBacklogOrders = 0;
        // https://stackoverflow.com/questions/683041/how-do-i-use-a-priorityqueue
        // Lambda Expr Java 8 inlining custom comparators for dstructures
        PriorityQueue<int[]> buyBacklog = new PriorityQueue<int[]>((a,b) -> b[0] - a[0]);
        PriorityQueue<int[]> sellBacklog = new PriorityQueue<int[]>((a,b) -> a[0] - b[0]);
        for(int[] order: orders) {
            int orderType = order[2];
            if(orderType == 0) { // batch of buy orders
                // Own function : repeat code here
                if(sellBacklog.size() == 0){
                    buyBacklog.add(order);
                } else if ( sellBacklog.size() > 0) {
                    boolean addOrder = true;
                    while(order[1] > 0 && sellBacklog.size() > 0){
                        int[] bestSell = sellBacklog.remove();
                        // Potential bug here ( with future in lines 61-62 )
                        if(bestSell[0] > order[0]) {
                            buyBacklog.add(order);
                            sellBacklog.add(bestSell);
                            addOrder = false;
                            break; // sell orders all higher than buy
                        } else {
                            int numOrdersExec = Math.min(bestSell[1], order[1]);
                            order[1] -= numOrdersExec;
                            bestSell[1] -= numOrdersExec;
                            if(bestSell[1] > 0) { // we did not sell them all here
                                sellBacklog.add(bestSell);
                                break;
                            }
                        }
                    }
                    if(addOrder && order[1] > 0){ // still orders to buy after decrs
                        buyBacklog.add(order);
                    }
                }
            } else if ( orderType == 1) { // batch of sell orders
                if(buyBacklog.size() == 0){
                    sellBacklog.add(order);
                } else if ( buyBacklog.size() > 0) {
                    boolean addOrder = true;
                    while(order[1] > 0 && buyBacklog.size() > 0){
                        int[] bestBuy = buyBacklog.remove();
                        if(bestBuy[0] < order[0]) {
                            addOrder = false;
                            sellBacklog.add(order);
                            buyBacklog.add(bestBuy);
                            break; // buy orders are less than current sell order : no profit
                        } else {
                            int numOrdersExec = Math.min(bestBuy[1], order[1]);
                            // System.out.printf("Num sell exec = %d\n", numOrdersExec);
                            order[1] -= numOrdersExec;
                            bestBuy[1] -= numOrdersExec;
                            if(bestBuy[1] > 0) { // we did not sell them all here
                                // System.out.println("Still have old buy");
                                buyBacklog.add(bestBuy);
                                break;
                            }
                        }
                    }
                    if(addOrder && order[1] > 0){ // still orders to buy after decrs
                        sellBacklog.add(order);
                    }
                }
            }
        }
        // Get remaining buy-sell amounts in market backlogs
        Iterator<int[]> pqItr;
        pqItr = buyBacklog.iterator();
        while(pqItr.hasNext()){
            int[] buyOrder = pqItr.next();
            numberBacklogOrders += (long)(buyOrder[1]);
        }
        // reassignation of iterators
        pqItr = sellBacklog.iterator();
        while(pqItr.hasNext()){
            int[] sellOrder = pqItr.next();
            numberBacklogOrders += (long)(sellOrder[1]);
        }
        long modulo = (long)(Math.pow(10,9) + 7);
        numberBacklogOrders = numberBacklogOrders % modulo;
        return (int)(numberBacklogOrders); // overflow long->int
    }
}




or



class Solution {

    class Order{
        int price;
        int amount;
        public Order(int price, int amount){
            this.price = price;
            this.amount = amount;
        }
    }

    public int getNumberOfBacklogOrders(int[][] orders) {
        PriorityQueue<Order> buyBacklog = new PriorityQueue<>( (a,b) -> Integer.compare(b.price, a.price) );
        PriorityQueue<Order> sellBacklog = new PriorityQueue<>( (a,b) -> Integer.compare(a.price, b.price) );
        for( int i = 0; i< orders.length ; i++){
            int price = orders[i][0];
            int amount = orders[i][1];
            int orderType = orders[i][2];

            if( orderType == 0){
                //BUy order
                while(!sellBacklog.isEmpty() && sellBacklog.peek().price <= price ){
                    Order sellOrder = sellBacklog.poll();
                    int remainingQty = sellOrder.amount;
                    
                    if( remainingQty < amount ){
                        amount-=remainingQty;
                    }else{
                        Order updatedSellOrder = new Order(sellOrder.price, remainingQty - amount);
                        amount = 0;
                        sellBacklog.offer( updatedSellOrder);
                        break;
                    }
                }

                if( amount > 0){
                    buyBacklog.offer( new Order( price, amount));
                }
            }else{
                //Sell order
                while( !buyBacklog.isEmpty() && buyBacklog.peek().price >= price){
                    Order buyOrder = buyBacklog.poll();
                    int remainingQty = buyOrder.amount;
                    if( remainingQty < amount ){
                        amount-=remainingQty;
                    }else{
                        Order updatedBuyOrder = new Order( buyOrder.price , remainingQty - amount);
                        amount =0;
                        buyBacklog.offer(updatedBuyOrder );
                        break;
                    }
                }
                if( amount > 0){
                    sellBacklog.offer( new Order(price, amount));
                }
            }
        }

        long totalOrdersRemaining = 0;
        while( !buyBacklog.isEmpty() ){
            totalOrdersRemaining+= buyBacklog.poll().amount;
        }
        
        while( !sellBacklog.isEmpty() ){
            totalOrdersRemaining+= sellBacklog.poll().amount;
        }

        return (int)(totalOrdersRemaining % (Math.pow(10, 9) + 7));
    }
}



