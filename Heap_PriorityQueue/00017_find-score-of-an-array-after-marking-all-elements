https://leetcode.com/problems/find-score-of-an-array-after-marking-all-elements/description/


2593. Find Score of an Array After Marking All Elements
Medium
Topics
Companies
Hint
You are given an array nums consisting of positive integers.

Starting with score = 0, apply the following algorithm:

Choose the smallest integer of the array that is not marked. If there is a tie, choose the one with the smallest index.
Add the value of the chosen integer to score.
Mark the chosen element and its two adjacent elements if they exist.
Repeat until all the array elements are marked.
Return the score you get after applying the above algorithm.

 

Example 1:

Input: nums = [2,1,3,4,5,2]
Output: 7
Explanation: We mark the elements as follows:
- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,1,3,4,5,2].
- 2 is the smallest unmarked element, so we mark it and its left adjacent element: [2,1,3,4,5,2].
- 4 is the only remaining unmarked element, so we mark it: [2,1,3,4,5,2].
Our score is 1 + 2 + 4 = 7.
Example 2:

Input: nums = [2,3,5,1,3,2]
Output: 5
Explanation: We mark the elements as follows:
- 1 is the smallest unmarked element, so we mark it and its two adjacent elements: [2,3,5,1,3,2].
- 2 is the smallest unmarked element, since there are two of them, we choose the left-most one, so we mark the one at index 0 and its right adjacent element: [2,3,5,1,3,2].
- 2 is the only remaining unmarked element, so we mark it: [2,3,5,1,3,2].
Our score is 1 + 2 + 2 = 5.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 106


# java


class Solution {
  public long findScore(int[] nums) {
    long ans = 0;
    TreeSet<Pair<Integer, Integer>> numAndIndexes =
        new TreeSet<>(Comparator.comparingInt(Pair<Integer, Integer>::getKey)
                          .thenComparingInt(Pair<Integer, Integer>::getValue));
    boolean[] seen = new boolean[nums.length];

    for (int i = 0; i < nums.length; ++i)
      numAndIndexes.add(new Pair<>(nums[i], i));

    for (Pair<Integer, Integer> pair : numAndIndexes) {
      final int num = pair.getKey();
      final int i = pair.getValue();
      if (seen[i])
        continue;
      if (i > 0)
        seen[i - 1] = true;
      if (i + 1 < nums.length)
        seen[i + 1] = true;
      seen[i] = true;
      ans += num;
    }

    return ans;
  }
}


or


class Solution {
    public long findScore(int[] nums) {
        int n = nums.length;
        boolean[] vis = new boolean[n];
        PriorityQueue<int[]> q
            = new PriorityQueue<>((a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
        for (int i = 0; i < n; ++i) {
            q.offer(new int[] {nums[i], i});
        }
        long ans = 0;
        while (!q.isEmpty()) {
            var p = q.poll();
            ans += p[0];
            vis[p[1]] = true;
            for (int j : List.of(p[1] - 1, p[1] + 1)) {
                if (j >= 0 && j < n) {
                    vis[j] = true;
                }
            }
            while (!q.isEmpty() && vis[q.peek()[1]]) {
                q.poll();
            }
        }
        return ans;
    }
}


or



class Solution {

    public long findScore(int[] nums) {
        long ans = 0;
        int[][] customSorted = new int[nums.length][2];
        boolean[] marked = new boolean[nums.length];

        for (int i = 0; i < nums.length; i++) {
            customSorted[i][0] = nums[i];
            customSorted[i][1] = i;
        }

        Arrays.sort(customSorted, (arr1, arr2) -> arr1[0] - arr2[0]);

        for (int i = 0; i < nums.length; i++) {
            int number = customSorted[i][0];
            int index = customSorted[i][1];
            if (!marked[index]) {
                ans += number;
                marked[index] = true;
                // mark adjacent elements if they exist
                if (index - 1 >= 0) {
                    marked[index - 1] = true;
                }
                if (index + 1 < nums.length) {
                    marked[index + 1] = true;
                }
            }
        }

        return ans;
    }
}


or


class Solution {

    public long findScore(int[] nums) {
        long ans = 0;
        boolean[] marked = new boolean[nums.length];

        PriorityQueue<int[]> heap = new PriorityQueue<>((arr1, arr2) -> {
            if (arr1[0] != arr2[0]) return arr1[0] - arr2[0];
            return arr1[1] - arr2[1];
        });

        for (int i = 0; i < nums.length; i++) {
            heap.add(new int[] { nums[i], i });
        }

        while (!heap.isEmpty()) {
            int[] element = heap.remove();
            int number = element[0];
            int index = element[1];
            if (!marked[index]) {
                ans += number;
                marked[index] = true;
                // mark adjacent elements if they exist
                if (index - 1 >= 0) {
                    marked[index - 1] = true;
                }
                if (index + 1 < nums.length) {
                    marked[index + 1] = true;
                }
            }
        }

        return ans;
    }
}


or


class Solution {

    public long findScore(int[] numbers) {
        long ans = 0;
        for (int i = 0; i < numbers.length; i += 2) {
            int currentStart = i;
            while (i + 1 < numbers.length && numbers[i + 1] < numbers[i]) {
                i++;
            }
            for (
                int currentIndex = i;
                currentIndex >= currentStart;
                currentIndex -= 2
            ) {
                ans += numbers[currentIndex];
            }
        }
        return ans;
    }
}



or


class Solution {
    public long findScore(int[] nums) {
        long score = 0; // Use long to avoid overflow
        int n = nums.length;
        Deque<Integer> q = new LinkedList<>();

        // Traverse through the array
        for (int i = 0; i < n; i++) {
            // If queue is not empty and the current number is greater than or equal to the last in queue
            if (!q.isEmpty() && nums[i] >= q.peekLast()) {
                boolean skip = false;
                // Process the elements in the queue
                while (!q.isEmpty()) {
                    int add = q.pollLast();
                    if (!skip) {
                        score += add;
                    }
                    skip = !skip;
                }
                continue;
            }

            // Add current element to the queue
            q.addLast(nums[i]);
        }

        // Final processing of remaining elements in the queue
        boolean skip = false;
        while (!q.isEmpty()) {
            int add = q.pollLast();
            if (!skip) {
                score += add;
            }
            skip = !skip;
        }

        return score;
    }
}



or


import java.util.*;

class Solution {
    public long findScore(int[] nums) {
        int n = nums.length;
        
        // Create a list of pairs (value, index)
        List<int[]> sortedNums = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            sortedNums.add(new int[] {nums[i], i});
        }

        // Sort the list based on the value in each pair
        Collections.sort(sortedNums, (a, b) -> Integer.compare(a[0], b[0]));
        
        long score = 0;  // Use long to avoid overflow
        
        // Iterate through the sorted array
        for (int i = 0; i < n; i++) {
            int num = sortedNums.get(i)[0];
            int idx = sortedNums.get(i)[1];
            
            if (nums[idx] != -1) {  // Process only if not already marked
                score += num;  // Add the value to the score
                nums[idx] = -1;  // Mark the current index as processed
                if (idx > 0) {
                    nums[idx - 1] = -1;  // Mark the left neighbor as processed
                }
                if (idx < n - 1) {
                    nums[idx + 1] = -1;  // Mark the right neighbor as processed
                }
            }
        }
        
        return score;
    }
}


or


class Pair{
    int num;
    int index;
    Pair(int num, int index)
    { this.num = num; this.index = index; }
}
class Solution {
    public long findScore(int[] nums) 
    {
        int n = nums.length;
        PriorityQueue<Pair>pq = new PriorityQueue<Pair>((Pair a, Pair b)->{
            if (a.num != b.num) return (a.num - b.num);
            else return (a.index - b.index);
        });
        for (int i = 0; i < nums.length; i++ ) pq.add(new Pair(nums[i], i));
        boolean[] marked = new boolean[n];
        
        long ans = 0;
        while(!pq.isEmpty())
        {
            int currNum = pq.peek().num;
            int currIdx = pq.peek().index;
            pq.poll();
            if (marked[currIdx]) continue;
            
            ans += currNum;
            marked[currIdx] = true;
            if (currIdx + 1 < n) marked[currIdx + 1] = true;
            if (currIdx - 1 >= 0) marked[currIdx - 1] = true; 
        }
        return ans;
    }
}



or


