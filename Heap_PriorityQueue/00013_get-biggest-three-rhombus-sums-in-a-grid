https://leetcode.com/problems/get-biggest-three-rhombus-sums-in-a-grid/description/

1878. Get Biggest Three Rhombus Sums in a Grid
Medium
Topics
Companies
Hint
You are given an m x n integer matrix grid​​​.

A rhombus sum is the sum of the elements that form the border of a regular rhombus shape in grid​​​. The rhombus must have the shape of a square rotated 45 degrees with each of the corners centered in a grid cell. Below is an image of four valid rhombus shapes with the corresponding colored cells that should be included in each rhombus sum:


Note that the rhombus can have an area of 0, which is depicted by the purple rhombus in the bottom right corner.

Return the biggest three distinct rhombus sums in the grid in descending order. If there are less than three distinct values, return all of them.

 

Example 1:


Input: grid = [[3,4,5,1,3],[3,3,4,2,3],[20,30,200,40,10],[1,5,5,4,1],[4,3,2,2,5]]
Output: [228,216,211]
Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.
- Blue: 20 + 3 + 200 + 5 = 228
- Red: 200 + 2 + 10 + 4 = 216
- Green: 5 + 200 + 4 + 2 = 211
Example 2:


Input: grid = [[1,2,3],[4,5,6],[7,8,9]]
Output: [20,9,8]
Explanation: The rhombus shapes for the three biggest distinct rhombus sums are depicted above.
- Blue: 4 + 2 + 6 + 8 = 20
- Red: 9 (area 0 rhombus in the bottom right corner)
- Green: 8 (area 0 rhombus in the bottom middle)
Example 3:

Input: grid = [[7,7,7]]
Output: [7]
Explanation: All three possible rhombus sums are the same, so return [7].
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
1 <= grid[i][j] <= 105



# java


class Solution {
  public int[] getBiggestThree(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    TreeSet<Integer> sums = new TreeSet<>();

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        for (int sz = 0; i + sz < m && i - sz >= 0 && j + 2 * sz < n; ++sz) {
          final int sum = sz == 0 ? grid[i][j] : getSum(grid, i, j, sz);
          sums.add(sum);
          if (sums.size() > 3)
            sums.pollFirst();
        }

    return sums.descendingSet().stream().mapToInt(Integer::intValue).toArray();
  }

  // Returns the sum of the rhombus, where the top grid is (i, j) and the edge
  // size is `sz`.
  private int getSum(int[][] grid, int i, int j, int sz) {
    int x = i;
    int y = j;
    int sum = 0;

    // Go left down.
    for (int k = 0; k < sz; ++k)
      sum += grid[--x][++y];

    // Go right down.
    for (int k = 0; k < sz; ++k)
      sum += grid[++x][++y];

    // Go right up.
    for (int k = 0; k < sz; ++k)
      sum += grid[++x][--y];

    // Go left up.
    for (int k = 0; k < sz; ++k)
      sum += grid[--x][--y];

    return sum;
  }
}


or



class Solution {
    public int[] getBiggestThree(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] s1 = new int[m + 1][n + 2];
        int[][] s2 = new int[m + 1][n + 2];
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                s1[i][j] = s1[i - 1][j - 1] + grid[i - 1][j - 1];
                s2[i][j] = s2[i - 1][j + 1] + grid[i - 1][j - 1];
            }
        }
        TreeSet<Integer> ss = new TreeSet<>();
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                int l = Math.min(Math.min(i - 1, m - i), Math.min(j - 1, n - j));
                ss.add(grid[i - 1][j - 1]);
                for (int k = 1; k <= l; ++k) {
                    int a = s1[i + k][j] - s1[i][j - k];
                    int b = s1[i][j + k] - s1[i - k][j];
                    int c = s2[i][j - k] - s2[i - k][j];
                    int d = s2[i + k][j] - s2[i][j + k];
                    ss.add(a + b + c + d - grid[i + k - 1][j - 1] + grid[i - k - 1][j - 1]);
                }
                while (ss.size() > 3) {
                    ss.pollFirst();
                }
            }
        }
        int[] ans = new int[ss.size()];
        for (int i = 0; i < ans.length; ++i) {
            ans[i] = ss.pollLast();
        }
        return ans;
    }
}


or


class Solution {
    public int[] getBiggestThree(int[][] grid) {
        int end = Math.min(grid.length, grid[0].length);
        int maxThree[] = {0,0,0};
        for(int length=0; length<end; length++){
            searchBigThree(grid, maxThree, length);
        }
        
        Arrays.sort(maxThree);
        
        // If there are less than three distinct values, return all of them.
        if(maxThree[0] == 0){
            if(maxThree[1] == 0){
                return new int[]{maxThree[2]}; 
            }
            return new int[]{maxThree[2],maxThree[1]}; 
        }
        
        // reverse array
        maxThree[0] = maxThree[0]^maxThree[2];
        maxThree[2] = maxThree[0]^maxThree[2];
        maxThree[0] = maxThree[0]^maxThree[2];
        
        
        return maxThree;
    }
    
    void searchBigThree(int[][] grid, int[] maxThree, int length){
        int end = grid.length-(length==0?0: 2*length);
        int end1 = grid[0].length-(length);
        for(int start = 0; start<end; start++){
            for(int start1 = length; start1<end1; start1++){
                if(start+start1 >= length){
                    addToMaxThree(maxThree, getSum(grid, start, start1, length));
                }
            }
        }
    }
    
    /*
    get sum of edges of rhombus abcd
            a
           / \
          d   b
           \ /
            c
    
    */
    int getSum(int[][] grid, int i, int j, int length){
        if(length == 0){
            return grid[i][j];
        }
        
        int sum = 0;
        // edge ab
        for(int it=0; it<=length; it++){
            sum = sum + grid[i+it][j+it];
        }
        
        // edge ad
        for(int it=1; it<=length; it++){
            sum = sum + grid[i+it][j-it];
        }
        
        // edge dc
        for(int it=1; it<=length; it++){
            sum = sum + grid[i+length+it][j-length+it];
        }
        
        // edge bc
        for(int it=1; it<length; it++){
            sum = sum + grid[i+length+it][j+length-it];
        }
        
        return sum;
    }
    
    void addToMaxThree(int[] maxThree, int num){
        // Do not add duplicate entry
        if(maxThree[0] == num || maxThree[1] == num || maxThree[2] == num ){
            return;
        }
        
        Arrays.sort(maxThree);
        
        if(maxThree[0] < num){
            maxThree[0] = num;
        }
    } 
}



or



class Solution {
    int rows;
    int cols;
    int[][] grid;
    
    HashSet<Integer> set;
    PriorityQueue<Integer> minHeap;
    
    public int[] getBiggestThree(int[][] grid) {
        this.grid = grid;
        rows = grid.length;
        cols = grid[0].length;
        
        set = new HashSet();
        minHeap = new PriorityQueue<Integer>((a, b) -> (a - b));
        
        
        for(int r = 0; r < rows; r++){
            for(int c = 0; c < cols; c++){
                //find all the rhombus of center (r, c)
                findRhombusWithCenter(r, c);
            }
        }
        
        //get the largest 3 rhombus 
        int[] result = new int[minHeap.size()];
        int i = result.length - 1;
        while(!minHeap.isEmpty()){
            result[i--] = minHeap.remove();
        }
        
        return result;
    }
    
    
    
    private void findRhombusWithCenter(int r, int c){
        int sum = grid[r][c];
        
        if(!set.contains(sum)){
            minHeap.add(sum);
            if(minHeap.size() > 3) minHeap.remove();
            set.add(sum);
        }
        
        int size = 1;
        
        while(true){
            
            if(!insideGrid(r + size, c)) break;
            if(!insideGrid(r - size, c)) break;
            if(!insideGrid(r, c + size)) break;
            if(!insideGrid(r, c - size)) break;
            
            sum = 0;
            for(int i = 0; i <= size; i++){
                sum += grid[r - size + i][c + i];
                sum += grid[r - size + i][c - i];
                
                sum += grid[r + size - i][c + i];
                sum += grid[r + size - i][c - i];
            }

            
            sum -= grid[r + size][c];
            sum -= grid[r - size][c];
            sum -= grid[r][c + size];
            sum -= grid[r][c - size];
            
            
            if(!set.contains(sum)){
                minHeap.add(sum);
                
                if(minHeap.size() > 3) minHeap.remove();
                
                set.add(sum);
            }
            
            size++;
        }
    }
    
    private boolean insideGrid(int i, int j){
        return i >= 0 && i < rows && j >= 0 && j < cols;
    }
}


or




class Solution {

    static int calc(int arr[][], int left, int right, int up, int down){

        int sum = 0;
        int c1 = (left+right)/2;
        int c2 = c1;

        boolean flag = true;

        for(int i=up; i<=down; i++){
            if(c1==c2) sum+=arr[i][c1];
            else{
                sum+=arr[i][c1]+arr[i][c2];
            }

            if(c1==left) flag = false;

            if(flag==true){
                c1 = c1-1;
                c2 = c2+1;
            }else{
                c1 = c1+1;
                c2 = c2-1;
            }
        }
        return sum;
    }
    public int[] getBiggestThree(int[][] arr) {
        int m = arr.length;
        int n = arr[0].length;

        PriorityQueue<Integer> pq = new PriorityQueue<>();


        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                int l = j;
                int r = j;
                int d = i;

                while(l>=0 && r<=n-1 && d<=m-1){
                    int sum = calc(arr,l,r,i,d);
                    l=l-1;
                    r=r+1;
                    d=d+2;

                    if(pq.size()<3){
                        if(!pq.contains(sum)) pq.add(sum);
                    }else{
                        if(pq.peek()<sum && !pq.contains(sum)){
                            pq.remove();
                            pq.add(sum);
                        } 
                    }
                }
            }
        }

        

        if(pq.size()==1){
            return new int[]{pq.peek()};
        }else if(pq.size()==2){
            int a = pq.remove();
            int b = pq.remove();

            return new int[]{b,a};
        }else{
            int a = pq.remove();
            int b = pq.remove();
            int c = pq.remove();

            return new int[]{c,b,a};
        }
    }
}



or


