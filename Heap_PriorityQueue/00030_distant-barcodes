https://leetcode.com/problems/distant-barcodes/description/

1054. Distant Barcodes
Medium
Topics
Companies
Hint
In a warehouse, there is a row of barcodes, where the ith barcode is barcodes[i].

Rearrange the barcodes so that no two adjacent barcodes are equal. You may return any answer, and it is guaranteed an answer exists.

 

Example 1:

Input: barcodes = [1,1,1,2,2,2]
Output: [2,1,2,1,2,1]
Example 2:

Input: barcodes = [1,1,1,1,2,2,3,3]
Output: [1,3,1,3,1,2,1,2]
 

Constraints:

1 <= barcodes.length <= 10000
1 <= barcodes[i] <= 10000



# java



class Solution {
  public int[] rearrangeBarcodes(int[] barcodes) {
    int[] ans = new int[barcodes.length];
    int[] count = new int[10001];
    int maxCount = 0;
    int maxNum = 0;

    for (final int b : barcodes)
      ++count[b];

    for (int i = 1; i < 10001; ++i)
      if (count[i] > maxCount) {
        maxCount = count[i];
        maxNum = i;
      }

    fillAns(ans, count, maxNum, barcodes.length);
    for (int num = 1; num < 10001; ++num)
      fillAns(ans, count, num, barcodes.length);

    return ans;
  }

  private int i = 0; // ans' index

  private void fillAns(int[] ans, int[] count, int num, int n) {
    while (count[num]-- > 0) {
      ans[i] = num;
      i = i + 2 < n ? i + 2 : 1;
    }
  }
}


or


class Solution {
    public int[] rearrangeBarcodes(int[] barcodes) {
        int n = barcodes.length;
        Integer[] t = new Integer[n];
        int mx = 0;
        for (int i = 0; i < n; ++i) {
            t[i] = barcodes[i];
            mx = Math.max(mx, barcodes[i]);
        }
        int[] cnt = new int[mx + 1];
        for (int x : barcodes) {
            ++cnt[x];
        }
        Arrays.sort(t, (a, b) -> cnt[a] == cnt[b] ? a - b : cnt[b] - cnt[a]);
        int[] ans = new int[n];
        for (int k = 0, j = 0; k < 2; ++k) {
            for (int i = k; i < n; i += 2) {
                ans[i] = t[j++];
            }
        }
        return ans;
    }
}


or


class Solution {
    class Bar {
        int barcode;
        int freq;
        Bar(int barcode, int freq) {
            this.barcode = barcode;
            this.freq = freq;
        }
    }

    public int[] rearrangeBarcodes(int[] barcodes) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int n : barcodes) {
            map.put(n, map.getOrDefault(n, 0) + 1);
        }

        PriorityQueue<Bar> pq = new PriorityQueue<>(
                (a, b) -> b.freq - a.freq
        );

        for (int key : map.keySet()) {
            pq.offer(new Bar(key, map.get(key)));
        }

        Bar prev = null;
        for (int i = 0; i < barcodes.length; i++) {
            Bar curr = pq.poll();
            barcodes[i] = curr.barcode;
            curr.freq--;

            if (prev != null) {
                pq.offer(prev);
            }
            if (curr.freq > 0) {
                prev = curr;
            }
            else prev = null;
        }

        return barcodes;
    }
}

// TC: O(n) + O(n * logn) ~ O(n * logn)
// SC: O(n)


or


class Solution {
    public int[] rearrangeBarcodes(int[] barcodes) {
        
        int[] frequency = new int[10001];
        
        for (int barcode : barcodes) {
            ++frequency[barcode];
        }
        
        PriorityQueue<Integer> maxHeap = new PriorityQueue<> ((barcode1, barcode2) -> frequency[barcode2] - frequency[barcode1]);
        
        for (int barcode = 1; barcode <= 10000; barcode++) {
            if (frequency[barcode] != 0) {
                maxHeap.offer (barcode);
            }
        }
        
        int index = 0;
        
        while (!maxHeap.isEmpty ()) {
            int barcode = maxHeap.poll ();
            int freq = frequency[barcode];
            
            while (freq-- != 0) {
                barcodes[index] = barcode;
                index += 2;
                
                if (index >= barcodes.length) {
                    index = 1;
                }
            }
        }
        
        return barcodes;
    }
}


or


public class Solution {

    // Time: O(n), Space: O(1)
    public int[] rearrangeBarcodes(int[] barcodes) {
        if (barcodes == null || barcodes.length <= 2) return barcodes;
        rearrangeBarcodes(barcodes, true);
        return barcodes;
    }

    /**
     * Swaps adjacent barcodes that are equal until no two adjacent barcodes are equal.
     *
     * One call of this method is not always sufficient to correctly rearrange our barcodes.  This
     * scenario usually occurs when we have reached the end of an array of size n and indexes n-1
     * and n-2 are equal.  In this scenario we then wrap around to the start of the array and look
     * for the first different value and swap it with index n-1.  This wrapping logic either
     * completes our rearrangement or moves the values to rearrange to the beginning of the array.
     * In the case where we merely moved the issue up to the front of the array a secondary call to
     * this method will complete the rearrangement.
     *
     * e.g. [2,1,1] will become [1,1,2] after the end of our first 'rearranging' because we started
     * at the middle element and it didn't need to be swapped because the element before it was
     * already different, so we went to the last element and ended up having to start our search for
     * a unique barcode from the beginning of the array.  Since we're not actually completely
     * re-arranged yet another call to this method will get the job done and yield [1,2,1], which is
     * the expected output. Since rearranging an array of barcodes that is already in the correct
     * order does nothing, we always perform a secondary call to this method just in case.
     */
    private void rearrangeBarcodes(int[] barcodes, boolean isFirstRearrangement) {
        for (int i = 1; i < barcodes.length; i++) {
            if (barcodes[i] == barcodes[i - 1]) {
                int swapIndex = findIndexToSwapWith(barcodes, i);

                int temp = barcodes[i];
                barcodes[i] = barcodes[swapIndex];
                barcodes[swapIndex] = temp;
            }
        }

        if (isFirstRearrangement) rearrangeBarcodes(barcodes, false);
    }

    private int findIndexToSwapWith(int[] barcodes, int i) {
        // Return first differing barcode i+1 to the end of barcodes
        for (int j = i + 1; j < barcodes.length; j++) {
            if (barcodes[i] != barcodes[j]) return j;
        }

        // Return first differing barcode from 0 to i-1
        for (int j = 0; j < i; j++) {
            if (barcodes[i] != barcodes[j]) return j;
        }

        throw new IllegalArgumentException("Could not find any barcode aside from " + barcodes[i]);
    }
}


or


public class Solution {

        public int[] rearrangeBarcodes(int[] barcodes) {
        
        //get occurance of bar code
        HashMap<Integer, Integer> counts = new HashMap();
        for(int barcode : barcodes){
            counts.put(barcode, counts.getOrDefault(barcode, 0) + 1);
        }
        
        //store barcode and their count in the max heap
        PriorityQueue<BarCode> maxHeap = new PriorityQueue<BarCode>((a, b) -> (b.count - a.count));
        for(int barcodeVal : counts.keySet()){
            maxHeap.add(new BarCode(barcodeVal, counts.get(barcodeVal)));
        }
        
        int index = 0;
        int[] result = new int[barcodes.length];
        
        while(!maxHeap.isEmpty()){
            //get bar code, with maximum count
            //store in the even index, like 0, 2, 4, ....
			//to avoid same barcode in consecutive place
            BarCode barCode = maxHeap.remove();
            while(barCode.count --> 0){
                result[index] = barCode.val;
                index += 2;
                
                //once it reach the end, start with index 1
                if(index >= barcodes.length) index = 1;
            }
            
        }
        
        return result;
    }
}

class BarCode {
    int val;
    int count;
    
    public BarCode(int val, int count){
        this.val = val;
        this.count = count;
    }
}


