https://leetcode.com/problems/meeting-rooms-ii/description/


253. Meeting Rooms II
Description
Given an array of meeting time intervals intervals where intervals[i] = [starti, endi], return the minimum number of conference rooms required.

 

Example 1:

Input: intervals = [[0,30],[5,10],[15,20]]
Output: 2
Example 2:

Input: intervals = [[7,10],[2,4]]
Output: 1
 

Constraints:

1 <= intervals.length <= 104
0 <= starti < endi <= 106



# java



class Solution {
  public int minMeetingRooms(int[][] intervals) {
    // Store the end times of each room.
    Queue<Integer> minHeap = new PriorityQueue<>();

    Arrays.sort(intervals, Comparator.comparingInt(interval -> interval[0]));

    for (int[] interval : intervals) {
      // There's no overlap, so we can reuse the same room.
      if (!minHeap.isEmpty() && interval[0] >= minHeap.peek())
        minHeap.poll();
      minHeap.offer(interval[1]);
    }

    return minHeap.size();
  }
}



or



class Solution {
  public int minMeetingRooms(int[][] intervals) {
    final int n = intervals.length;
    int ans = 0;
    int[] starts = new int[n];
    int[] ends = new int[n];

    for (int i = 0; i < n; ++i) {
      starts[i] = intervals[i][0];
      ends[i] = intervals[i][1];
    }

    Arrays.sort(starts);
    Arrays.sort(ends);

    // J points to ends
    for (int i = 0, j = 0; i < n; ++i)
      if (starts[i] < ends[j])
        ++ans;
      else
        ++j;

    return ans;
  }
}



or



