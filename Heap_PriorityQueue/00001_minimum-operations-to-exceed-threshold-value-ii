https://leetcode.com/problems/minimum-operations-to-exceed-threshold-value-ii/description/


3066. Minimum Operations to Exceed Threshold Value II
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums, and an integer k.

You are allowed to perform some operations on nums, where in a single operation, you can:

Select the two smallest integers x and y from nums.
Remove x and y from nums.
Insert (min(x, y) * 2 + max(x, y)) at any position in the array.
Note that you can only apply the described operation if nums contains at least two elements.

Return the minimum number of operations needed so that all elements of the array are greater than or equal to k.

 

Example 1:

Input: nums = [2,11,10,1,3], k = 10

Output: 2

Explanation:

In the first operation, we remove elements 1 and 2, then add 1 * 2 + 2 to nums. nums becomes equal to [4, 11, 10, 3].
In the second operation, we remove elements 3 and 4, then add 3 * 2 + 4 to nums. nums becomes equal to [10, 11, 10].
At this stage, all the elements of nums are greater than or equal to 10 so we can stop. 

It can be shown that 2 is the minimum number of operations needed so that all elements of the array are greater than or equal to 10.

Example 2:

Input: nums = [1,1,2,4,9], k = 20

Output: 4

Explanation:

After one operation, nums becomes equal to [2, 4, 9, 3]. 
After two operations, nums becomes equal to [7, 4, 9]. 
After three operations, nums becomes equal to [15, 9]. 
After four operations, nums becomes equal to [33].
At this stage, all the elements of nums are greater than 20 so we can stop. 

It can be shown that 4 is the minimum number of operations needed so that all elements of the array are greater than or equal to 20.

 

Constraints:

2 <= nums.length <= 2 * 105
1 <= nums[i] <= 109
1 <= k <= 109
The input is generated such that an answer always exists. That is, after performing some number of operations, all elements of the array are greater than or equal to k.


# java


class Solution {
    public int minOperations(int[] nums, int k) {
        PriorityQueue<Long> pq = new PriorityQueue<>();
        for (int x : nums) {
            pq.offer((long) x);
        }
        int ans = 0;
        for (; pq.size() > 1 && pq.peek() < k; ++ans) {
            long x = pq.poll(), y = pq.poll();
            pq.offer(Math.min(x, y) * 2 + Math.max(x, y));
        }
        return ans;
    }
}


or


class Solution {
  public int minOperations(int[] nums, int k) {
    int ans = 0;
    Queue<Long> minHeap = new PriorityQueue<>();

    for (final int num : nums)
      minHeap.add((long) num);

    while (minHeap.size() > 1 && minHeap.peek() < k) {
      final long x = minHeap.poll();
      final long y = minHeap.poll();
      minHeap.add(Math.min(x, y) * 2 + Math.max(x, y));
      ++ans;
    }

    return ans;
  }
}


or


class Solution {

    public int minOperations(int[] nums, int k) {
        PriorityQueue<Long> minHeap = new PriorityQueue<Long>(
            Arrays.stream(nums)
                .mapToLong(i -> (long) i)
                .boxed()
                .collect(Collectors.toList())
        );
        int numOperations = 0;

        while (minHeap.peek() < k) {
            long x = minHeap.remove();
            long y = minHeap.remove();
            minHeap.add(Math.min(x, y) * 2 + Math.max(x, y));

            numOperations++;
        }
        return numOperations;
    }
}


or



// best
class Solution {
    public int minOperations(int[] nums, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>();
        for (int num : nums) {
            if (num < k) pq.add(num);
        }

        int operations = 0;

        while (!pq.isEmpty()) {
            int x = pq.poll();
            operations++;

            if (pq.isEmpty()) break;

            int y = pq.poll();
            long newValue = 2L * x + y;

            if (newValue < k) pq.add((int) newValue);
        }

        return operations;
    }
}


or


class Solution {
    public int minOperations(int[] a, int k) {
        Arrays.sort(a);
        for (int i = 0, j = 0, count = 0, x, y; ; ++count) {
            if (i < a.length && (j >= count || a[i] <= a[j])) x = a[i++];
            else x = a[j++];
            if (x >= k) return count;
            if (i < a.length && (j >= count || a[i] <= a[j])) y = a[i++];
            else y = a[j++];
            long t = 2L * x + y; // test overflow
            a[count] = t < k ? (int) t : k;
        }
    }
}

or

class Solution {
    public int minOperations(int[] a, int k) {
        Arrays.sort(a);
        List<Integer> b = new ArrayList<>();
        for (int i = 0, j = 0, count = 0, x, y; ; ++count) {
            if (i < a.length && (j >= b.size() || a[i] <= b.get(j))) x = a[i++];
            else x = b.get(j++);
            if (x >= k) return count;
            if (i < a.length && (j >= b.size() || a[i] <= b.get(j))) y = a[i++];
            else y = b.get(j++);
            long t = 2L * x + y; // test overflow
            b.add(t < k ? (int) t : k);
        }
    }
}


or


class Solution {
    public int minOperations(int[] nums, int k) {
        int res=0;
        PriorityQueue<Integer> pq=new PriorityQueue<>();
        
        for(int i=0; i<nums.length; i++){
            if(nums[i]<k) pq.add(nums[i]);
        }

        long x,y;
        while(!pq.isEmpty()){
            res++;
            x=pq.poll();
           
            if(pq.isEmpty()) break;

            y=pq.poll();            
            long val=(long)x*2+y;

            if(val<k){
                pq.add((int)val);
            }            
        }


        return res;
    }
}


or


class Solution {
    public int minOperations(int[] nums, int k) {
        int res=0;
        // Add all elements to the priority queue
        PriorityQueue<Long> pq=new PriorityQueue<>();
        
        for(int i=0; i<nums.length; i++){
            pq.add((long)nums[i]);
        }

        long x,y;
        // Continue combining elements until the smallest element is >= k
        while(pq.peek()<k){
            x=pq.poll();
            if(!pq.isEmpty()){                
                y=pq.poll();
                pq.add((long)x*2+y);
                res++;
            }else{
                break;
            }
            
        }


        return res;
    }
}


