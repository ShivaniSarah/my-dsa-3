https://leetcode.com/problems/remove-stones-to-minimize-the-total/description/

1962. Remove Stones to Minimize the Total
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array piles, where piles[i] represents the number of stones in the ith pile, and an integer k. You should apply the following operation exactly k times:

Choose any piles[i] and remove floor(piles[i] / 2) stones from it.
Notice that you can apply the operation on the same pile more than once.

Return the minimum possible total number of stones remaining after applying the k operations.

floor(x) is the greatest integer that is smaller than or equal to x (i.e., rounds x down).

 

Example 1:

Input: piles = [5,4,9], k = 2
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [5,4,5].
- Apply the operation on pile 0. The resulting piles are [3,4,5].
The total number of stones in [3,4,5] is 12.
Example 2:

Input: piles = [4,3,6,7], k = 3
Output: 12
Explanation: Steps of a possible scenario are:
- Apply the operation on pile 2. The resulting piles are [4,3,3,7].
- Apply the operation on pile 3. The resulting piles are [4,3,3,4].
- Apply the operation on pile 0. The resulting piles are [2,3,3,4].
The total number of stones in [2,3,3,4] is 12.
 

Constraints:

1 <= piles.length <= 105
1 <= piles[i] <= 104
1 <= k <= 105


 #java

class Solution {
  public int minStoneSum(int[] piles, int k) {
    int ans = Arrays.stream(piles).sum();
    Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());

    for (final int pile : piles)
      maxHeap.offer(pile);

    for (int i = 0; i < k; ++i) {
      final int maxPile = maxHeap.poll();
      maxHeap.offer(maxPile - maxPile / 2);
      ans -= maxPile / 2;
    }

    return ans;
  }
}


or

class Solution {
    public int minStoneSum(int[] piles, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> b - a);
        for (int x : piles) {
            pq.offer(x);
        }
        while (k-- > 0) {
            int x = pq.poll();
            pq.offer(x - x / 2);
        }
        int ans = 0;
        while (!pq.isEmpty()) {
            ans += pq.poll();
        }
        return ans;
    }
}



or



class Solution {
    public int minStoneSum(int[] piles, int k) {
        Queue <Integer> heap = new PriorityQueue (new Comparator <Integer> () {
           public int compare (Integer a, Integer b) {
               if (a < b)
                   return 1;
               else if (a > b)
                   return -1;
               else
                   return 0;
           } 
        });
        for (int val : piles)
            heap.offer (val);
        while (k-- > 0) {
            int stones = heap.poll ();
            stones -= (int) (Math.floor (stones / 2));
            heap.offer (stones);
        }
        int sum = 0;
        while (!heap.isEmpty ())
            sum += heap.poll ();
        return sum;
    }
}


or



class Solution {
    public int minStoneSum(int[] piles, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<>((a,b)->b-a);
        for(int i : piles){
            pq.add(i);
        }
        
        while(k > 0 && !pq.isEmpty()){
            int temp = pq.poll();
            temp -= (int)Math.floor(temp/2);
            pq.add(temp);
            k--;
        }
        
        int sum = 0;
        while(!pq.isEmpty())sum += pq.poll();
        
        return sum;
    }
}

or


class Solution {
    public int minStoneSum(int[] piles, int k) {
        Queue<Integer> p = new PriorityQueue<>((a, b) -> b-a);
        int s = 0; // total sum
        int d = 0; // delta removed

        for (int x : piles) {
            s += x;
            p.offer(x);
        }
        while (k >0) {
            int c = p.poll();
            int x = c/2;
            d += x;
            p.offer(c-x);
            k--;
        }
        return s - d;
    }
}


or


class Solution {
    public int minStoneSum(int[] piles, int k) {
// during peek and poll operation we get minimum element and to
// reverse this we use (x, y) -> Integer.compare(y, x) operation
// during creation of our priority queue
        PriorityQueue<Integer> q = new PriorityQueue<>((x, y) -> Integer.compare(y, x));

// here we add all  the elements of piles to our priority queue
// you can also use q.add method instead of q.offer method
        for(int i = 0; i < piles.length; ++i){
            q.offer(piles[i]);
        }
// we simply take the maximum elements of priority queue and half it 
// and store it in the priority queue
        while(k-- > 0){
            q.offer(q.peek() - q.poll() / 2);
        }
        int ans = 0;     // used to store the result
// finding the sum of all the elements of queue after performing the 
// operation k number of times
        while(! q.isEmpty()){
            ans += q.poll();
        }
        return ans;
    }
}
// This code is contributed by Sunil Kumar
// Please upvote if you like the answer 



or



class Solution {
    public int minStoneSum(int[] piles, int k) {
        PriorityQueue<Integer> pq
            = new PriorityQueue<Integer>(
                Collections.reverseOrder());
        int sum  = 0;
        for(int i = 0;i<piles.length;i++){
            pq.add(piles[i]);
            sum+=piles[i];
        }
        
        for(int i = 0;i<k;i++){
            int a = pq.remove();
            sum-=a;
            if(a%2==0){
                a = a/2;
            }
            else{
                a = (a+1)/2;
            }
            sum+=a;
            pq.add(a);
        }
        return sum;
        
    }
}


or

class Solution {
    public static int minStoneSum(int[] piles, int k) {
        int[] arr = new int[10001];
        int max = -1;
        for(int i : piles){
            arr[i]++;
            max = Math.max(max , i);
        }
        for(int i=max; i>0 && k>0; i--){
            while(arr[i]>0 && k>0){
                arr[i]--;
                arr[(i+1)/2]++;
                k--;
            }
        }
        int answer = 0;
        for(int i=max; i>0; i--){
            answer += arr[i]*i;
        }
        return answer;
    }
}



or



class Solution {
    public static int minStoneSum(int[] piles, int k) {
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());
        int sum = 0;
        for(int p: piles){
            pq.add(p);
            sum += p;
        }
        while(k-->0){
            int num = pq.poll();
            pq.add(num - num / 2);
            sum -= num/2;
        }
        return sum;
    }
}


