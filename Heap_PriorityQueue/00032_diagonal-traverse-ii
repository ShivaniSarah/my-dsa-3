https://leetcode.com/problems/diagonal-traverse-ii/description/

1424. Diagonal Traverse II
Medium
Topics
Companies
Hint
Given a 2D integer array nums, return all elements of nums in diagonal order as shown in the below images.

 

Example 1:


Input: nums = [[1,2,3],[4,5,6],[7,8,9]]
Output: [1,4,2,7,5,3,8,6,9]
Example 2:


Input: nums = [[1,2,3,4,5],[6,7],[8],[9,10,11],[12,13,14,15,16]]
Output: [1,6,2,8,7,3,9,4,12,10,5,13,11,14,15,16]
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i].length <= 105
1 <= sum(nums[i].length) <= 105
1 <= nums[i][j] <= 105


# java


class Solution {
  public int[] findDiagonalOrder(List<List<Integer>> nums) {
    List<Integer> ans = new ArrayList<>();
    Map<Integer, List<Integer>> keyToNums = new HashMap<>(); // key := row + column
    int maxKey = 0;

    for (int i = 0; i < nums.size(); ++i)
      for (int j = 0; j < nums.get(i).size(); ++j) {
        final int key = i + j;
        keyToNums.putIfAbsent(key, new ArrayList<>());
        keyToNums.get(key).add(nums.get(i).get(j));
        maxKey = Math.max(key, maxKey);
      }

    for (int i = 0; i <= maxKey; ++i)
      for (int j = keyToNums.get(i).size() - 1; j >= 0; --j)
        ans.add(keyToNums.get(i).get(j));

    return ans.stream().mapToInt(Integer::intValue).toArray();
  }
}


or


class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        List<int[]> arr = new ArrayList<>();
        for (int i = 0; i < nums.size(); ++i) {
            for (int j = 0; j < nums.get(i).size(); ++j) {
                arr.add(new int[] {i + j, j, nums.get(i).get(j)});
            }
        }
        arr.sort((a, b) -> a[0] == b[0] ? a[1] - b[1] : a[0] - b[0]);
        int[] ans = new int[arr.size()];
        for (int i = 0; i < arr.size(); ++i) {
            ans[i] = arr.get(i)[2];
        }
        return ans;
    }
}



or



class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        Map<Integer, List<Integer>> groups = new HashMap();
        int n = 0;
        for (int row = nums.size() - 1; row >= 0; row--) {
            for (int col = 0; col < nums.get(row).size(); col++) {
                int diagonal = row + col;
                if (!groups.containsKey(diagonal)) {
                    groups.put(diagonal, new ArrayList<Integer>());
                }
                
                groups.get(diagonal).add(nums.get(row).get(col));
                n++;
            }
        }
        
        int[] ans = new int[n];
        int i = 0;
        int curr = 0;
        
        while (groups.containsKey(curr)) {
            for (int num : groups.get(curr)) {
                ans[i] = num;
                i++;
            }
            
            curr++;
        }
        
        return ans;
    }
}



or



class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        Queue<Pair<Integer, Integer>> queue = new LinkedList();
        queue.offer(new Pair(0, 0));
        List<Integer> ans = new ArrayList();
        
        while (!queue.isEmpty()) {
            Pair<Integer, Integer> p = queue.poll();
            int row = p.getKey();
            int col = p.getValue();
            ans.add(nums.get(row).get(col));
            
            if (col == 0 && row + 1 < nums.size()) {
                queue.offer(new Pair(row + 1, col));
            }
            
            if (col + 1 < nums.get(row).size()) {
                queue.offer(new Pair(row, col + 1));
            }
        }
        
        // Java needs conversion
        int[] result = new int[ans.size()];
        int i = 0;
        for (int num : ans) {
            result[i] = num;
            i++;
        }
        
        return result;
    }
}



or



class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        Map<Integer, List<Integer>> groups = new HashMap();
        int n = 0;
        for (int row = nums.size() - 1; row >= 0; row--) {
            for (int col = 0; col < nums.get(row).size(); col++) {
                int diagonal = row + col;
                if (!groups.containsKey(diagonal)) {
                    groups.put(diagonal, new ArrayList<Integer>());
                }
                
                groups.get(diagonal).add(nums.get(row).get(col));
                n++;
            }
        }
        
        int[] ans = new int[n];
        int i = 0;
        int curr = 0;
        
        while (groups.containsKey(curr)) {
            for (int num : groups.get(curr)) {
                ans[i] = num;
                i++;
            }
            
            curr++;
        }
        
        return ans;
    }
}



or

//best

class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        Queue<Pair<Integer, Integer>> queue = new LinkedList();
        queue.offer(new Pair(0, 0));
        List<Integer> ans = new ArrayList();
        
        while (!queue.isEmpty()) {
            Pair<Integer, Integer> p = queue.poll();
            int row = p.getKey();
            int col = p.getValue();
            ans.add(nums.get(row).get(col));
            
            if (col == 0 && row + 1 < nums.size()) {
                queue.offer(new Pair(row + 1, col));
            }
            
            if (col + 1 < nums.get(row).size()) {
                queue.offer(new Pair(row, col + 1));
            }
        }
        
        // Java needs conversion
        int[] result = new int[ans.size()];
        int i = 0;
        for (int num : ans) {
            result[i] = num;
            i++;
        }
        
        return result;
    }
}


or


// Tuple to store sum, row and val for each element
class Pair{
    int sum;
    int row;
    int val;

    public Pair(int sum, int row, int val) {
        this.sum = sum;
        this.row = row;
        this.val = val;
    }
}

class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
		/**
		* Priority Queue which will sort elements in increasing order of sum and 
		* if sum is same then it will sort them in order of row number
		*/
        PriorityQueue<Pair> pq = new PriorityQueue<>((a,b)->{
            if(a.sum != b.sum)  
                return a.sum-b.sum;
            
            return b.row-a.row;
        });
        
        int size = 0;
        
        for(int i = 0; i < nums.size(); i++) {
            size += nums.get(i).size();
            for(int j = 0; j < nums.get(i).size(); j++) {
                int sum = i+j;
                
                Pair pair = new Pair(sum, i, nums.get(i).get(j));
                
                pq.add(pair);
            }
        }
        
        int res[] = new int[size];
        int index = 0;
        
		/* We'll poll each element and store them in resultant array */
        while(!pq.isEmpty()) {
            res[index++] = pq.poll().val;
        }
        
        return res;
    }
}


or


class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        Queue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] + a[1] != b[0] + b[1] ? a[0] + a[1] - b[0] - b[1] : a[1] - b[1]);
        for (int i = 0, row = nums.size(); i < row; i++)
        	for (int j = 0, col = nums.get(i).size(); j < col; j++)
        		pq.offer(new int[] {i, j});
        int[] res = new int[pq.size()];
        for (int idx = 0; !pq.isEmpty(); idx++) {
        	int[] p = pq.poll();
        	res[idx] = nums.get(p[0]).get(p[1]);
        }
        return res;
    }
}


or


class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        Map<Integer, List<Integer>> map = new HashMap<>();
        int size=0, maxi=0;
        for(int row = nums.size()-1; row>=0; row--){
            for(int col =0; col<nums.get(row).size(); col++){
                map.putIfAbsent(row+col, new ArrayList<>());
                map.get(row+col).add(nums.get(row).get(col));

                size++;
                maxi = Math.max(maxi, row+col);
            }
        }

        int[] res = new int[size];
        int i=0;
        for(var key=0; key<=maxi; key++){
            List<Integer> l = map.get(key);

            if(l == null) continue;
            for(var x:l) res[i++] = x;
        }
        return res;
    }
}

or


class Solution {
        public int[] findDiagonalOrder(List<List<Integer>> nums) {
        List<int[]> positions = new ArrayList();
        for (int r = 0; r < nums.size(); r++) {
            for (int c = 0; c < nums.get(r).size(); c++) {
                positions.add(new int[]{r, c});
            }
        }
        Collections.sort(positions, (a, b) -> (a[0] + a[1] == b[0] + b[1] ? b[0] - a[0] : (a[0] + a[1] - b[0] - b[1])));
        int[] res = new int[positions.size()];
        int i = 0;
        for (int[] pos : positions)
            res[i++] = nums.get(pos[0]).get(pos[1]);
        return res;
    }
}

or

class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        TreeMap<Integer, List<Pair<Integer, Integer>>> map=new TreeMap<>();
        int size=0;
        for(int i=0; i<nums.size(); i++) {
            for(int j=0; j<nums.get(i).size(); j++) {
                map.computeIfAbsent(i+j, (k)->(new ArrayList<>()));
                map.get(i+j).add(new Pair(i, j));
                size++;
            }
        }
        int ret[]=new int[size];
        int idx=0;
        for(Map.Entry<Integer, List<Pair<Integer, Integer>>> e: map.entrySet()) {
            List<Pair<Integer, Integer>> l=e.getValue();
            Collections.sort(l, (p1, p2)->(p1.getValue()-p2.getValue()));
            for(Pair<Integer, Integer> p: l) {
                int i=p.getKey();
                int j=p.getValue();
                ret[idx++]=nums.get(i).get(j);
            }
        }
        return ret;
    }
}


or


class Solution {
    private static final int MAXC = 95998;
    private static int[] r = new int[MAXC];

    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        final int n = nums.size();
        if (n > 1000) System.gc();
        int q = 0, t = 1;
        r[0] = 0;
        while (q < t) {
            final int i = r[q] >>> 16, j = r[q] & ((1 << 16) - 1);
            r[q] = nums.get(i).get(j);
            q++;
            if (j == 0 && i + 1 < n) r[t++] = (i + 1) << 16;
            if (j + 1 < nums.get(i).size()) r[t++] = (i << 16) + j + 1;
        }
        if (r.length == q) return r;
        final int[] u = new int[q];
        System.arraycopy(r, 0, u, 0, q);
        return u;
    }
}

or
 
// much better

class Solution {
    public int[] findDiagonalOrder(List<List<Integer>> nums) {
        List<Integer> resList = new ArrayList<>();
        LinkedList<int[]> q = new LinkedList<>();
        q.offer(new int[]{0, 0});

        while (!q.isEmpty()) {
            int[] p = q.poll();
            resList.add(nums.get(p[0]).get(p[1]));

            if (p[1] == 0 && p[0] + 1 < nums.size()) {
                q.offer(new int[]{p[0] + 1, 0});
            }

            if (p[1] + 1 < nums.get(p[0]).size()) {
                q.offer(new int[]{p[0], p[1] + 1});
            }
        }

        // Convert List<Integer> to int[]
        int[] res = new int[resList.size()];
        for (int i = 0; i < resList.size(); i++) {
            res[i] = resList.get(i);
        }

        return res;         
    }
}
