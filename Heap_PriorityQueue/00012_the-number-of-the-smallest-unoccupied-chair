https://leetcode.com/problems/the-number-of-the-smallest-unoccupied-chair/description/


1942. The Number of the Smallest Unoccupied Chair
Medium
Topics
Companies
Hint
There is a party where n friends numbered from 0 to n - 1 are attending. There is an infinite number of chairs in this party that are numbered from 0 to infinity. When a friend arrives at the party, they sit on the unoccupied chair with the smallest number.

For example, if chairs 0, 1, and 5 are occupied when a friend comes, they will sit on chair number 2.
When a friend leaves the party, their chair becomes unoccupied at the moment they leave. If another friend arrives at that same moment, they can sit in that chair.

You are given a 0-indexed 2D integer array times where times[i] = [arrivali, leavingi], indicating the arrival and leaving times of the ith friend respectively, and an integer targetFriend. All arrival times are distinct.

Return the chair number that the friend numbered targetFriend will sit on.

 

Example 1:

Input: times = [[1,4],[2,3],[4,6]], targetFriend = 1
Output: 1
Explanation: 
- Friend 0 arrives at time 1 and sits on chair 0.
- Friend 1 arrives at time 2 and sits on chair 1.
- Friend 1 leaves at time 3 and chair 1 becomes empty.
- Friend 0 leaves at time 4 and chair 0 becomes empty.
- Friend 2 arrives at time 4 and sits on chair 0.
Since friend 1 sat on chair 1, we return 1.
Example 2:

Input: times = [[3,10],[1,5],[2,6]], targetFriend = 0
Output: 2
Explanation: 
- Friend 1 arrives at time 1 and sits on chair 0.
- Friend 2 arrives at time 2 and sits on chair 1.
- Friend 0 arrives at time 3 and sits on chair 2.
- Friend 1 leaves at time 5 and chair 0 becomes empty.
- Friend 2 leaves at time 6 and chair 1 becomes empty.
- Friend 0 leaves at time 10 and chair 2 becomes empty.
Since friend 0 sat on chair 2, we return 2.
 

Constraints:

n == times.length
2 <= n <= 104
times[i].length == 2
1 <= arrivali < leavingi <= 105
0 <= targetFriend <= n - 1
Each arrivali time is distinct.



# java



class Solution {
  public int smallestChair(int[][] times, int targetFriend) {
    int nextUnsatChair = 0;
    PriorityQueue<Integer> emptyChairs = new PriorityQueue<>();
    PriorityQueue<Pair<Integer, Integer>> occupied =
        new PriorityQueue<>(Comparator.comparingInt(Pair::getKey));

    for (int i = 0; i < times.length; ++i) {
      int[] time = times[i];
      time = Arrays.copyOf(time, time.length + 1);
      time[time.length - 1] = i;
      times[i] = time;
    }

    Arrays.sort(times, Comparator.comparingInt(time -> time[0]));

    for (int[] time : times) {
      final int arrival = time[0];
      final int leaving = time[1];
      final int i = time[2];
      while (!occupied.isEmpty() && occupied.peek().getKey() <= arrival)
        emptyChairs.add(occupied.poll().getValue());
      if (i == targetFriend)
        return emptyChairs.isEmpty() ? nextUnsatChair : emptyChairs.peek();
      if (emptyChairs.isEmpty())
        occupied.add(new Pair<>(leaving, nextUnsatChair++));
      else
        occupied.add(new Pair<>(leaving, emptyChairs.poll()));
    }

    throw new IllegalArgumentException();
  }
}


or


class Solution {
    public int smallestChair(int[][] times, int targetFriend) {
        int n = times.length;
        int[][] ts = new int[n][3];
        PriorityQueue<Integer> q = new PriorityQueue<>();
        PriorityQueue<int[]> busy = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        for (int i = 0; i < n; ++i) {
            ts[i] = new int[] {times[i][0], times[i][1], i};
            q.offer(i);
        }
        Arrays.sort(ts, (a, b) -> a[0] - b[0]);
        for (int[] t : ts) {
            int a = t[0], b = t[1], i = t[2];
            while (!busy.isEmpty() && busy.peek()[0] <= a) {
                q.offer(busy.poll()[1]);
            }
            int c = q.poll();
            if (i == targetFriend) {
                return c;
            }
            busy.offer(new int[] {b, c});
        }
        return -1;
    }
}



or


class Solution {

    public int smallestChair(int[][] times, int targetFriend) {
        int[] targetTime = times[targetFriend];
        Arrays.sort(times, (a, b) -> Integer.compare(a[0], b[0]));

        int n = times.length;
        int[] chairTime = new int[n];

        for (int[] time : times) {
            for (int i = 0; i < n; i++) {
                if (chairTime[i] <= time[0]) {
                    chairTime[i] = time[1];
                    if (Arrays.equals(time, targetTime)) return i;
                    break;
                }
            }
        }
        return 0;
    }
}



or



class Solution {

    public int smallestChair(int[][] times, int targetFriend) {
        List<int[]> events = new ArrayList<>(); // To store both arrival and leave events

        // Populate events with {arrival, friendIndex} and {leave, -friendIndex}
        for (int i = 0; i < times.length; i++) {
            events.add(new int[] { times[i][0], i }); // Friend arrives
            events.add(new int[] { times[i][1], ~i }); // Friend leaves
        }

        Collections.sort(events, (a, b) -> a[0] - b[0]); // Sort events by time

        PriorityQueue<Integer> availableChairs = new PriorityQueue<>(); // Min-heap for available chairs
        PriorityQueue<int[]> occupiedChairs = new PriorityQueue<>(
            (a, b) -> a[0] - b[0]
        ); // Min-heap to track when chairs will be vacated

        for (int i = 0; i < times.length; i++) {
            availableChairs.add(i); // Initially all chairs are free
        }

        for (int[] event : events) {
            int time = event[0];
            int friendIndex = event[1];

            // Free up chairs when friends leave
            while (
                !occupiedChairs.isEmpty() && occupiedChairs.peek()[0] <= time
            ) {
                availableChairs.add(occupiedChairs.poll()[1]);
            }
            if (friendIndex >= 0) { // Friend arrives
                int chair = availableChairs.poll();
                if (friendIndex == targetFriend) {
                    return chair;
                }
                occupiedChairs.add(new int[] { times[friendIndex][1], chair }); // Mark when the chair will be vacated
            }
        }

        return -1; // Should never reach here
    }
}

or



public class Solution {

    public int smallestChair(int[][] times, int targetFriend) {
        int targetArrival = times[targetFriend][0];
        Arrays.sort(times, (a, b) -> a[0] - b[0]);

        int nextChair = 0;
        PriorityQueue<int[]> leavingQueue = new PriorityQueue<>(
            (a, b) -> a[0] - b[0]
        );
        TreeSet<Integer> availableChairs = new TreeSet<>();

        for (int[] time : times) {
            int arrival = time[0];
            int leave = time[1];

            // Free up chairs based on current time
            while (
                !leavingQueue.isEmpty() && leavingQueue.peek()[0] <= arrival
            ) {
                availableChairs.add(leavingQueue.poll()[1]);
            }

            int currentChair;
            // Assign chair from available set or increment new chair
            if (!availableChairs.isEmpty()) {
                currentChair = availableChairs.first();
                availableChairs.remove(currentChair);
            } else {
                currentChair = nextChair++;
            }

            // Push current leave time and chair
            leavingQueue.offer(new int[] { leave, currentChair });

            // Check if it's the target friend
            if (arrival == targetArrival) return currentChair;
        }

        return 0;
    }
}



or


class Solution {
    public int smallestChair(int[][] times, int targetFriend) {
        int n = times.length;
        Integer[] order = new Integer[n];
        
        for (int i = 0; i < n; i++) order[i] = i;

        Arrays.sort(order, (a, b) -> Integer.compare(times[a][0], times[b][0]));

        PriorityQueue<Integer> emptySeats = new PriorityQueue<>();
        PriorityQueue<int[]> takenSeats = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));

        for (int i = 0; i < n; i++) emptySeats.offer(i);

        for (int i : order) {
            int arrival = times[i][0], leave = times[i][1];

            while (!takenSeats.isEmpty() && takenSeats.peek()[0] <= arrival) {
                emptySeats.offer(takenSeats.poll()[1]);
            }

            int seat = emptySeats.poll();

            if (i == targetFriend) return seat;

            takenSeats.offer(new int[]{leave, seat});
        }

        return -1;
    }
}


or


import java.util.*;

class Solution {
    public int smallestChair(int[][] times, int targetFriend) {
        int n = times.length;
        
        // List of arrivals with friend index
        List<int[]> arrivals = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            arrivals.add(new int[]{times[i][0], i});
        }
        
        // Sort friends by arrival time
        arrivals.sort((a, b) -> Integer.compare(a[0], b[0]));
        
        // Min-Heap to track available chairs
        PriorityQueue<Integer> availableChairs = new PriorityQueue<>();
        for (int i = 0; i < n; i++) {
            availableChairs.add(i);
        }

        // Priority queue to track when chairs are freed
        PriorityQueue<int[]> leavingQueue = new PriorityQueue<>((a, b) -> Integer.compare(a[0], b[0]));
        
        // Iterate through each friend based on arrival
        for (int[] arrival : arrivals) {
            int arrivalTime = arrival[0];
            int friendIndex = arrival[1];
            
            // Free chairs that are vacated before the current arrival time
            while (!leavingQueue.isEmpty() && leavingQueue.peek()[0] <= arrivalTime) {
                availableChairs.add(leavingQueue.poll()[1]);
            }
            
            // Assign the smallest available chair
            int chair = availableChairs.poll();
            
            // If this is the target friend, return their chair number
            if (friendIndex == targetFriend) {
                return chair;
            }
            
            // Mark the chair as being used until the friend's leave time
            leavingQueue.add(new int[]{times[friendIndex][1], chair});
        }
        
        return -1; // Should never reach here
    }
}


or


class Solution {
    public int smallestChair(int[][] times, int targetFriend) {
        int targetStart = times[targetFriend][0];
        Arrays.sort(times, (a, b) -> a[0] - b[0]);
        
        PriorityQueue<Integer> available = new PriorityQueue<>();
        for (int i = 0; i < times.length; ++ i) {
            available.offer(i);
        }
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((a, b) -> a[0] - b[0]);
        
        for (int i = 0; i < times.length; ++ i) {
            while (!pq.isEmpty() && pq.peek()[0] <= times[i][0]) {
                available.offer(pq.poll()[1]);
            }
            
            if (times[i][0] == targetStart) {
                break;
            }
            
            pq.offer(new int[]{times[i][1], available.poll()});
        }
        
        return available.peek();
    }
}

or


class Item {
    int friend;
    int chair = -1;
    int startTime;
    int endTime;

    public Item(int friend, int startTime, int endTime) {
        this.friend = friend;
        this.startTime = startTime;
        this.endTime = endTime;
    }

    public void setChair(int chair) {
        this.chair = chair;
    }
}

class Solution {
    public int smallestChair(int[][] times, int targetFriend) {
        Item[] arrival = new Item[times.length];

        PriorityQueue<Integer> available = new PriorityQueue<>();
        PriorityQueue<Item> assigned = new PriorityQueue<>((a, b) -> a.endTime - b.endTime);

        for (int i = 0; i < times.length; i++) {
            arrival[i] = new Item(i, times[i][0], times[i][1]);
            available.add(i);
        }

        // here i am Sorting friends by their arrival times
        Arrays.sort(arrival, (a, b) -> a.startTime - b.startTime);

        for (int i = 0; i < arrival.length; i++) {
            Item item = arrival[i];

            //here i am Freeing up chairs for people who have left by this time
            while (!assigned.isEmpty() && assigned.peek().endTime <= item.startTime) {
                available.add(assigned.poll().chair);
            }

            // now Assign the smallest available chair to the current friend
            item.setChair(available.poll());
            assigned.add(item);

            // If this is the target friend, return their chair number
            if (item.friend == targetFriend) {
                return item.chair;
            }
        }

        return -1;
    }
}






