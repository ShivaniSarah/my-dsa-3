https://leetcode.com/problems/employee-importance/description/


690. Employee Importance
Medium
Topics
Companies
You have a data structure of employee information, including the employee's unique ID, importance value, and direct subordinates' IDs.

You are given an array of employees employees where:

employees[i].id is the ID of the ith employee.
employees[i].importance is the importance value of the ith employee.
employees[i].subordinates is a list of the IDs of the direct subordinates of the ith employee.
Given an integer id that represents an employee's ID, return the total importance value of this employee and all their direct and indirect subordinates.

 

Example 1:


Input: employees = [[1,5,[2,3]],[2,3,[]],[3,3,[]]], id = 1
Output: 11
Explanation: Employee 1 has an importance value of 5 and has two direct subordinates: employee 2 and employee 3.
They both have an importance value of 3.
Thus, the total importance value of employee 1 is 5 + 3 + 3 = 11.
Example 2:


Input: employees = [[1,2,[5]],[5,-3,[]]], id = 5
Output: -3
Explanation: Employee 5 has an importance value of -3 and has no direct subordinates.
Thus, the total importance value of employee 5 is -3.
 

Constraints:

1 <= employees.length <= 2000
1 <= employees[i].id <= 2000
All employees[i].id are unique.
-100 <= employees[i].importance <= 100
One employee has at most one direct leader and may have several subordinates.
The IDs in employees[i].subordinates are valid IDs.



# java


class Solution {
  public int getImportance(List<Employee> employees, int id) {
    Map<Integer, Employee> idToEmployee = new HashMap<>();

    for (Employee employee : employees)
      idToEmployee.put(employee.id, employee);

    return dfs(id, idToEmployee);
  }

  private int dfs(int id, Map<Integer, Employee> idToEmployee) {
    int values = 0;

    for (final int subId : idToEmployee.get(id).subordinates)
      values += dfs(subId, idToEmployee);

    return idToEmployee.get(id).importance + values;
  }
}


or



/*
// Definition for Employee.
class Employee {
    public int id;
    public int importance;
    public List<Integer> subordinates;
};
*/

class Solution {

    private final Map<Integer, Employee> map = new HashMap<>();

    public int getImportance(List<Employee> employees, int id) {
        for (Employee employee : employees) {
            map.put(employee.id, employee);
        }
        return dfs(id);
    }

    private int dfs(int id) {
        Employee employee = map.get(id);
        int sum = employee.importance;
        for (Integer subordinate : employee.subordinates) {
            sum += dfs(subordinate);
        }
        return sum;
    }
}



or



class Solution {
    Map<Integer, Employee> emap;
    public int getImportance(List<Employee> employees, int queryid) {
        emap = new HashMap();
        for (Employee e: employees) {
            emap.put(e.id, e);
        }
        return dfs(queryid);
    }
    public int dfs(int eid) {
        Employee employee = emap.get(eid);
        int ans = employee.importance;
        for (Integer subid: employee.subordinates) {
            ans += dfs(subid);
        }
        return ans;
    }
}


or


/*
// Definition for Employee.
class Employee {
    public int id;
    public int importance;
    public List<Integer> subordinates;
};
*/

class Solution {
    public int getImportance(List<Employee> employees, int id) {
        Map<Integer, Employee> inputMap = new HashMap<>();
		// Construct HashMap as getting the employee from id is difficult in a list
		for(Employee e : employees) {
			inputMap.put(e.id, e);
		}
		return helper(inputMap, id);
	}

	private static int helper(Map<Integer, Employee> inputMap, int id) {
		//Get the importance of the employee
		int imp = inputMap.get(id).importance;
		
		//Add importance of subordinates to employee importance
		for(int subId : inputMap.get(id).subordinates) {
			imp += helper(inputMap, subId);
		}
		
		return imp;
	}
}



or



class Solution {
    public int getImportance(List<Employee> employees, int id) {
        HashMap<Integer, Employee> hashMap = new HashMap<>();
        for (Employee employee : employees) hashMap.put(employee.id, employee);
        Queue<Employee> q = new LinkedList<>();
        q.add(hashMap.get(id));
        int sum = 0;
        while (!q.isEmpty()) {
            Employee emp = q.poll();
            sum += emp.importance;
            for (int i : emp.subordinates) q.add(hashMap.get(i));
        }
        return sum;
    }
}


or


class Solution {
    public int getImportance(List<Employee> employees, int id) {
        HashMap<Integer,Employee> m = new HashMap<>();

        for(Employee it:employees){
            m.put(it.id, it);
        }

        int sum = 0;

        Queue<Employee> q = new ArrayDeque<>();
        q.add(m.get(id));
        
        while(q.size() != 0){
            Employee temp = q.peek();
            q.remove();

            sum += temp.importance;

            for(int it : temp.subordinates){
                q.add(m.get(it));
            }
        }

        return sum;
    }

}

