https://leetcode.com/problems/n-ary-tree-level-order-traversal/description/

429. N-ary Tree Level Order Traversal
Medium
Topics
Companies
Given an n-ary tree, return the level order traversal of its nodes' values.

Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).

 

Example 1:



Input: root = [1,null,3,2,4,null,5,6]
Output: [[1],[3,2,4],[5,6]]
Example 2:



Input: root = [1,null,2,3,4,5,null,null,6,7,null,8,null,9,10,null,null,11,null,12,null,13,null,null,14]
Output: [[1],[2,3,4,5],[6,7,8,9,10],[11,12,13],[14]]
 

Constraints:

The height of the n-ary tree is less than or equal to 1000
The total number of nodes is between [0, 104]



# java


class Solution {
  public List<List<Integer>> levelOrder(Node root) {
    if (root == null)
      return new ArrayList<>();

    List<List<Integer>> ans = new ArrayList<>();
    Queue<Node> q = new ArrayDeque<>(List.of(root));

    while (!q.isEmpty()) {
      List<Integer> currLevel = new ArrayList<>();
      for (int sz = q.size(); sz > 0; --sz) {
        Node node = q.poll();
        currLevel.add(node.val);
        for (Node child : node.children)
          q.offer(child);
      }
      ans.add(currLevel);
    }

    return ans;
  }
}


or


/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/

class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        Deque<Node> q = new ArrayDeque<>();
        q.offer(root);
        while (!q.isEmpty()) {
            List<Integer> t = new ArrayList<>();
            for (int n = q.size(); n > 0; --n) {
                root = q.poll();
                t.add(root.val);
                q.addAll(root.children);
            }
            ans.add(t);
        }
        return ans;
    }
}


or


class Solution {

public List<List<Integer>> levelOrder(Node root) {
    List<List<Integer>> nm=new ArrayList<List<Integer>>();
    if(root==null)
        return nm;
    Queue<Node> kk=new LinkedList<>();
    kk.offer(root);
    while(!kk.isEmpty())
    {
        int p=kk.size();
        ArrayList<Integer> k=new ArrayList<>();
        for(int i=0;i<p;i++)
        {
            k.add(kk.peek().val);
            for(Node f:kk.peek().children)
            {
                kk.offer(f);
            }
            kk.poll();
        }
        nm.add(new ArrayList<>(k));
    }
    return nm;
}
}


or


/*
// Definition for a Node.
class Node {
    public int val;
    public List<Node> children;

    public Node() {}

    public Node(int _val) {
        val = _val;
    }

    public Node(int _val, List<Node> _children) {
        val = _val;
        children = _children;
    }
};
*/
class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        List<List<Integer>> res = new ArrayList<>();
        solve(root, 0, res);
        return res;
    }
    
    private void solve(Node root, int level, List<List<Integer>> res){
        if(root == null) return;
        
        // When found a new level, add a new list
        if(level >= res.size())
            res.add(new ArrayList<>());
        
        // Add node in the list at the related level
        res.get(level).add(root.val);
        
        // Traverse all the children
        for(Node n : root.children)
            solve(n, level+1, res);
    }
}


or


class Solution {
    public List<List<Integer>> levelOrder(Node root) {
        
        List<List<Integer>> output = new ArrayList<>();
        Queue<Node> queue = new LinkedList<>();
        
        if(root == null) return output;
        queue.add(root);
        
        while(!queue.isEmpty()){
            
            // stores the number of values in current row (we alter amount in queue later)
            int rowLen = queue.size();
            List<Integer> currRow = new ArrayList<>();
            for(int i = 0; i < rowLen; i++){
                
                // Add current value into row list values.
                Node curr = queue.poll();
                currRow.add(curr.val);
    
                // Add Children of current node into queue.
                int numChildren = curr.children.size();
                for(int c = 0; c < numChildren; c++) { 
                    if(curr.children.get(c) != null) queue.add(curr.children.get(c));
                }
            }
            output.add(currRow);
        }
        return output;
    }
}
