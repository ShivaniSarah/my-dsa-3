https://leetcode.com/problems/count-the-number-of-good-nodes/


3249. Count the Number of Good Nodes
Medium
Topics
Companies
Hint
There is an undirected tree with n nodes labeled from 0 to n - 1, and rooted at node 0. You are given a 2D integer array edges of length n - 1, where edges[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the tree.

A node is good if all the subtrees rooted at its children have the same size.

Return the number of good nodes in the given tree.

A subtree of treeName is a tree consisting of a node in treeName and all of its descendants.

 

Example 1:

Input: edges = [[0,1],[0,2],[1,3],[1,4],[2,5],[2,6]]

Output: 7

Explanation:


All of the nodes of the given tree are good.

Example 2:

Input: edges = [[0,1],[1,2],[2,3],[3,4],[0,5],[1,6],[2,7],[3,8]]

Output: 6

Explanation:


There are 6 good nodes in the given tree. They are colored in the image above.

Example 3:

Input: edges = [[0,1],[1,2],[1,3],[1,4],[0,5],[5,6],[6,7],[7,8],[0,9],[9,10],[9,12],[10,11]]

Output: 12

Explanation:


All nodes except node 9 are good.

 

Constraints:

2 <= n <= 105
edges.length == n - 1
edges[i].length == 2
0 <= ai, bi < n
The input is generated such that edges represents a valid tree.



# java


class Solution {
  public int countGoodNodes(int[][] edges) {
    final int n = edges.length + 1;
    List<Integer>[] graph = new ArrayList<>(n);

    for (int i = 0; i < n; ++i)
      graph[i] = new ArrayList<>();

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      graph[u].add(v);
      graph[v].add(u);
    }

    dfs(graph, 0, -1);
    return ans;
  }

  private int ans = 0;

  // Returns the size of the subtree rooted at u.
  private int dfs(List<Integer>[] graph, int u, int prev) {
    int size = 1;
    List<Integer> childrenSizes = new ArrayList<>();

    for (final int v : graph[u]) {
      if (v == prev)
        continue;
      final int childSize = dfs(graph, v, u);
      size += childSize;
      childrenSizes.add(childSize);
    }

    if (childrenSizes.isEmpty() || allSameSizes(childrenSizes))
      ++ans;

    return size;
  }

  private boolean allSameSizes(List<Integer> childrenSizes) {
    for (int i = 1; i < childrenSizes.size(); ++i)
      if (!childrenSizes.get(i).equals(childrenSizes.get(0)))
        return false;
    return true;
  }
}


or


class Solution {
    private int ans;
    private List<Integer>[] g;

    public int countGoodNodes(int[][] edges) {
        int n = edges.length + 1;
        g = new List[n];
        Arrays.setAll(g, k -> new ArrayList<>());
        for (var e : edges) {
            int a = e[0], b = e[1];
            g[a].add(b);
            g[b].add(a);
        }
        dfs(0, -1);
        return ans;
    }

    private int dfs(int a, int fa) {
        int pre = -1, cnt = 1, ok = 1;
        for (int b : g[a]) {
            if (b != fa) {
                int cur = dfs(b, a);
                cnt += cur;
                if (pre < 0) {
                    pre = cur;
                } else if (pre != cur) {
                    ok = 0;
                }
            }
        }
        ans += ok;
        return cnt;
    }
}




or



class Solution {
    private List<List<Integer>> graph;
    private int[] subtreeSize;

    private int dfs(int curr, int parent) {
        int size = 1;
        for (int nbr : graph.get(curr)) {
            if (nbr != parent) {
                size += dfs(nbr, curr);
            }
        }
        subtreeSize[curr] = size;
        return size;
    }

    public int countGoodNodes(int[][] edges) {
        int n = edges.length + 1;
        graph = new ArrayList<>(n);
        subtreeSize = new int[n];
        
        for (int i = 0; i < n; i++) {
            graph.add(new ArrayList<>());
        }

        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            graph.get(edge[1]).add(edge[0]);
        }

        dfs(0, -1);

        int result = 0;
        for (int i = 0; i < n; i++) {
            boolean isGoodNode = true;
            int previousSize = -1;
            for (int nbr : graph.get(i)) {
                if (subtreeSize[nbr] < subtreeSize[i]) {
                    if (previousSize == -1) {
                        previousSize = subtreeSize[nbr];
                    } else if (previousSize != subtreeSize[nbr]) {
                        isGoodNode = false;
                        break;
                    }
                }
            }
            if (isGoodNode) {
                result++;
            }
        }

        return result;
    }
}
