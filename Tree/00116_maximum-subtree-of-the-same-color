https://leetcode.com/problems/maximum-subtree-of-the-same-color/description/



3004. Maximum Subtree of the Same Color
Description
You are given a 2D integer array edges representing a tree with n nodes, numbered from 0 to n - 1, rooted at node 0, where edges[i] = [ui, vi] means there is an edge between the nodes vi and ui.

You are also given a 0-indexed integer array colors of size n, where colors[i] is the color assigned to node i.

We want to find a node v such that every node in the subtree of v has the same color.

Return the size of such subtree with the maximum number of nodes possible.

 



Example 1:

Input: edges = [[0,1],[0,2],[0,3]], colors = [1,1,2,3]
Output: 1
Explanation: Each color is represented as: 1 -> Red, 2 -> Green, 3 -> Blue. We can see that the subtree rooted at node 0 has children with different colors. Any other subtree is of the same color and has a size of 1. Hence, we return 1.
Example 2:

Input: edges = [[0,1],[0,2],[0,3]], colors = [1,1,1,1]
Output: 4
Explanation: The whole tree has the same color, and the subtree rooted at node 0 has the most number of nodes which is 4. Hence, we return 4.


Example 3:

Input: edges = [[0,1],[0,2],[2,3],[2,4]], colors = [1,2,3,3,3]
Output: 3
Explanation: Each color is represented as: 1 -> Red, 2 -> Green, 3 -> Blue. We can see that the subtree rooted at node 0 has children with different colors. Any other subtree is of the same color, but the subtree rooted at node 2 has a size of 3 which is the maximum. Hence, we return 3.
 

Constraints:

n == edges.length + 1
1 <= n <= 5 * 104
edges[i] == [ui, vi]
0 <= ui, vi < n
colors.length == n
1 <= colors[i] <= 105
The input is generated such that the graph represented by edges is a tree.



# java




class Solution {
  public int maximumSubtreeSize(int[][] edges, int[] colors) {
    List<Integer>[] tree = new ArrayList[colors.length];

    for (int i = 0; i < colors.length; ++i)
      tree[i] = new ArrayList<>();

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      tree[u].add(v);
    }

    dfs(tree, 0, colors);
    return ans;
  }

  private int ans = 1;

  // Returns the size of subtree of u if every node in the subtree has the same
  // color. Otherwise, returns -1.
  private int dfs(List<Integer>[] tree, int u, int[] colors) {
    int res = 1;
    for (int v : tree[u]) {
      if (colors[v] != colors[u])
        res = -1;
      // If any node in the subtree of v has a different color, the result of
      // the subtree of u will be -1 as well.
      int subtreeSize = dfs(tree, v, colors);
      if (subtreeSize == -1)
        res = -1;
      else if (res != -1)
        res += subtreeSize;
    }
    ans = Math.max(ans, res);
    return res;
  }
}



or



class Solution {
    private List<Integer>[] g;
    private int[] colors;
    private int[] size;
    private int ans;

    public int maximumSubtreeSize(int[][] edges, int[] colors) {
        int n = edges.length + 1;
        g = new List[n];
        size = new int[n];
        this.colors = colors;
        Arrays.fill(size, 1);
        Arrays.setAll(g, i -> new ArrayList<>());
        for (var e : edges) {
            int a = e[0], b = e[1];
            g[a].add(b);
            g[b].add(a);
        }
        dfs(0, -1);
        return ans;
    }

    private boolean dfs(int a, int fa) {
        boolean ok = true;
        for (int b : g[a]) {
            if (b != fa) {
                boolean t = dfs(b, a);
                ok = ok && colors[a] == colors[b] && t;
                size[a] += size[b];
            }
        }
        if (ok) {
            ans = Math.max(ans, size[a]);
        }
        return ok;
    }
}


