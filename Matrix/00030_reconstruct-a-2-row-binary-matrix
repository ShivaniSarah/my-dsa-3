https://leetcode.com/problems/reconstruct-a-2-row-binary-matrix/description/

1253. Reconstruct a 2-Row Binary Matrix
Medium
Topics
Companies
Hint
Given the following details of a matrix with n columns and 2 rows :

The matrix is a binary matrix, which means each element in the matrix can be 0 or 1.
The sum of elements of the 0-th(upper) row is given as upper.
The sum of elements of the 1-st(lower) row is given as lower.
The sum of elements in the i-th column(0-indexed) is colsum[i], where colsum is given as an integer array with length n.
Your task is to reconstruct the matrix with upper, lower and colsum.

Return it as a 2-D integer array.

If there are more than one valid solution, any of them will be accepted.

If no valid solution exists, return an empty 2-D array.

 

Example 1:

Input: upper = 2, lower = 1, colsum = [1,1,1]
Output: [[1,1,0],[0,0,1]]
Explanation: [[1,0,1],[0,1,0]], and [[0,1,1],[1,0,0]] are also correct answers.
Example 2:

Input: upper = 2, lower = 3, colsum = [2,2,1,1]
Output: []
Example 3:

Input: upper = 5, lower = 5, colsum = [2,1,2,0,1,0,1,2,0,1]
Output: [[1,1,1,0,1,0,0,1,0,0],[1,0,1,0,0,0,1,1,0,1]]
 

Constraints:

1 <= colsum.length <= 10^5
0 <= upper, lower <= colsum.length
0 <= colsum[i] <= 2



# java


class Solution {
  public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {
    if (upper + lower != Arrays.stream(colsum).sum())
      return new ArrayList<>();

    int count = 0;
    for (int c : colsum)
      if (c == 2)
        ++count;

    if (Math.min(upper, lower) < count)
      return new ArrayList<>();

    int[][] ans = new int[2][colsum.length];

    for (int j = 0; j < colsum.length; ++j)
      if (colsum[j] == 2) {
        ans[0][j] = 1;
        ans[1][j] = 1;
        --upper;
        --lower;
      }

    for (int j = 0; j < colsum.length; ++j) {
      if (colsum[j] == 1 && upper > 0) {
        ans[0][j] = 1;
        --colsum[j];
        --upper;
      }

      if (colsum[j] == 1 && lower > 0) {
        ans[1][j] = 1;
        --lower;
      }
    }

    return new ArrayList(Arrays.asList(ans[0], ans[1]));
  }
}



or



class Solution {
    public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {
        int n = colsum.length;
        List<Integer> first = new ArrayList<>();
        List<Integer> second = new ArrayList<>();
        for (int j = 0; j < n; ++j) {
            int a = 0, b = 0;
            if (colsum[j] == 2) {
                a = b = 1;
                upper--;
                lower--;
            } else if (colsum[j] == 1) {
                if (upper > lower) {
                    upper--;
                    a = 1;
                } else {
                    lower--;
                    b = 1;
                }
            }
            if (upper < 0 || lower < 0) {
                break;
            }
            first.add(a);
            second.add(b);
        }
        return upper == 0 && lower == 0 ? List.of(first, second) : List.of();
    }
}



or




class Solution {
    public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {
        int n = colsum.length;
        List<List<Integer>> result = new ArrayList<>();
        Integer upperRow[] = new Integer[n];
        Integer lowerRow[] = new Integer[n];
        
        // Initialize both rows with zeros
        Arrays.fill(upperRow, 0);
        Arrays.fill(lowerRow, 0);
        
        // First pass: handle columns where colsum[i] is 2
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 2) {
                // Both rows must have a 1 in the i-th column
                upperRow[i] = 1;
                lowerRow[i] = 1;
                upper--;
                lower--;
            }
        }
        
        // Second pass: handle columns where colsum[i] is 1
        for (int i = 0; i < n; i++) {
            if (colsum[i] == 1) {
                if (upper > 0) {
                    // Place 1 in the upper row if possible
                    upperRow[i] = 1;
                    upper--;
                } else if (lower > 0) {
                    // Otherwise, place 1 in the lower row
                    lowerRow[i] = 1;
                    lower--;
                } else {
                    // If neither row can accommodate the 1, return an empty list
                    return result;
                }
            }
        }
        
        // Check if all the required 1's are placed correctly
        if (upper != 0 || lower != 0) {
            return result;
        }
        
        // Convert arrays to lists and add to the result
        result.add(Arrays.asList(upperRow));
        result.add(Arrays.asList(lowerRow));
        return result;
    }
}



or


class Solution {
    public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {
	List<List<Integer>> res = new ArrayList<List<Integer>>(){{
		add(new ArrayList<Integer>());
		add(new ArrayList<Integer>());
	}};

	for(int i=0; i < colsum.length; i++){
		if(colsum[i] == 2){
			res.get(0).add(1);
			res.get(1).add(1);
			upper--;
			lower--;
		}else if(colsum[i] == 1){
			if(upper > lower){
				res.get(0).add(1);
				res.get(1).add(0);
				upper--;
			}else{
				res.get(0).add(0);
				res.get(1).add(1);
				lower--;
			}
		}else{
			res.get(0).add(0);
			res.get(1).add(0);
		}
	}

	if(lower != 0 || upper != 0){
		return Collections.emptyList();
	}

	return res;       
}
}



or



import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Solution {
    public List<List<Integer>> reconstructMatrix(int upper, int lower, int[] colsum) {
        int n = colsum.length;
        int count1 = 0;
        int count2 = 0;

        for (int i = 0; i < n; i++) {
            if (colsum[i] == 1) count1++;
            if (colsum[i] == 2) count2 += 2;
        }

        if ((upper + lower) - (count1 + count2) != 0) return new ArrayList<>();

        int upp = upper - count2 / 2;
        int low = lower - count2 / 2;

        if (upp < 0 || low < 0) return new ArrayList<>();

        List<List<Integer>> res = new ArrayList<>();
        res.add(new ArrayList<>());
        res.add(new ArrayList<>());

        for (int i = 0; i < n; i++) {
            if (colsum[i] == 2) {
                res.get(0).add(1);
                res.get(1).add(1);
            } else if (colsum[i] == 1) {
                if (upp > 0) {
                    res.get(0).add(1);
                    res.get(1).add(0);
                    upp--;
                } else {
                    res.get(0).add(0);
                    res.get(1).add(1);
                    low--;
                }
            } else {
                res.get(0).add(0);
                res.get(1).add(0);
            }
        }

        return res;
    }
}



or



