https://leetcode.com/problems/spiral-matrix-ii/description/

59. Spiral Matrix II
Medium
Topics
Companies
Given a positive integer n, generate an n x n matrix filled with elements from 1 to n2 in spiral order.

 

Example 1:


Input: n = 3
Output: [[1,2,3],[8,9,4],[7,6,5]]
Example 2:

Input: n = 1
Output: [[1]]
 

Constraints:

1 <= n <= 20

# java


class Solution {
    public int[][] generateMatrix(int n) {
        int[][] result = new int[n][n];
        int cnt = 1;
        for (int layer = 0; layer < (n + 1) / 2; layer++) {
            // direction 1 - traverse from left to right
            for (int ptr = layer; ptr < n - layer; ptr++) {
                result[layer][ptr] = cnt++;
            }
            // direction 2 - traverse from top to bottom
            for (int ptr = layer + 1; ptr < n - layer; ptr++) {
                result[ptr][n - layer - 1] = cnt++;
            }
            // direction 3 - traverse from right to left
            for (int ptr = layer + 1; ptr < n - layer; ptr++) {
                result[n - layer - 1][n - ptr - 1] = cnt++;
            }
            // direction 4 - traverse from bottom to top
            for (int ptr = layer + 1; ptr < n - layer - 1; ptr++) {
                result[n - ptr - 1][layer] = cnt++;
            }
        }
        return result;
    }
}

or


class Solution {
    public int[][] generateMatrix(int n) {
        int[][] result = new int[n][n];
        int cnt = 1;
        int dir[][] = { { 0, 1 }, { 1, 0 }, { 0, -1 }, { -1, 0 } };
        int d = 0;
        int row = 0;
        int col = 0;
        while (cnt <= n * n) {
            result[row][col] = cnt++;
            int r = Math.floorMod(row + dir[d][0], n);
            int c = Math.floorMod(col + dir[d][1], n);

            // change direction if next cell is non zero
            if (result[r][c] != 0) d = (d + 1) % 4;

            row += dir[d][0];
            col += dir[d][1];
        }
        return result;
    }
}


or


class Solution {
    Integer rowDir = 0, colDir = 1;
    
    public int[][] generateMatrix(int n) {
        int[][] matrix = new int[n][n];
        int num = 1;
        int row =0, col=0;
        
        
        while(num<= n*n) {
            matrix[row][col] = num;
            
            int tempRow = row+rowDir;
            int tempCol = col+colDir;
			
			//Condition to change direction 
            if(tempRow < 0 || tempCol <0 || tempRow == n || tempCol == n || matrix[tempRow][tempCol] != 0) {
                changeDirection();
            }
            
            row += rowDir;
            col += colDir;
            
            num++;
        }
        
        return matrix;
    }
    
    public void changeDirection() {
		
        if(rowDir == 0 && colDir ==1) {
			// initial: right -> new: down
            colDir = 0;
            rowDir = 1;
        } else if (colDir == 0 && rowDir ==1) {
			// initial: down -> new: left
            rowDir = 0;
            colDir = -1;
        } else if (colDir == -1 && rowDir == 0) {
			// initial: left -> new: up
            rowDir = -1;
            colDir = 0;
        } else if (rowDir == -1 && colDir == 0) {
			// initial: up -> new: right
            colDir = 1;
            rowDir = 0;
        }
    }
}

