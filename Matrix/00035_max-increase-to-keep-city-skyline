https://leetcode.com/problems/max-increase-to-keep-city-skyline/description/


807. Max Increase to Keep City Skyline
Medium
Topics
Companies
There is a city composed of n x n blocks, where each block contains a single building shaped like a vertical square prism. You are given a 0-indexed n x n integer matrix grid where grid[r][c] represents the height of the building located in the block at row r and column c.

A city's skyline is the outer contour formed by all the building when viewing the side of the city from a distance. The skyline from each cardinal direction north, east, south, and west may be different.

We are allowed to increase the height of any number of buildings by any amount (the amount can be different per building). The height of a 0-height building can also be increased. However, increasing the height of a building should not affect the city's skyline from any cardinal direction.

Return the maximum total sum that the height of the buildings can be increased by without changing the city's skyline from any cardinal direction.

 

Example 1:


Input: grid = [[3,0,8,4],[2,4,5,7],[9,2,6,3],[0,3,1,0]]
Output: 35
Explanation: The building heights are shown in the center of the above image.
The skylines when viewed from each cardinal direction are drawn in red.
The grid after increasing the height of buildings without affecting skylines is:
gridNew = [ [8, 4, 8, 7],
            [7, 4, 7, 7],
            [9, 4, 8, 7],
            [3, 3, 3, 3] ]
Example 2:

Input: grid = [[0,0,0],[0,0,0],[0,0,0]]
Output: 0
Explanation: Increasing the height of any building will result in the skyline changing.
 

Constraints:

n == grid.length
n == grid[r].length
2 <= n <= 50
0 <= grid[r][c] <= 100



# jva



class Solution {
  public int maxIncreaseKeepingSkyline(int[][] grid) {
    final int n = grid.length;
    int ans = 0;
    int[] rowMax = new int[n];
    int[] colMax = new int[n];

    for (int i = 0; i < n; ++i)
      for (int j = 0; j < n; ++j) {
        rowMax[i] = Math.max(rowMax[i], grid[i][j]);
        colMax[j] = Math.max(colMax[j], grid[i][j]);
      }

    for (int i = 0; i < n; ++i)
      for (int j = 0; j < n; ++j)
        ans += Math.min(rowMax[i], colMax[j]) - grid[i][j];

    return ans;
  }
}



or



class Solution {
    public int maxIncreaseKeepingSkyline(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[] rmx = new int[m];
        int[] cmx = new int[n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                rmx[i] = Math.max(rmx[i], grid[i][j]);
                cmx[j] = Math.max(cmx[j], grid[i][j]);
            }
        }
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                ans += Math.min(rmx[i], cmx[j]) - grid[i][j];
            }
        }
        return ans;
    }
}



or



class Solution {
    public int maxIncreaseKeepingSkyline(int[][] grid) {
        int N = grid.length;
        int[] rowMaxes = new int[N];
        int[] colMaxes = new int[N];

        for (int r = 0; r < N; ++r)
            for (int c = 0; c < N; ++c) {
                rowMaxes[r] = Math.max(rowMaxes[r], grid[r][c]);
                colMaxes[c] = Math.max(colMaxes[c], grid[r][c]);
        }

        int ans = 0;
        for (int r = 0; r < N; ++r)
            for (int c = 0; c < N; ++c)
                ans += Math.min(rowMaxes[r], colMaxes[c]) - grid[r][c];

        return ans;
    }
}


or



import java.util.stream.IntStream;

public class Solution {
    public int maxIncreaseKeepingSkyline(int[][] grid) {
        int n = grid.length;

        // Find the maximum elements in each row and column efficiently using streams
        int[] rowMax = IntStream.range(0, n)
                .map(r -> IntStream.of(grid[r]).max().orElse(0))  // Efficiently find row max using stream
                .toArray();
        int[] colMax = IntStream.range(0, n)
                .map(c -> IntStream.range(0, n).map(r -> grid[r][c]).max().orElse(0))  // Efficiently find col max using stream
                .toArray();

        // Calculate the total increase while maintaining the skyline
        int totalIncrease = 0;
        for (int r = 0; r < n; r++) {
            for (int c = 0; c < n; c++) {
                totalIncrease += Math.min(rowMax[r], colMax[c]) - grid[r][c];
            }
        }

        return totalIncrease;
    }
}



or



class Solution {
    public int maxIncreaseKeepingSkyline(int[][] grid) {
        if(grid == null)
            return 0;
        int n = grid.length;
        int m = grid[0].length;
        int maxrow[] = new int[n];
        int maxcol[] = new int[m];
        for(int i = 0; i < n; i++)
            for(int j = 0 ; j < m; j++){
                maxrow[i] = Math.max(maxrow[i], grid[i][j]);
                maxcol[j] = Math.max(maxcol[j], grid[i][j]);
            }
        int count = 0;
        for(int i = 0; i < n; i++)
            for(int j = 0 ; j < m; j++)
                count += (Math.min(maxrow[i], maxcol[j]) - grid[i][j]);
                
        return count;
    }
}


or


