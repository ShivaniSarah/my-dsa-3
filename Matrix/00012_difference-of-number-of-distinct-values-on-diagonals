https://leetcode.com/problems/difference-of-number-of-distinct-values-on-diagonals/


2711. Difference of Number of Distinct Values on Diagonals
Medium
Topics
Companies
Hint
Given a 2D grid of size m x n, you should find the matrix answer of size m x n.

The cell answer[r][c] is calculated by looking at the diagonal values of the cell grid[r][c]:

Let leftAbove[r][c] be the number of distinct values on the diagonal to the left and above the cell grid[r][c] not including the cell grid[r][c] itself.
Let rightBelow[r][c] be the number of distinct values on the diagonal to the right and below the cell grid[r][c], not including the cell grid[r][c] itself.
Then answer[r][c] = |leftAbove[r][c] - rightBelow[r][c]|.
A matrix diagonal is a diagonal line of cells starting from some cell in either the topmost row or leftmost column and going in the bottom-right direction until the end of the matrix is reached.

For example, in the below diagram the diagonal is highlighted using the cell with indices (2, 3) colored gray:
Red-colored cells are left and above the cell.
Blue-colored cells are right and below the cell.


Return the matrix answer.

 

Example 1:

Input: grid = [[1,2,3],[3,1,5],[3,2,1]]

Output: Output: [[1,1,0],[1,0,1],[0,1,1]]

Explanation:

To calculate the answer cells:

answer	left-above elements	leftAbove	right-below elements	rightBelow	|leftAbove - rightBelow|
[0][0]	[]	0	[grid[1][1], grid[2][2]]	|{1, 1}| = 1	1
[0][1]	[]	0	[grid[1][2]]	|{5}| = 1	1
[0][2]	[]	0	[]	0	0
[1][0]	[]	0	[grid[2][1]]	|{2}| = 1	1
[1][1]	[grid[0][0]]	|{1}| = 1	[grid[2][2]]	|{1}| = 1	0
[1][2]	[grid[0][1]]	|{2}| = 1	[]	0	1
[2][0]	[]	0	[]	0	0
[2][1]	[grid[1][0]]	|{3}| = 1	[]	0	1
[2][2]	[grid[0][0], grid[1][1]]	|{1, 1}| = 1	[]	0	1
Example 2:

Input: grid = [[1]]

Output: Output: [[0]]

 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n, grid[i][j] <= 50



# java


class Solution {
  public int[][] differenceOfDistinctValues(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    int[][] ans = new int[m][n];

    for (int i = 0; i < m; ++i)
      fillInDiagonal(grid, i, 0, ans);

    for (int j = 1; j < n; ++j)
      fillInDiagonal(grid, 0, j, ans);

    return ans;
  }

  private void fillInDiagonal(int[][] grid, int i, int j, int[][] ans) {
    Set<Integer> topLeft = new HashSet<>();
    Set<Integer> bottomRight = new HashSet<>();

    // Fill in the diagonal from the top-left to the bottom-right.
    while (i < grid.length && j < grid[0].length) {
      ans[i][j] = topLeft.size();
      // Post-addition, so this information can be utilized in subsequent cells.
      topLeft.add(grid[i++][j++]);
    }

    --i;
    --j;

    // Fill in the diagonal from the bottom-right to the top-left.
    while (i >= 0 && j >= 0) {
      ans[i][j] = Math.abs(ans[i][j] - bottomRight.size());
      // Post-addition, so this information can be utilized in subsequent cells.
      bottomRight.add(grid[i--][j--]);
    }
  }
}



or



class Solution {
    public int[][] differenceOfDistinctValues(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] ans = new int[m][n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int x = i, y = j;
                Set<Integer> s = new HashSet<>();
                while (x > 0 && y > 0) {
                    s.add(grid[--x][--y]);
                }
                int tl = s.size();
                x = i;
                y = j;
                s.clear();
                while (x < m - 1 && y < n - 1) {
                    s.add(grid[++x][++y]);
                }
                int br = s.size();
                ans[i][j] = Math.abs(tl - br);
            }
        }
        return ans;
    }
}


or



class Solution {
    public int[][] differenceOfDistinctValues(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        
        int[][] ans = new int[m][n];
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                
                //using set for determining distinct integers

                Set<Integer> topLeft = new HashSet(); 

                //traversing topLeft diagonal, 
                for(int r = i-1, c = j-1; r >= 0 && c >= 0; r--, c--){
                    topLeft.add(grid[r][c]);
                }
                
                Set<Integer> bottomRight = new HashSet();

                // traversing bottomRight diagonal
                for(int r = i+1, c = j+1; r < m && c < n; r++, c++){
                    bottomRight.add(grid[r][c]);
                }
                
                ans[i][j] = Math.abs(bottomRight.size() - topLeft.size());
            }
        }
        
        return ans;
    }
}


