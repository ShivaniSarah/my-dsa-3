https://leetcode.com/problems/using-a-robot-to-print-the-lexicographically-smallest-string/description/


2434. Using a Robot to Print the Lexicographically Smallest String
Medium
Topics
Companies
Hint
You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:

Remove the first character of a string s and give it to the robot. The robot will append this character to the string t.
Remove the last character of a string t and give it to the robot. The robot will write this character on paper.
Return the lexicographically smallest string that can be written on the paper.

 

Example 1:

Input: s = "zza"
Output: "azz"
Explanation: Let p denote the written string.
Initially p="", s="zza", t="".
Perform first operation three times p="", s="", t="zza".
Perform second operation three times p="azz", s="", t="".
Example 2:

Input: s = "bac"
Output: "abc"
Explanation: Let p denote the written string.
Perform first operation twice p="", s="c", t="ba". 
Perform second operation twice p="ab", s="c", t="". 
Perform first operation p="ab", s="", t="c". 
Perform second operation p="abc", s="", t="".
Example 3:

Input: s = "bdda"
Output: "addb"
Explanation: Let p denote the written string.
Initially p="", s="bdda", t="".
Perform first operation four times p="", s="", t="bdda".
Perform second operation four times p="addb", s="", t="".
 

Constraints:

1 <= s.length <= 105
s consists of only English lowercase letters.


# java


class Solution {
  public String robotWithString(String s) {
    StringBuilder sb = new StringBuilder();
    int[] count = new int[26];
    Deque<Character> stack = new ArrayDeque<>();

    for (final char c : s.toCharArray())
      ++count[c - 'a'];

    for (final char c : s.toCharArray()) {
      stack.push(c);
      --count[c - 'a'];
      final char minChar = getMinChar(count);
      while (!stack.isEmpty() && stack.peek() <= minChar)
        sb.append(stack.pop());
    }

    while (!stack.isEmpty())
      sb.append(stack.pop());

    return sb.toString();
  }

  private char getMinChar(int[] count) {
    for (int i = 0; i < 26; ++i)
      if (count[i] > 0)
        return (char) ('a' + i);
    return 'a';
  }
}


or



class Solution {
    public String robotWithString(String s) {
        int[] cnt = new int[26];
        for (char c : s.toCharArray()) {
            ++cnt[c - 'a'];
        }
        StringBuilder ans = new StringBuilder();
        Deque<Character> stk = new ArrayDeque<>();
        char mi = 'a';
        for (char c : s.toCharArray()) {
            --cnt[c - 'a'];
            while (mi < 'z' && cnt[mi - 'a'] == 0) {
                ++mi;
            }
            stk.push(c);
            while (!stk.isEmpty() && stk.peek() <= mi) {
                ans.append(stk.pop());
            }
        }
        return ans.toString();
    }
}


or



class Solution {
    public String robotWithString(String s) {
        StringBuilder ans = new StringBuilder();
        Stack<Character> t = new Stack<>();
        char[] schar = s.toCharArray();
        
        Map<Character, Integer> map = new HashMap<>();
        for(int i = 0; i < s.length(); i++) map.put(schar[i], i);
        Arrays.sort(schar);
        
        int cur = -1;
        int i = 0;
        while(i < s.length()){
            char curch = schar[i];//Check current minimum character            
            if(map.get(curch) > cur){//Current char is not in stack  
                while(!t.isEmpty() && t.peek() <= curch) ans.append(t.pop());//Char in stack is smaller than current char, then we add it to answer first
                ans.append(curch);
                for(int j = cur + 1; j < map.get(curch); j++){
                    if(s.charAt(j) == curch){
                        ans.append(curch);
                        i++;
                    }
                    else t.push(s.charAt(j)); //Put in stack
                }
                cur = map.get(curch);
            }
            i++;
        }
         
        //Add left nums in stack to answer
        while(!t.isEmpty()) ans.append(t.pop());        
        return ans.toString();
    }
}

or


class Solution {
    public String robotWithString(String s) {
        Map<Character, Integer> lastSeen = new HashMap<>();
        for (int i = 0; i < s.length(); i++)
            lastSeen.put(s.charAt(i), i);
        Set<Integer> used = new HashSet<>();
        Stack<Character> stack = new Stack<>();
        StringBuilder sb = new StringBuilder();
        int preEnd = 0;
        for (char c = 'a'; c <= 'z'; c++) {
            while (!stack.isEmpty() && stack.peek() <= c) sb.append(stack.pop());
            if (!lastSeen.containsKey(c)) continue;
            int last = lastSeen.get(c);
            for (int i = preEnd; i <= last; i++) {
                char cur = s.charAt(i);
                if (used.add(i)) {
                    if (cur == c) sb.append(cur);
                    else stack.add(cur);
                }
            }
            preEnd = last + 1;
        }
        while (!stack.isEmpty()) {
            sb.append(stack.pop());
        }
        return sb.toString();
    }
}

or


class Solution {
    public String robotWithString(String s) {
        int n = s.length();
        char[] rightMin = new char[n];
        rightMin[n - 1] = s.charAt(n - 1);
        // right smallest character array
        // so we can find at any index if we have smaller value yet to come
        for (int i = n - 2; i >= 0; i--)
            rightMin[i] = s.charAt(i) < rightMin[i + 1] ? s.charAt(i) : rightMin[i + 1];

        StringBuilder ans = new StringBuilder();
        Stack<Character> stack = new Stack<>();

        for (int i = 0; i < n; i++) {
            char curr = s.charAt(i);
            while (!stack.isEmpty() && stack.peek() <= curr && rightMin[i] >= stack.peek())
                ans.append(stack.pop());

            stack.push(curr);
        }
        while(!stack.isEmpty())
            ans.append(stack.pop());
        
        return ans.toString();

    }
}
