https://leetcode.com/problems/check-if-a-parentheses-string-can-be-valid/description/


2116. Check if a Parentheses String Can Be Valid
Medium
Topics
Companies
Hint
A parentheses string is a non-empty string consisting only of '(' and ')'. It is valid if any of the following conditions is true:

It is ().
It can be written as AB (A concatenated with B), where A and B are valid parentheses strings.
It can be written as (A), where A is a valid parentheses string.
You are given a parentheses string s and a string locked, both of length n. locked is a binary string consisting only of '0's and '1's. For each index i of locked,

If locked[i] is '1', you cannot change s[i].
But if locked[i] is '0', you can change s[i] to either '(' or ')'.
Return true if you can make s a valid parentheses string. Otherwise, return false.

 

Example 1:


Input: s = "))()))", locked = "010100"
Output: true
Explanation: locked[1] == '1' and locked[3] == '1', so we cannot change s[1] or s[3].
We change s[0] and s[4] to '(' while leaving s[2] and s[5] unchanged to make s valid.
Example 2:

Input: s = "()()", locked = "0000"
Output: true
Explanation: We do not need to make any changes because s is already valid.
Example 3:

Input: s = ")", locked = "0"
Output: false
Explanation: locked permits us to change s[0]. 
Changing s[0] to either '(' or ')' will not make s valid.
Example 4:

Input: s = "(((())(((())", locked = "111111010111"
Output: true
Explanation: locked permits us to change s[6] and s[8]. 
We change s[6] and s[8] to ')' to make s valid.
 

Constraints:

n == s.length == locked.length
1 <= n <= 105
s[i] is either '(' or ')'.
locked[i] is either '0' or '1'.



# java


class Solution {
  public boolean canBeValid(String s, String locked) {
    if (s.length() % 2 == 1)
      return false;

    return check(s, locked, true) && check(new StringBuilder(s).reverse().toString(),
                                           new StringBuilder(locked).reverse().toString(), false);
  }

  private boolean check(final String s, final String locked, boolean isForward) {
    int changeable = 0;
    int l = 0;
    int r = 0;

    for (int i = 0; i < s.length(); ++i) {
      final char c = s.charAt(i);
      final char lock = locked.charAt(i);
      if (lock == '0')
        ++changeable;
      else if (c == '(')
        ++l;
      else // c == ')'
        ++r;
      if (isForward && changeable + l - r < 0)
        return false;
      if (!isForward && changeable + r - l < 0)
        return false;
    }

    return true;
  }
}



or


class Solution {
    public boolean canBeValid(String s, String locked) {
        int n = s.length();
        if (n % 2 == 1) {
            return false;
        }
        int x = 0;
        for (int i = 0; i < n; ++i) {
            if (s.charAt(i) == '(' || locked.charAt(i) == '0') {
                ++x;
            } else if (x > 0) {
                --x;
            } else {
                return false;
            }
        }
        x = 0;
        for (int i = n - 1; i >= 0; --i) {
            if (s.charAt(i) == ')' || locked.charAt(i) == '0') {
                ++x;
            } else if (x > 0) {
                --x;
            } else {
                return false;
            }
        }
        return true;
    }
}


or


class Solution {

    public boolean canBeValid(String s, String locked) {
        int length = s.length();

        // If length of string is odd, return false.
        if (length % 2 == 1) {
            return false;
        }

        Stack<Integer> openBrackets = new Stack<>();
        Stack<Integer> unlocked = new Stack<>();

        // Iterate through the string to handle '(' and ')'
        for (int i = 0; i < length; i++) {
            if (locked.charAt(i) == '0') {
                unlocked.push(i);
            } else if (s.charAt(i) == '(') {
                openBrackets.push(i);
            } else if (s.charAt(i) == ')') {
                if (!openBrackets.empty()) {
                    openBrackets.pop();
                } else if (!unlocked.empty()) {
                    unlocked.pop();
                } else {
                    return false;
                }
            }
        }

        // Match remaining open brackets with unlocked characters
        while (
            !openBrackets.empty() &&
            !unlocked.empty() &&
            openBrackets.peek() < unlocked.peek()
        ) {
            openBrackets.pop();
            unlocked.pop();
        }

        if (!openBrackets.empty()) {
            return false;
        }

        return true;
    }
}



or


class Solution {

    public boolean canBeValid(String s, String locked) {
        int length = s.length();

        // If length of string is odd, return false.
        if (length % 2 == 1) {
            return false;
        }
        int openBrackets = 0;
        int unlocked = 0;

        // Iterate through the string to handle '(' and ')'.
        for (int i = 0; i < length; i++) {
            if (locked.charAt(i) == '0') {
                unlocked++;
            } else if (s.charAt(i) == '(') {
                openBrackets++;
            } else if (s.charAt(i) == ')') {
                if (openBrackets > 0) {
                    openBrackets--;
                } else if (unlocked > 0) {
                    unlocked--;
                } else {
                    return false;
                }
            }
        }

        // Match remaining open brackets with unlocked characters.
        int balance = 0;
        for (int i = length - 1; i >= 0; i--) {
            if (locked.charAt(i) == '0') {
                balance--;
                unlocked--;
            } else if (s.charAt(i) == '(') {
                balance++;
                openBrackets--;
            } else if (s.charAt(i) == ')') {
                balance--;
            }
            if (balance > 0) {
                return false;
            }
        }

        if (openBrackets > 0) {
            return false;
        }

        return true;
    }
}


or


class Solution {
   boolean validate(String s, String locked, char op) {
    int bal = 0, wild = 0, sz = s.length();
    int start = op == '(' ? 0 : sz - 1, dir = op == '(' ? 1 : - 1;
    for (int i = start; i >= 0 && i < sz && wild + bal >= 0; i += dir)
        if (locked.charAt(i) == '1')
            bal += s.charAt(i) == op ? 1 : -1;
        else
            ++wild;
    return Math.abs(bal) <= wild;
}
public boolean canBeValid(String s, String locked) {
    return s.length() % 2 == 0 && validate(s, locked, '(') && validate(s, locked, ')');
}
}


or


class Solution {
   public boolean canBeValid(String s, String l) {
    if (s.length() % 2 == 1) return false;
    int total = 0, open = 0, closed = 0;
    for(int i = s.length() - 1; i >= 0; i--) {
        if (l.charAt(i) == '0')
            total += 1;
        else if (s.charAt(i) == '(')
            open += 1;
        else if (s.charAt(i) == ')')
            closed += 1;
        if (total - open + closed < 0) return false;
    }
    total = open = closed = 0;
    for(int i = 0; i < s.length(); i++) {
        if (l.charAt(i) == '0')
            total += 1;
        else if (s.charAt(i) == '(')
            open += 1;
        else if (s.charAt(i) == ')')
            closed += 1;
        if (total + open - closed < 0) return false;
    }
    return true;
}
}



or


class Solution {
    public boolean canBeValid(String inputString, String lockStatus) {
        if (inputString.length() % 2 != 0) 
            return false;

        int balanceCount = 0;
        for (int i = 0; i < inputString.length(); i++) {
            if (lockStatus.charAt(i) == '0' || inputString.charAt(i) == '(') 
                balanceCount++;
            else 
                balanceCount--;
            if (balanceCount < 0) 
                return false;
        }

        balanceCount = 0;
        for (int i = inputString.length() - 1; i >= 0; i--) {
            if (lockStatus.charAt(i) == '0' || inputString.charAt(i) == ')') 
                balanceCount++;
            else 
                balanceCount--;
            if (balanceCount < 0) 
                return false;
        }

        return true;
    }
}



or


class Solution {
    public boolean canBeValid(String s, String locked) {
        if (s.length() % 2 != 0) 
            return false;

        int openCount = 0, closeCount = 0;
        for (int i = 0; i < s.length(); i++) {
            if (locked.charAt(i) == '0' || s.charAt(i) == '(') 
                openCount++;
            else 
                openCount--;
            if (openCount < 0) 
                return false;
        }

        openCount = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (locked.charAt(i) == '0' || s.charAt(i) == ')') 
                closeCount++;
            else 
                closeCount--;
            if (closeCount < 0) 
                return false;
        }

        return true;
    }
}


or



class Solution {
    public boolean canBeValid(String parentheses, String status) {
        int length = parentheses.length();
        if (length % 2 != 0) return false;
        int minBalance = 0, maxBalance = 0;
        for (int i = 0; i < length; i++) {
            boolean isOpening = parentheses.charAt(i) == '(';
            boolean isUnlocked = status.charAt(i) == '0';
            minBalance += (!isOpening || isUnlocked) ? -1 : 1;
            maxBalance += (isOpening || isUnlocked) ? 1 : -1;
            if (maxBalance < 0) return false;
            minBalance = Math.max(minBalance, 0);
        }
        return minBalance == 0;
    }
}



or


