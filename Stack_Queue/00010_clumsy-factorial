http://leetcode.com/problems/clumsy-factorial/description/


1006. Clumsy Factorial
Medium
Topics
Companies
The factorial of a positive integer n is the product of all positive integers less than or equal to n.

For example, factorial(10) = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1.
We make a clumsy factorial using the integers in decreasing order by swapping out the multiply operations for a fixed rotation of operations with multiply '*', divide '/', add '+', and subtract '-' in this order.

For example, clumsy(10) = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1.
However, these operations are still applied using the usual order of operations of arithmetic. We do all multiplication and division steps before any addition or subtraction steps, and multiplication and division steps are processed left to right.

Additionally, the division that we use is floor division such that 10 * 9 / 8 = 90 / 8 = 11.

Given an integer n, return the clumsy factorial of n.

 

Example 1:

Input: n = 4
Output: 7
Explanation: 7 = 4 * 3 / 2 + 1
Example 2:

Input: n = 10
Output: 12
Explanation: 12 = 10 * 9 / 8 + 7 - 6 * 5 / 4 + 3 - 2 * 1
 

Constraints:

1 <= n <= 104


 #java


class Solution {
    public int clumsy(int N) {
        Deque<Integer> s = new ArrayDeque<>();
        s.offerLast(N);
        int op = 0;
        for (int i = N - 1; i > 0; --i) {
            if (op == 0) {
                s.offerLast(s.pollLast() * i);
            } else if (op == 1) {
                s.offerLast(s.pollLast() / i);
            } else if (op == 2) {
                s.offerLast(i);
            } else {
                s.offerLast(-i);
            }
            op = (op + 1) % 4;
        }
        int res = 0;
        while (!s.isEmpty()) {
            res += s.pollLast();
        }
        return res;
    }
}


or



class Solution {
    public int clumsy(int n) {
        int ans = 1;
        if(n <= 4){
            if(n <= 2) return n;
            else if(n == 3) return 6;
            else if(n == 4) return 7;
        } else {
            if(n%4 == 1 || n%4 == 2) ans = n+2;
            else if(n%4 == 3) ans = n-1;
            else ans = n+1;
        }
        return ans;
    }
}


or


class Solution {
  public int clumsy(int n) {
    Stack<Integer> stac = new Stack<>();
    stac.push(n--);
    int i = 0;
    int ans = 0;
    while (n>0) {
      switch (i%4) {
        case 0:
          stac.push(stac.pop()*n);
          break;
        case 1:
          stac.push(stac.pop()/n);
          break;
        case 2:
          stac.push(n);
          break;
        case 3:
          stac.push(-n);
          break;
      }
      i++;
      n--;
    }
    while (!stac.isEmpty()) {
      ans+=stac.pop();
    }
    return ans;
  }
}



or

class Solution {
  public int clumsy(int n) 

{
      if(n<=2) return n;
     if(n<=4) return n+3;
     if(n%4 == 0) return n+1;
     if(n%4<=2) return n+2;
     else return n-1;
      
  }
}



or


class Solution {
      public int clumsy(int N) {
        int curr = N; // stores current cal result
        int ans = 0; // stores final answer
        int count = 0;
        while(--N >= 1){
            switch (count%4){
                case 0: // Multiplication
                    curr *= N;
                    break;
                case 1: // Division
                    curr /= N; 
                    break;
                case 2:  // Addition; store curr into ans, reset ans
                    ans = (count==2)?(ans+=curr):(ans-=curr); // Always substract curr from ans except first occurance
                    ans+=N;
                    curr=0;
                    break;
                case 3: // Substraction; 
                    curr=N;
                    break;
            }
            count++;
        }
        return count<=2?(ans+=curr):(ans-=curr);
    }
}




