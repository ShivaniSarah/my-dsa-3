https://leetcode.com/problems/smallest-subsequence-of-distinct-characters/description/


1081. Smallest Subsequence of Distinct Characters
Medium
Topics
Companies
Hint
Given a string s, return the lexicographically smallest subsequence of s that contains all the distinct characters of s exactly once.

 

Example 1:

Input: s = "bcabc"
Output: "abc"
Example 2:

Input: s = "cbacdcbc"
Output: "acdb"
 

Constraints:

1 <= s.length <= 1000
s consists of lowercase English letters.
 

Note: This question is the same as 316: https://leetcode.com/problems/remove-duplicate-letters/


# java


class Solution {
  public String smallestSubsequence(String text) {
    StringBuilder sb = new StringBuilder();
    int[] count = new int[128];
    boolean[] used = new boolean[128];

    for (final char c : text.toCharArray())
      ++count[c];

    for (final char c : text.toCharArray()) {
      --count[c];
      if (used[c])
        continue;
      while (sb.length() > 0 && last(sb) > c && count[last(sb)] > 0) {
        used[last(sb)] = false;
        sb.setLength(sb.length() - 1);
      }
      used[c] = true;
      sb.append(c);
    }

    return sb.toString();
  }

  private char last(StringBuilder sb) {
    return sb.charAt(sb.length() - 1);
  }
}



or



class Solution {
    public String smallestSubsequence(String text) {
        int[] cnt = new int[26];
        for (char c : text.toCharArray()) {
            ++cnt[c - 'a'];
        }
        boolean[] vis = new boolean[26];
        char[] cs = new char[text.length()];
        int top = -1;
        for (char c : text.toCharArray()) {
            --cnt[c - 'a'];
            if (!vis[c - 'a']) {
                while (top >= 0 && c < cs[top] && cnt[cs[top] - 'a'] > 0) {
                    vis[cs[top--] - 'a'] = false;
                }
                cs[++top] = c;
                vis[c - 'a'] = true;
            }
        }
        return String.valueOf(cs, 0, top + 1);
    }
}



or


class Solution {
        public String smallestSubsequence(String s) {
        //character frequency
        int[] count = new int[26];
        for(char c : s.toCharArray()){
            count[c-'a']++;
        }
        //to keep track of visited character so that we don't use them if present in answer
        boolean[] visited = new boolean[26];
        
        //Stack store resulting characters
        Stack<Character> stack = new Stack<>();
        //traverse through string and add characters
        for(char c : s.toCharArray()){
            //dcrement the frequncy of character since we are using it in answer
            //!!! We have decrement the character frequncy before checking it is visited
            count[c - 'a']--;
            
            //if already present in tstack we dont need the character
            if(visited[c - 'a']){
                continue;
            }
            
            //traverse through the stack and check for larger characters
            //if found and it is not the last position then pop from stack
            //Eg: bcabc => if stack has bc, now a<b and curr b is not the last one 
            //if not in last position come out of loop and add curr character to stack
            while(!stack.isEmpty() && c < stack.peek() && count[stack.peek() - 'a'] > 0){
                //make the current character available for next operations
                visited[stack.pop() - 'a'] = false;
            }
            //add curr charatcer to string 
            stack.push(c);
            //mark it as vistied
            visited[c - 'a'] = true;
        }
        
        //Now characters are in reverse order in stack 
        //Use StringBuilder instead of String for storing result
        StringBuilder sb = new StringBuilder();
        while(!stack.isEmpty()){
            sb.append(stack.pop());
        }
        
        return sb.reverse().toString();
        
    }
}


or


// bets


// solution is pretty simple and straight forward
// first we count the frequency of each char in the string
// then we put each char of the string in the string res(the string that we'll be returning)
// if we find a char x (in text) that is smaller than the last char in our res string
// then we remove the char from the end of the res string
// then we will add the char x at the end of our res string
// this will ensure that the res will be lexicographically smallest subsequence of text

class Solution {
    public String smallestSubsequence(String text) {
        int[] freq = new int[26];
        boolean[] taken = new boolean[26];
        
        for(char c: text.toCharArray()) freq[c - 'a']++;
        
        StringBuilder res = new StringBuilder();
        res.append('0');
        
        for(char c: text.toCharArray()) {
            freq[c-'a']--;
            if(!taken[c - 'a']) {
                while(res.charAt(res.length() - 1) > c && freq[res.charAt(res.length() - 1) - 'a'] > 0) {
                    taken[res.charAt(res.length() - 1) - 'a'] = false;
                    res.deleteCharAt(res.length() - 1);
                }
                res.append(c);
                taken[c-'a'] = true;
            }
        }
        
        return res.substring(1).toString();
    }
}






