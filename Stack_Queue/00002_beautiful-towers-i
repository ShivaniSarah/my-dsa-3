https://leetcode.com/problems/beautiful-towers-i/description/


2865. Beautiful Towers I
Medium
Topics
Companies
Hint
You are given an array heights of n integers representing the number of bricks in n consecutive towers. Your task is to remove some bricks to form a mountain-shaped tower arrangement. In this arrangement, the tower heights are non-decreasing, reaching a maximum peak value with one or multiple consecutive towers and then non-increasing.

Return the maximum possible sum of heights of a mountain-shaped tower arrangement.

 

Example 1:

Input: heights = [5,3,4,1,1]

Output: 13

Explanation:

We remove some bricks to make heights = [5,3,3,1,1], the peak is at index 0.

Example 2:

Input: heights = [6,5,3,9,2,7]

Output: 22

Explanation:

We remove some bricks to make heights = [3,3,3,9,2,2], the peak is at index 3.

Example 3:

Input: heights = [3,2,5,5,2,3]

Output: 18

Explanation:

We remove some bricks to make heights = [2,2,5,5,2,2], the peak is at index 2 or 3.

 

Constraints:

1 <= n == heights.length <= 103
1 <= heights[i] <= 109


# java



class Solution {
  public long maximumSumOfHeights(int[] heights) {
    final int n = heights.length;
    long[] maxSum = new long[n]; // maxSum[i] := the maximum sum with peak i

    Deque<Integer> stack = new ArrayDeque<>(List.of(-1));
    long sum = 0;

    for (int i = 0; i < n; i++) {
      sum = process(stack, heights, i, sum);
      maxSum[i] = sum;
    }

    stack = new ArrayDeque<>(List.of(n));
    sum = 0;

    for (int i = n - 1; i >= 0; i--) {
      sum = process(stack, heights, i, sum);
      maxSum[i] += sum - heights[i];
    }

    return Arrays.stream(maxSum).max().getAsLong();
  }

  private long process(Deque<Integer> stack, int[] heights, int i, long sum) {
    while (stack.size() > 1 && heights[stack.peek()] > heights[i]) {
      int j = stack.pop();
      // The last abs(j - stack.peek()) heights are `heights[j]`.
      sum -= (long) Math.abs(j - stack.peek()) * heights[j];
    }
    // Put abs(i - stack.peek()) * heights[i] in `heights`.
    sum += (long) Math.abs(i - stack.peek()) * heights[i];
    stack.push(i);
    return sum;
  }
}



or



class Solution {
    public long maximumSumOfHeights(List<Integer> maxHeights) {
        long ans = 0;
        int n = maxHeights.size();
        for (int i = 0; i < n; ++i) {
            int y = maxHeights.get(i);
            long t = y;
            for (int j = i - 1; j >= 0; --j) {
                y = Math.min(y, maxHeights.get(j));
                t += y;
            }
            y = maxHeights.get(i);
            for (int j = i + 1; j < n; ++j) {
                y = Math.min(y, maxHeights.get(j));
                t += y;
            }
            ans = Math.max(ans, t);
        }
        return ans;
    }
}



or


import java.util.Arrays;
import java.util.Stack;

class Solution {
    public long maximumSumOfHeights(int[] heights) {
        int n = heights.length;
        long[] rightSum = new long[n];   // To store the sum of heights for the peak extending to the right
        long[] leftSum = new long[n];    // To store the sum of heights for the peak extending to the left
        long[] peakHeights = new long[n]; // To store the maximum possible height sum for each tower as the peak

        // Calculate indices of the next smaller element to the right for each tower
        int[] nsi = findNSI(heights);

        // Calculate indices of the previous smaller element to the left for each tower
        int[] psi = findPSI(heights);

        // Compute rightSum array
        for (int i = n - 1; i >= 0; i--) {
            // For each tower at index i, calculate the total height sum if it is considered as a peak extending to the right
            // `heights[i]` is the height of the current tower.
            // `(nsi[i] - i - 1)` calculates the number of towers that can extend right from the peak (until the next smaller element).
            // `rightSum[nsi[i]]` includes the previously computed sum for the next smaller element if it exists.
            rightSum[i] = heights[i] 
                + (long) heights[i] * (nsi[i] - i - 1) // Height extension to the right
                + (nsi[i] == n ? 0 : rightSum[nsi[i]]); // Add previously computed rightSum if there's a next smaller tower
        }

        // Compute leftSum array
        for (int i = 0; i < n; i++) {
            // For each tower at index i, calculate the total height sum if it is considered as a peak extending to the left
            // `heights[i]` is the height of the current tower.
            // `(i - psi[i] - 1)` calculates the number of towers that can extend left from the peak (until the previous smaller element).
            // `leftSum[psi[i]]` includes the previously computed sum for the previous smaller element if it exists.
            leftSum[i] = heights[i] 
                + (long) heights[i] * (i - psi[i] - 1) // Height extension to the left
                + (psi[i] == -1 ? 0 : leftSum[psi[i]]); // Add previously computed leftSum if there's a previous smaller tower
        }

        // Compute peakHeights array
        for (int i = 0; i < n; i++) {
            // For each tower, compute the maximum height sum if it is the peak.
            // `rightSum[i]` includes the height of the peak and its right extension.
            // `leftSum[i]` includes the height of the peak and its left extension.
            // Subtract `heights[i]` because it's included twice (once in rightSum and leftSum).
            peakHeights[i] = rightSum[i] + leftSum[i] - heights[i];
        }

        // Find and return the maximum value in peakHeights
        return Arrays.stream(peakHeights).max().orElseThrow();
    }

    /**
     * Finds the index of the next smaller element to the right for each element in the array.
     */
    public static int[] findNSI(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();

        Arrays.fill(result, n);

        for (int i = n - 1; i >= 0; i--) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                result[i] = stack.peek();
            }
            stack.push(i);
        }

        return result;
    }

    /**
     * Finds the index of the previous smaller element to the left for each element in the array.
     */
    public static int[] findPSI(int[] nums) {
        int n = nums.length;
        int[] result = new int[n];
        Stack<Integer> stack = new Stack<>();

        Arrays.fill(result, -1);

        for (int i = 0; i < n; i++) {
            while (!stack.isEmpty() && nums[stack.peek()] >= nums[i]) {
                stack.pop();
            }
            if (!stack.isEmpty()) {
                result[i] = stack.peek();
            }
            stack.push(i);
        }

        return result;
    }
}

or


class Solution {
    public long maximumSumOfHeights(int[] heights) {
        Stack<Integer> st=new Stack<>();
        int n=heights.length;
        long[] right=new long[n];
        long[] left=new long[n];
        long sum=0;
        long max=0;

        for(int i=0;i<n;i++){
            while(!st.isEmpty() && heights[st.peek()]>heights[i]){
                st.pop();
            }
            if(st.isEmpty()){
                sum=(i+1)*(long)heights[i];
            }
            else{
                int prev=st.peek();
                sum=left[prev]+ (long)heights[i]*(i-prev);
            }
            left[i]=sum;
            st.push(i);
        }
        st.clear();
        sum=0;
        for(int i=n-1;i>=0;i--){
            while(!st.isEmpty() && heights[st.peek()]>heights[i]){
                st.pop();
            }
            if(st.isEmpty()){
                sum=(n-i)*(long)heights[i];
            }
            else{
                int prev=st.peek();
                sum=right[prev]+ (long)heights[i]*(prev-i);
            }
            right[i]=sum;
            st.push(i);
        }
        for(int i=0;i<n;i++){
            max=Math.max(max,(right[i]+left[i])-(long)heights[i]);
        }
        return max;
    }
}


