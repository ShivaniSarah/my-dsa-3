https://leetcode.com/problems/is-array-a-preorder-of-some-binary-tree/description/


2764. Is Array a Preorder of Some â€ŒBinary Tree
Description
Given a 0-indexed integer 2D array nodes, your task is to determine if the given array represents the preorder traversal of some binary tree.

For each index i, nodes[i] = [id, parentId], where id is the id of the node at the index i and parentId is the id of its parent in the tree (if the node has no parent, then parentId == -1).

Return true if the given array represents the preorder traversal of some tree, and false otherwise.

Note: the preorder traversal of a tree is a recursive way to traverse a tree in which we first visit the current node, then we do the preorder traversal for the left child, and finally, we do it for the right child.

 

Example 1:

Input: nodes = [[0,-1],[1,0],[2,0],[3,2],[4,2]]
Output: true
Explanation: The given nodes make the tree in the picture below.
We can show that this is the preorder traversal of the tree, first we visit node 0, then we do the preorder traversal of the right child which is [1], then we do the preorder traversal of the left child which is [2,3,4].


Example 2:

Input: nodes = [[0,-1],[1,0],[2,0],[3,1],[4,1]]
Output: false
Explanation: The given nodes make the tree in the picture below.
For the preorder traversal, first we visit node 0, then we do the preorder traversal of the right child which is [1,3,4], but we can see that in the given order, 2 comes between 1 and 3, so, it's not the preorder traversal of the tree.


 

Constraints:

1 <= nodes.length <= 105
nodes[i].length == 2
0 <= nodes[i][0] <= 105
-1 <= nodes[i][1] <= 105
The input is generated such that nodes make a binary tree.



# java



class Solution {
  public boolean isPreorder(List<List<Integer>> nodes) {
    Deque<Integer> stack = new ArrayDeque<>(); // Stores `id`s.

    for (List<Integer> node : nodes) {
      final int id = node.get(0);
      final int parentId = node.get(1);
      if (parentId == -1) {
        stack.push(id);
        continue;
      }
      while (!stack.isEmpty() && stack.peek() != parentId)
        stack.pop();
      if (stack.isEmpty())
        return false;
      stack.push(id);
    }

    return true;
  }
}


or

class Solution {
    private Map<Integer, List<Integer>> g = new HashMap<>();
    private List<List<Integer>> nodes;
    private int k;

    public boolean isPreorder(List<List<Integer>> nodes) {
        this.nodes = nodes;
        for (var node : nodes) {
            g.computeIfAbsent(node.get(1), key -> new ArrayList<>()).add(node.get(0));
        }
        return dfs(nodes.get(0).get(0)) && k == nodes.size();
    }

    private boolean dfs(int i) {
        if (i != nodes.get(k).get(0)) {
            return false;
        }
        ++k;
        for (int j : g.getOrDefault(i, List.of())) {
            if (!dfs(j)) {
                return false;
            }
        }
        return true;
    }
}


