https://leetcode.com/problems/score-of-parentheses/description/


856. Score of Parentheses
Medium
Topics
Companies
Given a balanced parentheses string s, return the score of the string.

The score of a balanced parentheses string is based on the following rule:

"()" has score 1.
AB has score A + B, where A and B are balanced parentheses strings.
(A) has score 2 * A, where A is a balanced parentheses string.
 

Example 1:

Input: s = "()"
Output: 1
Example 2:

Input: s = "(())"
Output: 2
Example 3:

Input: s = "()()"
Output: 2
 

Constraints:

2 <= s.length <= 50
s consists of only '(' and ')'.
s is a balanced parentheses string.


# java


class Solution {
  public int scoreOfParentheses(String s) {
    int ans = 0;
    int layer = 0;

    for (int i = 0; i + 1 < s.length(); ++i) {
      final char a = s.charAt(i);
      final char b = s.charAt(i + 1);
      if (a == '(' && b == ')')
        ans += 1 << layer;
      layer += a == '(' ? 1 : -1;
    }

    return ans;
  }
}


or


class Solution {
    public int scoreOfParentheses(String s) {
        int ans = 0, d = 0;
        for (int i = 0; i < s.length(); ++i) {
            if (s.charAt(i) == '(') {
                ++d;
            } else {
                --d;
                if (s.charAt(i - 1) == '(') {
                    ans += 1 << d;
                }
            }
        }
        return ans;
    }
}



or

// bets
class Solution {
    public int scoreOfParentheses(String s) {
        Stack<Integer> st = new Stack<>();
        int score = 0;
        for(int i = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            if(ch == '('){
                st.push(score);
                score = 0;
            }
            else {
                score = st.pop() + Math.max(2 * score, 1);
            }
        }
        return score;
    }
}

or



class Solution {
    public int scoreOfParentheses(String s) {
        Stack<Character> stack = new Stack<Character>();

        for(char ch : s.toCharArray()) {
            if(ch == '(') {
                stack.push(ch);
            } else {
                // if top of stack is '('
                if(!stack.isEmpty() && stack.peek() == '(') {
                    stack.pop();
                    stack.push('1');
                } else {
                    // if top of stack is a '(char) number'
                    int sum = 0;
                    while(!stack.isEmpty() && stack.peek()!='(') {
                        sum += stack.pop()-'0';
                    }
                    // pop '('
                    stack.pop();
                    stack.push((char)(2*sum+'0'));
                }
            }
        }
        
        int sum = 0;
        while(!stack.isEmpty()) {
            sum += (stack.pop()-'0');
        }
        return sum;
    }
}


or



