https://leetcode.com/problems/maximum-nesting-depth-of-two-valid-parentheses-strings/description/

1111. Maximum Nesting Depth of Two Valid Parentheses Strings
Medium
Topics
Companies
A string is a valid parentheses string (denoted VPS) if and only if it consists of "(" and ")" characters only, and:

It is the empty string, or
It can be written as AB (A concatenated with B), where A and B are VPS's, or
It can be written as (A), where A is a VPS.
We can similarly define the nesting depth depth(S) of any VPS S as follows:

depth("") = 0
depth(A + B) = max(depth(A), depth(B)), where A and B are VPS's
depth("(" + A + ")") = 1 + depth(A), where A is a VPS.
For example,  "", "()()", and "()(()())" are VPS's (with nesting depths 0, 1, and 2), and ")(" and "(()" are not VPS's.

 

Given a VPS seq, split it into two disjoint subsequences A and B, such that A and B are VPS's (and A.length + B.length = seq.length).

Now choose any such A and B such that max(depth(A), depth(B)) is the minimum possible value.

Return an answer array (of length seq.length) that encodes such a choice of A and B:  answer[i] = 0 if seq[i] is part of A, else answer[i] = 1.  Note that even though multiple answers may exist, you may return any of them.

 

Example 1:

Input: seq = "(()())"
Output: [0,1,1,1,1,0]
Example 2:

Input: seq = "()(())()"
Output: [0,0,0,1,1,0,1,1]
 

Constraints:

1 <= seq.size <= 10000


# java


class Solution {
  public int[] maxDepthAfterSplit(String seq) {
    int[] ans = new int[seq.length()];
    int depth = 1;

    // Put all odd-depth parentheses in one group and even-depth parentheses in
    // the other group.
    for (int i = 0; i < seq.length(); ++i)
      if (seq.charAt(i) == '(')
        ans[i] = ++depth % 2;
      else
        ans[i] = depth-- % 2;

    return ans;
  }
}


or



class Solution {
    public int[] maxDepthAfterSplit(String seq) {
        int n = seq.length();
        int[] ans = new int[n];
        for (int i = 0, x = 0; i < n; ++i) {
            if (seq.charAt(i) == '(') {
                ans[i] = x++ & 1;
            } else {
                ans[i] = --x & 1;
            }
        }
        return ans;
    }
}


or



class Solution {
    public int[] maxDepthAfterSplit(String seq) {
        int[] a = new int[seq.length()];
        
        int count = 0;
        for(int i = 0; i < seq.length(); i++){
            if(seq.charAt(i) == '('){
                a[i] = count++ % 2;
            }else{
                a[i] = --count % 2;
            }
        }
        return a;
    }
}


or



class Solution {
    public int[] maxDepthAfterSplit(String seq) {
        char[] arr = seq.toCharArray();
        int l = arr.length;
        int[] res = new int[l];
        
        int deg = 0;
        int maxDegree = 0;
		
		// calculate the maximum degree of given string
        for(int i=0; i<l; i++) {
            if (arr[i] == '(') {
                deg++;
                maxDegree = Math.max(maxDegree, deg);
            }
            else {
                deg--;
            }
        }
		
        int currdeg = 0;
        int groupBcounter = 0; // maintain a counter for providing closing brackets for group B.
		
        for(int i=0; i<l; i++) {
            if (arr[i]=='(') {
			// if the current degree is greater than half, put the bracket in group B.
                if (currdeg >= maxDegree/2) {
                    res[i] = 1;
                    groupBcounter++;
                }
                currdeg++;
            }
            else {
                currdeg--;
				// if group B requires closing, assign ')' to B.
                if (groupBcounter > 0) {
                    res[i] = 1;
                    groupBcounter--;
                }
            }
        }
        return res;
    }
}


or


class Solution {
    public int[] maxDepthAfterSplit(String seq) {
        int n = seq.length () ,s1 =0, s2 = 0;
        int[] ans = new int [n] ;
        for ( int i = 0 ; i < n ; i ++ ){
            if ( seq.charAt (i) =='(' ){
                if ( s1 <= s2){
                    s1 ++;
                    ans[i] = 0;
                }
                else {
                    s2 ++;
                    ans [i] = 1 ;
                }
            }
            else {
                if ( s1 > s2){
                    s1 -- ;
                    ans [i] = 0 ;
                }
                else {
                    s2 --;
                    ans [i] = 1 ;
                }
            }
        }
        return ans ;
    }
}


or


class Solution {
    public int[] maxDepthAfterSplit(String seq) {
        int depth =-1;
        int i=0;
        int ln =seq.length();
        int[] a = new int[ln];
        
        while(i<ln){
            if(seq.charAt(i)=='('){
                depth++;
                a[i]=depth%2;   
            }
            else{
                a[i]=depth%2;
                depth--;
            }
            i++;
        }
        return a;
    }
}

