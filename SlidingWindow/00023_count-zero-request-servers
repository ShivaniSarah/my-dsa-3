https://leetcode.com/problems/count-zero-request-servers/description/


2747. Count Zero Request Servers
Medium
Topics
Companies
Hint
You are given an integer n denoting the total number of servers and a 2D 0-indexed integer array logs, where logs[i] = [server_id, time] denotes that the server with id server_id received a request at time time.

You are also given an integer x and a 0-indexed integer array queries.

Return a 0-indexed integer array arr of length queries.length where arr[i] represents the number of servers that did not receive any requests during the time interval [queries[i] - x, queries[i]].

Note that the time intervals are inclusive.

 

Example 1:

Input: n = 3, logs = [[1,3],[2,6],[1,5]], x = 5, queries = [10,11]
Output: [1,2]
Explanation: 
For queries[0]: The servers with ids 1 and 2 get requests in the duration of [5, 10]. Hence, only server 3 gets zero requests.
For queries[1]: Only the server with id 2 gets a request in duration of [6,11]. Hence, the servers with ids 1 and 3 are the only servers that do not receive any requests during that time period.

Example 2:

Input: n = 3, logs = [[2,4],[2,1],[1,2],[3,1]], x = 2, queries = [3,4]
Output: [0,1]
Explanation: 
For queries[0]: All servers get at least one request in the duration of [1, 3].
For queries[1]: Only server with id 3 gets no request in the duration [2,4].

 

Constraints:

1 <= n <= 105
1 <= logs.length <= 105
1 <= queries.length <= 105
logs[i].length == 2
1 <= logs[i][0] <= n
1 <= logs[i][1] <= 106
1 <= x <= 105
x < queries[i] <= 106


# java


class Solution {
  public int[] countServers(int n, int[][] logs, int x, int[] queries) {
    int[] ans = new int[queries.length];
    int[] count = new int[n + 1];

    Arrays.sort(logs, Comparator.comparingInt(log -> log[1]));

    int i = 0;
    int j = 0;
    int servers = 0;

    // For each query, we care about logs[i..j].
    for (IndexedQuery indexedQuery : getIndexedQueries(queries)) {
      final int queryIndex = indexedQuery.queryIndex;
      final int query = indexedQuery.query;
      for (; j < logs.length && logs[j][1] <= query; ++j)
        if (++count[logs[j][0]] == 1)
          ++servers;
      for (; i < logs.length && logs[i][1] < query - x; ++i)
        if (--count[logs[i][0]] == 0)
          --servers;
      ans[queryIndex] = n - servers;
    }

    return ans;
  }

  private record IndexedQuery(int queryIndex, int query){};

  private IndexedQuery[] getIndexedQueries(int[] queries) {
    IndexedQuery[] indexedQueries = new IndexedQuery[queries.length];
    for (int i = 0; i < queries.length; ++i)
      indexedQueries[i] = new IndexedQuery(i, queries[i]);
    Arrays.sort(indexedQueries, Comparator.comparingInt(IndexedQuery::query));
    return indexedQueries;
  }
}


or


class Solution {
    public int[] countServers(int n, int[][] logs, int x, int[] queries) {
        Arrays.sort(logs, (a, b) -> a[1] - b[1]);
        int m = queries.length;
        int[][] qs = new int[m][0];
        for (int i = 0; i < m; ++i) {
            qs[i] = new int[] {queries[i], i};
        }
        Arrays.sort(qs, (a, b) -> a[0] - b[0]);
        Map<Integer, Integer> cnt = new HashMap<>();
        int[] ans = new int[m];
        int j = 0, k = 0;
        for (var q : qs) {
            int r = q[0], i = q[1];
            int l = r - x;
            while (k < logs.length && logs[k][1] <= r) {
                cnt.merge(logs[k++][0], 1, Integer::sum);
            }
            while (j < logs.length && logs[j][1] < l) {
                if (cnt.merge(logs[j][0], -1, Integer::sum) == 0) {
                    cnt.remove(logs[j][0]);
                }
                j++;
            }
            ans[i] = n - cnt.size();
        }
        return ans;
    }
}



or




class Solution {
    public int[] countServers(int n, int[][] logs, int x, int[] queries) {
        // Sort logs according to time of log
        Arrays.sort(logs, (a, b) -> a[1] - b[1]);

        // Append query id to queries, and sort to time of query
        List<int[]> queriesWithId = new ArrayList<>();
        for (int i = 0; i < queries.length; i++) {
            queriesWithId.add(new int[] {i, queries[i]});
        }
        Collections.sort(queriesWithId, (a, b) -> a[1] - b[1]);

        int[] res = new int[queries.length];

        // Map to keep track of active servers, key - server id, value - number of logs within query window
        Map<Integer, Integer> activeServers = new HashMap<>();
        int loggerStart = 0; // left pointer to exclude logs
        int loggerEnd = 0; // right pointer to include logs
        for (int[] query : queriesWithId) {
            int queryId = query[0];
            int queryStart = query[1] - x;
            int queryEnd = query[1];
            // System.out.println("query: " + queryId + " -> [" + queryStart + ", " + queryEnd + "]");

            // capture all logs that are within time period - expand window
            while (loggerEnd < logs.length && logs[loggerEnd][1] <= queryEnd) {
                int server = logs[loggerEnd][0];
                // System.out.println("Add log (server, time): " + server + ", time: " + logs[loggerEnd][1]);
                activeServers.put(server, activeServers.getOrDefault(server, 0) + 1);
                loggerEnd++;
            }
            
            // exclude all logs no longer within time period - narrow window
            while (loggerStart < logs.length && logs[loggerStart][1] < queryStart) {
                int server = logs[loggerStart][0];
                // System.out.println("Remove log (server, time): " + server + ", time: " + logs[loggerStart][1]);
                activeServers.put(server, activeServers.get(server) - 1);
                if (activeServers.get(server) == 0) activeServers.remove(server);
                loggerStart++;
            }

            res[queryId] = n - activeServers.size();
            // System.out.println("res[queryId]: " + res[queryId]);
        }
        return res;
    }
}



or


class Solution {
    public int[] countServers(int n, int[][] logs, int x, int[] queries) {

        int l = logs.length;
        int q = queries.length;

        Arrays.sort(logs, (a, b) -> Integer.compare(a[1], b[1]));
        
        int[][] queriesToIndex = new int[q][];
        for(int i = 0; i < q; i++) queriesToIndex[i] = new int[]{i, queries[i]};
        Arrays.sort(queriesToIndex, (a, b) -> Integer.compare(a[1], b[1]));

        int[] result = new int[q];

        Map<Integer, Integer> serverIdToFreqs = new HashMap<>();

        int start = 0;
        int end = 0;

        for(int i = 0; i < q; i++){

            int qryIndex = queriesToIndex[i][0];
            int endTime = queriesToIndex[i][1];
            int startTime = endTime - x;

            while(end < l && logs[end][1] <= endTime){
                serverIdToFreqs.put(logs[end][0], serverIdToFreqs.getOrDefault(logs[end][0], 0) + 1);
                end++;
            }

            while(start < end && logs[start][1] < startTime){
                serverIdToFreqs.put(logs[start][0], serverIdToFreqs.getOrDefault(logs[start][0], 0) - 1);
                if(serverIdToFreqs.get(logs[start][0]) <= 0) serverIdToFreqs.remove(logs[start][0]);
                start++;
            }

            result[qryIndex] = n - serverIdToFreqs.size();
        }

        return result;
    }
}


or


class Solution {
    public int[] countServers(int n, int[][] logs, int x, int[] queries) {
        TreeMap<Integer, List<Integer>> treeMap = new TreeMap<>();
        for(int[] log: logs){
            List<Integer> list = treeMap.getOrDefault(log[1], new ArrayList<>());
            list.add(log[0]);
            treeMap.put(log[1], list);
        }
        int[] res = new int[queries.length];
        
        
        //store queries order
        int[] order = new int[queries.length];
        for(int i = 0; i < queries.length; i++){
            order[i] = queries[i];
        }
        Arrays.sort(queries);
        //each query answer
        int j = queries[0] - x;
        int r = 0;
        int i = queries[0] - x;
        Map<Integer, Integer> map =new HashMap<>();
        Map<Integer, Integer> slideWindowCountmap = new HashMap<>();
        while(r < queries.length){
            while(j <= queries[r]){
                if(treeMap.containsKey(j)){
                    for(Integer log: treeMap.get(j)){
                        slideWindowCountmap.put(log, slideWindowCountmap.getOrDefault(log, 0) + 1);
                    }
                }
                j += 1;
            }

            while(i < queries[r] - x){
                if(treeMap.containsKey(i)){
                    for(Integer log: treeMap.get(i)){
                        slideWindowCountmap.put(log, slideWindowCountmap.get(log) - 1);
                        if(slideWindowCountmap.get(log) == 0){
                            slideWindowCountmap.remove(log);
                        }
                    }
                }
                
                i += 1;
                
            }
            map.put(queries[r], n - slideWindowCountmap.size());
            r += 1;

        }
        for(int k = 0; k < res.length; k++){
            res[k] = map.get(order[k]);
        }
        return res;
    }
}



or


class Solution {

    public int[] countServers(int n, int[][] logs, int x, int[] queries) {
        int m = queries.length;
        int[] counts = new int[n + 1], output = new int[m];
        TreeMap<Integer, ArrayList<Integer>> map = new TreeMap<>();
        Arrays.sort(logs, Comparator.comparingInt(log -> log[1]));
        for (int i = 0; i < m; i++) {
            map.putIfAbsent(queries[i], new ArrayList<>());
            map.get(queries[i]).add(i);
        }
        int a = 0, b = 0, c = n;
        for (Map.Entry<Integer, ArrayList<Integer>> entry : map.entrySet()) {
            int t = entry.getKey();
            while (a < logs.length && logs[a][1] <= t) {
                int s = logs[a++][0];
                if (counts[s]++ == 0) c--;
            }
            while (b < a && logs[b][1] < t - x) {
                int s = logs[b++][0];
                if (--counts[s] == 0) c++;
            }
            for (int i : entry.getValue()) output[i] = c;
        }
        return output;
    }

}


or


class Solution {
    public int[] countServers(int n, int[][] logs, int x, int[] queries) {
        Arrays.sort(logs,(a,b)->(a[1]-b[1]));
        int m=queries.length;
        int n2=logs.length;
        int ans[]=new int[queries.length];
        TreeMap<Integer,Integer> tm=new TreeMap<>();
        for(int i=0;i<m;i++)
            tm.put(queries[i],i);
        Object arr2[]=tm.keySet().toArray();
        int arr[]=new int[n+1];
        int l=0,r=0;
        Map<Integer,Integer> mp=new HashMap<Integer,Integer>();
        for(int i=0;i<m;i++)
        {
            int f=tm.get((int)arr2[i]);
            while(r<n2 && logs[r][1]<=queries[f])
            {
                mp.put(logs[r][0],mp.getOrDefault(logs[r][0],0)+1);
                r++;
            }
            while(l<n2 && logs[l][1]<queries[f]-x)
            {
                mp.put(logs[l][0],mp.get(logs[l][0])-1);
                if(mp.get(logs[l][0])==0)
                    mp.remove(logs[l][0]);
                l++;
            }
            ans[f]=n-mp.keySet().size();
        }
        return ans;
    }
}


or


class Solution {
    public int[] countServers(int n, int[][] logs, int x, int[] queries) {
        
        // Part 1
        Arrays.sort(logs, (a, b) -> a[1] - b[1]);
        int logStart = 0;
        int logEnd = 0;

        // Part 2
        int[][] queryIndex = new int[queries.length][2];
        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            queryIndex[i] = new int[] { queries[i], i };
        }
        Arrays.sort(queryIndex, (a, b) -> a[0] - b[0]);

        // Part 3
        int[] serverCountInWindow = new int[n + 1]; // servers [0(not used), 1, 2 ..... n]
        int uniqueServersInWindow = 0;

        for (int i = 0; i < queryIndex.length; i++) {
            int queryStart = queryIndex[i][0] - x;
            int queryEnd = queryIndex[i][0];

            // add window elements till current queryEnd 
            // OR until all logs have been added in window
            while (logEnd < logs.length && logs[logEnd][1] <= queryEnd) {
                serverCountInWindow[logs[logEnd][0]]++;
                if (serverCountInWindow[logs[logEnd][0]] == 1) // if count was 0 earlier then this is a new server in window
                    uniqueServersInWindow++;
                logEnd++;
            }

            // remove out of window elements before current queryStart 
            // OR until all logs have been removed from window
            while (logStart < logs.length && logs[logStart][1] < queryStart) {
                serverCountInWindow[logs[logStart][0]]--;
                if (serverCountInWindow[logs[logStart][0]] == 0)
                    uniqueServersInWindow--;
                logStart++;
            }
            ans[queryIndex[i][1]] = n - uniqueServersInWindow;
        }
        return ans;
    }

}


or



