https://leetcode.com/problems/shortest-and-lexicographically-smallest-beautiful-string/description/


2904. Shortest and Lexicographically Smallest Beautiful String
Medium
Topics
Companies
Hint
You are given a binary string s and a positive integer k.

A substring of s is beautiful if the number of 1's in it is exactly k.

Let len be the length of the shortest beautiful substring.

Return the lexicographically smallest beautiful substring of string s with length equal to len. If s doesn't contain a beautiful substring, return an empty string.

A string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b.

For example, "abcd" is lexicographically larger than "abcc" because the first position they differ is at the fourth character, and d is greater than c.
 

Example 1:

Input: s = "100011001", k = 3
Output: "11001"
Explanation: There are 7 beautiful substrings in this example:
1. The substring "100011001".
2. The substring "100011001".
3. The substring "100011001".
4. The substring "100011001".
5. The substring "100011001".
6. The substring "100011001".
7. The substring "100011001".
The length of the shortest beautiful substring is 5.
The lexicographically smallest beautiful substring with length 5 is the substring "11001".
Example 2:

Input: s = "1011", k = 2
Output: "11"
Explanation: There are 3 beautiful substrings in this example:
1. The substring "1011".
2. The substring "1011".
3. The substring "1011".
The length of the shortest beautiful substring is 2.
The lexicographically smallest beautiful substring with length 2 is the substring "11".
Example 3:

Input: s = "000", k = 1
Output: ""
Explanation: There are no beautiful substrings in this example.
 

Constraints:

1 <= s.length <= 100
1 <= k <= s.length

# java


class FenwickTree {
  public FenwickTree(int n) {
    vals = new int[n + 1];
  }

  public void maximize(int i, int val) {
    while (i < vals.length) {
      vals[i] = Math.max(vals[i], val);
      i += lowbit(i);
    }
  }

  public int get(int i) {
    int res = 0;
    while (i > 0) {
      res = Math.max(res, vals[i]);
      i -= lowbit(i);
    }
    return res;
  }

  private int[] vals;

  private static int lowbit(int i) {
    return i & -i;
  }
}

class Solution {
  public int maxProfit(int[] prices, int[] profits) {
    final int maxPrice = Arrays.stream(prices).max().getAsInt();
    int ans = -1;
    FenwickTree maxProfitTree1 = new FenwickTree(maxPrice);
    FenwickTree maxProfitTree2 = new FenwickTree(maxPrice);

    for (int i = 0; i < prices.length; ++i) {
      final int price = prices[i];
      final int profit = profits[i];
      // max(profits[i])
      final int maxProfit1 = maxProfitTree1.get(price - 1);
      // max(proftis[i]) + max(profits[j])
      final int maxProfit2 = maxProfitTree2.get(price - 1);
      maxProfitTree1.maximize(price, profit);
      if (maxProfit1 > 0)
        maxProfitTree2.maximize(price, profit + maxProfit1);
      if (maxProfit2 > 0)
        ans = Math.max(ans, profit + maxProfit2);
    }

    return ans;
  }
}


or


class Solution {
    public int maxProfit(int[] prices, int[] profits) {
        int n = prices.length;
        int ans = -1;
        for (int j = 0; j < n; ++j) {
            int left = 0, right = 0;
            for (int i = 0; i < j; ++i) {
                if (prices[i] < prices[j]) {
                    left = Math.max(left, profits[i]);
                }
            }
            for (int k = j + 1; k < n; ++k) {
                if (prices[j] < prices[k]) {
                    right = Math.max(right, profits[k]);
                }
            }
            if (left > 0 && right > 0) {
                ans = Math.max(ans, left + profits[j] + right);
            }
        }
        return ans;
    }
}


or


class Solution {
    public String shortestBeautifulSubstring(String s, int k) {
        int n = s.length();
        String ans = "";
        int i = 0, j = 0;
        int c = 0;
        
        while (j < n) {
            if (s.charAt(j) == '1') {
                c++;
            }
            if (c == k) {
                while (i < n && c == k) {
                    String s1 = s.substring(i, j + 1);
                    if (ans.isEmpty() || s1.length() < ans.length()) {
                        ans = s1;
                    } else if (s1.length() == ans.length()) {
                        ans = (ans.compareTo(s1) < 0) ? ans : s1;
                    }
                    if (s.charAt(i) == '1') {
                        c--;
                    }
                    i++;
                }
            }
            j++;
        }
        return ans;
    }
}


or


class Solution {
    public String shortestBeautifulSubstring(String s, int k) {
        List<String> resultList = new ArrayList<>();
        int minLength = s.length();
        int slow = 0, fast = 0, count = 0; //sliding window
        while (fast < s.length()) {
            if (s.charAt(fast) == '1') {
                count++;
            }

            while (count == k) { //while current window is a match
                if (minLength > fast - slow + 1) {
                    resultList = new ArrayList<>(); //empty the resList if find smaller-size matches
                    minLength = fast - slow + 1;
                } 
                if (fast - slow + 1 == minLength) {
                    resultList.add(s.substring(slow, fast + 1));
                }
                if (s.charAt(slow) == '1') {
                    count--;
                }
                slow++; //increment slow to shrink the window
            }

            fast++;
        }
    
        if (resultList.size() == 0) {
            return "";
        }
        Collections.sort(resultList);
        return resultList.get(0);
    }
}



or


class Solution {
    public String shortestBeautifulSubstring(String s, int k) {
        int i = 0;
        int c = 0;
        int minLen = Integer.MAX_VALUE;
        String result = "";

        for (int j = 0; j < s.length(); j++) {
            if (s.charAt(j) == '1') {
                c++;
            }

            while (c == k) {
                String s1 = s.substring(i, j + 1);
                if (j - i + 1 < minLen) {
                    minLen = j - i + 1;
                    result = s1;
                }else if(s1.length() == result.length()) {
                    result = (result.compareTo(s1) < 0) ? result : s1;
                }
                
                if (s.charAt(i) == '1') {
                    c--;
                }

                i++;
            }
        }

        return result;
    }

}


or


class Solution {
    public String shortestBeautifulSubstring(String s, int k) {
        //sliding window
        int count = 0;
        int n = s.length();
        int left=0, right=0;
        StringBuilder sb = new StringBuilder();
        StringBuilder local = new StringBuilder();
        while(right < n){
            char c = s.charAt(right);
            local.append(c);
            if(c =='1')
                count++;
            while(count == k && left <= right){ 
                if(s.charAt(left) == '1'){
                    if(sb.length()==0 || sb.length()>local.length() || (sb.length()==local.length() && compare(sb, local) > 0)){
                        sb = new StringBuilder(local);
                    }
                }
                if(s.charAt(left)=='1')
                    count--;
                local.deleteCharAt(0);
                left++;
            }
            right++;
        }
        return sb.toString();
    }
    public int compare(StringBuilder sb1, StringBuilder sb2){
        //assuming same length
        int i=0;
        while(i<sb1.length()){
            int a = sb1.charAt(i); 
            int b = sb2.charAt(i++); 
            if(a==b)
                continue;
            else
                return a-b;
        }
        return 0;
    }
}


or

class Solution {
    public String shortestBeautifulSubstring(String s, int k) {
        if (s.replaceAll("0", "").length() < k) {
            return "";
        }
        int start = 0;
        String res = "";
        int count = 0;
        for (int end = 0; end < s.length(); end++) {
            if (s.charAt(end) == '1') {
                count++;
            }
            while (count >= k) {
                if (res.length() == 0 || end - start + 1 < res.length() || end - start + 1 == res.length() && s.substring(start, end + 1).compareTo(res) < 0) {
                    res = s.substring(start, end + 1);
                }
                if (s.charAt(start) == '1') {
                    count--;
                }
                start++;
            }
        }
        
        return res;
    }
}

//tc: O(n ^ 2)
//sc: O(n)


or


public class Solution {
    public String shortestBeautifulSubstring(String s, int k) {
        int n = s.length();
        String ans = "";
        int i = 0, j = 0;
        int c = 0;
        
        while (j < n) {
            if (s.charAt(j) == '1') c++;
            if (c == k) {
                while (i < n && c == k) {
                    String s1 = s.substring(i, j + 1);
                    if (ans.isEmpty() || s1.length() < ans.length()) ans = s1;
                    else if (s1.length() == ans.length()) ans = (ans.compareTo(s1) < 0) ? ans : s1;
                    if (s.charAt(i) == '1') c--;
                    i++;
                }
            }
            j++;
        }
        return ans;
    }
}



or


