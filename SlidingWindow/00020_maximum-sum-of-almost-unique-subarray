https://leetcode.com/problems/maximum-sum-of-almost-unique-subarray/description/

2841. Maximum Sum of Almost Unique Subarray
Medium
Topics
Companies
Hint
You are given an integer array nums and two positive integers m and k.

Return the maximum sum out of all almost unique subarrays of length k of nums. If no such subarray exists, return 0.

A subarray of nums is almost unique if it contains at least m distinct elements.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [2,6,7,3,1,7], m = 3, k = 4
Output: 18
Explanation: There are 3 almost unique subarrays of size k = 4. These subarrays are [2, 6, 7, 3], [6, 7, 3, 1], and [7, 3, 1, 7]. Among these subarrays, the one with the maximum sum is [2, 6, 7, 3] which has a sum of 18.
Example 2:

Input: nums = [5,9,9,2,4,5,4], m = 1, k = 3
Output: 23
Explanation: There are 5 almost unique subarrays of size k. These subarrays are [5, 9, 9], [9, 9, 2], [9, 2, 4], [2, 4, 5], and [4, 5, 4]. Among these subarrays, the one with the maximum sum is [5, 9, 9] which has a sum of 23.
Example 3:

Input: nums = [1,2,1,2,1,2,1], m = 3, k = 3
Output: 0
Explanation: There are no subarrays of size k = 3 that contain at least m = 3 distinct elements in the given array [1,2,1,2,1,2,1]. Therefore, no almost unique subarrays exist, and the maximum sum is 0.
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= m <= k <= nums.length
1 <= nums[i] <= 109


# java


class Solution {
  public long maxSum(List<Integer> nums, int m, int k) {
    long ans = 0;
    long sum = 0;
    Map<Integer, Integer> count = new HashMap<>();

    for (int i = 0; i < nums.size(); ++i) {
      sum += nums.get(i);
      count.merge(nums.get(i), 1, Integer::sum);
      if (i >= k) {
        final int numToRemove = nums.get(i - k);
        sum -= numToRemove;
        count.merge(numToRemove, -1, Integer::sum);
        if (count.get(numToRemove) == 0)
          count.remove(numToRemove);
      }
      if (count.size() >= m)
        ans = Math.max(ans, sum);
    }

    return ans;
  }
}


or


class Solution {
    public long maxSum(List<Integer> nums, int m, int k) {
        Map<Integer, Integer> cnt = new HashMap<>();
        int n = nums.size();
        long s = 0;
        for (int i = 0; i < k; ++i) {
            cnt.merge(nums.get(i), 1, Integer::sum);
            s += nums.get(i);
        }
        long ans = 0;
        if (cnt.size() >= m) {
            ans = s;
        }
        for (int i = k; i < n; ++i) {
            cnt.merge(nums.get(i), 1, Integer::sum);
            if (cnt.merge(nums.get(i - k), -1, Integer::sum) == 0) {
                cnt.remove(nums.get(i - k));
            }
            s += nums.get(i) - nums.get(i - k);
            if (cnt.size() >= m) {
                ans = Math.max(ans, s);
            }
        }
        return ans;
    }
}



or



public class Solution {
    public long maxSum(List<Integer> nums, int m, int k) {
        long maxSum = 0;
        long currentSum = 0;
        Map<Integer, Integer> elementFrequency = new HashMap<>();
        int left = 0;

        for (int right = 0; right < nums.size(); right++) {
            int currentElement = nums.get(right);

            // Update frequency and sum
            elementFrequency.put(currentElement, elementFrequency.getOrDefault(currentElement, 0) + 1);
            currentSum += currentElement;

            // Shrink the window if it exceeds k elements
            while (right - left + 1 > k) {
                int leftElement = nums.get(left);

                // Update frequency and sum
                elementFrequency.put(leftElement, elementFrequency.get(leftElement) - 1);
                if (elementFrequency.get(leftElement) == 0) {
                    elementFrequency.remove(leftElement);
                }
                currentSum -= leftElement;

                // Move the left pointer to shrink the window
                left++;
            }

            // Check if the subarray has at least m distinct elements
            if (elementFrequency.size() >= m) {
                maxSum = Math.max(maxSum, currentSum);
            }
        }

        return maxSum;
    }
}


or


public class Solution {
    public long maxSum(List<Integer> nums, int m, int k) {
        long maxSum = 0;
        long currentSum = 0;
        Map<Integer, Integer> elementFrequency = new HashMap<>();
        int left = 0;

        for (int right = 0; right < nums.size(); right++) {
            int currentElement = nums.get(right);

            // Update frequency and sum
            elementFrequency.put(currentElement, elementFrequency.getOrDefault(currentElement, 0) + 1);
            currentSum += currentElement;

            // Shrink the window if it exceeds k elements
            while (right - left + 1 > k) {
                int leftElement = nums.get(left);

                // Update frequency and sum
                elementFrequency.put(leftElement, elementFrequency.get(leftElement) - 1);
                if (elementFrequency.get(leftElement) == 0) {
                    elementFrequency.remove(leftElement);
                }
                currentSum -= leftElement;

                // Move the left pointer to shrink the window
                left++;
            }

            // Check if the subarray has at least m distinct elements
            if (elementFrequency.size() >= m) {
                maxSum = Math.max(maxSum, currentSum);
            }
        }

        return maxSum;
    }
}


or


class Solution {
    public long maxSum(List<Integer> nums, int m, int k) {
        long ans=0, unqSoFar=0, sumSoFar=0;
        Map<Integer, Integer> map = new HashMap<>();
        int idxBeforeWindow=0;
        for(int i=0; i<nums.size(); i++) {
            int num = nums.get(i);
            sumSoFar += num;
            int freq = map.getOrDefault(num, 0);
            freq++;
            map.put(num, freq);
            if(freq == 1) {
                unqSoFar++;
            }
            // have we taken k elements already?
            if(i>=k) {
                // remove windowStart element from sum
                int numBfrWindow = nums.get(idxBeforeWindow);
                sumSoFar -= numBfrWindow;
                int f = map.getOrDefault(numBfrWindow, 0);
                // decrement the frequency as it is out of the window
                f--;
                map.put(numBfrWindow, f);
                // if frequency is 0, we no longer have this number
                // available to our current window.
                // Therefore, decrement the unqSoFar count.
                if(f == 0) {
                    unqSoFar--;
                }
                // as we move to the right, 
                // our index before active window should be incremented.
                idxBeforeWindow++;
            }
            // if we found at least m uniques consider the sumSoFar
            if(unqSoFar >= m){
                ans = Math.max(ans, sumSoFar);
            }
        }
        return ans;
    }
}



or



class Solution {
    public long maxSum(List<Integer> nums, int m, int k) {
         
        long maxsum=0;
        long sum=0;
        int n =nums.size();
        
        //evaluting first window;
         HashMap<Integer,Integer> hm = new HashMap<>();
        
        
        for(int i =0;i<k;i++)
        {
            hm.put(nums.get(i),hm.getOrDefault(nums.get(i),0)+1);
            sum+=nums.get(i); 
        }
        
        if(hm.size()>=m) maxsum=Math.max(sum,maxsum);
        
        
        for(int i =k;i<n;i++)
        {
            sum-=nums.get(i-k);
            hm.put(nums.get(i-k),hm.get(nums.get(i-k))-1);
            
            if(hm.get(nums.get(i-k))==0) hm.remove(nums.get(i-k));
            
            sum+=nums.get(i);
            hm.put(nums.get(i),hm.getOrDefault(nums.get(i),0)+1);
         
            if(hm.size()>=m) maxsum=Math.max(sum,maxsum);
        }
        return maxsum;
        
        
    }
}


or

class Solution {
    public long maxSum(List<Integer> nums, int m, int k) {
          long sum = 0, max = 0;

        Map<Integer, Integer> map = new HashMap<>();

        int start = 0;
        int n = nums.size();

        for (int i = 0; i < n; ++i) {
            int num = nums.get(i);
            map.put(num, map.getOrDefault(num, 0) + 1);
            sum += num;

            if ((i - start) + 1 == k) {
                if (map.size() >= m) {
                    max = Math.max(max, sum);
                }
                int val = map.get(nums.get(start));
                --val;
                if (val == 0)
                    map.remove(nums.get(start));
                else
                    map.put(nums.get(start), val);

                sum -= nums.get(start);
                ++start; 
            }
        }
        return max;
    }
}



or



class Solution {
    public long maxSum(List<Integer> nums, int m, int k) {
        long maxSum=0;
        long currentSum=0;
        int left=0;
        Map<Integer,Integer> freqMap=new HashMap<>();
        for(int right=0;right<nums.size();right++){
            int currentElement=nums.get(right);
            freqMap.put(currentElement,freqMap.getOrDefault(currentElement,0)+1);
            currentSum+=currentElement;


            while(right - left + 1 > k){
                int leftElement=nums.get(left);
                freqMap.put(leftElement,freqMap.get(leftElement)-1);
                if(freqMap.get(leftElement) == 0){
                    freqMap.remove(leftElement);
                }
                currentSum-=leftElement;
                left++;
            }

            if(freqMap.size() >= m){
                maxSum=Math.max(maxSum,currentSum);
            }
        }
        return maxSum;
    }
}


or


