https://leetcode.com/problems/find-the-longest-semi-repetitive-substring/description/


2730. Find the Longest Semi-Repetitive Substring
Medium
Topics
Companies
Hint
You are given a digit string s that consists of digits from 0 to 9.

A string is called semi-repetitive if there is at most one adjacent pair of the same digit. For example, "0010", "002020", "0123", "2002", and "54944" are semi-repetitive while the following are not: "00101022" (adjacent same digit pairs are 00 and 22), and "1101234883" (adjacent same digit pairs are 11 and 88).

Return the length of the longest semi-repetitive substring of s.

 

Example 1:

Input: s = "52233"

Output: 4

Explanation:

The longest semi-repetitive substring is "5223". Picking the whole string "52233" has two adjacent same digit pairs 22 and 33, but at most one is allowed.

Example 2:

Input: s = "5494"

Output: 4

Explanation:

s is a semi-repetitive string.

Example 3:

Input: s = "1111111"

Output: 2

Explanation:

The longest semi-repetitive substring is "11". Picking the substring "111" has two adjacent same digit pairs, but at most one is allowed.

 

Constraints:

1 <= s.length <= 50
'0' <= s[i] <= '9'


# java


class Solution {
  public int longestSemiRepetitiveSubstring(String s) {
    int ans = 1;
    int prevStart = 0;
    int start = 0;

    for (int i = 1; i < s.length(); ++i) {
      if (s.charAt(i) == s.charAt(i - 1)) {
        if (prevStart > 0)
          start = prevStart;
        prevStart = i;
      }
      ans = Math.max(ans, i - start + 1);
    }

    return ans;
  }
}


or


class Solution {
    public int longestSemiRepetitiveSubstring(String s) {
        int n = s.length();
        int ans = 0;
        for (int i = 0, j = 0, cnt = 0; i < n; ++i) {
            if (i > 0 && s.charAt(i) == s.charAt(i - 1)) {
                ++cnt;
            }
            while (cnt > 1) {
                if (s.charAt(j) == s.charAt(j + 1)) {
                    --cnt;
                }
                ++j;
            }
            ans = Math.max(ans, i - j + 1);
        }
        return ans;
    }
}



or



class Solution {
        public int longestSemiRepetitiveSubstring(String s) {
        int i = 0, cur = 0, n = s.length();
        for (int j = 1; j < n; ++j) {
            cur += s.charAt(j) == s.charAt(j - 1) ? 1 : 0;
            if (cur > 1) {
                cur -= s.charAt(++i) == s.charAt(i - 1) ? 1 : 0;
            }
        }
        return n - i;
    }
}



or



class Solution {
    public int longestSemiRepetitiveSubstring(String s) {
        int i=0, j=0, max=0, c=0;
        while(j<s.length()-1){
            if(s.charAt(j)==s.charAt(j+1)){
                c++;
            }
            while(c>=2){
                max=Math.max(max,j-i+1);
                if(s.charAt(i)==s.charAt(i+1)){
                    c--;   
                } 
                i++;
            }
            j++;
        }
        return Math.max(max,j-i+1);
    }
}


or


class Solution {
    public int longestSemiRepetitiveSubstring(String s) {
        int l=0,r=0;
        int count=0;
        int ans=1;
        while(r<s.length()-1 && l<=r){
            r++;
            if(s.charAt(r)==s.charAt(r-1)) count++;
            while(count>=2){
                l++;
                if(s.charAt(l)==s.charAt(l-1)) count--;
            }
            ans=Math.max(ans,r-l+1);
        }
        return ans;
    }
}



or



class Solution {
    public int longestSemiRepetitiveSubstring(String s) {
        int i=0,max=0,count=0,prev=0;
        for (int j=0;j<s.length();j++){
            if(j>0 && s.charAt(j)==s.charAt(j-1)){
                count++;
                if(count>1){
                    count--;
                    i=prev;                    
                }
                prev=j;
            }
            if(count<2) max=Math.max(max,j-i+1);                    
                
        }
        return max;
    }
}


or


class Solution {
    public int longestSemiRepetitiveSubstring(String s) {
        int l=0,r=0,ans=0;
        int curr=-1,prev=-1,cons=0;
        while(r<s.length()){
            curr=s.charAt(r)-'0';
            if(curr==prev) cons++;
            prev=curr;
            while(cons>1){
                if(s.charAt(l)==s.charAt(l+1)) cons--;
                l++;
            }
            if(cons<2) ans=Math.max(ans,r-l+1);
            r++;
        }
        return ans;
    }
}


or



class Solution {
    public int longestSemiRepetitiveSubstring(String s) {
        int n = s.length();
        int pair = 0;

        // special case
        if (n == 1) return 1;

        int l = 0;
        int max_len = 0;
        // sliding window
        for (int r = 1; r < n; r++) {
            if (s.charAt(r) == s.charAt(r-1)) {
                pair++;
            }
            // shrink window length
            while (pair > 1) {
                l++;
                if (s.charAt(l-1) == s.charAt(l)) {
                    pair--;
                }
            }
            // update return value
            max_len = Math.max(max_len, r-l+1);
        }
        return max_len;

    }
}




