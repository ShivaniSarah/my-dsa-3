https://leetcode.com/problems/count-substrings-with-k-frequency-characters-i/description/

3325. Count Substrings With K-Frequency Characters I
Medium
Topics
Companies
Hint
Given a string s and an integer k, return the total number of substrings of s where at least one character appears at least k times.

 

Example 1:

Input: s = "abacb", k = 2

Output: 4

Explanation:

The valid substrings are:

"aba" (character 'a' appears 2 times).
"abac" (character 'a' appears 2 times).
"abacb" (character 'a' appears 2 times).
"bacb" (character 'b' appears 2 times).
Example 2:

Input: s = "abcde", k = 1

Output: 15

Explanation:

All substrings are valid because every character appears at least once.

 

Constraints:

1 <= s.length <= 3000
1 <= k <= s.length
s consists only of lowercase English letters.


# java



class Solution {
  public int numberOfSubstrings(String s, int k) {
    final int n = s.length();
    int ans = n * (n + 1) / 2;
    int[] count = new int[26];

    for (int l = 0, r = 0; r < n; ++r) {
      final int c = s.charAt(r) - 'a';
      ++count[c];
      while (count[c] == k)
        --count[s.charAt(l++) - 'a'];
      ans -= r - l + 1;
    }

    return ans;
  }
}

or



class Solution {
    public int numberOfSubstrings(String s, int k) {
        int[] cnt = new int[26];
        int ans = 0, l = 0;
        for (int r = 0; r < s.length(); ++r) {
            int c = s.charAt(r) - 'a';
            ++cnt[c];
            while (cnt[c] >= k) {
                --cnt[s.charAt(l) - 'a'];
                l++;
            }
            ans += l;
        }
        return ans;
    }
}



or



class Solution {
        public int numberOfSubstrings(String s, int k) {
        int n = s.length(), res = (n + 1) * n / 2;
        int[] count = new int[26];
        for (int i = 0, j = 0; j < n; j++) {
            char c = s.charAt(j);
            count[c - 'a']++;
            while (count[c - 'a'] >= k) {
                char leftChar = s.charAt(i);
                count[leftChar - 'a']--;
                i++;
            }
            res -= j - i + 1;
        }
        return res;
    }
}


or


import java.util.HashMap;

class Solution {
    public int numberOfSubstrings(String s, int k) {
        int ans = 0;
        int l = 0;
        HashMap<Character, Integer> d = new HashMap<>();
        
        for (char c : s.toCharArray()) {
            d.put(c, d.getOrDefault(c, 0) + 1);
            
            while (d.get(c) == k) {
                d.put(s.charAt(l), d.get(s.charAt(l)) - 1);
                l++;
            }
            
            ans += l;
        }

        return ans;
    }
}


or


