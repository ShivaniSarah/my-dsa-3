https://leetcode.com/problems/find-k-length-substrings-with-no-repeated-characters/description/


1100. Find K-Length Substrings With No Repeated Characters
Description
Given a string s and an integer k, return the number of substrings in s of length k with no repeated characters.

 

Example 1:

Input: s = "havefunonleetcode", k = 5
Output: 6
Explanation: There are 6 substrings they are: 'havef','avefu','vefun','efuno','etcod','tcode'.
Example 2:

Input: s = "home", k = 5
Output: 0
Explanation: Notice k can be larger than the length of s. In this case, it is not possible to find any substring.
 

Constraints:

1 <= s.length <= 104
s consists of lowercase English letters.
1 <= k <= 104



 #java


class Solution {
    public int numKLenSubstrNoRepeats(String s, int k) {
        int n = s.length();
        if (k > n || k > 26) {
            return 0;
        }
        int[] cnt = new int[128];
        int ans = 0;
        for (int i = 0, j = 0; i < n; ++i) {
            ++cnt[s.charAt(i)];
            while (cnt[s.charAt(i)] > 1 || i - j + 1 > k) {
                cnt[s.charAt(j++)]--;
            }
            ans += i - j + 1 == k ? 1 : 0;
        }
        return ans;
    }
}



or



class Solution {
  public int numKLenSubstrNoRepeats(String s, int k) {
    int ans = 0;
    int unique = 0;
    int[] count = new int[26];

    for (int i = 0; i < s.length(); ++i) {
      if (++count[s.charAt(i) - 'a'] == 1)
        ++unique;
      if (i >= k && --count[s.charAt(i - k) - 'a'] == 0)
        --unique;
      if (unique == k)
        ++ans;
    }

    return ans;
  }
}



