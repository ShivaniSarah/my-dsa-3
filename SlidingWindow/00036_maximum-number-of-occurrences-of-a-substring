https://leetcode.com/problems/maximum-number-of-occurrences-of-a-substring/description/

1297. Maximum Number of Occurrences of a Substring
Medium
Topics
Companies
Hint
Given a string s, return the maximum number of occurrences of any substring under the following rules:

The number of unique characters in the substring must be less than or equal to maxLetters.
The substring size must be between minSize and maxSize inclusive.
 

Example 1:

Input: s = "aababcaab", maxLetters = 2, minSize = 3, maxSize = 4
Output: 2
Explanation: Substring "aab" has 2 occurrences in the original string.
It satisfies the conditions, 2 unique letters and size 3 (between minSize and maxSize).
Example 2:

Input: s = "aaaa", maxLetters = 1, minSize = 3, maxSize = 3
Output: 2
Explanation: Substring "aaa" occur 2 times in the string. It can overlap.
 

Constraints:

1 <= s.length <= 105
1 <= maxLetters <= 26
1 <= minSize <= maxSize <= min(26, s.length)
s consists of only lowercase English letters.


# java


class Solution {
  public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {
    // Greedily consider strings with `minSize`, so ignore `maxSize`.
    int ans = 0;
    int letters = 0;
    int[] count = new int[26];
    Map<String, Integer> substringCount = new HashMap<>();

    for (int l = 0, r = 0; r < s.length(); ++r) {
      if (++count[s.charAt(r) - 'a'] == 1)
        ++letters;
      while (letters > maxLetters || r - l + 1 > minSize)
        if (--count[s.charAt(l++) - 'a'] == 0)
          --letters;
      if (r - l + 1 == minSize)
        ans = Math.max(ans, substringCount.merge(s.substring(l, l + minSize), 1, Integer::sum));
    }

    return ans;
  }
}


or


class Solution {
    public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {
        int ans = 0;
        Map<String, Integer> cnt = new HashMap<>();
        for (int i = 0; i < s.length() - minSize + 1; ++i) {
            String t = s.substring(i, i + minSize);
            Set<Character> ss = new HashSet<>();
            for (int j = 0; j < minSize; ++j) {
                ss.add(t.charAt(j));
            }
            if (ss.size() <= maxLetters) {
                cnt.put(t, cnt.getOrDefault(t, 0) + 1);
                ans = Math.max(ans, cnt.get(t));
            }
        }
        return ans;
    }
}


or


class Solution {
    public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {
        HashMap<String, Integer> map = new HashMap<>(); 
        int maxOccurrences = 0; 

        int left = 0, right = minSize; //window size 

        while (right <= s.length()){
            //count substrings within a window of size minsize
            //all substrings larger than minsize must contain substrings of length equal to minsize, 
            //so there will be at least as many unique substrings of length minsize as any longer length
            String substr = s.substring(left, right); 
            map.put(substr, map.getOrDefault(substr, 0) + 1); 
            left++; right++; //shift window right
        }

           for (String substr : map.keySet()){    
            int count = map.get(substr); 

            if (count > maxOccurrences && isValidSubstring(substr, maxLetters))
                maxOccurrences = count;
        }

        return maxOccurrences;
    }

    public boolean isValidSubstring(String substr, int maxLetters){
        HashSet<Character> counts = new HashSet<>(); 
        for (int i = 0; i < substr.length(); i++){
            char c = substr.charAt(i);
            counts.add(c);
        }

        return counts.size() <= maxLetters;
    }
}



or


class Solution {
    public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {
        Map<String, Integer> occurrences = new HashMap<>();
        // Count ocurrences per letter inside window
        int[] countLetters = new int[26];
        // Count total amount of unique letters inside window
        int countUnique = 0;
        int left = 0;
        int right = 0;
        
        while (right < s.length()){
            // Add new character to the window
            char r = s.charAt(right++);
            countLetters[r - 'a']++;
            
            // If it's the first time we see this character increase unique
            if (countLetters[r - 'a'] == 1) {
                countUnique++;
            }

            while ((right - left) >= minSize && (right - left) <= maxSize) {
                if (countUnique <= maxLetters) {
                    String subs = s.substring(left, right);
                    occurrences.put(subs, occurrences.getOrDefault(subs, 0) + 1);
                }
                
                char l = s.charAt(left++);
                countLetters[l - 'a']--;
                
                // Unique character left the window
                if (countLetters[l - 'a'] == 0) {
                    countUnique--;
                }
            }
        }
        
        return occurrences.entrySet().stream().map(Map.Entry::getValue).max(Comparator.naturalOrder()).orElse(0);
    }
}


or


class Solution {
    public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {

        // optimized approach
        // sliding window approach

        int left = 0, right = 0;
        int maxSubString = 0;

        Map<Character, Integer> letters = new HashMap<>();
        Map<String, Integer> string = new HashMap<>();

        while (right < s.length()) {

            letters.put(s.charAt(right), letters.getOrDefault(s.charAt(right), 0) + 1);

            if ((right - left + 1) > minSize) {

                letters.put(s.charAt(left), letters.get(s.charAt(left)) - 1);

                if (letters.get(s.charAt(left)) == 0) {
                    letters.remove(s.charAt(left));
                }
                left++;
            }

            if (letters.size() <= maxLetters && (right - left + 1) == minSize) {
                String str = s.substring(left, right + 1);
                string.put(str, string.getOrDefault(str, 0) + 1);
                maxSubString = Math.max(maxSubString, string.get(str));
            }

            right++;

        }

        return maxSubString;
        
    }
}



or


class Solution {
    public int maxFreq(String s, int maxLetters, int minSize, int maxSize) {
        int n = s.length();
        Map<String, Integer> substringFrequency = new HashMap<>();
        int maxFreq = 0;

        for (int i = 0; i <= n - minSize; i++) {
            String substring = s.substring(i, i + minSize);
            Set<Character> uniqueChars = new HashSet<>();
            int distinctChars = 0;

            for (char c : substring.toCharArray()) {
                if (!uniqueChars.contains(c)) {
                    distinctChars++;
                    uniqueChars.add(c);
                }
            }

            if (distinctChars <= maxLetters) {
                int frequency = substringFrequency.getOrDefault(substring, 0) + 1;
                substringFrequency.put(substring, frequency);
                maxFreq = Math.max(maxFreq, frequency);
            }
        }

        return maxFreq;
    }
}


