https://leetcode.com/problems/swap-for-longest-repeated-character-substring/description/

1156. Swap For Longest Repeated Character Substring
Medium
Topics
Companies
Hint
You are given a string text. You can swap two of the characters in the text.

Return the length of the longest substring with repeated characters.

 

Example 1:

Input: text = "ababa"
Output: 3
Explanation: We can swap the first 'b' with the last 'a', or the last 'b' with the first 'a'. Then, the longest repeated character substring is "aaa" with length 3.
Example 2:

Input: text = "aaabaaa"
Output: 6
Explanation: Swap 'b' with the last 'a' (or the first 'a'), and we get longest repeated character substring "aaaaaa" with length 6.
Example 3:

Input: text = "aaaaa"
Output: 5
Explanation: No need to swap, longest repeated character substring is "aaaaa" with length is 5.
 

Constraints:

1 <= text.length <= 2 * 104
text consist of lowercase English characters only.



# java



class Solution {
  public int maxRepOpt1(String text) {
    int ans = 0;
    int[] count = new int[26];
    List<int[]> groups = new ArrayList<>();

    for (final char c : text.toCharArray())
      ++count[c - 'a'];

    groups.add(new int[] {text.charAt(0), 1});

    for (int i = 1; i < text.length(); ++i)
      if (text.charAt(i) == text.charAt(i - 1))
        ++groups.get(groups.size() - 1)[1];
      else
        groups.add(new int[] {text.charAt(i), 1});

    for (int[] group : groups)
      ans = Math.max(ans, Math.min(group[1] + 1, count[group[0] - 'a']));

    for (int i = 1; i + 1 < groups.size(); ++i)
      if (groups.get(i - 1)[0] == groups.get(i + 1)[0] && groups.get(i)[1] == 1)
        ans = Math.max(ans, Math.min(groups.get(i - 1)[1] + groups.get(i + 1)[1] + 1,
                                     count[groups.get(i - 1)[0] - 'a']));

    return ans;
  }
}



or


class Solution {
    public int maxRepOpt1(String text) {
        int[] cnt = new int[26];
        int n = text.length();
        for (int i = 0; i < n; ++i) {
            ++cnt[text.charAt(i) - 'a'];
        }
        int ans = 0, i = 0;
        while (i < n) {
            int j = i;
            while (j < n && text.charAt(j) == text.charAt(i)) {
                ++j;
            }
            int l = j - i;
            int k = j + 1;
            while (k < n && text.charAt(k) == text.charAt(i)) {
                ++k;
            }
            int r = k - j - 1;
            ans = Math.max(ans, Math.min(l + r + 1, cnt[text.charAt(i) - 'a']));
            i = j;
        }
        return ans;
    }
}



or


class Solution {
    public int maxRepOpt1(String s) {
        int len = s.length();
        int[] count = new int[26];
        
        int[] newCount = new int[26];
        for(char c:s.toCharArray()) newCount[c-'a']++;
        
        int start = 0, maxCount = 0, maxLength = 0;
        for (int end = 0; end < len; end++) {
            maxCount = Math.max(maxCount, ++count[s.charAt(end) - 'a']);
            while (end - start + 1 - maxCount > 1 || end - start + 1>newCount[s.charAt(start)-'a']) {
                count[s.charAt(start) - 'a']--;
                start++;
                // maxCount = Math.max(count[s.charAt(end)-'a'],count[s.charAt(start)-'a']);
                maxCount=0;
                for(int i = 0; i < 26; i++){
                    if(maxCount < count[i]){
                        maxCount = count[i];
                    }
                }
            }
            maxLength = Math.max(maxLength, end - start + 1);
        }
        return maxLength;
    
    }
}


or


class Solution {
  public int maxRepOpt1(String text) {
  Map<Character, List<Integer>> map = new HashMap<>();
  int n = text.length();

  // get positions of every letter ignoring case
  for (int i = 0; i < n; i++) {
    char letter = Character.toLowerCase(text.charAt(i));
    map.putIfAbsent(letter, new ArrayList<>());
    map.get(letter).add(i);
  }
  
  int result = 1;
  for (char letter : map.keySet()) {
    // count for consecutive adjacent letters that are the same
    int groupcount = 1;

    // count for consecutive adjacent letters that are the same
    // from previous group, separated by some other letter
    int prevgroupcount = 0;
    int maxlength = 0;

    // get all positions of current letter
    List<Integer> indices = map.get(letter);

    for (int j = 1; j < indices.size(); j++) {
      // get the distance between two of the same letters.
      int distance = indices.get(j) - indices.get(j - 1);

      // if distance is one, letters are adjacent
      if (distance == 1) {
          groupcount++;
      } else {
        // when there is one letter between
        // two of the same letters. Else, reset previous group count to 0
        if (distance == 2)
          prevgroupcount = groupcount;
        else
          prevgroupcount = 0;
          
        // starting a new group with current letter, so
        // set to 1
        groupcount = 1;
      }

      // groupcount + prevgroupcount = totalcount 
      // when two letters are swapped to make 
      // longest consecutive letters that are the same
      maxlength = Math.max(maxlength, groupcount + prevgroupcount);
    }

    if (indices.size() > maxlength)
      maxlength++;

    result = Math.max(result, maxlength);
  }
  return result;
}
}


or


class Solution {
    public int maxRepOpt1(String text) {
        int arr [] = new int [26];
        for(int a=0;a<text.length();a++){
            arr[text.charAt(a)-'a']++;
        }
        int i=0;
        int len=0;
        int n = text.length();
        while(i<n){
            int j=i;
            while(j<n&&text.charAt(j)==text.charAt(i)){
                ++j;
            }
            int block1 = j-i;
            int k = j+1;
            while(k<n&&text.charAt(k)==text.charAt(i)){
                ++k;
            }
            int block2 = k-j-1;
            len = Math.max(len,Math.min(block1+block2+1,arr[text.charAt(i)-'a']));
            i=j;
        }
        return len;
    }
}



or



class Solution {
    public int maxRepOpt1(String text) {
        int[] freq = new int[255];
        for (char ch : text.toCharArray())
            freq[ch]++;
        int res = 0;
        for (char ch = 'a'; ch <= 'z'; ch++) {
            if (freq[ch] == 0)
                continue;
            int i = 0, gap = 0;
            for (int j = 0; j < text.length(); j++) {
                gap = text.charAt(j) != ch ? gap + 1 : gap;
                if (ch == text.charAt(j))
                    freq[ch]--;
                while ((gap == 1 && freq[ch] == 0) || gap > 1) {
                    if (ch == text.charAt(i))
                        freq[ch]++;
                    else
                        gap--;
                    i++;
                }
                if ((gap == 1 && freq[ch] > 0) || gap == 0)
                    res = Math.max(res, j - i + 1);
            }
        }

        return res;
    }
}


or



class Solution {
    public int maxRepOpt1(String text) {
         int[] count = new int[26]; // Frequency of each character
        int n = text.length();
        
        // Count character frequencies
        for (char c : text.toCharArray()) {
            count[c - 'a']++;
        }
        
        int maxResult = 1; // Initialize the maximum result
        
        int start = 0;
        while (start < n) {
            int left = start;
            char character = text.charAt(start);
            
            // Find the length of the current block of the same character
            while (start < n && text.charAt(start) == character) {
                start++;
            }
            int blockLength = start - left;
            
            // Check for an interruption and extend the block if possible
            int nextStart = start + 1;
            while (nextStart < n && text.charAt(nextStart) == character) {
                nextStart++;
            }
            
            // Calculate the total length of the extended block
            int totalLength = blockLength + (nextStart - start);
            if (totalLength > count[character - 'a']) {
                totalLength--; // Adjust if we've overcounted characters
            }
            
            maxResult = Math.max(maxResult, totalLength);
        }
        
        return maxResult;
    }
}



