https://leetcode.com/problems/replace-the-substring-for-balanced-string/description/


1234. Replace the Substring for Balanced String
Medium
Topics
Companies
Hint
You are given a string s of length n containing only four kinds of characters: 'Q', 'W', 'E', and 'R'.

A string is said to be balanced if each of its characters appears n / 4 times where n is the length of the string.

Return the minimum length of the substring that can be replaced with any other string of the same length to make s balanced. If s is already balanced, return 0.

 

Example 1:

Input: s = "QWER"
Output: 0
Explanation: s is already balanced.
Example 2:

Input: s = "QQWE"
Output: 1
Explanation: We need to replace a 'Q' to 'R', so that "RQWE" (or "QRWE") is balanced.
Example 3:

Input: s = "QQQW"
Output: 2
Explanation: We can replace the first "QQ" to "ER". 
 

Constraints:

n == s.length
4 <= n <= 105
n is a multiple of 4.
s contains only 'Q', 'W', 'E', and 'R'.


# java

class Solution {
  public int balancedString(String s) {
    final int n = s.length();
    final int k = n / 4;
    int ans = n;
    int[] count = new int[128];

    for (final char c : s.toCharArray())
      ++count[c];

    for (int i = 0, j = 0; i < n; ++i) {
      --count[s.charAt(i)];
      while (j < n && count['Q'] <= k && count['W'] <= k && count['E'] <= k && count['R'] <= k) {
        ans = Math.min(ans, i - j + 1);
        ++count[s.charAt(j)];
        ++j;
      }
    }

    return ans;
  }
}



or


class Solution {
    public int balancedString(String s) {
        int[] cnt = new int[4];
        String t = "QWER";
        int n = s.length();
        for (int i = 0; i < n; ++i) {
            cnt[t.indexOf(s.charAt(i))]++;
        }
        int m = n / 4;
        if (cnt[0] == m && cnt[1] == m && cnt[2] == m && cnt[3] == m) {
            return 0;
        }
        int ans = n;
        for (int i = 0, j = 0; i < n; ++i) {
            cnt[t.indexOf(s.charAt(i))]--;
            while (j <= i && cnt[0] <= m && cnt[1] <= m && cnt[2] <= m && cnt[3] <= m) {
                ans = Math.min(ans, i - j + 1);
                cnt[t.indexOf(s.charAt(j++))]++;
            }
        }
        return ans;
    }
}



or



class Solution {
	// Checks that freq[char] <= 0 meaning we have an elligible substring
    private boolean fulfilled(int[] freq) {
        boolean fulfilled = true;
        for(int f: freq) {
            if(f > 0) fulfilled = false;
        }
        return fulfilled;
    }
    
	 // Q 0 W 1 E 2 R 3
    private int charToIdx(char c) {
        switch(c) {
            case 'Q': return 0;
            case 'W': return 1;
            case 'E': return 2;
        }
        return 3;
    }
    
    public int balancedString(String s) {
        // 1) Find freq of each first
        int N = s.length();
        int required = N/4;
       
        int[] freq = new int[4];
        for(int i = 0; i < N; ++i) {
            char c = s.charAt(i);
            ++freq[charToIdx(c)];
        }
        
        // 2) Determine the ones we need to change
        boolean equal = true;
        for(int i = 0; i < 4; ++i) {
            if(freq[i] != required) equal = false;
            freq[i] = Math.max(0, freq[i] - required);
        }
        
        if(equal) return 0; // Early return if all are equal
        
        // 3) Use sliding window and try to track what more is needed to find smallest window
        int start = 0;
        int minLen = N; // Maximum will only ever be N
        
        for(int end = 0; end < N; ++end) {
            char c = s.charAt(end);
            --freq[charToIdx(c)];
            
            while(fulfilled(freq)) {
                minLen = Math.min(end - start + 1, minLen);

                char st = s.charAt(start);
                ++freq[charToIdx(st)];
                ++start;
            }
        }
        
        return minLen;
    }
}



or


class Solution {
    public int balancedString(String s) {
        // Initialize a frequency map for the characters Q, W, E, R
        Map<Character, Integer> freq = new HashMap<>();
        freq.put('Q', 0);
        freq.put('W', 0);
        freq.put('E', 0);
        freq.put('R', 0);

        // Populate the frequency map with the counts of each character in the input string
        for (int i = 0; i < s.length(); i++) {
            freq.put(s.charAt(i), freq.get(s.charAt(i)) + 1);
        }

        // Calculate the target frequency for each character to balance the string
        int target = s.length() / 4;
        int minLen = s.length();
        int left = 0;

        // Use a sliding window to find the minimum length of the substring to be replaced
        for (int right = 0; right < s.length(); right++) {
            freq.put(s.charAt(right), freq.get(s.charAt(right)) - 1);

            // Check if the current window is balanced
            while (left < s.length() &&
                   freq.get('Q') <= target && // mimimum/shortest length This is 4th pattern and important Question
                   freq.get('W') <= target &&
                   freq.get('E') <= target &&
                   freq.get('R') <= target) {
                minLen = Math.min(minLen, right - left + 1);//performint minimum operation inside "=" "WHILE"
                freq.put(s.charAt(left), freq.get(s.charAt(left)) + 1);
                left++;
            }
        }

        return minLen;
    }
}


or


class Solution {
    public int balancedString(String s) {
        int n = s.length(), ans = n, excess = 0;
        int[] cnt = new int[128];
        cnt['Q'] = cnt['W'] = cnt['E'] = cnt['R'] = -n/4;
        for (char ch : s.toCharArray()) if (++cnt[ch] == 1) excess++; //if count reaches 1, it is extra and to be removed.
        if (excess == 0) return 0;
        for (int i = 0, j = 0; i < n; i++){//i = window right end, j = window left end
            if (--cnt[s.charAt(i)] == 0) excess--; //remove letter at index i
            while (excess == 0){ //if no more excess, then 
                if (++cnt[s.charAt(j)] == 1) excess++; //we put letter at index j back
                ans = Math.min(i - j + 1, ans);; //and update ans accordingly
                j++;
            }
        }

        return ans;
    }
}


or


class Solution {
    public int balancedString(String s) {
        // 0 case
        int [] arr = new int[4];
        String ss = "EQRW";
        for(int i=0;i<s.length();++i){
            arr[ss.indexOf(s.charAt(i))]++;
        }
        int m = s.length()/4;
        if(arr[0]==m&&arr[1]==m&&arr[2]==m&&arr[3]==m) return 0;
        //we need a  window to replace 
        //each time decrement the present char count and check condition is met 
        int ans = s.length();
        for(int i=0,j=0;i<s.length();++i){
            arr[ss.indexOf(s.charAt(i))]--;
            while(j<=i && arr[0] <= m && arr[1] <= m && arr[2] <= m && arr[3] <= m){
                ans = Math.min(ans,i-j+1);
                arr[ss.indexOf(s.charAt(j++))]++;
            }
        }
        return ans;
    }
}


or


class Solution {
    public int balancedString(String s) {
        int map[]=new int[128];
        char arr[]=s.toCharArray();
        int n=arr.length,k=0;
        map['Q']=map['W']=map['E']=map['R']=n/4;
        for(char i:arr){
            map[i]--;
            if(map[i]==-1) k++;
        }
        if(k==0) return 0;
        int i=0,j=0,ans=n;
        while(i<n){
            map[arr[i]]++;
            if(map[arr[i]]==0) k--;
            while(k==0){
                map[arr[j]]--;
                if(map[arr[j]]==-1) k++;
                ans=Math.min(ans,i-j+1);
                j++;
            }
            i++;
        }
        return ans;
    }
}



or


class Solution {
    public int balancedString(String s) {
        int n = s.length();
        Map<Character,Integer> frq = new HashMap<>();
        for(int i=0;i<n;i++){
            frq.put(s.charAt(i),frq.getOrDefault(s.charAt(i),0)+1);
        }
        int k = n/4,l=0;
        int min = n;
        for(int i=0;i<n;i++){
            frq.put(s.charAt(i),frq.get(s.charAt(i))-1);
            while(l<n && frq.getOrDefault('Q',0)<=k 
                        && frq.getOrDefault('W',0)<=k 
                        && frq.getOrDefault('E',0)<=k
                        && frq.getOrDefault('R',0)<=k){
                min=Math.min(min,i-l+1);
                frq.put(s.charAt(l),frq.get(s.charAt(l))+1);
                l++;
            }
        }
        return min;
    }
}
