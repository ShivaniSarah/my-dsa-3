https://leetcode.com/problems/equalize-strings-by-adding-or-removing-characters-at-ends/description/


3135. Equalize Strings by Adding or Removing Characters at Ends ðŸ”’
Description
Given two strings initial and target, your task is to modify initial by performing a series of operations to make it equal to target.

In one operation, you can add or remove one character only at the beginning or the end of the string initial.

Return the minimum number of operations required to transform initial into target.

 

Example 1:

Input: initial = "abcde", target = "cdef"

Output: 3

Explanation:

Remove 'a' and 'b' from the beginning of initial, then add 'f' to the end.

Example 2:

Input: initial = "axxy", target = "yabx"

Output: 6

Explanation:

Operation	Resulting String
Add 'y' to the beginning	"yaxxy"
Remove from end	"yaxx"
Remove from end	"yax"
Remove from end	"ya"
Add 'b' to the end	"yab"
Add 'x' to the end	"yabx"
Example 3:

Input: initial = "xyz", target = "xyz"

Output: 0

Explanation:

No operations are needed as the strings are already equal.

 

Constraints:

1 <= initial.length, target.length <= 1000
initial and target consist only of lowercase English letters.



# java





class Solution {
  public int minOperations(String initial, String target) {
    final int m = initial.length();
    final int n = target.length();
    // dp[i][j] := the length of LCS(initial[0..i), target[0..j))
    int[][] dp = new int[m + 1][n + 1];

    for (int i = 1; i <= m; ++i)
      for (int j = 1; j <= n; ++j)
        if (initial.charAt(i - 1) == target.charAt(j - 1))
          dp[i][j] = 1 + dp[i - 1][j - 1];

    final int maxCommonLength = Arrays.stream(dp).flatMapToInt(Arrays::stream).max().getAsInt();
    return m + n - 2 * maxCommonLength;
  }
}



or



class Solution {
    public int minOperations(String initial, String target) {
        int m = initial.length(), n = target.length();
        int[][] f = new int[m + 1][n + 1];
        int mx = 0;
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                if (initial.charAt(i - 1) == target.charAt(j - 1)) {
                    f[i][j] = f[i - 1][j - 1] + 1;
                    mx = Math.max(mx, f[i][j]);
                }
            }
        }
        return m + n - 2 * mx;
    }
}



