https://leetcode.com/problems/longest-nice-subarray/description/


2401. Longest Nice Subarray
Medium
Topics
Companies
Hint
You are given an array nums consisting of positive integers.

We call a subarray of nums nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to 0.

Return the length of the longest nice subarray.

A subarray is a contiguous part of an array.

Note that subarrays of length 1 are always considered nice.

 

Example 1:

Input: nums = [1,3,8,48,10]
Output: 3
Explanation: The longest nice subarray is [3,8,48]. This subarray satisfies the conditions:
- 3 AND 8 = 0.
- 3 AND 48 = 0.
- 8 AND 48 = 0.
It can be proven that no longer nice subarray can be obtained, so we return 3.
Example 2:

Input: nums = [3,1,5,11,13]
Output: 1
Explanation: The length of the longest nice subarray is 1. Any subarray of length 1 can be chosen.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109


# java


class Solution {
  public int longestNiceSubarray(int[] nums) {
    int ans = 0;
    int used = 0;

    for (int l = 0, r = 0; r < nums.length; ++r) {
      while ((used & nums[r]) > 0)
        used ^= nums[l++];
      used |= nums[r];
      ans = Math.max(ans, r - l + 1);
    }

    return ans;
  }
}


or


class Solution {
    public int longestNiceSubarray(int[] nums) {
        int ans = 0, mask = 0;
        for (int i = 0, j = 0; i < nums.length; ++i) {
            while ((mask & nums[i]) != 0) {
                mask ^= nums[j++];
            }
            ans = Math.max(ans, i - j + 1);
            mask |= nums[i];
        }
        return ans;
    }
}


or

// bf

class Solution {

    public int longestNiceSubarray(int[] nums) {
        int maxLength = 1; // Track the maximum nice subarray length found

        for (int start = 0; start < nums.length - maxLength; start++) {
            int currentLength = 1; // Length of current nice subarray
            int usedBits = nums[start]; // Track which bits are used in our subarray

            // Try to extend the subarray
            for (int end = start + 1; end < nums.length; end++) {
                // If no bits overlap between current number and used bits, we can extend
                if ((usedBits & nums[end]) == 0) {
                    usedBits |= nums[end]; // Add new number's bits to our tracker
                    currentLength++;
                }
                // If bits overlap, this number can't be part of our nice subarray
                else break;
            }

            // Update max length if we found a longer nice subarray
            maxLength = Math.max(maxLength, currentLength);
        }

        return maxLength;
    }
}


or


class Solution {

    public int longestNiceSubarray(int[] nums) {
        int usedBits = 0; // Tracks bits used in current window
        int windowStart = 0; // Start position of current window
        int maxLength = 0; // Length of longest nice subarray found

        for (int windowEnd = 0; windowEnd < nums.length; ++windowEnd) {
            // If current number shares bits with window, shrink window from left
            // until there's no bit conflict
            while ((usedBits & nums[windowEnd]) != 0) {
                usedBits ^= nums[windowStart]; // Remove leftmost element's bits
                windowStart++;
            }

            // Add current number to the window
            usedBits |= nums[windowEnd];

            // Update max length if current window is longer
            maxLength = Math.max(maxLength, windowEnd - windowStart + 1);
        }

        return maxLength;
    }
}



or


class Solution {
    public int longestNiceSubarray(int[] nums) {
    int used = 0, j = 0, res = 0;
    for (int i = 0; i < nums.length; ++i) {
        while ((used & nums[i]) != 0)
            used ^= nums[j++];
        used |= nums[i];
        res = Math.max(res, i - j + 1);
    }
    return res;    
}
}



or


class Solution {
    public int longestNiceSubarray(int[] nums) {
        int n = nums.length;
        int maxLength = 1;
        int left = 0;
        int usedBits = 0;
        
        for (int right = 0; right < n; right++) {
            while ((usedBits & nums[right]) != 0) {
                usedBits ^= nums[left];
                left++;
            }
            
            usedBits |= nums[right];
            maxLength = Math.max(maxLength, right - left + 1);
        }
        
        return maxLength;
    }
}



or


class Solution {
    public int longestNiceSubarray(int[] nums) {
        int l = 0, usedBits = 0, maxLength = 0;

        for (int r = 0; r < nums.length; r++) {
            while ((usedBits & nums[r]) != 0) {
                usedBits ^= nums[l]; 
                l++;
            }

            usedBits |= nums[r];
            maxLength = Math.max(maxLength, r - l + 1);
        }

        return maxLength;
    }
}




