https://leetcode.com/problems/find-the-power-of-k-size-subarrays-ii/description/


3255. Find the Power of K-Size Subarrays II
Medium
Topics
Companies
Hint
You are given an array of integers nums of length n and a positive integer k.

The power of an array is defined as:

Its maximum element if all of its elements are consecutive and sorted in ascending order.
-1 otherwise.
You need to find the power of all subarrays of nums of size k.

Return an integer array results of size n - k + 1, where results[i] is the power of nums[i..(i + k - 1)].

 

Example 1:

Input: nums = [1,2,3,4,3,2,5], k = 3

Output: [3,4,-1,-1,-1]

Explanation:

There are 5 subarrays of nums of size 3:

[1, 2, 3] with the maximum element 3.
[2, 3, 4] with the maximum element 4.
[3, 4, 3] whose elements are not consecutive.
[4, 3, 2] whose elements are not sorted.
[3, 2, 5] whose elements are not consecutive.
Example 2:

Input: nums = [2,2,2,2,2], k = 4

Output: [-1,-1]

Example 3:

Input: nums = [3,2,3,2,3,2], k = 2

Output: [-1,3,-1,3,-1]

 

Constraints:

1 <= n == nums.length <= 105
1 <= nums[i] <= 106
1 <= k <= n



# java



class Solution {
  // Same as 3254. Find the Power of K-Size Subarrays I
  public int[] resultsArray(int[] nums, int k) {
    final int n = nums.length;
    int[] ans = new int[n - k + 1];
    int start = 0;

    for (int i = 0; i < n; ++i) {
      if (i > 0 && nums[i] != nums[i - 1] + 1)
        start = i;
      if (i >= k - 1)
        ans[i - k + 1] = i - start + 1 >= k ? nums[i] : -1;
    }

    return ans;
  }
}


or


class Solution {
    public int[] resultsArray(int[] nums, int k) {
        int n = nums.length;
        int[] f = new int[n];
        Arrays.fill(f, 1);
        for (int i = 1; i < n; ++i) {
            if (nums[i] == nums[i - 1] + 1) {
                f[i] = f[i - 1] + 1;
            }
        }
        int[] ans = new int[n - k + 1];
        for (int i = k - 1; i < n; ++i) {
            ans[i - k + 1] = f[i] >= k ? nums[i] : -1;
        }
        return ans;
    }
}



or

// bets
class Solution {
    public int[] resultsArray(int[] nums, int k) {
        int n = nums.length, cnt = 1;
        if(k == 1) return nums;
        int[] res = new int[n-k+1];
        Arrays.fill(res, -1);

        for(int i=1; i<n; i++)
        {
            if(nums[i] != nums[i-1]+1)
            cnt = 1;
            else
            {
                cnt++;
                if(cnt >= k)
                res[i-k+1] = nums[i];
            }
        }
        return res;
    }
}


or

class Solution {

    // Helper function to process the array and check for consecutive subarrays of length k
    public int[] helper(int[] num, int k) {
        int n = num.length; // Get the length of the input array
        int[] ans = new int[n - k + 1]; // Initialize the answer array to store the results
        int k1 = 0; // Pointer for the result array
        int l = 0; // Left pointer of the sliding window
        boolean cons = true; // Flag to check if the current window contains consecutive elements

        // Iterate through the array with the right pointer r
        for (int r = 0; r < n; r++) {
            if (r > l) {
                // Check if the current element is consecutive with the previous one
                if (num[r] != num[r - 1] + 1) {
                    cons = false; // If not consecutive, set the flag to false
                }
            }
            // Check if the current window size equals k
            if (r - l + 1 == k) {
                if (cons) {
                    ans[k1] = num[r]; // If the window is consecutive, store the last element in the result array
                } else {
                    ans[k1] = -1; // If not, store -1
                }
                k1++; // Move to the next position in the result array

                // Edge case handling: Re-evaluate the consecutiveness when the window slides
                if (r - l + 1 == k) {
                    if (l + 1 < n && num[l] + 1 != num[l + 1]) {
                        cons = true; // Reset the flag to true
                        // Re-check the window for consecutiveness
                        for (int i = l + 1; i < r; i++) {
                            if (num[i] + 1 != num[i + 1]) {
                                cons = false; // If any elements are not consecutive, break the loop
                                break;
                            }
                        }
                    }
                    l++; // Slide the window by moving the left pointer
                }
            }
        }
        return ans; // Return the result array
    }

    // Main function to return the result array
    public int[] resultsArray(int[] nums, int k) {
        return helper(nums, k); // Call the helper function and return its result
    }
}


or



