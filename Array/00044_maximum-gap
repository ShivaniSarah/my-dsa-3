https://leetcode.com/problems/maximum-gap/description/


164. Maximum Gap
Medium
Topics
Companies
Given an integer array nums, return the maximum difference between two successive elements in its sorted form. If the array contains less than two elements, return 0.

You must write an algorithm that runs in linear time and uses linear extra space.

 

Example 1:

Input: nums = [3,6,9,1]
Output: 3
Explanation: The sorted form of the array is [1,3,6,9], either (3,6) or (6,9) has the maximum difference 3.
Example 2:

Input: nums = [10]
Output: 0
Explanation: The array contains less than 2 elements, therefore return 0.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109


# java


public class Maximum_Gap {

    public class Solution {
        public int maximumGap(int[] nums) {
            if (nums == null || nums.length <= 1) {
                return 0;
            }

            // Step 1: find max and min element
            int max = Integer.MIN_VALUE;
            int min = Integer.MAX_VALUE;
            for (int num : nums) {
                if (num > max) {
                    max = num;
                }

                if (num < min) {
                    min = num;
                }
            }

            int len = nums.length;

            // Step 2: calculate the intervals and number of buckets.
            int interval = (int) Math.ceil((double) (max - min) / (len - 1));

            if (interval == 0) {
                interval = 1;
            }
            int numBuckets = (max - min) / interval + 1;
            Bucket[] buckets = new Bucket[numBuckets];
            for (int i = 0; i < numBuckets; i++) {
                buckets[i] = new Bucket();
            }

            // Step 3: iterate through the nums and assign the number into the buckets.
            for (int num : nums) {
                int bucketNum = (num - min) / interval;
                if (num > buckets[bucketNum].max) {
                    buckets[bucketNum].max = num;
                }

                if (num < buckets[bucketNum].min) {
                    buckets[bucketNum].min = num;
                }
            }

            // Step 4: iterate through the buckets and get the maximal gap
            int prev = buckets[0].max;
            int maxGap = 0;
            for (int i = 1; i < numBuckets; i++) {
                if (prev != Integer.MIN_VALUE && buckets[i].min != Integer.MAX_VALUE) {
                    maxGap = Math.max(maxGap, buckets[i].min - prev);
                    prev = buckets[i].max;
                }
            }

            return maxGap;
        }

        private class Bucket {
            public int min;
            public int max;

            public Bucket() {
                min = Integer.MAX_VALUE;
                max = Integer.MIN_VALUE;
            }
        }
    }

}

//////

class Solution {
    public int maximumGap(int[] nums) {
        int n = nums.length;
        if (n < 2) {
            return 0;
        }
        int inf = 0x3f3f3f3f;
        int mi = inf, mx = -inf;
        for (int v : nums) {
            mi = Math.min(mi, v);
            mx = Math.max(mx, v);
        }
        int bucketSize = Math.max(1, (mx - mi) / (n - 1));
        int bucketCount = (mx - mi) / bucketSize + 1;
        int[][] buckets = new int[bucketCount][2];
        for (var bucket : buckets) {
            bucket[0] = inf;
            bucket[1] = -inf;
        }
        for (int v : nums) {
            int i = (v - mi) / bucketSize;
            buckets[i][0] = Math.min(buckets[i][0], v);
            buckets[i][1] = Math.max(buckets[i][1], v);
        }
        int prev = inf;
        int ans = 0;
        for (var bucket : buckets) {
            if (bucket[0] > bucket[1]) {
                continue;
            }
            ans = Math.max(ans, bucket[0] - prev);
            prev = bucket[1];
        }
        return ans;
    }
}



or


class Bucket {
  public int mn;
  public int mx;
  public Bucket(int mn, int mx) {
    this.mn = mn;
    this.mx = mx;
  }
}

class Solution {
  public int maximumGap(int[] nums) {
    if (nums.length < 2)
      return 0;

    final int mn = Arrays.stream(nums).min().getAsInt();
    final int mx = Arrays.stream(nums).max().getAsInt();
    if (mn == mx)
      return 0;

    final int gap = (int) Math.ceil((double) (mx - mn) / (nums.length - 1));
    final int bucketsLength = (mx - mn) / gap + 1;
    Bucket[] buckets = new Bucket[bucketsLength];

    for (int i = 0; i < buckets.length; ++i)
      buckets[i] = new Bucket(Integer.MAX_VALUE, Integer.MIN_VALUE);

    for (final int num : nums) {
      final int i = (num - mn) / gap;
      buckets[i].mn = Math.min(buckets[i].mn, num);
      buckets[i].mx = Math.max(buckets[i].mx, num);
    }

    int ans = 0;
    int prevMax = mn;

    for (final Bucket bucket : buckets) {
      if (bucket.mn == Integer.MAX_VALUE) // empty bucket
        continue;
      ans = Math.max(ans, bucket.mn - prevMax);
      prevMax = bucket.mx;
    }

    return ans;
  }
}
