https://leetcode.com/problems/find-the-number-of-good-pairs-ii/description/


3164. Find the Number of Good Pairs II
Medium
Topics
Companies
Hint
You are given 2 integer arrays nums1 and nums2 of lengths n and m respectively. You are also given a positive integer k.

A pair (i, j) is called good if nums1[i] is divisible by nums2[j] * k (0 <= i <= n - 1, 0 <= j <= m - 1).

Return the total number of good pairs.

 

Example 1:

Input: nums1 = [1,3,4], nums2 = [1,3,4], k = 1

Output: 5

Explanation:

The 5 good pairs are (0, 0), (1, 0), (1, 1), (2, 0), and (2, 2).
Example 2:

Input: nums1 = [1,2,4,12], nums2 = [2,4], k = 3

Output: 2

Explanation:

The 2 good pairs are (3, 0) and (3, 1).

 

Constraints:

1 <= n, m <= 105
1 <= nums1[i], nums2[j] <= 106
1 <= k <= 103


# java


class Solution {
  public long numberOfPairs(int[] nums1, int[] nums2, int k) {
    HashMap<Integer, Integer> count = new HashMap<>();
    long ans = 0;

    for (final int num : nums2)
      count.merge(num * k, 1, Integer::sum);

    for (final int num : nums1)
      for (int divisor = 1; divisor <= (int) Math.sqrt(num); ++divisor)
        if (num % divisor == 0) {
          ans += count.getOrDefault(divisor, 0);
          if (num / divisor != divisor)
            ans += count.getOrDefault(num / divisor, 0);
        }

    return ans;
  }
}


or


class Solution {
    public long numberOfPairs(int[] nums1, int[] nums2, int k) {
        Map<Integer, Integer> cnt1 = new HashMap<>();
        for (int x : nums1) {
            if (x % k == 0) {
                cnt1.merge(x / k, 1, Integer::sum);
            }
        }
        if (cnt1.isEmpty()) {
            return 0;
        }
        Map<Integer, Integer> cnt2 = new HashMap<>();
        for (int x : nums2) {
            cnt2.merge(x, 1, Integer::sum);
        }
        long ans = 0;
        int mx = Collections.max(cnt1.keySet());
        for (var e : cnt2.entrySet()) {
            int x = e.getKey(), v = e.getValue();
            int s = 0;
            for (int y = x; y <= mx; y += x) {
                s += cnt1.getOrDefault(y, 0);
            }
            ans += 1L * s * v;
        }
        return ans;
    }
}


