https://leetcode.com/problems/filling-bookcase-shelves/description/


1105. Filling Bookcase Shelves
Medium
Topics
Companies
Hint
You are given an array books where books[i] = [thicknessi, heighti] indicates the thickness and height of the ith book. You are also given an integer shelfWidth.

We want to place these books in order onto bookcase shelves that have a total width shelfWidth.

We choose some of the books to place on this shelf such that the sum of their thickness is less than or equal to shelfWidth, then build another level of the shelf of the bookcase so that the total height of the bookcase has increased by the maximum height of the books we just put down. We repeat this process until there are no more books to place.

Note that at each step of the above process, the order of the books we place is the same order as the given sequence of books.

For example, if we have an ordered list of 5 books, we might place the first and second book onto the first shelf, the third book on the second shelf, and the fourth and fifth book on the last shelf.
Return the minimum possible height that the total bookshelf can be after placing shelves in this manner.

 

Example 1:


Input: books = [[1,1],[2,3],[2,3],[1,1],[1,1],[1,1],[1,2]], shelfWidth = 4
Output: 6
Explanation:
The sum of the heights of the 3 shelves is 1 + 3 + 2 = 6.
Notice that book number 2 does not have to be on the first shelf.
Example 2:

Input: books = [[1,3],[2,4],[3,2]], shelfWidth = 6
Output: 4
 

Constraints:

1 <= books.length <= 1000
1 <= thicknessi <= shelfWidth <= 1000
1 <= heighti <= 1000



# java


class Solution {

    public int minHeightShelves(int[][] books, int shelfWidth) {
        // Cache to store previous computations
        int[][] memo = new int[books.length][shelfWidth + 1];
        return dpHelper(books, shelfWidth, memo, 0, shelfWidth, 0);
    }

    private int dpHelper(
        int[][] books,
        int shelfWidth,
        int[][] memo,
        int i,
        int remainingShelfWidth,
        int maxHeight
    ) {
        // Return height of current shelf
        if (i == books.length) return maxHeight;
        // Return answer if already computed
        if (memo[i][remainingShelfWidth] != 0) {
            return memo[i][remainingShelfWidth];
        } else {
            int[] currentBook = books[i];
            // Calculate the height of the bookcase if we put the current book on the new shelf
            int option1Height =
                maxHeight +
                dpHelper(
                    books,
                    shelfWidth,
                    memo,
                    i + 1,
                    shelfWidth - currentBook[0],
                    currentBook[1]
                );
            int option2Height = Integer.MAX_VALUE;
            if (remainingShelfWidth >= currentBook[0]) {
                int maxHeightUpdated = Math.max(maxHeight, currentBook[1]);
                // Calculate height of the bookcase if we put the current book on the current shelf
                option2Height = dpHelper(
                    books,
                    shelfWidth,
                    memo,
                    i + 1,
                    remainingShelfWidth - currentBook[0],
                    maxHeightUpdated
                );
            }
            // Store the smaller result in cache
            memo[i][remainingShelfWidth] = Math.min(
                option1Height,
                option2Height
            );
            return memo[i][remainingShelfWidth];
        }
    }
}


or


class Solution {

    public int minHeightShelves(int[][] books, int shelfWidth) {
        // dp[i] = minimum height of bookcase containing all books up to and
        // excluding book i
        int[] dp = new int[books.length + 1];

        // base cases
        dp[0] = 0;
        dp[1] = books[0][1];

        for (int i = 2; i <= books.length; i++) {
            // new shelf built to hold current book
            int remainingShelfWidth = shelfWidth - books[i - 1][0];
            int maxHeight = books[i - 1][1];
            dp[i] = books[i - 1][1] + dp[i - 1];

            int j = i - 1;
            // calculate the height when previous books are added onto a new shelf
            while (j > 0 && remainingShelfWidth - books[j - 1][0] >= 0) {
                maxHeight = Math.max(maxHeight, books[j - 1][1]);
                remainingShelfWidth -= books[j - 1][0];
                dp[i] = Math.min(dp[i], maxHeight + dp[j - 1]);
                j--;
            }
        }

        return dp[books.length];
    }
}



or


class Solution {
    public int minHeightShelves(int[][] books, int shelfWidth) {
        int n = books.length;
        int[] dp = new int[n + 1];
        Arrays.fill(dp, Integer.MAX_VALUE);
        dp[0] = 0;  // Base case: no books require 0 height
        
        for (int i = 1; i <= n; ++i) {
            int total_width = 0;
            int max_height = 0;
            for (int j = i; j > 0; --j) {
                total_width += books[j-1][0];
                if (total_width > shelfWidth) {
                    break;
                }
                max_height = Math.max(max_height, books[j-1][1]);
                dp[i] = Math.min(dp[i], dp[j-1] + max_height);
            }
        }
        
        return dp[n];
    }
}


or


class Solution {
    public int minHeightShelves(int[][] books, int shelfWidth) {
        int n = books.length;
        int[] f = new int[n + 1];
        for (int i = 1; i <= n; ++i) {
            int w = books[i - 1][0], h = books[i - 1][1];
            f[i] = f[i - 1] + h;
            for (int j = i - 1; j > 0; --j) {
                w += books[j - 1][0];
                if (w > shelfWidth) {
                    break;
                }
                h = Math.max(h, books[j - 1][1]);
                f[i] = Math.min(f[i], f[j - 1] + h);
            }
        }
        return f[n];
    }
}


or


class Solution {
    public int minHeightShelves(int[][] books, int shelfWidth) {
        return arrangeBooks(books, shelfWidth);
    }

    private int arrangeBooks(int[][] books, int maxShelfWidth) {
        int[] minHeights = new int[books.length + 1];
        
        for (int bookIndex = 1; bookIndex <= books.length; bookIndex++) {
            minHeights[bookIndex] = Integer.MAX_VALUE;
            int currentShelfHeight = 0;
            int currentShelfWidth = 0;
            
            for (int lastBook = bookIndex - 1; lastBook >= 0; lastBook--) {
                int currentBookThickness = books[lastBook][0];
                int currentBookHeight = books[lastBook][1];
                
                if (currentShelfWidth + currentBookThickness > maxShelfWidth) {
                    break;
                }
                
                currentShelfWidth += currentBookThickness;
                currentShelfHeight = Math.max(currentShelfHeight, currentBookHeight);
                
                int currentArrangementHeight = minHeights[lastBook] + currentShelfHeight;
                minHeights[bookIndex] = Math.min(minHeights[bookIndex], currentArrangementHeight);
            }
        }
        
        return minHeights[books.length];
    }
}


or



class Solution {
    public int minHeightShelves(int[][] books, int shelfWidth) {
        int[][] memo = new int[books.length][shelfWidth + 1];
        return dpHelper(books, shelfWidth, memo, 0, shelfWidth, 0);
    }

    private int dpHelper(int[][] books, int shelfWidth, int[][] memo, int i, int remainingWidth, int currentHeight) {
        if (i == books.length) return currentHeight;

        if (memo[i][remainingWidth] != 0) return memo[i][remainingWidth];

        int currentBookWidth = books[i][0], currentBookHeight = books[i][1];

        // Option 1: Put book on a new shelf
        int newShelfHeight = currentHeight + dpHelper(books, shelfWidth, memo, i + 1, shelfWidth - currentBookWidth, currentBookHeight);

        // Option 2: Put book on current shelf (if possible)
        int currentShelfHeight = Integer.MAX_VALUE;
        if (remainingWidth >= currentBookWidth) {
            int newHeight = Math.max(currentHeight, currentBookHeight);
            currentShelfHeight = dpHelper(books, shelfWidth, memo, i + 1, remainingWidth - currentBookWidth, newHeight);
        }

        int result = Math.min(newShelfHeight, currentShelfHeight);
        memo[i][remainingWidth] = result;
        return result;
    }
}
