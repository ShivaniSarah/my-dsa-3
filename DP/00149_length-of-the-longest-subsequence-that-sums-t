https://leetcode.com/problems/length-of-the-longest-subsequence-that-sums-to-target/description/

2915. Length of the Longest Subsequence That Sums to Target
Medium
Topics
Companies
Hint
You are given a 0-indexed array of integers nums, and an integer target.

Return the length of the longest subsequence of nums that sums up to target. If no such subsequence exists, return -1.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [1,2,3,4,5], target = 9
Output: 3
Explanation: There are 3 subsequences with a sum equal to 9: [4,5], [1,3,5], and [2,3,4]. The longest subsequences are [1,3,5], and [2,3,4]. Hence, the answer is 3.
Example 2:

Input: nums = [4,1,3,2,1,5], target = 7
Output: 4
Explanation: There are 5 subsequences with a sum equal to 7: [4,3], [4,1,2], [4,2,1], [1,1,5], and [1,3,2,1]. The longest subsequence is [1,3,2,1]. Hence, the answer is 4.
Example 3:

Input: nums = [1,1,5,4,5], target = 3
Output: -1
Explanation: It can be shown that nums has no subsequence that sums up to 3.
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 1000
1 <= target <= 1000


# java


class Solution {
  public int lengthOfLongestSubsequence(List<Integer> nums, int target) {
    final int n = nums.size();
    // dp[i][j] := the maximum length of any subsequence of the first i numbers
    // that sum to j
    int[][] dp = new int[n + 1][target + 1];
    Arrays.stream(dp).forEach(A -> Arrays.fill(A, -1));

    for (int i = 0; i <= n; ++i)
      dp[i][0] = 0;

    for (int i = 1; i <= n; ++i) {
      final int num = nums.get(i - 1);
      for (int j = 1; j <= target; ++j) {
        // 1. Skip `num`.
        if (j < num || dp[i - 1][j - num] == -1)
          dp[i][j] = dp[i - 1][j];
        // 2. Skip `num` or pick `num`.
        else
          dp[i][j] = Math.max(dp[i - 1][j], 1 + dp[i - 1][j - num]);
      }
    }

    return dp[n][target];
  }
}


or


class Solution {
  public int lengthOfLongestSubsequence(List<Integer> nums, int target) {
    // dp[i] := the maximum length of any subsequence of numbers so far that
    // sum to j
    int[] dp = new int[target + 1];

    for (final int num : nums)
      for (int i = target; i >= num; --i)
        if (i == num || dp[i - num] > 0)
          dp[i] = Math.max(dp[i], 1 + dp[i - num]);

    return dp[target] > 0 ? dp[target] : -1;
  }
}



or


class Solution {
    public int lengthOfLongestSubsequence(List<Integer> nums, int target) {
        int n = nums.size();
        int[][] f = new int[n + 1][target + 1];
        final int inf = 1 << 30;
        for (int[] g : f) {
            Arrays.fill(g, -inf);
        }
        f[0][0] = 0;
        for (int i = 1; i <= n; ++i) {
            int x = nums.get(i - 1);
            for (int j = 0; j <= target; ++j) {
                f[i][j] = f[i - 1][j];
                if (j >= x) {
                    f[i][j] = Math.max(f[i][j], f[i - 1][j - x] + 1);
                }
            }
        }
        return f[n][target] <= 0 ? -1 : f[n][target];
    }
}


or


class Solution {
    private int solve(List<Integer> nums, int i, int target, Integer[][] dp) {
        if(target == 0) {
            return 1;
        }
        if(target < 0 || i < 0) {
            return 0;
        }
        
        if(dp[i][target] != null) {
            return dp[i][target];
        }
        
        int include = solve(nums, i-1, target-nums.get(i), dp);
        int dontInclude = solve(nums, i-1, target, dp);
        
        int res = 0;
        if(include == 0 && dontInclude == 0) {
            res = 0;
        } else {
            res = Math.max(include+1, dontInclude);
        }
        return dp[i][target] = res;
    }
    public int lengthOfLongestSubsequence(List<Integer> nums, int target) {
        return solve(nums, nums.size()-1, target, new Integer[nums.size()][target+1])-1;
    }
}
