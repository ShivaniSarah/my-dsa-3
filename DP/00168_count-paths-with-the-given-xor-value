https://leetcode.com/problems/count-paths-with-the-given-xor-value/description/


3393. Count Paths With the Given XOR Value
Medium
Topics
Companies
Hint
You are given a 2D integer array grid with size m x n. You are also given an integer k.

Your task is to calculate the number of paths you can take from the top-left cell (0, 0) to the bottom-right cell (m - 1, n - 1) satisfying the following constraints:

You can either move to the right or down. Formally, from the cell (i, j) you may move to the cell (i, j + 1) or to the cell (i + 1, j) if the target cell exists.
The XOR of all the numbers on the path must be equal to k.
Return the total number of such paths.

Since the answer can be very large, return the result modulo 109 + 7.

 

Example 1:

Input: grid = [[2, 1, 5], [7, 10, 0], [12, 6, 4]], k = 11

Output: 3

Explanation: 

The 3 paths are:

(0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2)
(0, 0) → (1, 0) → (1, 1) → (1, 2) → (2, 2)
(0, 0) → (0, 1) → (1, 1) → (2, 1) → (2, 2)
Example 2:

Input: grid = [[1, 3, 3, 3], [0, 3, 3, 2], [3, 0, 1, 1]], k = 2

Output: 5

Explanation:

The 5 paths are:

(0, 0) → (1, 0) → (2, 0) → (2, 1) → (2, 2) → (2, 3)
(0, 0) → (1, 0) → (1, 1) → (2, 1) → (2, 2) → (2, 3)
(0, 0) → (1, 0) → (1, 1) → (1, 2) → (1, 3) → (2, 3)
(0, 0) → (0, 1) → (1, 1) → (1, 2) → (2, 2) → (2, 3)
(0, 0) → (0, 1) → (0, 2) → (1, 2) → (2, 2) → (2, 3)
Example 3:

Input: grid = [[1, 1, 1, 2], [3, 0, 3, 2], [3, 0, 2, 2]], k = 10

Output: 0

 

Constraints:

1 <= m == grid.length <= 300
1 <= n == grid[r].length <= 300
0 <= grid[r][c] < 16
0 <= k < 16


# java


class Solution {
  public int countPathsWithXorValue(int[][] grid, int k) {
    final int MAX = 15;
    final int m = grid.length;
    final int n = grid[0].length;
    Integer[][][] mem = new Integer[m][n][MAX + 1];
    return count(grid, 0, 0, 0, k, mem);
  }

  private static final int MOD = 1_000_000_007;

  // Return the number of paths from (i, j) to (m - 1, n - 1) with XOR value
  // `xors`.
  private int count(int[][] grid, int i, int j, int xors, int k, Integer[][][] mem) {
    if (i == grid.length || j == grid[0].length)
      return 0;
    xors ^= grid[i][j];
    if (i == grid.length - 1 && j == grid[0].length - 1)
      return xors == k ? 1 : 0;
    if (mem[i][j][xors] != null)
      return mem[i][j][xors];
    final int right = count(grid, i, j + 1, xors, k, mem) % MOD;
    final int down = count(grid, i + 1, j, xors, k, mem) % MOD;
    return mem[i][j][xors] = (right + down) % MOD;
  }
}




or


class Solution {
  public int countPathsWithXorValue(int[][] grid, int k) {
    final int MOD = 1_000_000_007;
    final int MAX = 15;
    final int m = grid.length;
    final int n = grid[0].length;
    // dp[i][j][xors] := the number of paths from (i, j) to (m - 1, n - 1) with
    // XOR value `xors`
    int[][][] dp = new int[m][n][MAX + 1];

    dp[m - 1][n - 1][grid[m - 1][n - 1]] = 1;

    for (int i = m - 1; i >= 0; --i)
      for (int j = n - 1; j >= 0; --j)
        for (int xors = 0; xors <= MAX; ++xors) {
          if (i - 1 >= 0) {
            final int newXor = xors ^ grid[i - 1][j];
            dp[i - 1][j][newXor] += dp[i][j][xors];
            dp[i - 1][j][newXor] %= MOD;
          }
          if (j - 1 >= 0) {
            final int newXor = xors ^ grid[i][j - 1];
            dp[i][j - 1][newXor] += dp[i][j][xors];
            dp[i][j - 1][newXor] %= MOD;
          }
        }

    return dp[0][0][k];
  }
}


or


class Solution {
  public int countPathsWithXorValue(int[][] grid, int k) {
    final int MOD = 1_000_000_007;
    final int MAX = 15;
    final int m = grid.length;
    final int n = grid[0].length;
    // dp[i][j][xors] := the number of paths from (0, 0) to (i, j) with XOR
    // value `xors`
    int[][][] dp = new int[m][n][MAX + 1];

    dp[0][0][grid[0][0]] = 1;

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        for (int xors = 0; xors <= MAX; ++xors) {
          if (i + 1 < m) {
            final int newXor = xors ^ grid[i + 1][j];
            dp[i + 1][j][newXor] += dp[i][j][xors];
            dp[i + 1][j][newXor] %= MOD;
          }
          if (j + 1 < n) {
            final int newXor = xors ^ grid[i][j + 1];
            dp[i][j + 1][newXor] += dp[i][j][xors];
            dp[i][j + 1][newXor] %= MOD;
          }
        }

    return dp[m - 1][n - 1][k];
  }
}



or


class Solution {
    int mod = 1_000_000_007;
    int[][] grid;
    int k, n, m;
    int[][][] dp;

    public int f(int i, int j, int curr) {
        if (i >= n || j >= m) return 0;
        
        curr ^= grid[i][j];
        
        if (i == n - 1 && j == m - 1) {
            return curr == k ? 1 : 0;
        }
        
        if (dp[i][j][curr] != -1) return dp[i][j][curr];
        
        int right = f(i, j + 1, curr) % mod;
        int down = f(i + 1, j, curr) % mod;
        
        dp[i][j][curr] = (right + down) % mod;
        return dp[i][j][curr];
    }

    public int countPathsWithXorValue(int[][] grid, int k) {
        this.grid = grid;
        this.k = k;
        n = grid.length;
        m = grid[0].length;
        
        dp = new int[n][m][20];
        for (int[][] layer : dp) {
            for (int[] row : layer) {
                java.util.Arrays.fill(row, -1);
            }
        }
        
        return f(0, 0, 0);
    }
}


or


class Solution {
    int mod = 1_000_000_007;
    int[][] grid;
    int k, n, m;
    int[][][] dp;

    public int f(int i, int j, int curr) {
        if (i >= n || j >= m) return 0;
        
        curr ^= grid[i][j];
        
        if (i == n - 1 && j == m - 1) {
            return curr == k ? 1 : 0;
        }
        
        if (dp[i][j][curr] != -1) return dp[i][j][curr];
        
        int right = f(i, j + 1, curr) % mod;
        int down = f(i + 1, j, curr) % mod;
        
        dp[i][j][curr] = (right + down) % mod;
        return dp[i][j][curr];
    }

    public int countPathsWithXorValue(int[][] grid, int k) {
        this.grid = grid;
        this.k = k;
        n = grid.length;
        m = grid[0].length;
        
        dp = new int[n][m][20];
        for (int[][] layer : dp) {
            for (int[] row : layer) {
                java.util.Arrays.fill(row, -1);
            }
        }
        
        return f(0, 0, 0);
    }
}


or


class Solution {
    private static final int MOD = 1000000007;
    
    public int countPathsWithXorValue(int[][] grid, int k) {
        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][16];
        dp[0][0][grid[0][0]] = 1;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i > 0) {
                    for (int prevXor = 0; prevXor < 16; prevXor++) {
                        int count = dp[i - 1][j][prevXor];
                        if (count != 0) {
                            int newXor = prevXor ^ grid[i][j];
                            dp[i][j][newXor] = (int)((dp[i][j][newXor] + (long)count) % MOD);
                        }
                    }
                }
                if (j > 0) {
                    for (int prevXor = 0; prevXor < 16; prevXor++) {
                        int count = dp[i][j - 1][prevXor];
                        if (count != 0) {
                            int newXor = prevXor ^ grid[i][j];
                            dp[i][j][newXor] = (int)((dp[i][j][newXor] + (long)count) % MOD);
                        }
                    }
                }
            }
        }
        return dp[m - 1][n - 1][k] % MOD;
    }
}


or



class Solution {
    private static final int MOD = 1000000007;
    
    public int countPathsWithXorValue(int[][] grid, int k) {
        int m = grid.length;
        int n = grid[0].length;
        int[][][] dp = new int[m][n][16];
        dp[0][0][grid[0][0]] = 1;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                if (i > 0) {
                    for (int prevXor = 0; prevXor < 16; prevXor++) {
                        int count = dp[i - 1][j][prevXor];
                        if (count != 0) {
                            int newXor = prevXor ^ grid[i][j];
                            dp[i][j][newXor] = (int)((dp[i][j][newXor] + (long)count) % MOD);
                        }
                    }
                }
                if (j > 0) {
                    for (int prevXor = 0; prevXor < 16; prevXor++) {
                        int count = dp[i][j - 1][prevXor];
                        if (count != 0) {
                            int newXor = prevXor ^ grid[i][j];
                            dp[i][j][newXor] = (int)((dp[i][j][newXor] + (long)count) % MOD);
                        }
                    }
                }
            }
        }
        return dp[m - 1][n - 1][k] % MOD;
    }
}


or


class Solution {
    private int m, n, MOD = 1000000007;

    public int countPathsWithXorValue(int[][] grid, int k) {
        m = grid.length;
        n = grid[0].length;
        int max_xor = 1 << 7;
        
        int[][][] dp = new int[m][n][max_xor];

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                for (int x = 0; x < max_xor; x++) {
                    dp[i][j][x] = -1;
                }
            }
        }
        return dfs(0, 0, 0, grid, k, dp);
    }

    private int dfs(int row, int col, int current_xor, int[][] grid, int k, int[][][] dp) {
        current_xor ^= grid[row][col];
        if (row == m - 1 && col == n - 1) {
            return (current_xor == k) ? 1 : 0;
        }

        if (dp[row][col][current_xor] != -1) {
            return dp[row][col][current_xor];
        }

        int paths = 0;
        if (row + 1 < m) {
            paths = (paths + dfs(row + 1, col, current_xor, grid, k, dp)) % MOD;
        }
        if (col + 1 < n) {
            paths = (paths + dfs(row, col + 1, current_xor, grid, k, dp)) % MOD;
        }

        dp[row][col][current_xor] = paths;
        return paths;
    }
}


