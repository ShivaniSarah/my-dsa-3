https://leetcode.com/problems/maximum-length-of-subarray-with-positive-product/description/

1567. Maximum Length of Subarray With Positive Product
Medium
Topics
Companies
Hint
Given an array of integers nums, find the maximum length of a subarray where the product of all its elements is positive.

A subarray of an array is a consecutive sequence of zero or more values taken out of that array.

Return the maximum length of a subarray with positive product.

 

Example 1:

Input: nums = [1,-2,-3,4]
Output: 4
Explanation: The array nums already has a positive product of 24.
Example 2:

Input: nums = [0,1,-2,-3,-4]
Output: 3
Explanation: The longest subarray with positive product is [1,-2,-3] which has a product of 6.
Notice that we cannot include 0 in the subarray since that'll make the product 0 which is not positive.
Example 3:

Input: nums = [-1,-2,-3,0,1]
Output: 2
Explanation: The longest subarray with positive product is [-1,-2] or [-2,-3].
 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109


# java


class Solution {
    public int getMaxLen(int[] nums) {
        int i=0;
        int j=nums.length;
        int res=0;
		
        while(i<j){
            int s=i;
			
            int numberOfNegativeNumbers=0;
			
            int firstNegativeNumber = s , lastNegativeNumber = s;
			
            while(s<j&&nums[s]!=0){
			
                if(nums[s]<0){
				
                    if(numberOfNegativeNumbers == 0)
                        firstNegativeNumber = s;
						
                    numberOfNegativeNumbers++;
                    lastNegativeNumber = s;
                }
				
                s++;
				
            }
			
            s--;
			
            if(numberOfNegativeNumbers % 2 == 0 ){
                res=Math.max(res,s-i+1);
            }
            else{
                res=Math.max( res ,Math.max( lastNegativeNumber - i , s- firstNegativeNumber));
            }
			
            s++;
            i=++s;
        }
		
        return res;
		
    }
}


or


class Solution {
    public int getMaxLen(int[] nums) {
        // llp = Length of the longest positive subarray
        int llp = 0;
        // lln = length of the longest negative subarray
        int lln = 0;
        // max length of the positive subarray
        int max = 0;
        for (int i = 0; i < nums.length; i++) {
            // Reset the lengths upon encountering a zero
            if (nums[i] == 0) {
                llp = lln = 0;
            } else if (nums[i] > 0) {
                // Upon encountering a positive value, increase the length of the positive subarray till now by one
                llp++;
                // Increase the length of the negative subarray only if there's a negative product. 
                // If there are no negative numbers before the current number or if the (i-1)th number is zero, we should not increase this value.
                if (lln > 0) lln++;
            } else {
                // Upon encountering a negative value, the lengths of the positive and negative subarrays need to be swapped.
                int temp = llp;
                // If there are no negative numbers before the current number, then llp should be zero. 
                // so we need an extra check to ensure that
                llp = (lln > 0 ? lln + 1 : 0);
                lln = temp + 1;
            }
            max = Math.max(max, llp);
        }
        return max;
    }
}
