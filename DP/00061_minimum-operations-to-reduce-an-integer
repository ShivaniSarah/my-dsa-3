https://leetcode.com/problems/minimum-operations-to-reduce-an-integer-to-0/description/

2571. Minimum Operations to Reduce an Integer to 0
Medium
Topics
Companies
Hint
You are given a positive integer n, you can do the following operation any number of times:

Add or subtract a power of 2 from n.
Return the minimum number of operations to make n equal to 0.

A number x is power of 2 if x == 2i where i >= 0.

 

Example 1:

Input: n = 39
Output: 3
Explanation: We can do the following operations:
- Add 20 = 1 to n, so now n = 40.
- Subtract 23 = 8 from n, so now n = 32.
- Subtract 25 = 32 from n, so now n = 0.
It can be shown that 3 is the minimum number of operations we need to make n equal to 0.
Example 2:

Input: n = 54
Output: 3
Explanation: We can do the following operations:
- Add 21 = 2 to n, so now n = 56.
- Add 23 = 8 to n, so now n = 64.
- Subtract 26 = 64 from n, so now n = 0.
So the minimum number of operations is 3.
 

Constraints:

1 <= n <= 105


# java


class Solution {
  public int minOperations(int n) {
    // The strategy is that when the end of n is
    //   1. consecutive 1s, add 1 (2^0).
    //   2. single 1, substract 1 (2^0).
    //   3. 0, substract 2^k to omit the last 1. Equivalently, n >> 1.
    //
    // e.g.
    //
    //         n = 0b101
    // n -= 2^0 -> 0b100
    // n -= 2^2 -> 0b0
    //         n = 0b1011
    // n += 2^0 -> 0b1100
    // n -= 2^2 -> 0b1000
    // n -= 2^3 -> 0b0
    int ans = 0;

    while (n > 0)
      if ((n & 3) == 3) {
        ++n;
        ++ans;
      } else if (n % 2 == 1) {
        --n;
        ++ans;
      } else {
        n >>= 1;
      }

    return ans;
  }
}


or



class Solution {
    public int minOperations(int n) {
        int ans = 0, cnt = 0;
        for (; n > 0; n >>= 1) {
            if ((n & 1) == 1) {
                ++cnt;
            } else if (cnt > 0) {
                ++ans;
                cnt = cnt == 1 ? 0 : 1;
            }
        }
        ans += cnt == 1 ? 1 : 0;
        ans += cnt > 1 ? 2 : 0;
        return ans;
    }
}


or


class Solution {
    public int minOperations(int n) {
        int x=n;
        int cnt=0;
        while(x!=0){
            int floor=(int)Math.floor(Math.log(x)/Math.log(2));
            int ceil=(int)Math.ceil(Math.log(x)/Math.log(2));
            x=Math.min(Math.abs((1<<floor)-x),Math.abs((1<<ceil)-x));
            cnt++;
        }
        return cnt;
    }
}
