https://leetcode.com/problems/ways-to-split-array-into-good-subarrays/description/

2750. Ways to Split Array Into Good Subarrays
Medium
Topics
Companies
Hint
You are given a binary array nums.

A subarray of an array is good if it contains exactly one element with the value 1.

Return an integer denoting the number of ways to split the array nums into good subarrays. As the number may be too large, return it modulo 109 + 7.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [0,1,0,0,1]
Output: 3
Explanation: There are 3 ways to split nums into good subarrays:
- [0,1] [0,0,1]
- [0,1,0] [0,1]
- [0,1,0,0] [1]
Example 2:

Input: nums = [0,1,0]
Output: 1
Explanation: There is 1 way to split nums into good subarrays:
- [0,1,0]
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 1


# java


class Solution {
  public int numberOfGoodSubarraySplits(int[] nums) {
    if (Arrays.stream(nums).filter(num -> num == 1).count() == 0)
      return 0;

    final int MOD = 1_000_000_007;
    int prev = -1; // the previous index of 1
    int ans = 1;

    for (int i = 0; i < nums.length; ++i)
      if (nums[i] == 1) {
        if (prev != -1)
          ans = (int) ((long) ans * (i - prev) % MOD);
        prev = i;
      }

    return ans;
  }
}





or


class Solution {
    public int numberOfGoodSubarraySplits(int[] nums) {
        final int mod = (int) 1e9 + 7;
        int ans = 1, j = -1;
        for (int i = 0; i < nums.length; ++i) {
            if (nums[i] == 0) {
                continue;
            }
            if (j > -1) {
                ans = (int) ((long) ans * (i - j) % mod);
            }
            j = i;
        }
        return j == -1 ? 0 : ans;
    }
}


or


class Solution {
    public int numberOfGoodSubarraySplits(int[] nums) {
        long cnt = 0;
        for (int lo = -1, hi = 0; hi < nums.length; ++hi) {
            if (nums[hi] == 1) {
                if (cnt == 0) {
                    cnt = 1;
                } else {
                    cnt *= hi - lo;
                    cnt %= 1_000_000_007;
                }
                lo = hi;
            }
        }
        return (int) cnt;
    }
}


