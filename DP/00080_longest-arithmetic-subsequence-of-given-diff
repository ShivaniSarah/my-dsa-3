https://leetcode.com/problems/longest-arithmetic-subsequence-of-given-difference/

1218. Longest Arithmetic Subsequence of Given Difference
Medium
Topics
Companies
Hint
Given an integer array arr and an integer difference, return the length of the longest subsequence in arr which is an arithmetic sequence such that the difference between adjacent elements in the subsequence equals difference.

A subsequence is a sequence that can be derived from arr by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: arr = [1,2,3,4], difference = 1
Output: 4
Explanation: The longest arithmetic subsequence is [1,2,3,4].
Example 2:

Input: arr = [1,3,5,7], difference = 1
Output: 1
Explanation: The longest arithmetic subsequence is any single element.
Example 3:

Input: arr = [1,5,7,8,5,3,4,2,1], difference = -2
Output: 4
Explanation: The longest arithmetic subsequence is [7,5,3,1].
 

Constraints:

1 <= arr.length <= 105
-104 <= arr[i], difference <= 104


# java

class Solution {
  public int longestSubsequence(int[] arr, int difference) {
    int ans = 0;
    Map<Integer, Integer> lengthAt = new HashMap<>();

    for (final int a : arr) {
      lengthAt.put(a, lengthAt.getOrDefault(a - difference, 0) + 1);
      ans = Math.max(ans, lengthAt.get(a));
    }

    return ans;
  }
}


or


class Solution {
    public int longestSubsequence(int[] arr, int difference) {
        Map<Integer, Integer> f = new HashMap<>();
        int ans = 0;
        for (int x : arr) {
            f.put(x, f.getOrDefault(x - difference, 0) + 1);
            ans = Math.max(ans, f.get(x));
        }
        return ans;
    }
}

or


class Solution {
    public int helper(int index, int prev, int[] arr, int diff) {
        int n = arr.length;
        if (index >= n) {
            return 0;
        }

        int take = 0;
        int notake = 0;
        if (prev == -10000) {
            notake = helper(index + 1, prev, arr, diff);
            take = 1 + helper(index + 1, arr[index], arr, diff);
        } else {
            notake = helper(index + 1, prev, arr, diff);
            if (arr[index] - prev == diff) {
                take = 1 + helper(index + 1, arr[index], arr, diff);
            }
        }
        return Math.max(take, notake);
    }

    public int longestSubsequence(int[] arr, int difference) {
        int n = arr.length;
        return helper(0, -10000, arr, difference);
    }
}


or


class Solution {
    public int longestSubsequence(int[] arr, int difference) {
        Map<Integer, Integer> m = new HashMap<>();
        int mx = 0;
        for (int i = 0; i < arr.length; i++) {
            int c = arr[i];
            if (m.containsKey(c - difference))
                m.put(c, m.get(c - difference) + 1);
            else
                m.put(c, 1);
            mx = Math.max(mx, m.get(c));
        }
        return mx;
    }
}


or


class Solution {
    public int longestSubsequence(int[] arr, int d) {
        Map<Integer, Integer> mp = new HashMap<>();
        int mx = 0;
        for (int i : arr) {
            mp.put(i, mp.getOrDefault(i - d, 0) + 1);
            mx = Math.max(mp.get(i), mx);
        }
        return mx;
    }
}
