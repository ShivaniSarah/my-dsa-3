https://leetcode.com/problems/4-keys-keyboard/description/



651. 4 Keys Keyboard
Description
Imagine you have a special keyboard with the following keys:

A: Print one 'A' on the screen.
Ctrl-A: Select the whole screen.
Ctrl-C: Copy selection to buffer.
Ctrl-V: Print buffer on screen appending it after what has already been printed.
Given an integer n, return the maximum number of 'A' you can print on the screen with at most n presses on the keys.

 

Example 1:

Input: n = 3
Output: 3
Explanation: We can at most get 3 A's on screen by pressing the following key sequence:
A, A, A
Example 2:

Input: n = 7
Output: 9
Explanation: We can at most get 9 A's on screen by pressing following key sequence:
A, A, A, Ctrl A, Ctrl C, Ctrl V, Ctrl V
 

Constraints:

1 <= n <= 50




# java



class Solution {
  public int maxA(int n) {
    int ans = n;

    for (int i = 1; i <= n - 3; ++i)
      ans = Math.max(ans, maxA(i) * (n - 1 - i));

    return ans;
  }
}



or



class Solution {
  public int maxA(int n) {
    // dp[i] := the maximum 'A' can be printed with i pressings
    int[] dp = new int[n + 1];

    for (int i = 0; i <= n; ++i) {
      dp[i] = i; // 'A' * i
      for (int j = 0; j <= i - 3; ++j)
        dp[i] = Math.max(dp[i], dp[j] * (i - j - 1));
    }

    return dp[n];
  }
}


or




class Solution {
    public int maxA(int n) {
        int[] dp = new int[n + 1];
        for (int i = 0; i < n + 1; ++i) {
            dp[i] = i;
        }
        for (int i = 3; i < n + 1; ++i) {
            for (int j = 2; j < i - 1; ++j) {
                dp[i] = Math.max(dp[i], dp[j - 1] * (i - j));
            }
        }
        return dp[n];
    }
}



