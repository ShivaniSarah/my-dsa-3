https://leetcode.com/problems/minimum-path-cost-in-a-grid/description/


2304. Minimum Path Cost in a Grid
Medium
Topics
Companies
Hint
You are given a 0-indexed m x n integer matrix grid consisting of distinct integers from 0 to m * n - 1. You can move in this matrix from a cell to any other cell in the next row. That is, if you are in cell (x, y) such that x < m - 1, you can move to any of the cells (x + 1, 0), (x + 1, 1), ..., (x + 1, n - 1). Note that it is not possible to move from cells in the last row.

Each possible move has a cost given by a 0-indexed 2D array moveCost of size (m * n) x n, where moveCost[i][j] is the cost of moving from a cell with value i to a cell in column j of the next row. The cost of moving from cells in the last row of grid can be ignored.

The cost of a path in grid is the sum of all values of cells visited plus the sum of costs of all the moves made. Return the minimum cost of a path that starts from any cell in the first row and ends at any cell in the last row.

 

Example 1:


Input: grid = [[5,3],[4,0],[2,1]], moveCost = [[9,8],[1,5],[10,12],[18,6],[2,4],[14,3]]
Output: 17
Explanation: The path with the minimum possible cost is the path 5 -> 0 -> 1.
- The sum of the values of cells visited is 5 + 0 + 1 = 6.
- The cost of moving from 5 to 0 is 3.
- The cost of moving from 0 to 1 is 8.
So the total cost of the path is 6 + 3 + 8 = 17.
Example 2:

Input: grid = [[5,1,2],[4,0,3]], moveCost = [[12,10,15],[20,23,8],[21,7,1],[8,1,13],[9,10,25],[5,3,2]]
Output: 6
Explanation: The path with the minimum possible cost is the path 2 -> 3.
- The sum of the values of cells visited is 2 + 3 = 5.
- The cost of moving from 2 to 3 is 1.
So the total cost of this path is 5 + 1 = 6.
 

Constraints:

m == grid.length
n == grid[i].length
2 <= m, n <= 50
grid consists of distinct integers from 0 to m * n - 1.
moveCost.length == m * n
moveCost[i].length == n
1 <= moveCost[i][j] <= 100


# java



class Solution {
        public int minPathCost(int[][] grid, int[][] moveCost) {
        int m = grid.length, n = grid[0].length;
        int[][] cost = new int[m][n];
        for (int c = 0; c < n; ++c) {
            cost[0][c] = grid[0][c];
        }
        for (int r = 1; r < m; ++r) {
            for (int c = 0; c < n; ++c) {
                int mi = Integer.MAX_VALUE;
                for (int j = 0; j < n; ++j) {
                    mi = Math.min(mi, cost[r - 1][j] + moveCost[grid[r - 1][j]][c]);
                }
                cost[r][c] = mi + grid[r][c];
            }
        }
        return IntStream.of(cost[m - 1]).min().getAsInt();
    }
}


or


class Solution {
           public int minPathCost(int[][] grid, int[][] moveCost) {
        int m = grid.length, n = grid[0].length;
        int[][] cost = new int[2][n];
        cost[0] = grid[0].clone();
        for (int r = 1; r < m; ++r) {
            for (int c = 0; c < n; ++c) {
                int min = Integer.MAX_VALUE;
                for (int j = 0; j < n; ++j) {
                    min = Math.min(min, cost[1 - r % 2][j] + moveCost[grid[r - 1][j]][c]);
                }
                cost[r % 2][c] = min + grid[r][c];
            }
        }
        return IntStream.of(cost[1 - m % 2]).min().getAsInt();
    }
}



or


// tle
class Solution {
    private int fun(int idx, int jdx, int m, int n, int[][] grid, int[][] moveCost) {
        // base case
        if (idx == m - 1) return grid[idx][jdx];

        // explore all paths i.e. move in every column from 0 to n
        int ans = Integer.MAX_VALUE;
        for (int j = 0; j < n; j++) {
            int x = grid[idx][jdx];
            int curCost = moveCost[x][j];
            ans = Math.min(ans, fun(idx + 1, j, m, n, grid, moveCost) + curCost + x);
        }

        return ans;
    }

    public int minPathCost(int[][] grid, int[][] moveCost) {
        int ans = Integer.MAX_VALUE;
        int m = grid.length;
        int n = grid[0].length;
        for (int j = 0; j < n; j++) {
            ans = Math.min(ans, fun(0, j, m, n, grid, moveCost));
        }
        return ans;
    }
}

or


class Solution {
    int fun(int idx, int jdx, int m, int n, int[][] grid, int[][] moveCost, int [][] dp){
        // base case
        if(idx==m-1) return grid[idx][jdx];

        if(dp[idx][jdx] != -1) return dp[idx][jdx];

        // explore all paths i.e. move in every column from 0 to n
        int ans = Integer.MAX_VALUE;
        for(int j = 0; j < n; j++){
            int x = grid[idx][jdx];
            int cur_cost = moveCost[x][j];
            ans = Math.min(ans, fun(idx+1, j, m, n, grid, moveCost, dp) + cur_cost + x);
        }

        return dp[idx][jdx] =  ans;
    }
    public int minPathCost(int[][] grid, int[][] moveCost) {
        int ans = Integer.MAX_VALUE, m = grid.length, n = grid[0].length;

        int[][] dp = new int[m+1][n+1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        for(int j=0;j<n;j++){
            ans = Math.min(ans, fun(0, j, m, n, grid, moveCost, dp));
        }
        return ans;
    }
}
