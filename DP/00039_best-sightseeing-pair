https://leetcode.com/problems/best-sightseeing-pair/description/

1014. Best Sightseeing Pair
Medium
Topics
Companies
Hint
You are given an integer array values where values[i] represents the value of the ith sightseeing spot. Two sightseeing spots i and j have a distance j - i between them.

The score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j: the sum of the values of the sightseeing spots, minus the distance between them.

Return the maximum score of a pair of sightseeing spots.

 

Example 1:

Input: values = [8,1,5,2,6]
Output: 11
Explanation: i = 0, j = 2, values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11
Example 2:

Input: values = [1,2]
Output: 2
 

Constraints:

2 <= values.length <= 5 * 104
1 <= values[i] <= 1000


# java


class Solution {
    public int maxScoreSightseeingPair(int[] values) {
        int ans = Integer.MIN_VALUE;
        int m = values[0];

        for (int i = 1; i < values.length; i++) {
            if (values[i] - i + m > ans) 
                ans = values[i] - i + m;
            
            if (values[i] + i > m) 
                m = values[i] + i;
        }

        return ans;
    }
}


or

class Solution {
    public int maxScoreSightseeingPair(int[] A) {
		//Intitialize previously seen value of A[i] + i
        int prev_max = A[0]+0;
		//Initialize the value of first pair
        int res = A[0] + A[1] - 1;
        for(int j = 1; j < A.length; j++){
			//update res if a higher value of prev_max+A[j]-j is found
            res = Math.max(prev_max + A[j] - j, res);
			//Update prev_max
            prev_max = Math.max(A[j] + j, prev_max);
        }
        return res;
    }
}


or


class Solution {
    public int maxScoreSightseeingPair(int[] values) {
        int n = values.length;
        int[] suffixMax = new int[n];
        suffixMax[n - 1] = values[n - 1] - (n - 1);

        for (int i = n - 2; i >= 0; i--) {
            suffixMax[i] = Math.max(suffixMax[i + 1], values[i] - i);
        }

        int maxScore = Integer.MIN_VALUE;

        for (int i = 0; i < n - 1; i++) {
            maxScore = Math.max(maxScore, values[i] + i + suffixMax[i + 1]);
        }

        return maxScore;
    }
}
