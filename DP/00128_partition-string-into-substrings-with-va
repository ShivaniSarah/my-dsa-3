https://leetcode.com/problems/partition-string-into-substrings-with-values-at-most-k/description/

2522. Partition String Into Substrings With Values at Most K
Medium
Topics
Companies
You are given a string s consisting of digits from 1 to 9 and an integer k.

A partition of a string s is called good if:

Each digit of s is part of exactly one substring.
The value of each substring is less than or equal to k.
Return the minimum number of substrings in a good partition of s. If no good partition of s exists, return -1.

Note that:

The value of a string is its result when interpreted as an integer. For example, the value of "123" is 123 and the value of "1" is 1.
A substring is a contiguous sequence of characters within a string.
 

Example 1:

Input: s = "165462", k = 60
Output: 4
Explanation: We can partition the string into substrings "16", "54", "6", and "2". Each substring has a value less than or equal to k = 60.
It can be shown that we cannot partition the string into less than 4 substrings.
Example 2:

Input: s = "238182", k = 5
Output: -1
Explanation: There is no good partition for this string.
 

Constraints:

1 <= s.length <= 105
s[i] is a digit from '1' to '9'.
1 <= k <= 109


# java


class Solution {
  public int minimumPartition(String s, int k) {
    int ans = 1;
    long curr = 0;

    for (final char c : s.toCharArray()) {
      curr = curr * 10 + c - '0';
      if (curr > k) {
        curr = c - '0';
        ++ans;
      }
      if (curr > k)
        return -1;
    }

    return ans;
  }
}

or


class Solution {
    private Integer[] f;
    private int n;
    private String s;
    private int k;
    private int inf = 1 << 30;

    public int minimumPartition(String s, int k) {
        n = s.length();
        f = new Integer[n];
        this.s = s;
        this.k = k;
        int ans = dfs(0);
        return ans < inf ? ans : -1;
    }

    private int dfs(int i) {
        if (i >= n) {
            return 0;
        }
        if (f[i] != null) {
            return f[i];
        }
        int res = inf;
        long v = 0;
        for (int j = i; j < n; ++j) {
            v = v * 10 + (s.charAt(j) - '0');
            if (v > k) {
                break;
            }
            res = Math.min(res, dfs(j + 1));
        }
        return f[i] = res + 1;
    }
}

or



class Solution {
    public int minimumPartition(String s, int k) {
        int i=0,c=0,j=0;
        // i - left pointer
        // j - right pointer
        while(j<s.length())
        {
            while(j<s.length() && Long.parseLong(s.substring(i,j+1))<=k)
                j++;
            c++;
            if(i==j)
                return -1;
            i=j;
        }
        return c;
    }
}


or


class Solution {
    public int minimumPartition(String s, int k) {
		int parts = 0;
		int left = 0;
		int right = 0;
		while (right < s.length()) {
			while (right+1 - left < 10 && right < s.length() && Integer.parseInt(s.substring(left, right + 1)) <= k) {
				right++;
			}
			if (left == right) return -1;
			left = right;
			parts++;
		}
		return parts;
    }
}
