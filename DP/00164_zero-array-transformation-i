https://leetcode.com/problems/zero-array-transformation-iv/description/

3489. Zero Array Transformation IV
Medium
Topics
Companies
Hint
You are given an integer array nums of length n and a 2D array queries, where queries[i] = [li, ri, vali].

Each queries[i] represents the following action on nums:

Select a subset of indices in the range [li, ri] from nums.
Decrement the value at each selected index by exactly vali.
A Zero Array is an array with all its elements equal to 0.

Return the minimum possible non-negative value of k, such that after processing the first k queries in sequence, nums becomes a Zero Array. If no such k exists, return -1.

 

Example 1:

Input: nums = [2,0,2], queries = [[0,2,1],[0,2,1],[1,1,3]]

Output: 2

Explanation:

For query 0 (l = 0, r = 2, val = 1):
Decrement the values at indices [0, 2] by 1.
The array will become [1, 0, 1].
For query 1 (l = 0, r = 2, val = 1):
Decrement the values at indices [0, 2] by 1.
The array will become [0, 0, 0], which is a Zero Array. Therefore, the minimum value of k is 2.
Example 2:

Input: nums = [4,3,2,1], queries = [[1,3,2],[0,2,1]]

Output: -1

Explanation:

It is impossible to make nums a Zero Array even after all the queries.

Example 3:

Input: nums = [1,2,3,2,1], queries = [[0,1,1],[1,2,1],[2,3,2],[3,4,1],[4,4,1]]

Output: 4

Explanation:

For query 0 (l = 0, r = 1, val = 1):
Decrement the values at indices [0, 1] by 1.
The array will become [0, 1, 3, 2, 1].
For query 1 (l = 1, r = 2, val = 1):
Decrement the values at indices [1, 2] by 1.
The array will become [0, 0, 2, 2, 1].
For query 2 (l = 2, r = 3, val = 2):
Decrement the values at indices [2, 3] by 2.
The array will become [0, 0, 0, 0, 1].
For query 3 (l = 3, r = 4, val = 1):
Decrement the value at index 4 by 1.
The array will become [0, 0, 0, 0, 0]. Therefore, the minimum value of k is 4.
Example 4:

Input: nums = [1,2,3,2,6], queries = [[0,1,1],[0,2,1],[1,4,2],[4,4,4],[3,4,1],[4,4,5]]

Output: 4

 

Constraints:

1 <= nums.length <= 10
0 <= nums[i] <= 1000
1 <= queries.length <= 1000
queries[i] = [li, ri, vali]
0 <= li <= ri < nums.length
1 <= vali <= 10


# java


class Solution {
  public int minZeroArray(int[] nums, int[][] queries) {
    if (Arrays.stream(nums).allMatch(num -> num == 0))
      return 0;

    final int n = nums.length;
    Set<Integer>[] subsetSums = new Set[n];

    for (int i = 0; i < n; ++i)
      subsetSums[i] = new HashSet<>(List.of(0));

    for (int k = 0; k < queries.length; ++k) {
      final int l = queries[k][0];
      final int r = queries[k][1];
      final int val = queries[k][2];
      for (int i = l; i <= r; ++i) {
        List<Integer> sums = new ArrayList<>();
        for (final int subsetSum : subsetSums[i])
          sums.add(subsetSum + val);
        subsetSums[i].addAll(sums);
      }
      if (IntStream.range(0, n).allMatch(i -> subsetSums[i].contains(nums[i])))
        return k + 1;
    }

    return -1;
  }
}


or


class Solution {
    private int[][] dp;
    
    private boolean poss1(List<Integer> v, int i, int t) {
        if (t == 0) 
            return true;
        if (t < 0 || i >= v.size()) 
            return false;
        if (dp[i][t] != -1) 
            return dp[i][t] == 1;
        
        boolean result = poss1(v, i + 1, t) || poss1(v, i + 1, t - v.get(i));
        dp[i][t] = result ? 1 : 0;
        return result;
    }
    
    private boolean poss(List<Integer> v, List<int[]> q, int k) {
        int n = v.size();
        
        for (int i = 0; i < n; i++) {
            List<Integer> t = new ArrayList<>();
            for (int j = 0; j < k; j++) {
                if (q.get(j)[0] <= i && q.get(j)[1] >= i) 
                    t.add(q.get(j)[2]);
            }
            
            dp = new int[t.size()][10010];
            for (int[] row : dp) Arrays.fill(row, -1);
            
            if (!poss1(t, 0, v.get(i))) 
                return false;
        }
        return true;
    }
    
    public int minZeroArray(int[] v, int[][] q) {
        int n = v.length, m = q.length;
        int l = 0, r = m;
        int ans = m + 10;
        
        while (l <= r) {
            int mid = l + (r - l) / 2;
            if (poss(Arrays.stream(v).boxed().toList(), Arrays.asList(q), mid)) {
                ans = mid;
                r = mid - 1;
            } else {
                l = mid + 1;
            }
        }
        
        return ans <= m ? ans : -1;
    }
}



or


class Solution {
    int solve(int[][] q, int i, int target, int k, int[][] dp){
    if(target == 0) return k;                                            // we found  a valid sum equal to target so return current index of query.
    if(k >= q.length || target < 0) return q.length + 1;    // return a larger number to invalidate this flow
    if(dp[target][k] != -1) return dp[target][k];
    int res = solve(q, i, target, k+1, dp);       //skip current query val
    if(q[k][0] <= i && i <= q[k][1]) res = Math.min(res, solve(q, i, target - q[k][2], k+1, dp));  // pick the val if its range is in the range of target index
    return dp[target][k] = res;
}

int minZeroArray(int[] nums, int[][] queries) {
    int ans = -1;
    for(int i = 0; i < nums.length; ++i){
        int[][] dp = new int[nums[i]+1][queries.length];
        Arrays.stream(dp).forEach(row -> Arrays.fill(row, -1));
        ans = Math.max(ans, solve(queries, i, nums[i], 0, dp));
    }
    return (ans > queries.length)?-1: ans;
}
}


or


class Solution {
        public int minZeroArray(int[] nums, int[][] queries) {
        int n = nums.length, k = 0;
        Set<Integer>[] subsetSums = new Set[n];
        for (int i = 0; i < n; ++i) {
            subsetSums[i] = new HashSet<>(List.of(0));
        } 
        for (int[] query : queries) {
            if (IntStream.range(0, n).allMatch(i -> subsetSums[i].contains(nums[i]))) {
                return k;
            }
            for (int i = query[0]; i <= query[1]; ++i) {
                List<Integer> sums = new ArrayList<>();
                for (int x : subsetSums[i]) {
                    sums.add(x + query[2]);
                }
                subsetSums[i].addAll(sums);
            }
            ++k;
        }
        if (IntStream.range(0, n).allMatch(i -> subsetSums[i].contains(nums[i]))) {
            return k;
        }
        return -1;
    }
}


