https://leetcode.com/problems/count-beautiful-splits-in-an-array/description/

3388. Count Beautiful Splits in an Array
Medium
Topics
Companies
Hint
You are given an array nums.

A split of an array nums is beautiful if:

The array nums is split into three subarrays: nums1, nums2, and nums3, such that nums can be formed by concatenating nums1, nums2, and nums3 in that order.
The subarray nums1 is a prefix of nums2 OR nums2 is a prefix of nums3.
Return the number of ways you can make this split.

 

Example 1:

Input: nums = [1,1,2,1]

Output: 2

Explanation:

The beautiful splits are:

A split with nums1 = [1], nums2 = [1,2], nums3 = [1].
A split with nums1 = [1], nums2 = [1], nums3 = [2,1].
Example 2:

Input: nums = [1,2,3,4]

Output: 0

Explanation:

There are 0 beautiful splits.

 

Constraints:

1 <= nums.length <= 5000
0 <= nums[i] <= 50


# java

class Solution 
{
    public int beautifulSplits(int[] nums) 
    {
        int n = nums.length;
        if (n < 3)
        {
            return 0; // We need at least 3 elements to make a valid split
        }
        
        long mod = 1_000_000_007;
        long base = 31;
        
        // Compute prefix hashes
        long[] prefixHash = new long[n + 1]; // Hash for prefix [0..i)
        long[] pow = new long[n + 1]; // Store powers of base
        
        pow[0] = 1;
        for (int i = 0; i < n; i++) 
        {
            pow[i + 1] = (pow[i] * base) % mod;
            prefixHash[i + 1] = (prefixHash[i] * base + nums[i]) % mod;
        }

        int count = 0;

        // Iterate over possible i and j such that 1 <= i < j < n
        for (int i = 1; i < n - 1; i++) 
        {
            for (int j = i + 1; j < n; j++) 
            {
                boolean valid = false;
                
                // Check if nums1 is a prefix of nums2
                if (isPrefix(prefixHash, 0, i, i, j, mod, pow)) 
                {
                    valid = true;
                }
                
                // Check if nums2 is a prefix of nums3
                if (!valid && isPrefix(prefixHash, i, j, j, n, mod, pow)) 
                {
                    valid = true;
                }

                if (valid) 
                {
                    count++;
                }
            }
        }

        return count;
    }

    // Helper function to compare hashes of two subarrays
    private boolean isPrefix(long[] hash, int start1, int end1, int start2, int end2, long mod, long[] pow) 
    {
        int len1 = end1 - start1;
        int len2 = end2 - start2;

        if (len1 > len2)
        {
            return false;
        }

        long hash1 = (hash[end1] - (hash[start1] * pow[len1]) % mod + mod) % mod;
        long hash2 = (hash[start2 + len1] - (hash[start2] * pow[len1]) % mod + mod) % mod;

        return hash1 == hash2;
    }
}

or


class Solution {
    public int beautifulSplits(int[] nums) {
        final int n = nums.length;
        final int[][] rd = new int[n][n];
        for(int i=n-2;i>=0;--i){
            for(int j=i+1;j<n;++j){
                if(nums[i] == nums[j]){
                    rd[i][j] = 1 + (j > i+1 && j+1 < n ? rd[i+1][j+1] : 0);
                }
            }
        }
        int res = 0;
        for(int i=n-2;i>0;--i) {
            for(int j=i+1;j<n;++j) {
                final boolean f = j-i >= i && rd[0][i] >= i;
                final boolean f2 = j-i <= n-j && rd[i][j] >= j-i;
                if(f || f2){
                    res++;
                }
            }
        }
        return res;
    }
}

or

class Solution {
    public int beautifulSplits(int[] nums) {
        int n = nums.length;
        if (n < 3) return 0;
        
        // Create a 2D DP array
        int[][] dp = new int[n + 1][n + 1];
        
        // Fill the DP array
        for (int i = n - 1; i >= 0; i--) {
            for (int j = i; j < n; j++) {
                if (nums[i] == nums[j]) {
                    dp[i][j] = 1 + dp[i + 1][j + 1];
                }
            }
        }
        
        int ans = 0;
        
        // Iterate over the array to check for valid partitions
        for (int i = 0; i < n - 2; i++) {
            for (int j = i + 1; j < n - 1; j++) {
                if ((i + 1 <= j - i && dp[0][i + 1] >= i + 1) || (j - i <= n - j && dp[i + 1][j + 1] >= j - i)) {
                    ans++;
                }
            }
        }
        
        return ans;
    }
}
