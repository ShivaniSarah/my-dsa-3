https://leetcode.com/problems/number-of-strings-which-can-be-rearranged-to-contain-substring/description/


2930. Number of Strings Which Can Be Rearranged to Contain Substring
Medium
Topics
Companies
Hint
You are given an integer n.

A string s is called good if it contains only lowercase English characters and it is possible to rearrange the characters of s such that the new string contains "leet" as a substring.

For example:

The string "lteer" is good because we can rearrange it to form "leetr" .
"letl" is not good because we cannot rearrange it to contain "leet" as a substring.
Return the total number of good strings of length n.

Since the answer may be large, return it modulo 109 + 7.

A substring is a contiguous sequence of characters within a string.

 
 

Example 1:

Input: n = 4
Output: 12
Explanation: The 12 strings which can be rearranged to have "leet" as a substring are: "eelt", "eetl", "elet", "elte", "etel", "etle", "leet", "lete", "ltee", "teel", "tele", and "tlee".
Example 2:

Input: n = 10
Output: 83943898
Explanation: The number of strings with length 10 which can be rearranged to have "leet" as a substring is 526083947580. Hence the answer is 526083947580 % (109 + 7) = 83943898.
 

Constraints:

1 <= n <= 105


# java


class Solution {
    private long pow(long x, long n, long mod) {
        long result = 1, p = x % mod;
        while (n != 0) {
            if ((n & 1) != 0) {
                result = (result * p) % mod;
            }
            p = (p * p) % mod;
            n >>= 1;
        }
        return result;
    }

    public int stringCount(int n) {
        long mod = (int)1e9 + 7;
        return (int)(((
            + pow(26, n, mod)
            - (n + 75) * pow(25, n - 1, mod)
            + (2 * n + 72) * pow(24, n - 1, mod)
            - (n + 23) * pow(23, n - 1, mod)
        ) % mod + mod) % mod);
    }
}


or


class Solution {
    private static final int EMPTY = 0b0000,
        LEET = 0b1111,
        L = 0b1000,
        FIRST_E =  0b0100,
        SECOND_E = 0b0010,
        T = 0b0001;
    
    private static final long MOD = 1_000_000_007;

    private long dp[][], n;

    public int stringCount(int n) {
        this.n = n;
        this.dp = new long[n][16];
        for(int i = 0; i < n; i++){
            Arrays.fill(dp[i], -1);
        }
        return (int)this.findWays(0, EMPTY);
    }

    long findWays(int i, int mask){
        if(i == n)
            return mask == LEET ? 1 : 0;

        if(dp[i][mask] != -1)
            return dp[i][mask];
        
        // Choose L or T
        long ways = findWays(i + 1, mask | L) + findWays(i + 1, mask | T);

        if((mask & FIRST_E) > 0)
            // FIRST_E was already chosen earlier
            ways += findWays(i + 1, mask | SECOND_E);
        else
            // Choose FIRST_E
            ways += findWays(i + 1, mask | FIRST_E);

        // Choose any of other 23 chars
        ways = (ways + 23 * findWays(i + 1, mask)) % MOD;
        
        dp[i][mask] = ways;
        return ways;
    }
}


or


public class Solution {
    private static final int M = 1000000007;

    private int mul(long x, long y) {
        return (int) (x * y % M);
    }

    private int add(int x, int y) {
        x += y;
        if (x >= M) {
            x -= M;
        }
        return x;
    }

    public int stringCount(int n) {
        int[][][] dp = new int[2][2][3];
        dp[0][0][0] = 1;

        for (int i = 0; i < n; ++i) {
            int[][][] temp = new int[2][2][3];

            for (int j = 0; j < 2; ++j) {
                for (int k = 0; k < 2; ++k) {
                    for (int h = 0; h < 3; ++h) {
                        if (dp[j][k][h] == 0) continue;
                        temp[j][k][h] = add(temp[j][k][h], mul(dp[j][k][h], 23));
                        temp[1][k][h] = add(temp[1][k][h], dp[j][k][h]);
                        temp[j][1][h] = add(temp[j][1][h], dp[j][k][h]);
                        temp[j][k][Math.min(h + 1, 2)] = add(temp[j][k][Math.min(h + 1, 2)], dp[j][k][h]);
                    }
                }
            }

            dp = temp;
        }

        return dp[1][1][2];
    }
}
