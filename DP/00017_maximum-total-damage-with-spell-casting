https://leetcode.com/problems/maximum-total-damage-with-spell-casting/


3186. Maximum Total Damage With Spell Casting
Medium
Topics
Companies
Hint
A magician has various spells.

You are given an array power, where each element represents the damage of a spell. Multiple spells can have the same damage value.

It is a known fact that if a magician decides to cast a spell with a damage of power[i], they cannot cast any spell with a damage of power[i] - 2, power[i] - 1, power[i] + 1, or power[i] + 2.

Each spell can be cast only once.

Return the maximum possible total damage that a magician can cast.

 

Example 1:

Input: power = [1,1,3,4]

Output: 6

Explanation:

The maximum possible damage of 6 is produced by casting spells 0, 1, 3 with damage 1, 1, 4.

Example 2:

Input: power = [7,1,6,6]

Output: 13

Explanation:

The maximum possible damage of 13 is produced by casting spells 1, 2, 3 with damage 1, 6, 6.

 

Constraints:

1 <= power.length <= 105
1 <= power[i] <= 109


# java


class Solution {
    public long maximumTotalDamage(int[] power) {
        // Step 1: Count the frequency of each damage value
        Map<Integer, Long> damageFrequency = new HashMap<>();
        for (int damage : power) {
            damageFrequency.put(damage, damageFrequency.getOrDefault(damage, 0L) + 1);
        }

        // Step 2: Extract and sort the unique damage values
        List<Integer> uniqueDamages = new ArrayList<>(damageFrequency.keySet());
        Collections.sort(uniqueDamages);

        int totalUniqueDamages = uniqueDamages.size();
        long[] maxDamageDP = new long[totalUniqueDamages];

        // Step 3: Initialize the DP array with the first unique damage
        maxDamageDP[0] = uniqueDamages.get(0) * damageFrequency.get(uniqueDamages.get(0));

        // Step 4: Fill the DP array with the maximum damage calculations
        for (int i = 1; i < totalUniqueDamages; i++) {
            int currentDamageValue = uniqueDamages.get(i);
            long currentDamageTotal = currentDamageValue * damageFrequency.get(currentDamageValue);

            // Initially, consider not taking the current damage
            maxDamageDP[i] = maxDamageDP[i - 1];

            // Find the previous damage value that doesn't conflict with the current one
            int previousIndex = i - 1;
            while (previousIndex >= 0 && 
                   (uniqueDamages.get(previousIndex) == currentDamageValue - 1 || 
                    uniqueDamages.get(previousIndex) == currentDamageValue - 2 || 
                    uniqueDamages.get(previousIndex) == currentDamageValue + 1 || 
                    uniqueDamages.get(previousIndex) == currentDamageValue + 2)) {
                previousIndex--;
            }

            // Update the DP value considering the current damage
            if (previousIndex >= 0) {
                maxDamageDP[i] = Math.max(maxDamageDP[i], maxDamageDP[previousIndex] + currentDamageTotal);
            } else {
                maxDamageDP[i] = Math.max(maxDamageDP[i], currentDamageTotal);
            }
        }

        // Return the maximum damage possible
        return maxDamageDP[totalUniqueDamages - 1];
    }
}



or


class Solution {
    private long[] DP;

    private long TopDown(int i , int N , List<long[]> P){
        if(i == N) return 0;
        if(DP[i] != -1) return DP[i];
        long c1 = TopDown(i + 1, N, P);
        long c2 = P.get(i)[1];
        for (int j = i + 1 ; j <= Math.min(N - 1 , i + 3) ; j++){
            if(P.get(j)[0] - P.get(i)[0] > 2){
                c2 += TopDown(j , N , P);
                break;
            }
        }
        DP[i] = Math.max(c1 , c2);
        return DP[i];
    }

    public long maximumTotalDamage(int[] power){
        TreeMap<Integer, Long> hashmap = new TreeMap<>();
        for(int num : power){
            hashmap.put(num , hashmap.getOrDefault(num , 0L) + num);
        } 

        List<long[]> newPowers = new ArrayList<>();
        for(Map.Entry<Integer, Long> entry : hashmap.entrySet()){
            newPowers.add(new long[]{entry.getKey(), entry.getValue()});
        }

        int N = newPowers.size();
        DP = new long[N + 1];
        Arrays.fill(DP , -1);
        return TopDown(0, N, newPowers);
    }
}


or


class Solution{
    public long BottomUp(int N , List<long[]> P){
        long[] DP = new long[N + 1];
        for (int i = 0 ; i < N ; i++){
            long c1 = i > 0 ? DP[i - 1] : 0;
            long c2 = P.get(i)[1];
            for (int j = i - 1 ; j >= Math.max(0 , i - 3) ; j--) {
                if(P.get(i)[0] - P.get(j)[0] > 2){
                    c2 += DP[j];
                    break;
                }
            }
            DP[i] = Math.max(c1 , c2);
        }
        return DP[N - 1];
    }

    public long maximumTotalDamage(int[] power){
        TreeMap<Integer, Long> hashmap = new TreeMap<>();
        for (int num : power) hashmap.put(num, hashmap.getOrDefault(num, 0L) + num);

        List<long[]> newPowers = new ArrayList<>();
        for (Map.Entry<Integer, Long> entry : hashmap.entrySet()){
            newPowers.add(new long[]{entry.getKey(), entry.getValue()});
        }

        return BottomUp(newPowers.size(), newPowers);
    }
}


or


class Solution {
    public long maximumTotalDamage(int[] power){
        TreeMap<Integer , Long> dp = new TreeMap<>();
        for(int P : power) dp.put(P , dp.getOrDefault(P , 0L) + P);

        long maxi = 0 , last = 0;

        for(int P : dp.keySet()){
            Map.Entry<Integer , Long> it = dp.floorEntry(P - 3);
            if(it != null) dp.put(P , dp.get(P) + it.getValue());
            dp.put(P, last = Math.max(dp.get(P) , last));
            maxi = Math.max(maxi , last);
        }

        return maxi;
    }
}


or


class Solution {
    public long maximumTotalDamage(int[] power){
        TreeMap<Integer , Long> hashmap = new TreeMap<>();
        for(int p : power){
            hashmap.put(p , hashmap.getOrDefault(p , 0L) + p);
        }

        // {power, maximumDamage}
        long[][] dp = new long[3][2];
        for(int i = 0 ; i < 3 ; i++){
            dp[i][0] = -1;
            dp[i][1] = -1;
        }

        long maxi = 0;

        for(Map.Entry<Integer , Long> entry : hashmap.entrySet()){
            int P = entry.getKey();
            long F = entry.getValue();
            long[] newDP = {P , F};

            // when we pick this power
            for(int j = 2 ; j >= 0 && dp[j][0] != -1 ; j--){
                if(P - dp[j][0] > 2){
                    newDP[1] += dp[j][1];
                    break;
                }
            }

            // when we do not pick this power
            newDP[1] = Math.max(newDP[1], dp[2][1]);

            // update maximumDamage
            maxi = Math.max(maxi , newDP[1]);

            // update dp states
            dp[0] = dp[1];
            dp[1] = dp[2];
            dp[2] = newDP;
        }

        return maxi;
    }
}


or


class Solution {
    public long maximumTotalDamage(int[] power){
        TreeMap<Integer, Long> dp = new TreeMap<>();
        for(int P : power){
            dp.put(P, dp.getOrDefault(P, 0L) + P);
            dp.put(P - 3, Math.max(0L, dp.getOrDefault(P - 3, 0L)));
        }
        
        long maxi = 0 , last = 0;
        
        for(int P : dp.keySet()){
            dp.put(P, last = Math.max(dp.get(P) + dp.getOrDefault(P - 3, 0L), last));
            maxi = Math.max(maxi , last);
        }
        
        return maxi;
    }
}


or


class Solution {
    public List<long[]> compress(int[] A){
        TreeMap<Integer , Long> mp = new TreeMap<>();
        for(int num : A){
            mp.put(num , mp.getOrDefault(num , 0L) + num);
        } 

        int NP = 1 , LP = 0;
        List<long[]> newA = new ArrayList<>();

        for(Map.Entry<Integer, Long> entry : mp.entrySet()){
            int P = entry.getKey();
            long D = entry.getValue();
            NP = NP + (LP != 0 ? Math.min(3 , P - LP) : 0);
            newA.add(new long[]{NP , D});
            LP = P;
        }

        return newA;
    }

    public long maximumTotalDamage(int[] power) {
        List<long[]> A = compress(power);

        int N = 3 * A.size();
        long[] DP = new long[N + 1];
        for (long[] PD : A) DP[(int) PD[0]] = PD[1];

        for(int P = 1 ; P <= N ; P++){
            if (P >= 3) DP[P] += DP[P - 3];
            DP[P] = Math.max(DP[P], DP[P - 1]);
        }

        long maxElement = 0;
        for(long value : DP){
            maxElement = Math.max(maxElement , value);
        }
        
        return maxElement;
    }
}


or


class Solution {
    public long maximumTotalDamage(int[] nums) {
        Arrays.sort(nums);
        List<Pair<Integer, Long>> dp = new ArrayList<>();
        long preMax = 0, ans = 0;
        int dpIdx = 0;

        for (int i = 0; i < nums.length; i++) {
            while (dpIdx < dp.size() && dp.get(dpIdx).getKey() + 2 < nums[i]) {
                preMax = Math.max(preMax, dp.get(dpIdx).getValue());
                dpIdx++;
            }

            int j = i;
            long cur = 0;
            while (j < nums.length && nums[j] == nums[i]) {
                cur += nums[j];
                j++;
            }

            ans = Math.max(ans, cur + preMax);
            dp.add(new Pair<>(nums[i], cur + preMax));
            i = j - 1;
        }
        return ans;
    }
}
