https://leetcode.com/problems/minimum-array-sum/submissions/


3366. Minimum Array Sum
Medium
Topics
Companies
Hint
You are given an integer array nums and three integers k, op1, and op2.

You can perform the following operations on nums:

Operation 1: Choose an index i and divide nums[i] by 2, rounding up to the nearest whole number. You can perform this operation at most op1 times, and not more than once per index.
Operation 2: Choose an index i and subtract k from nums[i], but only if nums[i] is greater than or equal to k. You can perform this operation at most op2 times, and not more than once per index.
Note: Both operations can be applied to the same index, but at most once each.

Return the minimum possible sum of all elements in nums after performing any number of operations.

 

Example 1:

Input: nums = [2,8,3,19,3], k = 3, op1 = 1, op2 = 1

Output: 23

Explanation:

Apply Operation 2 to nums[1] = 8, making nums[1] = 5.
Apply Operation 1 to nums[3] = 19, making nums[3] = 10.
The resulting array becomes [2, 5, 3, 10, 3], which has the minimum possible sum of 23 after applying the operations.
Example 2:

Input: nums = [2,4,3], k = 3, op1 = 2, op2 = 1

Output: 3

Explanation:

Apply Operation 1 to nums[0] = 2, making nums[0] = 1.
Apply Operation 1 to nums[1] = 4, making nums[1] = 2.
Apply Operation 2 to nums[2] = 3, making nums[2] = 0.
The resulting array becomes [1, 2, 0], which has the minimum possible sum of 3 after applying the operations.
 

Constraints:

1 <= nums.length <= 100
0 <= nums[i] <= 105
0 <= k <= 105
0 <= op1, op2 <= nums.length


# java


class Solution {
  public int minArraySum(int[] nums, int k, int op1, int op2) {
    Integer[][][] mem = new Integer[nums.length][op1 + 1][op2 + 1];
    return minArraySum(nums, 0, op1, op2, k, mem);
  }

  // Returns the minimum sum of nums[i..n - 1] with `op1` operations of op1 and
  // `op2` operations of op2.
  private int minArraySum(int[] nums, int i, int op1, int op2, int k, Integer[][][] mem) {
    if (i == nums.length)
      return 0;
    if (mem[i][op1][op2] != null)
      return mem[i][op1][op2];
    int res = nums[i] + minArraySum(nums, i + 1, op1, op2, k, mem);
    if (op1 > 0)
      res = Math.min(res, (nums[i] + 1) / 2 + minArraySum(nums, i + 1, op1 - 1, op2, k, mem));
    if (op2 > 0 && nums[i] >= k)
      res = Math.min(res, nums[i] - k + minArraySum(nums, i + 1, op1, op2 - 1, k, mem));
    if (op1 > 0 && op2 > 0) {
      if ((nums[i] + 1) / 2 >= k)
        res = Math.min(res,
                       (nums[i] + 1) / 2 - k + minArraySum(nums, i + 1, op1 - 1, op2 - 1, k, mem));
      if (nums[i] >= k)
        res = Math.min(res,
                       (nums[i] - k + 1) / 2 + minArraySum(nums, i + 1, op1 - 1, op2 - 1, k, mem));
    }
    return mem[i][op1][op2] = res;
  }
}


or


class Solution {
  public int minArraySum(int[] nums, int k, int op1, int op2) {
    final int n = nums.length;
    // dp[i][j][k] := the minimum sum of nums[i..n - 1] with j operations of op1
    // and k operations of op2
    int[][][] dp = new int[n + 1][op1 + 1][op2 + 1];

    Arrays.stream(dp).forEach(
        A -> Arrays.stream(A).forEach(B -> Arrays.fill(B, Integer.MAX_VALUE)));

    // Base case: When index reaches the end of the array, the result is 0.
    for (int i = 0; i <= op1; ++i)
      for (int j = 0; j <= op2; ++j)
        dp[n][i][j] = 0;

    for (int i = n - 1; i >= 0; --i)
      for (int o1 = 0; o1 <= op1; ++o1)
        for (int o2 = 0; o2 <= op2; ++o2) {
          int sum = nums[i] + dp[i + 1][o1][o2];
          if (o1 > 0)
            sum = Math.min(sum, (nums[i] + 1) / 2 + dp[i + 1][o1 - 1][o2]);
          if (o2 > 0 && nums[i] >= k)
            sum = Math.min(sum, nums[i] - k + dp[i + 1][o1][o2 - 1]);
          if (o1 > 0 && o2 > 0) {
            if ((nums[i] + 1) / 2 >= k)
              sum = Math.min(sum, (nums[i] + 1) / 2 - k + dp[i + 1][o1 - 1][o2 - 1]);
            if (nums[i] >= k)
              sum = Math.min(sum, (nums[i] - k + 1) / 2 + dp[i + 1][o1 - 1][o2 - 1]);
          }
          dp[i][o1][o2] = sum;
        }

    return dp[0][op1][op2];
  }
}


or



class Solution {
    public int minArraySum(int[] nums, int d, int op1, int op2) {
        int n = nums.length;
        int[][][] f = new int[n + 1][op1 + 1][op2 + 1];
        final int inf = 1 << 29;
        for (var g : f) {
            for (var h : g) {
                Arrays.fill(h, inf);
            }
        }
        f[0][0][0] = 0;
        for (int i = 1; i <= n; ++i) {
            int x = nums[i - 1];
            for (int j = 0; j <= op1; ++j) {
                for (int k = 0; k <= op2; ++k) {
                    f[i][j][k] = f[i - 1][j][k] + x;
                    if (j > 0) {
                        f[i][j][k] = Math.min(f[i][j][k], f[i - 1][j - 1][k] + (x + 1) / 2);
                    }
                    if (k > 0 && x >= d) {
                        f[i][j][k] = Math.min(f[i][j][k], f[i - 1][j][k - 1] + (x - d));
                    }
                    if (j > 0 && k > 0) {
                        int y = (x + 1) / 2;
                        if (y >= d) {
                            f[i][j][k] = Math.min(f[i][j][k], f[i - 1][j - 1][k - 1] + (y - d));
                        }
                        if (x >= d) {
                            f[i][j][k]
                                = Math.min(f[i][j][k], f[i - 1][j - 1][k - 1] + (x - d + 1) / 2);
                        }
                    }
                }
            }
        }
        int ans = inf;
        for (int j = 0; j <= op1; ++j) {
            for (int k = 0; k <= op2; ++k) {
                ans = Math.min(ans, f[n][j][k]);
            }
        }
        return ans;
    }
}



or



class Solution {
    int solve(int[] nums, int k, int[][][] dp, int idx, int op1, int op2)
    {
        if (idx == nums.length)
            return 0;
        if (dp[idx][op1][op2] != -1)
            return dp[idx][op1][op2];
        
        int ans = Integer.MAX_VALUE;
        if (op1 != 0)
        {
            //CASE-1
            int sumOp1 = ((int)Math.ceil(nums[idx] / 2.00)) + solve(nums, k, dp, idx + 1, op1 - 1, op2); 
            ans = Math.min(ans, sumOp1);
        }
        if (op2 != 0 && nums[idx] >= k)
        {
            //CASE-2
            int sumOp2 = (nums[idx] - k) + solve(nums, k, dp, idx + 1, op1, op2 - 1);   
            ans = Math.min(ans, sumOp2);
        }
        if (op1 != 0 && op2 != 0)
        {
            int afterOp1 = (int)Math.ceil(nums[idx] / 2.00);
            if (afterOp1 >= k) 
            {
                //CASE-3
                int sumOp1Op2 = ( (afterOp1 - k) + solve(nums, k, dp, idx + 1, op1 - 1, op2 - 1) ); 
                ans = Math.min(ans, sumOp1Op2);
            }               
            if (nums[idx] >= k)
            {
                //CASE-4
                int sumOp2Op1 = ((int)Math.ceil( (nums[idx] - k) / 2.00)) + solve(nums, k, dp, idx + 1, op1 - 1, op2 - 1); 
                ans = Math.min(ans, sumOp2Op1);
            }
        }
        //CASE-5
        int sumNoOp = nums[idx] + solve(nums, k, dp, idx + 1, op1, op2);  
        
        ans = dp[idx][op1][op2] = Math.min(ans, sumNoOp);
        
        return ans;
        
    }
    public int minArraySum(int[] nums, int k, int op1, int op2) 
    {
        //========================================================================
        int[][][] dp = new int[nums.length][op1 + 1][op2 + 1];
        for (int i = 0; i < nums.length; i++)
        {
            for (int j = 0; j <= op1; j++)
            {
                Arrays.fill(dp[i][j], -1);
            }
        }
        //===========================================================================
        return solve(nums, k, dp, 0, op1, op2);
        
    }
}


or


/* ------- Translated from Python code by ChatGPT ---------*/

class Solution {
    public int minArraySum(int[] nums, int k, int op1, int op2) {
        int n = nums.length;
        Arrays.sort(nums);

        // Find the boundaries for the three sections
        int m1 = lowerBound(nums, k);
        int m2 = lowerBound(nums, 2 * k - 1);

        Set<Integer> candidates = new HashSet<>();
        int swapCnt = 0;

        // Phase 1
        // Largest numbers, apply op1 then op2
        int i = n - 1;
        while (i >= m2 && op1 > 0) {
            nums[i] = (nums[i] + 1) / 2;
            op1--;
            if (op2 > 0) {
                nums[i] -= k;
                op2--;
            }
            i--;
        }

        // Phase 2
        // Apply op2 in the middle section, from left to right
        int j = m1;
        while (j <= i && op2 > 0) {
            if (k % 2 == 1 && nums[j] % 2 == 0) {
                // k is odd and nums[j] is even, mark as a candidate for swapping
                candidates.add(j);
            }
            nums[j] -= k;
            op2--;
            j++;
        }

        // Phase 3
        // Apply op1 to numbers in the middle section not already affected by op2
        while (i >= j && op1 > 0) {
            if (k % 2 == 1 && nums[i] % 2 == 1) {
                // k is odd and nums[i] is odd, increase swap count
                swapCnt++;
            }
            nums[i] = (nums[i] + 1) / 2;
            op1--;
            i--;
        }

        // Phase 4
        // Sort remaining untouched numbers and apply op1 greedily
        List<int[]> arr = new ArrayList<>();
        for (int idx = 0; idx < j; idx++) {
            arr.add(new int[]{nums[idx], idx});
        }
        arr.sort((a, b) -> Integer.compare(a[0], b[0])); // Sort by value descending

        while (op1 > 0 && !arr.isEmpty()) {
            int[] numIdx = arr.remove(arr.size() - 1);
            int num = numIdx[0], idx = numIdx[1];
            nums[idx] = (num + 1) / 2;
            op1--;

            if (candidates.contains(idx) && swapCnt > 0) {
                // Handle the swap case
                swapCnt--;
                nums[idx] -= 1;
            }
        }

        // Calculate the sum of the modified nums
        int sum = 0;
        for (int num : nums) {
            sum += num;
        }
        return sum;
    }

    // Helper function to find the lower bound
    private int lowerBound(int[] nums, int target) {
        int low = 0, high = nums.length;
        while (low < high) {
            int mid = low + (high - low) / 2;
            if (nums[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        return low;
    }
}


or


class Solution {
    public int minArraySum(int[] nums, int k, int op1, int op2) {
        Integer[][][] dp = new Integer[nums.length][op1 + 1][op2 + 1];
        return sub(dp, nums, 0, k, op1, op2);
    }

    static int sub(Integer[][][] dp, int[] nums, int i, int k, int op1, int op2) {
        if (i == nums.length) {
            return 0;
        }
        if (dp[i][op1][op2] != null) {
            return dp[i][op1][op2];
        }
        int res = sub(dp, nums, i + 1, k, op1, op2) + nums[i];
        if (nums[i] >= k && op2 > 0) {
            res = Math.min(res, sub(dp, nums, i + 1, k, op1, op2 - 1) + nums[i] - k);
            int v = (int) Math.ceil(nums[i] / 2.0);
            if (v < k) {
                v = (int) Math.ceil((nums[i] - k) / 2.0);
            } else {
                v -= k;
            }
            if (op1 > 0) {
                res = Math.min(res, sub(dp, nums, i + 1, k, op1 - 1, op2 - 1) + v);
            }
        }
        if (op1 > 0) {
            int v = (int) Math.ceil(nums[i] / 2.0);
            res = Math.min(res, sub(dp, nums, i + 1, k, op1 - 1, op2) + v);
        }
        return dp[i][op1][op2] = res;
    }
}


