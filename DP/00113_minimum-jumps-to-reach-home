https://leetcode.com/problems/minimum-jumps-to-reach-home/description/

1654. Minimum Jumps to Reach Home
Medium
Topics
Companies
Hint
A certain bug's home is on the x-axis at position x. Help them get there from position 0.

The bug jumps according to the following rules:

It can jump exactly a positions forward (to the right).
It can jump exactly b positions backward (to the left).
It cannot jump backward twice in a row.
It cannot jump to any forbidden positions.
The bug may jump forward beyond its home, but it cannot jump to positions numbered with negative integers.

Given an array of integers forbidden, where forbidden[i] means that the bug cannot jump to the position forbidden[i], and integers a, b, and x, return the minimum number of jumps needed for the bug to reach its home. If there is no possible sequence of jumps that lands the bug on position x, return -1.

 

Example 1:

Input: forbidden = [14,4,18,1,15], a = 3, b = 15, x = 9
Output: 3
Explanation: 3 jumps forward (0 -> 3 -> 6 -> 9) will get the bug home.
Example 2:

Input: forbidden = [8,3,16,6,12,20], a = 15, b = 13, x = 11
Output: -1
Example 3:

Input: forbidden = [1,6,2,14,5,17,4], a = 16, b = 9, x = 7
Output: 2
Explanation: One jump forward (0 -> 16) then one jump backward (16 -> 7) will get the bug home.
 

Constraints:

1 <= forbidden.length <= 1000
1 <= a, b, forbidden[i] <= 2000
0 <= x <= 2000
All the elements in forbidden are distinct.
Position x is not forbidden.


# java

enum Direction { FORWARD, BACKWARD }

class Solution {
  public int minimumJumps(int[] forbidden, int a, int b, int x) {
    int furthest = x + a + b;
    Set<Integer> seenForward = new HashSet<>();
    Set<Integer> seenBackward = new HashSet<>();

    for (final int pos : forbidden) {
      seenForward.add(pos);
      seenBackward.add(pos);
      furthest = Math.max(furthest, pos + a + b);
    }

    // (direction, position)
    Queue<Pair<Direction, Integer>> q = new ArrayDeque<>(List.of(new Pair<>(Direction.FORWARD, 0)));

    for (int ans = 0; !q.isEmpty(); ++ans)
      for (int sz = q.size(); sz > 0; --sz) {
        Direction dir = q.peek().getKey();
        final int pos = q.poll().getValue();
        if (pos == x)
          return ans;
        final int forward = pos + a;
        final int backward = pos - b;
        if (forward <= furthest && seenForward.add(forward))
          q.offer(new Pair<>(Direction.FORWARD, forward));
        // It cannot jump backward twice in a row.
        if (dir == Direction.FORWARD && backward >= 0 && seenBackward.add(backward))
          q.offer(new Pair<>(Direction.BACKWARD, backward));
      }

    return -1;
  }
}


or


class Solution {
    public int minimumJumps(int[] forbidden, int a, int b, int x) {
        Set<Integer> s = new HashSet<>();
        for (int v : forbidden) {
            s.add(v);
        }
        Deque<int[]> q = new ArrayDeque<>();
        q.offer(new int[] {0, 1});
        final int n = 6000;
        boolean[][] vis = new boolean[n][2];
        vis[0][1] = true;
        for (int ans = 0; !q.isEmpty(); ++ans) {
            for (int t = q.size(); t > 0; --t) {
                var p = q.poll();
                int i = p[0], k = p[1];
                if (i == x) {
                    return ans;
                }
                List<int[]> nxt = new ArrayList<>();
                nxt.add(new int[] {i + a, 1});
                if ((k & 1) == 1) {
                    nxt.add(new int[] {i - b, 0});
                }
                for (var e : nxt) {
                    int j = e[0];
                    k = e[1];
                    if (j >= 0 && j < n && !s.contains(j) && !vis[j][k]) {
                        q.offer(new int[] {j, k});
                        vis[j][k] = true;
                    }
                }
            }
        }
        return -1;
    }
}

or


class Solution {
    private Map<String/*idx + direction*/, Integer> cache;
    public int minimumJumps(int[] forbidden, int a, int b, int x) {
        cache = new HashMap<>();
        Set<Integer> visited = new HashSet<>(); 
        Set<Integer> forbit = new HashSet<>();
        int maxLimit = 2000 + 2 * b;
        for(int num : forbidden){
            forbit.add(num);
            maxLimit = Math.max(maxLimit, num + 2 * b);
        }
        int val = helper(0, x, a, b, forbit, visited, 0, maxLimit);
        return val == Integer.MAX_VALUE ? -1 : val;
    }
    private int helper(int idx, int x, int a, int b, Set<Integer> forbit, Set<Integer> visited, int dir, int maxLimit){
        if(cache.containsKey(idx+","+dir)){
            return cache.get(idx+","+dir);
        }
        if(idx == x) return 0;
        if(idx < 0 || idx > maxLimit) return Integer.MAX_VALUE;
        visited.add(idx);
        int min = Integer.MAX_VALUE;
		//try jump forward
        if(idx+a < maxLimit && !forbit.contains(idx+a) && !visited.contains(idx+a)){
            int step = helper(idx+a, x, a, b, forbit, visited, 0, maxLimit);
            if(step != Integer.MAX_VALUE){
                min = Math.min(min, step + 1);
            }
        }
		//try jump back
       if(idx-b >= 0 && !forbit.contains(idx-b) && !visited.contains(idx-b) && dir != 1){
            int step = helper(idx-b, x, a, b, forbit, visited, 1, maxLimit);
            if(step != Integer.MAX_VALUE){
                min = Math.min(min, step + 1);
            }
        }
        visited.remove(idx);
        cache.put(idx+","+dir, min);
        return min;
    }
}


or


class Solution {
    public int minimumJumps(int[] forbidden, int a, int b, int x) {
        PriorityQueue<int[]> pq = new PriorityQueue<>((a1,a2)-> a1[0] - a2[0]);
        pq.offer(new int[]{0,0,0});//step, current index, direction(0 is back, 1 is forward)
        Set<Integer> forbit = new HashSet<>();
        Set<String> visited = new HashSet<>();
        int maxLimit = 2000 + 2 * b;
        for(int num : forbidden){
            forbit.add(num);
            maxLimit = Math.max(maxLimit, num + 2 * b);
        }
        while(!pq.isEmpty()){
            int[] node = pq.poll();
            int step = node[0];
            int idx = node[1];
            int dir = node[2];
            if(idx == x) return step;
			//try jump forward
            if(idx+a < maxLimit && !forbit.contains(idx+a) && !visited.contains(idx+a+","+0)){
                visited.add(idx+a+","+0);
                pq.offer(new int[]{step+1, idx+a, 0});
            }
			//try jump back
            if(idx-b >= 0 && !forbit.contains(idx-b) && !visited.contains(idx-b+","+1) && dir != 1){
                visited.add(idx-b+","+1);
                pq.offer(new int[]{step+1, idx-b, 1});
            }
        }
        return -1;
    }
}


or


class Solution {
    public int minimumJumps(int[] forbidden, int a, int b, int x) {
        int n = forbidden.length;
        //2D boolean to keep track of forward and backward visits
        boolean[][] visited = new boolean[6000][2];
        if(x == 0) return 0;
        for(int i = 0; i < n; i++){
            //for forbidden numbers we can not go to them
            //either forward or backward moment
            visited[forbidden[i]][0] = true;
            visited[forbidden[i]][1] = true; 
        }
        int ans = 0;
        //queue to perform bfs
        Queue<int[]> q = new LinkedList();
        //array as input to keep track of both backward andd forward moment
        q.add(new int[]{0, 0});
        while(q.size() > 0){
            int size = q.size();
            while(size-- > 0){
                int[] pos = q.poll();
                //not processing already visited numbers
                if(visited[pos[0]][pos[1]]) continue;
                visited[pos[0]][pos[1]] = true;
                //if home found we return ans
                if(pos[0] == x) return ans;
                //6000 is the maximum possible value for forward moment
                if(pos[0] + a < 6000){
                    //forward moment shown marked by 0
                    q.add(new int[]{pos[0] + a, 0});
                }
                //to restrict double backward moment we mark backward
                //moment by adding 1
                if(pos[0] - b >= 0 && pos[1] != 1){
                    q.add(new int[]{pos[0] - b, 1});
                }
            }
            ans++;
        }
        return -1;
    }
}
