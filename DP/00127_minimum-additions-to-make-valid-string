https://leetcode.com/problems/minimum-additions-to-make-valid-string/description/


2645. Minimum Additions to Make Valid String
Medium
Topics
Companies
Hint
Given a string word to which you can insert letters "a", "b" or "c" anywhere and any number of times, return the minimum number of letters that must be inserted so that word becomes valid.

A string is called valid if it can be formed by concatenating the string "abc" several times.

 

Example 1:

Input: word = "b"
Output: 2
Explanation: Insert the letter "a" right before "b", and the letter "c" right next to "b" to obtain the valid string "abc".
Example 2:

Input: word = "aaa"
Output: 6
Explanation: Insert letters "b" and "c" next to each "a" to obtain the valid string "abcabcabc".
Example 3:

Input: word = "abc"
Output: 0
Explanation: word is already valid. No modifications are needed. 
 

Constraints:

1 <= word.length <= 50
word consists of letters "a", "b" and "c" only. 

# java


class Solution {
  public int addMinimum(String word) {
    final char[] letters = new char[] {'a', 'b', 'c'};
    int ans = 0;
    int i = 0;

    while (i < word.length())
      for (final char c : letters) {
        if (i < word.length() && word.charAt(i) == c)
          ++i;
        else
          ++ans;
      }

    return ans;
  }
};


or


class Solution {
    public int addMinimum(String word) {
        String s = "abc";
        int ans = 0, n = word.length();
        for (int i = 0, j = 0; j < n; i = (i + 1) % 3) {
            if (word.charAt(j) != s.charAt(i)) {
                ++ans;
            } else {
                ++j;
            }
        }
        if (word.charAt(n - 1) != 'c') {
            ans += word.charAt(n - 1) == 'b' ? 1 : 2;
        }
        return ans;
    }
}


or


class Solution {
    public int addMinimum(String word) {
        String abc = "abc";
        int i = 0, j = 0, insertions = 0;
        int n = word.length();
        
        while (i < n) {
            if (word.charAt(i) == abc.charAt(j)) {
                i++; // Move in the word
            } else {
                insertions++; // Insert missing character
            }
            j = (j + 1) % 3; // Pointer for abc cycle
        }

        // If we end in the middle of a cycle, complete it by adding missing chars
        insertions += (3 - j) % 3;

        return insertions;
    }
}


or



public class Solution {
    public int addMinimum(String word) {
        int n = word.length(), i = 0, res = 0;
        
        while(i < n) {
            int count = 0;
            
            if(word.charAt(i) == 'a') {
                count++;
                i++;
            }
             
            if(i < n && word.charAt(i) == 'b') {
                count++;
                i++;
            }
            
            if(i < n && word.charAt(i) == 'c') {
                count++;
                i++;
            }
            
            res += 3 - count;
        }
        
        return res;
    }
}
