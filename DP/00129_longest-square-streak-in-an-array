https://leetcode.com/problems/longest-square-streak-in-an-array/description/

2501. Longest Square Streak in an Array
Medium
Topics
Companies
Hint
You are given an integer array nums. A subsequence of nums is called a square streak if:

The length of the subsequence is at least 2, and
after sorting the subsequence, each element (except the first element) is the square of the previous number.
Return the length of the longest square streak in nums, or return -1 if there is no square streak.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [4,3,6,16,8,2]
Output: 3
Explanation: Choose the subsequence [4,16,2]. After sorting it, it becomes [2,4,16].
- 4 = 2 * 2.
- 16 = 4 * 4.
Therefore, [4,16,2] is a square streak.
It can be shown that every subsequence of length 4 is not a square streak.
Example 2:

Input: nums = [2,3,5,6,7]
Output: -1
Explanation: There is no square streak in nums so return -1.
 

Constraints:

2 <= nums.length <= 105
2 <= nums[i] <= 105


# java

// tle
class Solution {
    public int longestSquareStreak(int[] nums) {
        Set<Integer> s = new HashSet<>();
        for (int v : nums) {
            s.add(v);
        }
        int ans = -1;
        for (int v : nums) {
            int t = 0;
            while (s.contains(v)) {
                v *= v;
                ++t;
            }
            if (t > 1) {
                ans = Math.max(ans, t);
            }
        }
        return ans;
    }
}


or

class Solution {

    public int longestSquareStreak(int[] nums) {
        Arrays.sort(nums);
        // Set to keep track of numbers we've already processed
        Set<Integer> processedNumbers = new HashSet<>();
        int longestStreak = 0;

        // Iterate through each number in the sorted array
        for (int current : nums) {
            // Skip if we've already processed this number
            if (processedNumbers.contains(current)) continue;

            int streak = current;
            int streakLength = 1;

            // Continue the streak as long as we can find the square of the current number
            while (true) {
                // Break if the square would be larger than 10^5 (problem constraint)
                if ((long) streak * (long) streak > 1e5) break;
                // If we find the square, continue the streak
                if (binarySearch(nums, streak * streak)) {
                    streak *= streak;
                    processedNumbers.add(streak);
                    streakLength++;
                } else {
                    break;
                }
            }
            // Update the longest streak if necessary
            longestStreak = Math.max(longestStreak, streakLength);
        }

        // Return -1 if no valid streak found, otherwise return the longest streak
        return longestStreak < 2 ? -1 : longestStreak;
    }

    // Binary search helper function to efficiently find a value in the sorted array
    private boolean binarySearch(int[] nums, int target) {
        if (target < 0) return false;

        int left = 0;
        int right = nums.length - 1;

        while (left <= right) {
            int mid = left + (right - left) / 2;
            if (nums[mid] == target) return true;
            if (nums[mid] > target) right = mid - 1;
            else left = mid + 1;
        }

        return false;
    }
}


or


class Solution {

    public int longestSquareStreak(int[] nums) {
        int longestStreak = 0;

        // Create a Set to store all unique numbers from the input array
        Set<Integer> uniqueNumbers = new HashSet<>();
        for (int num : nums) {
            uniqueNumbers.add(num);
        }

        // Iterate through each number in the input array
        for (int startNumber : nums) {
            int currentStreak = 0;
            long current = startNumber;

            // Continue the streak as long as we can find the next square in the set
            while (uniqueNumbers.contains((int) current)) {
                currentStreak++;

                // Break if the next square would be larger than 10^5 (problem constraint)
                if (current * current > 1e5) break;

                current *= current;
            }

            // Update the longest streak if necessary
            longestStreak = Math.max(longestStreak, currentStreak);
        }

        // Return -1 if no valid streak found, otherwise return the longest streak
        return longestStreak < 2 ? -1 : longestStreak;
    }
}


or


class Solution {

    public int longestSquareStreak(int[] nums) {
        // Map to store the length of square streak for each number
        Map<Integer, Integer> streakLengths = new HashMap<>();

        Arrays.sort(nums);

        for (int number : nums) {
            int root = (int) Math.sqrt(number);

            // Check if the number is a perfect square and its square root is in the map
            if (root * root == number && streakLengths.containsKey(root)) {
                // If so, extend the streak from its square root
                streakLengths.put(number, streakLengths.get(root) + 1);
            } else {
                // Otherwise, start a new streak
                streakLengths.put(number, 1);
            }
        }

        // Find the maximum streak length
        int longestStreak = 0;
        for (int streakLength : streakLengths.values()) {
            longestStreak = Math.max(longestStreak, streakLength);
        }

        // Return -1 if no valid streak found, otherwise return the longest streak
        return longestStreak == 1 ? -1 : longestStreak;
    }
}


or



class Solution {
    public int longestSquareStreak(int[] nums) {
        Map<Integer, Integer> mp = new HashMap<>();
        Arrays.sort(nums);
        int res = -1;

        for (int num : nums) {
            int sqrt = (int) Math.sqrt(num);

            if (sqrt * sqrt == num && mp.containsKey(sqrt)) {
                mp.put(num, mp.get(sqrt) + 1);
                res = Math.max(res, mp.get(num));
            } else {
                mp.put(num, 1);
            }
        }
        return res;
    }
}
