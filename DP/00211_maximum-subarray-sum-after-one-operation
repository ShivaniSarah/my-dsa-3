https://leetcode.com/problems/maximum-subarray-sum-after-one-operation/description/

1746. Maximum Subarray Sum After One Operation
Level
Medium

Description
You are given an integer array nums. You must perform exactly one operation where you can replace one element nums[i] with nums[i] * nums[i].

Return the maximum possible subarray sum after exactly one operation. The subarray must be non-empty.

Example 1:

Input: nums = [2,-1,-4,-3]

Output: 17

Explanation: You can perform the operation on index 2 (0-indexed) to make nums = [2,-1,16,-3]. Now, the maximum subarray sum is 2 + -1 + 16 = 17.

Example 2:

Input: nums = [1,-1,1,1,-1,-1,1]

Output: 4

Explanation: You can perform the operation on index 1 (0-indexed) to make nums = [1,1,1,1,-1,-1,1]. Now, the maximum subarray sum is 1 + 1 + 1 + 1 = 4.

Constraints:

1 <= nums.length <= 10^5
-10^4 <= nums[i] <= 10^4


# java




class Solution {
  public int maxSumAfterOperation(int[] nums) {
    int ans = Integer.MIN_VALUE;
    int regular = 0;
    int squared = 0;

    for (final int num : nums) {
      squared = Math.max(num * num, Math.max(regular + num * num, squared + num));
      regular = Math.max(num, regular + num);
      ans = Math.max(ans, squared);
    }

    return ans;
  }
}



or



class Solution {
    public int maxSumAfterOperation(int[] nums) {
        int length = nums.length;
        int[][] dp = new int[length][3];
        dp[0][0] = nums[0];
        dp[0][1] = nums[0] * nums[0];
        dp[0][2] = Integer.MIN_VALUE;
        int max = dp[0][1];
        for (int i = 1; i < length; i++) {
            dp[i][0] = Math.max(dp[i - 1][0], 0) + nums[i];
            dp[i][1] = Math.max(dp[i - 1][0], 0) + nums[i] * nums[i];
            dp[i][2] = Math.max(Math.max(dp[i - 1][1], dp[i - 1][2]), 0) + nums[i];
            int curMax = Math.max(dp[i][1], dp[i][2]);
            max = Math.max(max, curMax);
        }
        return max;
    }
}


class Solution {
    public int maxSumAfterOperation(int[] nums) {
        int f = 0, g = 0;
        int ans = Integer.MIN_VALUE;
        for (int x : nums) {
            int ff = Math.max(f, 0) + x;
            int gg = Math.max(Math.max(f, 0) + x * x, g + x);
            f = ff;
            g = gg;
            ans = Math.max(ans, Math.max(f, g));
        }
        return ans;
    }
}

//////

class Solution {
    public int maxSumAfterOperation(int[] nums) {
        int f = 0, g = 0;
        int ans = Integer.MIN_VALUE;
        for (int x : nums) {
            int ff = Math.max(f, 0) + x;
            int gg = Math.max(Math.max(f, 0) + x * x, g + x);
            f = ff;
            g = gg;
            ans = Math.max(ans, Math.max(f, g));
        }
        return ans;
    }
}




