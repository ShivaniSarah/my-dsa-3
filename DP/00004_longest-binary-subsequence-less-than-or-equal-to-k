https://leetcode.com/problems/longest-binary-subsequence-less-than-or-equal-to-k/description/

2311. Longest Binary Subsequence Less Than or Equal to K
Medium
Topics
Companies
Hint
You are given a binary string s and a positive integer k.

Return the length of the longest subsequence of s that makes up a binary number less than or equal to k.

Note:

The subsequence can contain leading zeroes.
The empty string is considered to be equal to 0.
A subsequence is a string that can be derived from another string by deleting some or no characters without changing the order of the remaining characters.
 

Example 1:

Input: s = "1001010", k = 5
Output: 5
Explanation: The longest subsequence of s that makes up a binary number less than or equal to 5 is "00010", as this number is equal to 2 in decimal.
Note that "00100" and "00101" are also possible, which are equal to 4 and 5 in decimal, respectively.
The length of this subsequence is 5, so 5 is returned.
Example 2:

Input: s = "00101001", k = 1
Output: 6
Explanation: "000001" is the longest subsequence of s that makes up a binary number less than or equal to 1, as this number is equal to 1 in decimal.
The length of this subsequence is 6, so 6 is returned.
 

Constraints:

1 <= s.length <= 1000
s[i] is either '0' or '1'.
1 <= k <= 109


# java

class Solution {
   public int longestSubsequence(String s, int k) {
    int val = 0, cnt = 0, pow = 1;
    for (int i = s.length() - 1; i >= 0 && val + pow <= k; --i) {
        if (s.charAt(i) == '1') {
            ++cnt;
            val += pow;
        }
        pow <<= 1;
    }
    return (int)s.chars().filter(ch -> ch == '0').count() + cnt;
}
}


or

class Solution {
    public int longestSubsequence(String s, int k) {
        int cnt =0; long val=0; double pow=0;
        for(int i=s.length()-1; i>=0; i--){
            if(s.charAt(i)=='0') cnt++;
            else{
                pow = Math.pow(2,(s.length()-1)-i);
                if(val+pow<=k) {
                    cnt++;
                    val+=pow;
                }
            }
        }
        return cnt;
    }
}


or


class Solution {
    int n;
    int dp[][];
    public int longestSubsequence(String s, int k) {
        n = s.length();
        dp = new int[n][n];
        for(int i = 0; i < n; i++){
            Arrays.fill(dp[i] , -1);
        }
        return f(n - 1 , 0 , 0 , s , k);
    }
    int f(int i , int size , int sum , String s , int k){
        if(i < 0) return 0;
        
        if(dp[i][size] != -1) return dp[i][size];
        
        int no = f(i - 1 , size , sum , s , k);
        int yes = 0;
        if(sum + (s.charAt(i) - '0') * Math.pow(2 , size) <= k)
            yes = f(i - 1 , size + 1 , sum + (s.charAt(i) - '0') * (int)Math.pow(2 , size) , s , k) + 1;
        
        return dp[i][size] = Math.max(no , yes);
    }
}

or


class Solution {
    public int longestSubsequence(String s, int k) {
        int n = s.length();
        int cost = 1;
        int res = 0;
        for(int i = n - 1; i >= 0; i--){
            if(s.charAt(i) == '0' || cost <= k){
                k -= cost * (s.charAt(i) - '0');
                res++;
            }
            if(cost <= k){
                cost *= 2;
            }
        }
        return res;
    }
}
