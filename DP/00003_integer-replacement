https://leetcode.com/problems/integer-replacement/description/

397. Integer Replacement
Medium
Topics
Companies
Given a positive integer n, you can apply one of the following operations:

If n is even, replace n with n / 2.
If n is odd, replace n with either n + 1 or n - 1.
Return the minimum number of operations needed for n to become 1.

 

Example 1:

Input: n = 8
Output: 3
Explanation: 8 -> 4 -> 2 -> 1
Example 2:

Input: n = 7
Output: 4
Explanation: 7 -> 8 -> 4 -> 2 -> 1
or 7 -> 6 -> 3 -> 2 -> 1
Example 3:

Input: n = 4
Output: 2
 

Constraints:

1 <= n <= 231 - 1


# java

class Solution {
    public int integerReplacement(int n) {
    return replace((long)n);
    }
    
    int replace(long n)
    {
       int ans=0;
        if(n<=1)
        {
            return 0;
        }
        
        if(n%2==0)
        {
            ans=1+replace(n/2);
        }
        else
        {
            ans=1+Math.min(replace(n+1),replace(n-1));
        }
        return ans;
        
}
}


or


class Solution {
    // Memoization map to store results of subproblems
    private HashMap<Long, Integer> memo = new HashMap<>();

    // Recursive function to solve the problem
    private int solve(long n) {
        if (n == 1) return 0;  // Base case
        if (memo.containsKey(n)) return memo.get(n);  // Return memoized result

        int even = Integer.MAX_VALUE;
        int oddMinus = Integer.MAX_VALUE;
        int oddPlus = Integer.MAX_VALUE;

        // If the number is even, the only choice is to divide by 2
        if (n % 2 == 0) {
            even = 1 + solve(n / 2);
        } else {
            // If the number is odd, try both n-1 and n+1
            oddMinus = 1 + solve(n - 1);
            oddPlus = 1 + solve(n + 1);
        }

        // Take the minimum of all possible operations
        int result = Math.min(even, Math.min(oddMinus, oddPlus));
        memo.put(n, result);  // Memoize the result
        return result;
    }

    // Main function to initiate the solving process
    public int integerReplacement(int n) {
        return solve(n);
    }
}


or

