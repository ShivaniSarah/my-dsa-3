https://leetcode.com/problems/wiggle-subsequence/description/

376. Wiggle Subsequence
Medium
Topics
Companies
A wiggle sequence is a sequence where the differences between successive numbers strictly alternate between positive and negative. The first difference (if one exists) may be either positive or negative. A sequence with one element and a sequence with two non-equal elements are trivially wiggle sequences.

For example, [1, 7, 4, 9, 2, 5] is a wiggle sequence because the differences (6, -3, 5, -7, 3) alternate between positive and negative.
In contrast, [1, 4, 7, 2, 5] and [1, 7, 4, 5, 5] are not wiggle sequences. The first is not because its first two differences are positive, and the second is not because its last difference is zero.
A subsequence is obtained by deleting some elements (possibly zero) from the original sequence, leaving the remaining elements in their original order.

Given an integer array nums, return the length of the longest wiggle subsequence of nums.

 

Example 1:

Input: nums = [1,7,4,9,2,5]
Output: 6
Explanation: The entire sequence is a wiggle sequence with differences (6, -3, 5, -7, 3).
Example 2:

Input: nums = [1,17,5,10,13,15,10,5,16,8]
Output: 7
Explanation: There are several subsequences that achieve this length.
One is [1, 17, 10, 13, 10, 16, 8] with differences (16, -7, 3, -3, 6, -8).
Example 3:

Input: nums = [1,2,3,4,5,6,7,8,9]
Output: 2
 

Constraints:

1 <= nums.length <= 1000
0 <= nums[i] <= 1000
 

Follow up: Could you solve this in O(n) time?


# java


class Solution {
  public int wiggleMaxLength(int[] nums) {
    int increasing = 1;
    int decreasing = 1;

    for (int i = 1; i < nums.length; ++i)
      if (nums[i] > nums[i - 1])
        increasing = decreasing + 1;
      else if (nums[i] < nums[i - 1])
        decreasing = increasing + 1;

    return Math.max(increasing, decreasing);
  }
}


or


class Solution {
    public int wiggleMaxLength(int[] nums) {
        int up = 1, down = 1;
        for (int i = 1; i < nums.length; ++i) {
            if (nums[i] > nums[i - 1]) {
                up = Math.max(up, down + 1);
            } else if (nums[i] < nums[i - 1]) {
                down = Math.max(down, up + 1);
            }
        }
        return Math.max(up, down);
    }
}


or


class Solution {
    public int wiggleMaxLength(int[] nums) {
        int n=  nums.length ; 
        int i =0, j = 1 ; 
        int ct = 1 ; 

        while(j<n){
            if(nums[i]== nums[j]){
                j++ ; 
                continue ;
            }
            int sgn = (nums[j]-nums[i])>0? 1:-1 ; 
            while(j+1<n && sgn>0 && nums[j+1]>= nums[j] )j++ ; 

            while(j+1<n && sgn<0 && nums[j+1]<= nums[j])j++ ; 
            ct++ ; 
            i =j ; 
            // j++ ; 

        }
        
        return ct ; 
    }
}


or


class Solution {
    public int wiggleMaxLength(int[] nums) {
        //inc and dec will help us int finding which kind of value we need next.
        int inc = 1;
        int dec = 1;
        
        for(int i = 1; i<nums.length; i++){
            if(nums[i] > nums[i-1]){
                inc = dec + 1;                
            }else if(nums[i]  < nums[i-1]){
                dec = inc + 1;
            }
            //At some point we may be incrementing values of inc or dec but later on where we need to inrement we
            // won't be doing there. Hence, resulting in balancing the needs.
            // must do a dry run to understand the logic.
            
            //[1,17,5,10,13,15,10,5,16,8] this example consist all most every possible cases, try with this one.
            
        }
        return Math.max(inc,dec);
    }
}

// still having any doubt, comment below.


or


class Solution 
{
    public int wiggleMaxLength(int[] nums)
    {
        // Greedy
        // O(n) time | O(1) space
        if(nums == null || nums.length == 0)    return 0;
        if(nums.length == 1)    return 1;
        
        // sign == 1 means going up || sign == -1 means going down
        // if it's a wiggle sequence, then the sign can't be same
        int sign = 0;
        int res = 1;
        
        for(int i = 1; i < nums.length; i++)
        {
            if(nums[i-1] > nums[i] && sign != -1)
            {
                // going down
                sign = -1;
                res++;
            }
            else if(nums[i-1] < nums[i] && sign != 1)
            {
                // going up
                sign = 1;
                res++;
            }
        }
        return res;
    }
}
