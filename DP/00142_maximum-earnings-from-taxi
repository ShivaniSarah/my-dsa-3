https://leetcode.com/problems/maximum-earnings-from-taxi/

2008. Maximum Earnings From Taxi
Medium
Topics
Companies
Hint
There are n points on a road you are driving your taxi on. The n points on the road are labeled from 1 to n in the direction you are going, and you want to drive from point 1 to point n to make money by picking up passengers. You cannot change the direction of the taxi.

The passengers are represented by a 0-indexed 2D integer array rides, where rides[i] = [starti, endi, tipi] denotes the ith passenger requesting a ride from point starti to point endi who is willing to give a tipi dollar tip.

For each passenger i you pick up, you earn endi - starti + tipi dollars. You may only drive at most one passenger at a time.

Given n and rides, return the maximum number of dollars you can earn by picking up the passengers optimally.

Note: You may drop off a passenger and pick up a different passenger at the same point.

 

Example 1:

Input: n = 5, rides = [[2,5,4],[1,5,1]]
Output: 7
Explanation: We can pick up passenger 0 to earn 5 - 2 + 4 = 7 dollars.
Example 2:

Input: n = 20, rides = [[1,6,1],[3,10,2],[10,12,3],[11,12,2],[12,15,2],[13,18,1]]
Output: 20
Explanation: We will pick up the following passengers:
- Drive passenger 1 from point 3 to point 10 for a profit of 10 - 3 + 2 = 9 dollars.
- Drive passenger 2 from point 10 to point 12 for a profit of 12 - 10 + 3 = 5 dollars.
- Drive passenger 5 from point 13 to point 18 for a profit of 18 - 13 + 1 = 6 dollars.
We earn 9 + 5 + 6 = 20 dollars in total.
 

Constraints:

1 <= n <= 105
1 <= rides.length <= 3 * 104
rides[i].length == 3
1 <= starti < endi <= n
1 <= tipi <= 105


# java


class Solution {
  public long maxTaxiEarnings(int n, int[][] rides) {
    List<Pair<Integer, Integer>>[] startToEndAndEarns = new List[n];
    // dp[i] := the maximum dollars you can earn starting at i
    long[] dp = new long[n + 1];

    for (int i = 1; i < n; ++i)
      startToEndAndEarns[i] = new ArrayList<>();

    for (int[] ride : rides) {
      final int start = ride[0];
      final int end = ride[1];
      final int tip = ride[2];
      final int earn = end - start + tip;
      startToEndAndEarns[start].add(new Pair<>(end, earn));
    }

    for (int i = n - 1; i >= 1; --i) {
      dp[i] = dp[i + 1];
      for (Pair<Integer, Integer> pair : startToEndAndEarns[i]) {
        final int end = pair.getKey();
        final int earn = pair.getValue();
        dp[i] = Math.max(dp[i], dp[end] + earn);
      }
    }

    return dp[1];
  }
}


or


class Solution {
  public long maxTaxiEarnings(int n, int[][] rides) {
    List<Pair<Integer, Integer>>[] endToStartAndEarns = new List[n + 1];
    // dp[i] := the maximum dollars you can earn ending in i
    long[] dp = new long[n + 1];

    for (int i = 1; i <= n; ++i)
      endToStartAndEarns[i] = new ArrayList<>();

    for (int[] ride : rides) {
      final int start = ride[0];
      final int end = ride[1];
      final int tip = ride[2];
      final int earn = end - start + tip;
      endToStartAndEarns[end].add(new Pair<>(start, earn));
    }

    for (int i = 1; i <= n; ++i) {
      dp[i] = dp[i - 1];
      for (Pair<Integer, Integer> pair : endToStartAndEarns[i]) {
        final int start = pair.getKey();
        final int earn = pair.getValue();
        dp[i] = Math.max(dp[i], dp[start] + earn);
      }
    }

    return dp[n];
  }
}


or


class Solution {
    private int m;
    private int[][] rides;
    private Long[] f;

    public long maxTaxiEarnings(int n, int[][] rides) {
        Arrays.sort(rides, (a, b) -> a[0] - b[0]);
        m = rides.length;
        f = new Long[m];
        this.rides = rides;
        return dfs(0);
    }

    private long dfs(int i) {
        if (i >= m) {
            return 0;
        }
        if (f[i] != null) {
            return f[i];
        }
        int[] r = rides[i];
        int st = r[0], ed = r[1], tip = r[2];
        int j = search(ed, i + 1);
        return f[i] = Math.max(dfs(i + 1), dfs(j) + ed - st + tip);
    }

    private int search(int x, int l) {
        int r = m;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (rides[mid][0] >= x) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
}


or


class Solution {
    public long maxTaxiEarnings(int n, int[][] rides) {
        //Sort based on start time
        Arrays.sort(rides, (a,b) -> a[0] - b[0]);
        long max = 0;

        //Storing Long array instead of Int array, since max value is long.
        //Sort based on end time
        PriorityQueue<long[]> myQueue = new PriorityQueue<long[]>((a,b) -> Long.compare(a[0],b[0]));

        for (int i = 0; i < rides.length; i++) {
            int start = rides[i][0];
            int end = rides[i][1];
            long profit = end - start + Long.valueOf(rides[i][2]);

            while (!myQueue.isEmpty() && start >= myQueue.peek()[0]) {
                max = Math.max(max, myQueue.peek()[1]);
                myQueue.poll();
            }
            myQueue.offer(new long[] {end, profit + max});
        }

        while (!myQueue.isEmpty()) {
            max = Math.max(max, myQueue.poll()[1]);
        }

        return max;
    }
}


or


import java.util.*;

class Solution {
    public long maxTaxiEarnings(int n, int[][] rides) {
        Arrays.sort(rides, (a, b) -> a[0] - b[0]);
        TreeMap<Integer, Long> dp = new TreeMap<>();
        dp.put(0, 0L);

        for (int[] ride : rides) {
            int start = ride[0], end = ride[1], tip = ride[2];
            long currentEarning = end - start + tip;
            long maxEarning = dp.floorEntry(start).getValue() + currentEarning;
            dp.put(end, Math.max(dp.getOrDefault(end, 0L), maxEarning));
        }

        return dp.lastEntry().getValue();
    }
}



or



class Solution {
    public long maxTaxiEarnings(int n, int[][] rides) {
        //Sort based on start time
        Arrays.sort(rides, (a,b) -> a[0] - b[0]);
        long max = 0;

        //Storing Long array instead of Int array, since max value is long.
        //Sort based on end time
        PriorityQueue<long[]> myQueue = new PriorityQueue<long[]>((a,b) -> Long.compare(a[0],b[0]));

        for (int i = 0; i < rides.length; i++) {
            int start = rides[i][0];
            int end = rides[i][1];
            long profit = end - start + Long.valueOf(rides[i][2]);

            while (!myQueue.isEmpty() && start >= myQueue.peek()[0]) {
                max = Math.max(max, myQueue.peek()[1]);
                myQueue.poll();
            }
            myQueue.offer(new long[] {end, profit + max});
        }

        while (!myQueue.isEmpty()) {
            max = Math.max(max, myQueue.poll()[1]);
        }

        return max;
    }
}
