https://leetcode.com/problems/number-of-corner-rectangles/description/


750. Number Of Corner Rectangles
Description
Given an m x n integer matrix grid where each entry is only 0 or 1, return the number of corner rectangles.

A corner rectangle is four distinct 1's on the grid that forms an axis-aligned rectangle. Note that only the corners need to have the value 1. Also, all four 1's used must be distinct.

 

Example 1:



Input: grid = [[1,0,0,1,0],[0,0,1,0,1],[0,0,0,1,0],[1,0,1,0,1]]
Output: 1
Explanation: There is only one corner rectangle, with corners grid[1][2], grid[1][4], grid[3][2], grid[3][4].
Example 2:



Input: grid = [[1,1,1],[1,1,1],[1,1,1]]
Output: 9
Explanation: There are four 2x2 rectangles, four 2x3 and 3x2 rectangles, and one 3x3 rectangle.
Example 3:



Input: grid = [[1,1,1,1]]
Output: 0
Explanation: Rectangles must have four distinct corners.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 200
grid[i][j] is either 0 or 1.
The number of 1's in the grid is in the range [1, 6000].



# java




class Solution {
  public int countCornerRectangles(int[][] grid) {
    int ans = 0;

    for (int row1 = 0; row1 < grid.length - 1; ++row1)
      for (int row2 = row1 + 1; row2 < grid.length; ++row2) {
        int count = 0;
        for (int j = 0; j < grid[0].length; ++j)
          if (grid[row1][j] == 1 && grid[row2][j] == 1)
            ++count;
        ans += count * (count - 1) / 2;
      }

    return ans;
  }
}



or



class Solution {
    public int countCornerRectangles(int[][] grid) {
        int n = grid[0].length;
        int ans = 0;
        Map<List<Integer>, Integer> cnt = new HashMap<>();
        for (var row : grid) {
            for (int i = 0; i < n; ++i) {
                if (row[i] == 1) {
                    for (int j = i + 1; j < n; ++j) {
                        if (row[j] == 1) {
                            List<Integer> t = List.of(i, j);
                            ans += cnt.getOrDefault(t, 0);
                            cnt.merge(t, 1, Integer::sum);
                        }
                    }
                }
            }
        }
        return ans;
    }
}

