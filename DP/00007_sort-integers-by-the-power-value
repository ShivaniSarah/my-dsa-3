https://leetcode.com/problems/sort-integers-by-the-power-value/description/

1387. Sort Integers by The Power Value
Medium
Topics
Companies
Hint
The power of an integer x is defined as the number of steps needed to transform x into 1 using the following steps:

if x is even then x = x / 2
if x is odd then x = 3 * x + 1
For example, the power of x = 3 is 7 because 3 needs 7 steps to become 1 (3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1).

Given three integers lo, hi and k. The task is to sort all integers in the interval [lo, hi] by the power value in ascending order, if two or more integers have the same power value sort them by ascending order.

Return the kth integer in the range [lo, hi] sorted by the power value.

Notice that for any integer x (lo <= x <= hi) it is guaranteed that x will transform into 1 using these steps and that the power of x is will fit in a 32-bit signed integer.

 

Example 1:

Input: lo = 12, hi = 15, k = 2
Output: 13
Explanation: The power of 12 is 9 (12 --> 6 --> 3 --> 10 --> 5 --> 16 --> 8 --> 4 --> 2 --> 1)
The power of 13 is 9
The power of 14 is 17
The power of 15 is 17
The interval sorted by the power value [12,13,14,15]. For k = 2 answer is the second element which is 13.
Notice that 12 and 13 have the same power value and we sorted them in ascending order. Same for 14 and 15.
Example 2:

Input: lo = 7, hi = 11, k = 4
Output: 7
Explanation: The power array corresponding to the interval [7, 8, 9, 10, 11] is [16, 3, 19, 6, 14].
The interval sorted by power is [8, 10, 11, 7, 9].
The fourth number in the sorted array is 7.
 

Constraints:

1 <= lo <= hi <= 1000
1 <= k <= hi - lo + 1

# java


class Solution {
    
    HashMap<Integer, Integer> cache;
    public int getKth(int lo, int hi, int k) {
        cache = new HashMap();
        

        PriorityQueue<Item> maxHeap = new PriorityQueue<Item>((a, b) -> (a.power == b.power) ? (b.num - a.num) : (b.power - a.power));
        
        for(int num = lo; num <= hi; num++){
            //get the power of each num
            //store in maxheap
            maxHeap.add(new Item(num, getPower(num)));
            
            //if heap size beacome greater than k
            if(maxHeap.size() > k){
                //just remove item with maximum power
                maxHeap.remove();
            }
        }
        
        return maxHeap.remove().num;
    }
    
    private int getPower(int n){
        if(n == 1) return 0;
        
        //retrieve from cache
        if(cache.containsKey(n)) return cache.get(n);
        
        int power = 1 + ((n % 2 == 0) ?  getPower(n / 2) : getPower((3 * n) + 1));
        
        //save in cache
        cache.put(n, power);
        
        return power;
    }
}

class Item {
    int num;
    int power;
    
    public Item (int num, int power){
        this.num = num;
        this.power = power;
    }
}


or


class Solution {
    
    HashMap<Integer, Integer> dp = new HashMap<>();
    public int getKth(int lo, int hi, int k) {
        
        PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) ->{
            int steps1 = 0, steps2 = 0;
            if(!dp.containsKey(a)){
                dp.put(a, steps(a));
            }
            steps1 = dp.get(a);
            if(!dp.containsKey(b)){
                dp.put(b, steps(b));
            }
            steps2 = dp.get(b);
            
            if(steps1 == steps2){
                return b- a;
            }else{
                return steps2 - steps1;
            }
        });
        
        for(int i = lo ; i <= hi ; i++){
            pq.add(i);
            if(pq.size() > k){
                pq.poll();
            }
        }
        
        return pq.peek();
    }
    
    public int steps(int x){
        int steps = 0;
        
        while(x != 1){
            if(x % 2 == 0){
                x/=2;
            }else{
                x = 3 * x + 1;
            }
            steps++;
        }
        
        return steps;
    }
}


or

class Solution {
    
    static int[] power = new int[1000000];
    
    public int findPower (int num) {
        
        if (num == 1) {
            return 0;
        }
        else if (power[num] != 0) {
            return power[num];
        }
        
        power[num] = 1 + (num % 2 == 0 ? findPower (num / 2) : findPower (num * 3 + 1));
        return power[num];
    }
    
    public int getKth(int lo, int hi, int k) {
        
        int[][] powerList = new int[hi - lo + 1][2];
        
        for (int num = lo; num <= hi; num++) {
            powerList[num - lo][0] = num;
            powerList[num - lo][1] = findPower (num);
        }
        
        Arrays.sort (powerList, (pow1, pow2) -> pow1[1] - pow2[1]);
        
        return powerList[k - 1][0];
    }
}

or


class Solution {
    public int count(int x){
        int con = 0;
        while(x != 1){
            if(x%2==0){
                x = x/2;
                con++;
            }
            else{
                x = 3*x+1;
                con++;
            }
        }
        return con;
    }
    public int getKth(int lo, int hi, int k) {
        HashMap<Integer,Integer> map = new HashMap<>();
        
        for(int i = lo;i<=hi;i++){
            map.put(i,count(i));
        }
        
        List<Integer> al = new ArrayList<>(map.keySet());
        Collections.sort(al, (a,b) -> {
			
            if(map.get(a) != map.get(b)){
                return map.get(a) - map.get(b);
            }
			
            return a - b;
        });
        
        return al.get(k-1);
    }
}
