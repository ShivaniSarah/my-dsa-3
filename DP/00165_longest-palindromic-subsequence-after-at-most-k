https://leetcode.com/problems/longest-palindromic-subsequence-after-at-most-k-operations/description/

3472. Longest Palindromic Subsequence After at Most K Operations
Medium
Topics
Companies
Hint
You are given a string s and an integer k.

In one operation, you can replace the character at any position with the next or previous letter in the alphabet (wrapping around so that 'a' is after 'z'). For example, replacing 'a' with the next letter results in 'b', and replacing 'a' with the previous letter results in 'z'. Similarly, replacing 'z' with the next letter results in 'a', and replacing 'z' with the previous letter results in 'y'.

Return the length of the longest palindromic subsequence of s that can be obtained after performing at most k operations.

 

Example 1:

Input: s = "abced", k = 2

Output: 3

Explanation:

Replace s[1] with the next letter, and s becomes "acced".
Replace s[4] with the previous letter, and s becomes "accec".
The subsequence "ccc" forms a palindrome of length 3, which is the maximum.

Example 2:

Input: s = "aaazzz", k = 4

Output: 6

Explanation:

Replace s[0] with the previous letter, and s becomes "zaazzz".
Replace s[4] with the next letter, and s becomes "zaazaz".
Replace s[3] with the next letter, and s becomes "zaaaaz".
The entire string forms a palindrome of length 6.

 

Constraints:

1 <= s.length <= 200
1 <= k <= 200
s consists of only lowercase English letters.


# java


class Solution {
  // Similar to 516. Longest Palindromic Subsequence
  public int longestPalindromicSubsequence(String s, int k) {
    final int n = s.length();
    Integer[][][] mem = new Integer[n][n][k + 1];
    return lps(s, 0, n - 1, k, mem);
  }

  // Returns the length of LPS(s[i..j]) with at most `op` operations.
  private int lps(String s, int i, int j, int op, Integer[][][] mem) {
    if (i > j)
      return 0;
    if (i == j)
      return 1;
    if (mem[i][j][op] != null)
      return mem[i][j][op];
    if (s.charAt(i) == s.charAt(j))
      return mem[i][j][op] = 2 + lps(s, i + 1, j - 1, op, mem);
    mem[i][j][op] = Math.max(lps(s, i + 1, j, op, mem), lps(s, i, j - 1, op, mem));
    final int cost = getCost(s.charAt(i), s.charAt(j));
    if (cost <= op)
      mem[i][j][op] = Math.max(mem[i][j][op], 2 + lps(s, i + 1, j - 1, op - cost, mem));
    return mem[i][j][op];
  }

  private int getCost(char a, char b) {
    final int dist = Math.abs(a - b);
    return Math.min(dist, 26 - dist);
  }
}


or


class Solution {
    private char[] s;
    private Integer[][][] f;

    public int longestPalindromicSubsequence(String s, int k) {
        this.s = s.toCharArray();
        int n = s.length();
        f = new Integer[n][n][k + 1];
        return dfs(0, n - 1, k);
    }

    private int dfs(int i, int j, int k) {
        if (i > j) {
            return 0;
        }
        if (i == j) {
            return 1;
        }
        if (f[i][j][k] != null) {
            return f[i][j][k];
        }
        int res = Math.max(dfs(i + 1, j, k), dfs(i, j - 1, k));
        int d = Math.abs(s[i] - s[j]);
        int t = Math.min(d, 26 - d);
        if (t <= k) {
            res = Math.max(res, 2 + dfs(i + 1, j - 1, k - t));
        }
        f[i][j][k] = res;
        return res;
    }
}


or


class Solution {
    public int longestPalindromicSubsequence(String s, int k) {
        int n=s.length();
        int dp[][][]=new int[n][n][k+1];
        for(int[][]mat:dp){
            for(int []m:mat){
             Arrays.fill(m,-1);
            }
        }

        return solve(0,n-1,k,s,dp);
    }

    public int solve(int i,int j,int k,String s,int[][][] dp){
        if(i>j) return 0;
        if(i==j) return 1;
        if(dp[i][j][k]!=-1) return dp[i][j][k];
        int ans=0;
        if(s.charAt(i)==s.charAt(j)){
           ans=2+solve(i+1,j-1,k,s,dp);
        }
        else{
            ans=Math.max(solve(i+1,j,k,s,dp),solve(i,j-1,k,s,dp));
            int diff=findDiff(s.charAt(i),s.charAt(j));
            if(k>=diff){
                ans=Math.max(ans,2+solve(i+1,j-1,k-diff,s,dp));
            }
        }

        return dp[i][j][k]=ans;
    }

    public int findDiff(char ch1,char ch2){
        int dist=Math.abs(ch1-ch2);
        return Math.min(dist,26-dist);
    }
}



or


class Solution {

    int[][][] dp;
    public int longestPalindromicSubsequence(String s, int k) {
        dp = new int[s.length() + 1][s.length() + 1][k + 1];

        for(int[][] d: dp){
            for(int[] p: d){
                Arrays.fill(p, -1);
            }
        }

        return solve(0, s.length() - 1, k, s);
    }

    public int solve(int i, int j, int k, String s){

        if(i > j){
            return 0;
        }

        if(i == j){
            return 1;
        }

        if(dp[i][j][k] != -1){
            return dp[i][j][k];
        }

        int ans = 0;
        if(s.charAt(i) == s.charAt(j)){
            ans = solve(i + 1, j - 1, k, s) + 2;
        }else{

            ans = Math.max(solve(i + 1, j, k, s), solve(i, j - 1, k, s));

            int diff = getDiff(s.charAt(i), s.charAt(j));
            if(k >= diff){
                ans = Math.max(ans, solve(i + 1, j - 1, k - diff, s) + 2);
            }
        }

        return dp[i][j][k] = ans;
    }

    public int getDiff(char ch1, char ch2){
        int d = Math.abs(ch1 - ch2);
        return Math.min(d, 26 - d);
    }
}


or


class Solution {
    // Function to calculate the cost of changing character 'c' to 'b'
    private int calcost(char c, char b) {
        return Math.min(Math.abs(c - b), 26 - Math.abs(c - b)); // Considering wrap-around distance
    }

    public int longestPalindromicSubsequence(String s, int k) {
        int n = s.length();

        // 3D DP array: dp[i][j][m] stores the longest palindromic subsequence in s[i..j]
        // using at most m modifications.
        int[][][] dp = new int[n][n][k + 1];

        // Base case: A single character is always a palindrome of length 1
        for (int i = 0; i < n; i++) {
            for (int j = 0; j <= k; j++) {
                dp[i][i][j] = 1;
            }
        }

        // Base case: Two consecutive characters
        for (int i = 0; i < n - 1; i++) {
            int cost = calcost(s.charAt(i), s.charAt(i + 1));
            for (int j = 0; j <= k; j++) {
                if (j >= cost) 
                    dp[i][i + 1][j] = 2;  // We can make them equal
                else 
                    dp[i][i + 1][j] = 1;  // Otherwise, the best we can do is 1 character as palindrome
            }
        }

        // DP transition: Expanding for substrings of length 3 to n
        for (int len = 3; len <= n; len++) {
            for (int i = 0; i <= n - len; i++) {
                int start = i, end = i + len - 1;
                int cost = calcost(s.charAt(start), s.charAt(end));

                for (int j = 0; j <= k; j++) {
                    // If we can make s[start] == s[end], consider two possibilities:
                    // 1. Use `cost` operations to make them equal and take the middle palindrome
                    // 2. Do not modify them and just take the middle palindrome
                    if (j >= cost) {
                        dp[start][end][j] = Math.max(2 + dp[start + 1][end - 1][j - cost], dp[start + 1][end - 1][j]);
                    }

                    // Always maximize with cases where we ignore one of the ends
                    dp[start][end][j] = Math.max(dp[start][end][j], Math.max(dp[start][end - 1][j], dp[start + 1][end][j]));
                }
            }
        }

        return dp[0][n - 1][k];
    }
}


or
