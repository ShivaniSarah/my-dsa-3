https://leetcode.com/problems/last-stone-weight-ii/description/



1049. Last Stone Weight II
Medium
Topics
Companies
Hint
You are given an array of integers stones where stones[i] is the weight of the ith stone.

We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights x and y with x <= y. The result of this smash is:

If x == y, both stones are destroyed, and
If x != y, the stone of weight x is destroyed, and the stone of weight y has new weight y - x.
At the end of the game, there is at most one stone left.

Return the smallest possible weight of the left stone. If there are no stones left, return 0.

 

Example 1:

Input: stones = [2,7,4,1,8,1]
Output: 1
Explanation:
We can combine 2 and 4 to get 2, so the array converts to [2,7,1,8,1] then,
we can combine 7 and 8 to get 1, so the array converts to [2,1,1,1] then,
we can combine 2 and 1 to get 1, so the array converts to [1,1,1] then,
we can combine 1 and 1 to get 0, so the array converts to [1], then that's the optimal value.
Example 2:

Input: stones = [31,26,33,21,40]
Output: 5
 

Constraints:

1 <= stones.length <= 30
1 <= stones[i] <= 100


# java


class Solution {
  public int lastStoneWeightII(int[] stones) {
    final int sum = Arrays.stream(stones).sum();
    boolean[] dp = new boolean[sum + 1];
    dp[0] = true;
    int s = 0;

    for (int stone : stones)
      for (int w = sum / 2; w > 0; --w) {
        if (w >= stone)
          dp[w] = dp[w] || dp[w - stone];
        if (dp[w])
          s = Math.max(s, w);
      }

    return sum - 2 * s;
  }
}


or


class Solution {
    public int lastStoneWeightII(int[] stones) {
        int s = 0;
        for (int v : stones) {
            s += v;
        }
        int m = stones.length;
        int n = s >> 1;
        int[] dp = new int[n + 1];
        for (int v : stones) {
            for (int j = n; j >= v; --j) {
                dp[j] = Math.max(dp[j], dp[j - v] + v);
            }
        }
        return s - dp[n] * 2;
    }
}


or


class Solution {
    public int lastStoneWeightII(int[] stones) {
        int S=0;
        for(int i: stones)
            S+=i;
        int S2=0;
        int n=stones.length;
        //maximise S2
        boolean[][] dp = new boolean[S/2 +1][n+1];
        for(int i=0;i<=n;i++)
            dp[0][i]=true;
        //zero sum is always possible(just dont take any element in the array)
        
        for(int i=1;i<=n;i++)
        {
            for(int s=1;s<=S/2;s++)
            {
                if(dp[s][i-1] || (s>=stones[i-1] &&dp[s-stones[i-1]][i-1]))
                {
                    dp[s][i]=true;
                    S2=Math.max(s,S2);
                }
                
            }
        }
        return S-2*S2;
        
    }
}


or


class Solution {
    public int lastStoneWeightII(int[] stones) {
        int sumStWt = 0;
        for(int stone : stones){
            sumStWt += stone;
        }
        Integer[][] dp = new Integer[stones.length][sumStWt];
        return helper(stones, 0, 0, 0, dp);
    }
    
    private int helper(int[] stones, int index, int sumL, int sumR, Integer[][] dp) {
        if(index == stones.length){
            return Math.abs(sumL - sumR);
        }
        
        if(dp[index][sumL] != null) {
            return dp[index][sumL];
        }
        
        dp[index][sumL] = Math.min(helper(stones, index+1, sumL + stones[index], sumR, dp) , helper(stones, index+1, sumL, sumR + stones[index], dp));
        return dp[index][sumL];
    }
}

or


class Solution {
    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        int sum = addAll(stones);
        int halfSum = sum / 2;

        int[] dp = new int[halfSum + 1];
        
        for (int i = 1; i <= n; i++) {
            for (int j = halfSum; j >= stones[i-1]; j--) {
                dp[j] = Math.max(dp[j], dp[j - stones[i-1]] + stones[i-1]);
            }
        }

        return sum - 2 * dp[halfSum];
    }

    private int addAll(int[] arr) {
        int ret = 0;

        for (int num : arr) {
            ret += num;
        }
        
        return ret;
    }
}



or



class Solution {
    public int lastStoneWeightII(int[] stones) {
        int n = stones.length;
        int sum = 0;
        for (int stone : stones) {
            sum += stone;
        }
        
        boolean[] dp = new boolean[sum / 2 + 1];
        dp[0] = true;
        
        for (int i = 0; i < n; i++) {
            int stone = stones[i];
            for (int j = sum / 2; j >= stone; j--) {
                if (dp[j - stone]) {
                    dp[j] = true;
                }
            }
        }
        
        int i = sum / 2;
        while (i >= 0 && !dp[i]) {
            i--;
        }
        
        return sum - 2 * i;
    }
}
