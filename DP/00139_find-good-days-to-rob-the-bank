https://leetcode.com/problems/find-good-days-to-rob-the-bank/description/

2100. Find Good Days to Rob the Bank
Medium
Topics
Companies
Hint
You and a gang of thieves are planning on robbing a bank. You are given a 0-indexed integer array security, where security[i] is the number of guards on duty on the ith day. The days are numbered starting from 0. You are also given an integer time.

The ith day is a good day to rob the bank if:

There are at least time days before and after the ith day,
The number of guards at the bank for the time days before i are non-increasing, and
The number of guards at the bank for the time days after i are non-decreasing.
More formally, this means day i is a good day to rob the bank if and only if security[i - time] >= security[i - time + 1] >= ... >= security[i] <= ... <= security[i + time - 1] <= security[i + time].

Return a list of all days (0-indexed) that are good days to rob the bank. The order that the days are returned in does not matter.

 

Example 1:

Input: security = [5,3,3,3,5,6,2], time = 2
Output: [2,3]
Explanation:
On day 2, we have security[0] >= security[1] >= security[2] <= security[3] <= security[4].
On day 3, we have security[1] >= security[2] >= security[3] <= security[4] <= security[5].
No other days satisfy this condition, so days 2 and 3 are the only good days to rob the bank.
Example 2:

Input: security = [1,1,1,1,1], time = 0
Output: [0,1,2,3,4]
Explanation:
Since time equals 0, every day is a good day to rob the bank, so return every day.
Example 3:

Input: security = [1,2,3,4,5,6], time = 2
Output: []
Explanation:
No day has 2 days before it that have a non-increasing number of guards.
Thus, no day is a good day to rob the bank, so return an empty list.
 

Constraints:

1 <= security.length <= 105
0 <= security[i], time <= 105



# java


class Solution {
  public List<Integer> goodDaysToRobBank(int[] security, int time) {
    final int n = security.length;
    List<Integer> ans = new ArrayList<>();
    // dec[i] := the number of continuous decreasing numbers before i
    int[] dec = new int[n];
    // inc[i] := the number of continuous increasing numbers after i
    int[] inc = new int[n];

    for (int i = 1; i < n; ++i)
      if (security[i - 1] >= security[i])
        dec[i] = dec[i - 1] + 1;

    for (int i = n - 2; i >= 0; --i)
      if (security[i] <= security[i + 1])
        inc[i] = inc[i + 1] + 1;

    for (int i = 0; i < n; ++i)
      if (dec[i] >= time && inc[i] >= time)
        ans.add(i);

    return ans;
  }
}


or



class Solution {
    public List<Integer> goodDaysToRobBank(int[] security, int time) {
        int n = security.length;
        if (n <= time * 2) {
            return Collections.emptyList();
        }
        int[] left = new int[n];
        int[] right = new int[n];
        for (int i = 1; i < n; ++i) {
            if (security[i] <= security[i - 1]) {
                left[i] = left[i - 1] + 1;
            }
        }
        for (int i = n - 2; i >= 0; --i) {
            if (security[i] <= security[i + 1]) {
                right[i] = right[i + 1] + 1;
            }
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = time; i < n - time; ++i) {
            if (time <= Math.min(left[i], right[i])) {
                ans.add(i);
            }
        }
        return ans;
    }
}

or


class Solution {
    public List<Integer> goodDaysToRobBank(int[] arr, int time) {
        int n = arr.length;
        List<Integer> arr1 = new ArrayList<>();

        if(time == 0){
            for(int i = 0;i<n;i++)arr1.add(i);
            return arr1;
        }

        int[] l = new int[n];
        int[] r = new int[n];

        for(int i=1;i<n;i++){
            if(arr[i]<=arr[i-1]){
                l[i] = l[i-1]+1;
            }
        }
        for(int i=n-2;i>=0;i--){
            if(arr[i]<=arr[i+1]){
                r[i] = r[i+1]+1;
            }
        }

        for(int i = 0 ;i<n;i++){
            if(l[i]>=time && r[i]>=time){
                arr1.add(i);
            }
        }
    return arr1;
    }
}


or


class Solution {
    public List<Integer> goodDaysToRobBank(int[] security, int time) {
        int[] nonincrease = new int[security.length];
        for(int i = 1; i < security.length - time; i++){
            if(security[i]>security[i-1]){
                nonincrease[i] = 0;
            } else {
                nonincrease[i] = nonincrease[i-1] + 1;
            }
        }

        int[] nondecrease = new int[security.length];
        for(int i = security.length - 2; i >= time; i--) {
            if(security[i] > security[i + 1]){
                nondecrease[i] = 0;
            } else {
                nondecrease[i] = nondecrease[i + 1] + 1;
            }
        }

        ArrayList<Integer> result = new ArrayList<>();
        for(int i = time; i < security.length - time; i++) {
            if(nonincrease[i] >= time && nondecrease[i] >= time) {
                result.add(i);
            }
        }
        return result;

    }
}


or


class Solution {
    public List<Integer> goodDaysToRobBank(int[] security, int time) {
        int n = security.length;
        int []left = new int[n];
        int []right = new int[n];
        
        for(int i = 1;i<n;i++){
            left[i] = security[i] <= security[i-1] ? left[i-1] + 1 : 0;
        }
        for(int i = n-2;i>=0;i--){
            right[i] = security[i] <= security[i+1] ? right[i+1] + 1 : 0;
        }
        
        List<Integer> res = new ArrayList<>();
        for(int i = time;i<security.length-time;i++){
            if(left[i] >= time && right[i] >= time){
                res.add(i);
            }
        }
        
        return res;
    }
}
