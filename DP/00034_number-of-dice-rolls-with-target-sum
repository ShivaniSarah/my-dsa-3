https://leetcode.com/problems/number-of-dice-rolls-with-target-sum/


1155. Number of Dice Rolls With Target Sum
Medium
Topics
Companies
Hint
You have n dice, and each dice has k faces numbered from 1 to k.

Given three integers n, k, and target, return the number of possible ways (out of the kn total ways) to roll the dice, so the sum of the face-up numbers equals target. Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: n = 1, k = 6, target = 3
Output: 1
Explanation: You throw one die with 6 faces.
There is only one way to get a sum of 3.
Example 2:

Input: n = 2, k = 6, target = 7
Output: 6
Explanation: You throw two dice, each with 6 faces.
There are 6 ways to get a sum of 7: 1+6, 2+5, 3+4, 4+3, 5+2, 6+1.
Example 3:

Input: n = 30, k = 30, target = 500
Output: 222616187
Explanation: The answer must be returned modulo 109 + 7.
 

Constraints:

1 <= n, k <= 30
1 <= target <= 1000


# java


import java.util.Arrays;

class Solution {
    final int mod = (int) Math.pow(10, 9) + 7;

    public int numRollsToTarget(int n, int k, int target) {
        int[][] dp = new int[n + 1][target + 1];
        for (int[] d : dp) {
            Arrays.fill(d, -1);
        }
        return recursion(dp, n, k, target);
    }

    private int recursion(int[][] dp, int n, int k, int target) {
        if (target == 0 && n == 0) return 1;
        if (n == 0 || target <= 0) return 0;

        if (dp[n][target] != -1) return (int) (dp[n][target] % mod);
        int ways = 0;
        for (int i = 1; i <= k; i++) {
            ways = (ways + recursion(dp, n - 1, k, target - i)) % mod;
        }
        dp[n][target] = ways % mod;
        return dp[n][target];
    }
}




or


class Solution {
    public int numRollsToTarget(int n, int k, int target) {
        long mod = (long) Math.pow(10, 9) + 7;

        long[] prev = new long[target + 1];
        long[] curr = new long[target + 1];

        prev[0] = 1;

        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                long ans = 0;
                for (int x = 1; x <= k; x++) {
                    if (j - x >= 0) {
                        ans += prev[j - x] % mod;
                    }
                }
                curr[j] = ans;
            }
            prev = curr.clone();
        }
        return (int) (prev[target] % mod);
    }
}




or

// tle

class Solution {
      private int mod = (int) Math.pow(10, 9) + 7;
  public int numRollsToTarget(int n, int k, int target) {
  	int[][] mem = new int[n + 1][target + 1];
  	for (int[] a : mem)
  		Arrays.fill(a, -1);
  	return numRollsToTarget(n, k, target, mem);
  }

  private int numRollsToTarget(int n, int k, int target, int[][] mem) {
  	if (target == 0 && n == 0)
  		return 1;
  	if (target < 0 || n == 0)
  		return 0;
  	if (mem[n][target] != -1)
  		return mem[n][target];
  	int count = 0;
  	for (int i = 1; i <= k; i++) {
  		target -= i;
  		count = (count + numRollsToTarget(n - 1, k, target, mem) % mod) % mod;
  		target += i;          //backtracking
  	}
  	return mem[n][target] = count;
  }
}



or


class Solution {
    int MOD = 1000000007;
    
    public int numRollsToTarget(int n, int k, int target) {
        if (n == 0 && target == 0) 
            return 1;
        if (target < n || n * k < target) 
            return 0;
        
        int[][] dp = new int[n + 1][target + 1];
        
        for (int i = 1; i <= k && i <= target; i++) {
            dp[1][i] = 1;
        }
        
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= target; j++) {
                for (int x = 1; x <= k && x < j; x++) {
                    dp[i][j] = (dp[i][j] + dp[i - 1][j - x]) % MOD;
                }
            }
        }
        
        return dp[n][target];
    }
}


or


class Solution {
    int[][] dp;
    int MOD = 1000000007;
    public int numRollsToTarget(int n, int k, int target) {
        if (n == 0 && target == 0) 
            return 1;
        if (target < n || n * k < target) 
            return 0;
        dp = new int[n + 1][target + 1];
        return f(n, k, target);
    }
    public int f(int n, int k, int target) {
        if (n == 0 && target == 0){
            return 1;
        }
        if (target < n || n * k < target) {
            return 0;
        }
        if (dp[n][target] != 0) {
            return dp[n][target];
        }
        int res = 0;
        for (int i = 1; i <= k; i++) {
            if (target < i) break;
                res = (res + f(n - 1, k, target - i) % MOD) % MOD;
        }
        dp[n][target] = res;
        return res;
    }
}

or


