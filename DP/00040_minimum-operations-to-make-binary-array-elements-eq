https://leetcode.com/problems/minimum-operations-to-make-binary-array-elements-equal-to-one-ii/description/


3192. Minimum Operations to Make Binary Array Elements Equal to One II
Medium
Topics
Companies
Hint
You are given a binary array nums.

You can do the following operation on the array any number of times (possibly zero):

Choose any index i from the array and flip all the elements from index i to the end of the array.
Flipping an element means changing its value from 0 to 1, and from 1 to 0.

Return the minimum number of operations required to make all elements in nums equal to 1.

 

Example 1:

Input: nums = [0,1,1,0,1]

Output: 4

Explanation:
We can do the following operations:

Choose the index i = 1. The resulting array will be nums = [0,0,0,1,0].
Choose the index i = 0. The resulting array will be nums = [1,1,1,0,1].
Choose the index i = 4. The resulting array will be nums = [1,1,1,0,0].
Choose the index i = 3. The resulting array will be nums = [1,1,1,1,1].
Example 2:

Input: nums = [1,0,0,0]

Output: 1

Explanation:
We can do the following operation:

Choose the index i = 1. The resulting array will be nums = [1,1,1,1].
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 1


# java

class Solution {
       public int minOperations(int[] nums) {
        int ops = 0;
        for (int num : nums) {
            if (num == ops % 2) {
                ++ops;
            }
        }
        return ops;
    }
}


or


class Solution {
    public int minOperations(int[] nums) {
        int res = 0;
        boolean zero_found = false;
        
        for(int i=0; i<nums.length; i++){
            if(nums[i] == 0 && zero_found == false){
                zero_found = true;
            }else if(nums[i] == 1 && zero_found == true){
                res += 2;
                zero_found = false;
            }
        }

        if(nums[nums.length-1] == 0){
            res++;
        }
            
        return res;
    }
}


or

class Solution {
    public int minOperations(int[] nums) {
        int count = 0;
        boolean zeroFound = false;

        for(int x : nums) {
            if(x == 0 && !zeroFound) zeroFound = true;

            else if(x == 1 && zeroFound) {
                count += 2;
                zeroFound = false;
            }
        }

        if(nums[nums.length - 1] == 0) count++;

        return count;
    }
}
