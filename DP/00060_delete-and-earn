https://leetcode.com/problems/delete-and-earn/description/

740. Delete and Earn
Medium
Topics
Companies
Hint
You are given an integer array nums. You want to maximize the number of points you get by performing the following operation any number of times:

Pick any nums[i] and delete it to earn nums[i] points. Afterwards, you must delete every element equal to nums[i] - 1 and every element equal to nums[i] + 1.
Return the maximum number of points you can earn by applying the above operation some number of times.

 

Example 1:

Input: nums = [3,4,2]
Output: 6
Explanation: You can perform the following operations:
- Delete 4 to earn 4 points. Consequently, 3 is also deleted. nums = [2].
- Delete 2 to earn 2 points. nums = [].
You earn a total of 6 points.
Example 2:

Input: nums = [2,2,3,3,3,4]
Output: 9
Explanation: You can perform the following operations:
- Delete a 3 to earn 3 points. All 2's and 4's are also deleted. nums = [3,3].
- Delete a 3 again to earn 3 points. nums = [3].
- Delete a 3 once more to earn 3 points. nums = [].
You earn a total of 9 points.
 

Constraints:

1 <= nums.length <= 2 * 104
1 <= nums[i] <= 104


# java


class Solution {
  public int deleteAndEarn(int[] nums) {
    // Reduce to 198. House Robber
    int[] bucket = new int[10001];

    for (final int num : nums)
      bucket[num] += num;

    int prev1 = 0;
    int prev2 = 0;

    for (final int num : bucket) {
      final int dp = Math.max(prev1, prev2 + num);
      prev2 = prev1;
      prev1 = dp;
    }

    return prev1;
  }
}


or


class Solution {
  /** Variable Description:
 *
 *  numToCount = map of nums[i] to their count
 *  min = min number in nums
 *  max = max number in nums
 *  prevIncEarn = Earning if previous num is excluded (deleted)
 *  prevExcEarn = Earning if previous num is included (not-deleted)
 *  incEarn = Earning if this num is excluded (deleted)
 *  excEarn = Earning if this num is included (not-deleted)
 */
public int deleteAndEarn(int[] nums) {
	var numToCount = new HashMap<Integer, Integer>();
	var min = Integer.MAX_VALUE;
	var max = Integer.MIN_VALUE;
	for (var num : nums) {
		numToCount.compute(num, (k, v) -> v == null ? 1 : ++v);
		min = Math.min(min, num);
		max = Math.max(max, num);
	}

	var prevIncEarn = 0;
	var prevExcEarn = 0;
	for (var i = min; i <= max; i++) {
		var incEarn = prevExcEarn + i * numToCount.getOrDefault(i, 0);
		var excEarn = Math.max(prevIncEarn, prevExcEarn);
		prevIncEarn = incEarn;
		prevExcEarn = excEarn;
	}
	return Math.max(prevIncEarn, prevExcEarn);
}
}



or


class Solution {
   public int deleteAndEarn(int[] nums) {
        if (nums.length == 0)
            return 0;
        int[] values = new int[10001];
        for (int num : nums)
            values[num] += num;

        int prev1 = 0;
        int prev2 = 0;

        for (int value : values) {
            int tmp = prev1;
            prev1 = Math.max(prev2 + value, prev1);
            prev2 = tmp;
        }
        return prev1;
    }
}


or


//Tabulation approach:-
/*Space Complexity:-O(N)
  Time Complexity:-O(N)*/
class Solution {
    public int deleteAndEarn(int[] nums) {
       int max=Integer.MIN_VALUE;
        for(int i:nums){
           max=Math.max(i,max);
        } 
        // get maximum element and then initialize the frequncy array with size max+1
        int[] freq=new int[max+1];
        // now it works like House robber problem
        /*where index i represents frequency of i and you can't pick      consequetive elemets*/
        for(int i:nums){
            freq[i]++;
        }
        //modifying frequency to total cost
       for(int i=0;i<max+1;i++){
           freq[i]*=i;
       }
        
        int[] dp=new int[max+1];
        dp[0]=freq[0];
        if(max+1>1){
            dp[1]=Math.max(dp[0],freq[1]);
        }
        for(int i=2;i<max+1;i++){
           int left=dp[i-2]+freq[i];
            int right=dp[i-1];
            dp[i]=Math.max(left,right);
        }
        //returning maximum cost we can get through the procesue in the program
        return dp[max];
    }
}
