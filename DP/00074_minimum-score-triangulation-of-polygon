https://leetcode.com/problems/minimum-score-triangulation-of-polygon/description/


1039. Minimum Score Triangulation of Polygon
Medium
Topics
Companies
Hint
You have a convex n-sided polygon where each vertex has an integer value. You are given an integer array values where values[i] is the value of the ith vertex in clockwise order.

Polygon triangulation is a process where you divide a polygon into a set of triangles and the vertices of each triangle must also be vertices of the original polygon. Note that no other shapes other than triangles are allowed in the division. This process will result in n - 2 triangles.

You will triangulate the polygon. For each triangle, the weight of that triangle is the product of the values at its vertices. The total score of the triangulation is the sum of these weights over all n - 2 triangles.

Return the minimum possible score that you can achieve with some triangulation of the polygon.

 

Example 1:



Input: values = [1,2,3]

Output: 6

Explanation: The polygon is already triangulated, and the score of the only triangle is 6.

Example 2:



Input: values = [3,7,4,5]

Output: 144

Explanation: There are two triangulations, with possible scores: 3*7*5 + 4*5*7 = 245, or 3*4*5 + 3*4*7 = 144.
The minimum score is 144.

Example 3:



Input: values = [1,3,1,4,1,5]

Output: 13

Explanation: The minimum score triangulation is 1*1*3 + 1*1*4 + 1*1*5 + 1*1*1 = 13.

 

Constraints:

n == values.length
3 <= n <= 50
1 <= values[i] <= 100


# java



class Solution {
    int dp[][];
    public int minScoreTriangulation(int[] values) {
        int n = values.length;
        dp = new int[n][n];
        for (int i=0;i<n;i++) Arrays.fill(dp[i],-1);
        // call the function with i = 1, j = n-1
        // because every time we have to take the ar[i-1] that's why we are starting from i = 1
        return helper_min_score(1,n-1,values);
    }
    
    private int helper_min_score(int i,int j,int values[]){
        if (i == j) return 0;
        
        if (dp[i][j] != -1) return dp[i][j];
        
        int mini = Integer.MAX_VALUE;
        // do partition
    
        for (int k=i;k<=j-1;k++){
            int steps = values[i-1] * values[k] * values[j]
                + helper_min_score(i,k,values)// partition 1
                + helper_min_score(k+1,j,values); // partition 2
            mini = Math.min(steps,mini);
        }
        
        return dp[i][j] = mini;
    }
}


or



class Solution {
    
public int minScoreTriangulation(int[] values) {
        
        int n = values.length;
        int dp[][] = new int[n][n];
        
        // no need to initialize the dp for base case. because all the values are already 0 in dp initially
        
        for (int i=n-1;i>=1;i--){
            for (int j=i+1;j<n;j++){
                int mini = Integer.MAX_VALUE;
                // for partition
                for (int k=i;k<=j-1;k++){
                    int steps = values[i-1] * values[k] * values[j] + dp[i][k] + dp[k+1][j];
                    mini = Math.min(mini,steps);
                }
                dp[i][j] = mini;
            }
        }
        return dp[1][n-1];
        
    }
}


or



class Solution {
    private int n;
    private int[] values;
    private Integer[][] f;

    public int minScoreTriangulation(int[] values) {
        n = values.length;
        this.values = values;
        f = new Integer[n][n];
        return dfs(0, n - 1);
    }

    private int dfs(int i, int j) {
        if (i + 1 == j) {
            return 0;
        }
        if (f[i][j] != null) {
            return f[i][j];
        }
        int ans = 1 << 30;
        for (int k = i + 1; k < j; ++k) {
            ans = Math.min(ans, dfs(i, k) + dfs(k, j) + values[i] * values[k] * values[j]);
        }
        return f[i][j] = ans;
    }
}



or


class Solution {
  public int minScoreTriangulation(int[] values) {
    final int n = values.length;
    int[][] dp = new int[n][n];

    for (int j = 2; j < n; ++j)
      for (int i = j - 2; i >= 0; --i) {
        dp[i][j] = Integer.MAX_VALUE;
        for (int k = i + 1; k < j; ++k)
          dp[i][j] = Math.min(dp[i][j], dp[i][k] + values[i] * values[k] * values[j] + dp[k][j]);
      }

    return dp[0][n - 1];
  }
}
