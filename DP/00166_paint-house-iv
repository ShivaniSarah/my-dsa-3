https://leetcode.com/problems/paint-house-iv/description/


3429. Paint House IV
Medium
Topics
Companies
Hint
You are given an even integer n representing the number of houses arranged in a straight line, and a 2D array cost of size n x 3, where cost[i][j] represents the cost of painting house i with color j + 1.

The houses will look beautiful if they satisfy the following conditions:

No two adjacent houses are painted the same color.
Houses equidistant from the ends of the row are not painted the same color. For example, if n = 6, houses at positions (0, 5), (1, 4), and (2, 3) are considered equidistant.
Return the minimum cost to paint the houses such that they look beautiful.

 

Example 1:

Input: n = 4, cost = [[3,5,7],[6,2,9],[4,8,1],[7,3,5]]

Output: 9

Explanation:

The optimal painting sequence is [1, 2, 3, 2] with corresponding costs [3, 2, 1, 3]. This satisfies the following conditions:

No adjacent houses have the same color.
Houses at positions 0 and 3 (equidistant from the ends) are not painted the same color (1 != 2).
Houses at positions 1 and 2 (equidistant from the ends) are not painted the same color (2 != 3).
The minimum cost to paint the houses so that they look beautiful is 3 + 2 + 1 + 3 = 9.

Example 2:

Input: n = 6, cost = [[2,4,6],[5,3,8],[7,1,9],[4,6,2],[3,5,7],[8,2,4]]

Output: 18

Explanation:

The optimal painting sequence is [1, 3, 2, 3, 1, 2] with corresponding costs [2, 8, 1, 2, 3, 2]. This satisfies the following conditions:

No adjacent houses have the same color.
Houses at positions 0 and 5 (equidistant from the ends) are not painted the same color (1 != 2).
Houses at positions 1 and 4 (equidistant from the ends) are not painted the same color (3 != 1).
Houses at positions 2 and 3 (equidistant from the ends) are not painted the same color (2 != 3).
The minimum cost to paint the houses so that they look beautiful is 2 + 8 + 1 + 2 + 3 + 2 = 18.

 

Constraints:

2 <= n <= 105
n is even.
cost.length == n
cost[i].length == 3
0 <= cost[i][j] <= 105


# java


class Solution {
  public long minCost(int n, int[][] costs) {
    final int INVALID_COLOR = 3;
    Long[][][] mem = new Long[n / 2][4][4];
    return minCost(costs, 0, INVALID_COLOR, INVALID_COLOR, mem);
  }

  private long minCost(int[][] costs, int i, int prevLeftColor, int prevRightColor,
                       Long[][][] mem) {
    if (i == costs.length / 2)
      return 0;
    if (mem[i][prevLeftColor][prevRightColor] != null)
      return mem[i][prevLeftColor][prevRightColor];

    long res = Long.MAX_VALUE;

    for (final int leftColor : getValidColors(prevLeftColor))
      for (final int rightColor : getValidColors(prevRightColor)) {
        if (leftColor == rightColor)
          continue;
        final long leftCost = costs[i][leftColor];
        final long rightCost = costs[costs.length - 1 - i][rightColor];
        res =
            Math.min(res, leftCost + rightCost + minCost(costs, i + 1, leftColor, rightColor, mem));
      }

    return mem[i][prevLeftColor][prevRightColor] = res;
  }

  private List<Integer> getValidColors(int prevColor) {
    List<Integer> validColors = new ArrayList<>();
    for (int color = 0; color < 3; ++color)
      if (color != prevColor)
        validColors.add(color);
    return validColors;
  }
}


or


class Solution {
    private long f(int i, int left, int right, int n, int[][] cost, long[][][] dp) {
        
        if(i >= n / 2) return 0;
        if(dp[i][left][right] != -1) return dp[i][left][right];

        long t = Long.MAX_VALUE;
        for(int col1 = 0; col1 < 3; col1++) {
            if(col1 != left) {
                for(int col2 = 0; col2 < 3; col2++) {
                    if(col2 != right && col2 != col1) {
                        long q = cost[i][col1] + cost[n - 1 - i][col2] + f(i + 1, col1, col2, n, cost, dp);
                        t = Math.min(t, q);
                    }
                }
            }
        }
        dp[i][left][right] = t;
        return t;
    }

    public long minCost(int n, int[][] cost) {
        long[][][] dp = new long[n][4][4];
        for (long[][] arr : dp) {
            for (long[] subArr : arr) {
                Arrays.fill(subArr, -1);
            }
        }
        return f(0, 3, 3, n, cost, dp);
    }
}
