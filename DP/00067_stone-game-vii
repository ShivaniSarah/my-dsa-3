https://leetcode.com/problems/stone-game-vii/description/


1690. Stone Game VII
Medium
Topics
Companies
Hint
Alice and Bob take turns playing a game, with Alice starting first.

There are n stones arranged in a row. On each player's turn, they can remove either the leftmost stone or the rightmost stone from the row and receive points equal to the sum of the remaining stones' values in the row. The winner is the one with the higher score when there are no stones left to remove.

Bob found that he will always lose this game (poor Bob, he always loses), so he decided to minimize the score's difference. Alice's goal is to maximize the difference in the score.

Given an array of integers stones where stones[i] represents the value of the ith stone from the left, return the difference in Alice and Bob's score if they both play optimally.

 

Example 1:

Input: stones = [5,3,1,4,2]
Output: 6
Explanation: 
- Alice removes 2 and gets 5 + 3 + 1 + 4 = 13 points. Alice = 13, Bob = 0, stones = [5,3,1,4].
- Bob removes 5 and gets 3 + 1 + 4 = 8 points. Alice = 13, Bob = 8, stones = [3,1,4].
- Alice removes 3 and gets 1 + 4 = 5 points. Alice = 18, Bob = 8, stones = [1,4].
- Bob removes 1 and gets 4 points. Alice = 18, Bob = 12, stones = [4].
- Alice removes 4 and gets 0 points. Alice = 18, Bob = 12, stones = [].
The score difference is 18 - 12 = 6.
Example 2:

Input: stones = [7,90,5,1,100,10,10,2]
Output: 122
 

Constraints:

n == stones.length
2 <= n <= 1000
1 <= stones[i] <= 1000


# java

class Solution {
    private int[] s;
    private Integer[][] f;

    public int stoneGameVII(int[] stones) {
        int n = stones.length;
        s = new int[n + 1];
        f = new Integer[n][n];
        for (int i = 0; i < n; ++i) {
            s[i + 1] = s[i] + stones[i];
        }
        return dfs(0, n - 1);
    }

    private int dfs(int i, int j) {
        if (i > j) {
            return 0;
        }
        if (f[i][j] != null) {
            return f[i][j];
        }
        int a = s[j + 1] - s[i + 1] - dfs(i + 1, j);
        int b = s[j] - s[i] - dfs(i, j - 1);
        return f[i][j] = Math.max(a, b);
    }
}


or


class Solution {
  public int stoneGameVII(int[] stones) {
    final int n = stones.length;
    Integer[][] mem = new Integer[n][n];
    int[] prefix = new int[n + 1];
    for (int i = 0; i < n; ++i)
      prefix[i + 1] = prefix[i] + stones[i];
    return stoneGameVII(stones, 0, n - 1, prefix, mem);
  }

  // Returns the maximum score you can get more than your opponent in
  // stones[i..j].
  private int stoneGameVII(int[] stones, int i, int j, int[] prefix, Integer[][] mem) {
    if (i == j)
      return 0;
    if (mem[i][j] != null)
      return mem[i][j];
    // Remove stones[i] to get sum(stones[i + 1..j]).
    final int removeLeft = prefix[j + 1] - prefix[i + 1] - //
                           stoneGameVII(stones, i + 1, j, prefix, mem);

    // Remove stones[j] to get sum(stones[i..j - 1]).
    final int removeRight = prefix[j] - prefix[i] - //
                            stoneGameVII(stones, i, j - 1, prefix, mem);
    return mem[i][j] = Math.max(removeLeft, removeRight);
  }
}




or

class Solution {
  public int stoneGameVII(int[] stones) {
    final int n = stones.length;
    // dp[i][j] := the maximum score you can get more than your opponent in stones[i..j]
    int[][] dp = new int[n][n];
    int[] prefix = new int[n + 1];

    for (int i = 0; i < n; ++i)
      prefix[i + 1] = stones[i] + prefix[i];

    for (int d = 1; d < n; ++d)
      for (int i = 0; i + d < n; ++i) {
        final int j = i + d;
        dp[i][j] = Math.max(prefix[j + 1] - prefix[i + 1] - dp[i + 1][j],
                            prefix[j] - prefix[i] - dp[i][j - 1]);
      }

    return dp[0][n - 1];
  }
}


or


class Solution {
    public int stoneGameVII(int[] S) {
        int N = S.length;
        int[] dp = new int[N];
        for (int i = N - 2; i >= 0; i--) {
            int total = S[i];
            for (int j = i + 1; j < N; j++) {
                total += S[j];
                dp[j] = Math.max(total - S[i] - dp[j], total - S[j] - dp[j-1]);
            }
        }
        return dp[N-1];
    }
}


or



class Solution {
   private int[] preSum;
    private int[] dp;
    
    public int stoneGameVII(int[] stones) {
        int size = stones.length;
        preSum = new int[size + 1];
        dp = new int[size + 1];
        
        for(int i = 0; i < size; i++)
            preSum[i + 1] = preSum[i] + stones[i];
        
        for(int end = 1; end <= size; end++) {
            for(int i = 0; i < size - end; i++) {
                dp[i] = Math.max(
                    getScore(i + 1, i + end) - dp[i + 1], // As if we pick i, we need to find solution of (i+1, end).
                    getScore(i, i + end - 1) - dp[i] // As if we pick end, we need to find solution of (i, end - 1)
                ); 
            }
        }
        
        return dp[0];
    }
    
    private int getScore(int left, int right) {
        return preSum[right + 1] - preSum[left];
    }
}



or


class Solution {
   private int[] preSum;
    private Integer[][] mem;
    
    public int stoneGameVII(int[] stones) {
        int size = stones.length;
        preSum = new int[size + 1];
        mem = new Integer[size][size];
        
        for(int i = 0; i < size; i++) // Calculating prefix sum
            preSum[i + 1] = preSum[i] + stones[i];
        
        return playTurn(stones, 0, size - 1);
    }
    
    private int getScore(int left, int right) {
        return preSum[right + 1] - preSum[left];
    }
    
    private int playTurn(int[] stones, int left, int right) {
        if (left > right) return 0;
        
        if(mem[left][right] != null) return mem[left][right];
        
        int lScore = getScore(left + 1, right) - playTurn(stones, left + 1, right);
        int rScore = getScore(left, right - 1) - playTurn(stones, left, right - 1);
        
        mem[left][right] = Math.max(lScore, rScore);
        
        return mem[left][right];
    }
}
