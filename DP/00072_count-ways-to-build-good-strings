https://leetcode.com/problems/count-ways-to-build-good-strings/description/

2466. Count Ways To Build Good Strings
Medium
Topics
Companies
Hint
Given the integers zero, one, low, and high, we can construct a string by starting with an empty string, and then at each step perform either of the following:

Append the character '0' zero times.
Append the character '1' one times.
This can be performed any number of times.

A good string is a string constructed by the above process having a length between low and high (inclusive).

Return the number of different good strings that can be constructed satisfying these properties. Since the answer can be large, return it modulo 109 + 7.

 

Example 1:

Input: low = 3, high = 3, zero = 1, one = 1
Output: 8
Explanation: 
One possible valid good string is "011". 
It can be constructed as follows: "" -> "0" -> "01" -> "011". 
All binary strings from "000" to "111" are good strings in this example.
Example 2:

Input: low = 2, high = 3, zero = 1, one = 2
Output: 5
Explanation: The good strings are "00", "11", "000", "110", and "011".
 

Constraints:

1 <= low <= high <= 105
1 <= zero, one <= low


# java


class Solution {
  public int countGoodStrings(int low, int high, int zero, int one) {
    final int MOD = 1_000_000_007;
    int ans = 0;
    // dp[i] := the number of good strings with length i
    int[] dp = new int[high + 1];
    dp[0] = 1;

    for (int i = 1; i <= high; ++i) {
      if (i >= zero)
        dp[i] = (dp[i] + dp[i - zero]) % MOD;
      if (i >= one)
        dp[i] = (dp[i] + dp[i - one]) % MOD;
      if (i >= low)
        ans = (ans + dp[i]) % MOD;
    }

    return ans;
  }
}


or


class Solution {
    private static final int MOD = (int) 1e9 + 7;
    private int[] f;
    private int lo;
    private int hi;
    private int zero;
    private int one;

    public int countGoodStrings(int low, int high, int zero, int one) {
        f = new int[high + 1];
        Arrays.fill(f, -1);
        lo = low;
        hi = high;
        this.zero = zero;
        this.one = one;
        return dfs(0);
    }

    private int dfs(int i) {
        if (i > hi) {
            return 0;
        }
        if (f[i] != -1) {
            return f[i];
        }
        long ans = 0;
        if (i >= lo && i <= hi) {
            ++ans;
        }
        ans += dfs(i + zero) + dfs(i + one);
        ans %= MOD;
        f[i] = (int) ans;
        return f[i];
    }
}


or


class Solution {
    public int countGoodStrings(int low, int high, int zero, int one) {
        int dp[] = new int[high + 1], res = 0, mod = 1000000007;
        dp[0] = 1;
        for (int i = 1; i <= high; ++i) {
            // if we can add 0 string then add 
            if (i >= zero) dp[i] = (dp[i] + dp[i - zero]) % mod;
            // if we can add 1's string i.e i >= len of 1's string
            if (i >= one) dp[i] = (dp[i] + dp[i - one]) % mod;
            // if i is in between low and high add 
            if (i >= low) res = (res + dp[i]) % mod;
        }
        return res;
    }
}
