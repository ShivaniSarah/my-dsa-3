https://leetcode.com/problems/check-if-there-is-a-path-with-equal-number-of-0s-and-1s/description/



2510. Check if There is a Path With Equal Number of 0’s And 1’s
Description
You are given a 0-indexed m x n binary matrix grid. You can move from a cell (row, col) to any of the cells (row + 1, col) or (row, col + 1).

Return true if there is a path from (0, 0) to (m - 1, n - 1) that visits an equal number of 0's and 1's. Otherwise return false.

 

Example 1:



Input: grid = [[0,1,0,0],[0,1,0,0],[1,0,1,0]]
Output: true
Explanation: The path colored in blue in the above diagram is a valid path because we have 3 cells with a value of 1 and 3 with a value of 0. Since there is a valid path, we return true.
Example 2:



Input: grid = [[1,1,0],[0,0,1],[1,0,0]]
Output: false
Explanation: There is no path in this grid with an equal number of 0's and 1's.
 

Constraints:

m == grid.length
n == grid[i].length
2 <= m, n <= 100
grid[i][j] is either 0 or 1.



 #jav



class Solution {
  public boolean isThereAPath(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    // Map negative (the number of 0s - the number of 1s) to non-negative one.
    final int cells = m + n - 1;
    if (cells % 2 == 1)
      return false;
    Boolean[][][] mem = new Boolean[m][n][cells * 2 + 1];
    return isThereAPath(grid, 0, 0, 0, cells, mem);
  }

  // Returns 1 if there's a path to grid[i][j]
  // s.t. `sum` = (the number of 0s - the number of 1s).
  private boolean isThereAPath(int[][] grid, int i, int j, int sum, final int cells,
                               Boolean[][][] mem) {
    if (i == grid.length || j == grid[0].length)
      return false;
    sum += grid[i][j] == 0 ? 1 : -1;
    if (i == grid.length - 1 && j == grid[0].length - 1)
      return sum == 0;
    final int k = cells + sum;
    if (mem[i][j][k] != null)
      return mem[i][j][k];
    return mem[i][j][k] = isThereAPath(grid, i + 1, j, sum, cells, mem) ||
                          isThereAPath(grid, i, j + 1, sum, cells, mem);
  }
}



or



class Solution {
    private int s;
    private int m;
    private int n;
    private int[][] grid;
    private Boolean[][][] f;

    public boolean isThereAPath(int[][] grid) {
        m = grid.length;
        n = grid[0].length;
        this.grid = grid;
        s = m + n - 1;
        f = new Boolean[m][n][s];
        if (s % 2 == 1) {
            return false;
        }
        s >>= 1;
        return dfs(0, 0, 0);
    }

    private boolean dfs(int i, int j, int k) {
        if (i >= m || j >= n) {
            return false;
        }
        k += grid[i][j];
        if (f[i][j][k] != null) {
            return f[i][j][k];
        }
        if (k > s || i + j + 1 - k > s) {
            return false;
        }
        if (i == m - 1 && j == n - 1) {
            return k == s;
        }
        f[i][j][k] = dfs(i + 1, j, k) || dfs(i, j + 1, k);
        return f[i][j][k];
    }
}



