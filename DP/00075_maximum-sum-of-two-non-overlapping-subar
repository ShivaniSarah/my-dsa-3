https://leetcode.com/problems/maximum-sum-of-two-non-overlapping-subarrays/description/


1031. Maximum Sum of Two Non-Overlapping Subarrays
Medium
Topics
Companies
Hint
Given an integer array nums and two integers firstLen and secondLen, return the maximum sum of elements in two non-overlapping subarrays with lengths firstLen and secondLen.

The array with length firstLen could occur before or after the array with length secondLen, but they have to be non-overlapping.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [0,6,5,2,2,5,1,9,4], firstLen = 1, secondLen = 2
Output: 20
Explanation: One choice of subarrays is [9] with length 1, and [6,5] with length 2.
Example 2:

Input: nums = [3,8,1,3,2,1,8,9,0], firstLen = 3, secondLen = 2
Output: 29
Explanation: One choice of subarrays is [3,8,1] with length 3, and [8,9] with length 2.
Example 3:

Input: nums = [2,1,5,6,0,9,5,0,3,8], firstLen = 4, secondLen = 3
Output: 31
Explanation: One choice of subarrays is [5,6,0,9] with length 4, and [0,3,8] with length 3.
 

Constraints:

1 <= firstLen, secondLen <= 1000
2 <= firstLen + secondLen <= 1000
firstLen + secondLen <= nums.length <= 1000
0 <= nums[i] <= 1000


# java


class Solution {
  public int maxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {
    return Math.max(helper(nums, firstLen, secondLen), helper(nums, secondLen, firstLen));
  }

  private int helper(int[] nums, int l, int r) {
    final int n = nums.length;
    int[] left = new int[n];
    int sum = 0;

    for (int i = 0; i < n; ++i) {
      sum += nums[i];
      if (i >= l)
        sum -= nums[i - l];
      if (i >= l - 1)
        left[i] = i > 0 ? Math.max(left[i - 1], sum) : sum;
    }

    int[] right = new int[n];
    sum = 0;

    for (int i = n - 1; i >= 0; --i) {
      sum += nums[i];
      if (i <= n - r - 1)
        sum -= nums[i + r];
      if (i <= n - r)
        right[i] = i < n - 1 ? Math.max(right[i + 1], sum) : sum;
    }

    int ans = 0;

    for (int i = 0; i < n - 1; ++i)
      ans = Math.max(ans, left[i] + right[i + 1]);

    return ans;
  }
}


or


class Solution {
    public int maxSumTwoNoOverlap(int[] nums, int firstLen, int secondLen) {
        int n = nums.length;
        int[] s = new int[n + 1];
        for (int i = 0; i < n; ++i) {
            s[i + 1] = s[i] + nums[i];
        }
        int ans = 0;
        for (int i = firstLen, t = 0; i + secondLen - 1 < n; ++i) {
            t = Math.max(t, s[i] - s[i - firstLen]);
            ans = Math.max(ans, t + s[i + secondLen] - s[i]);
        }
        for (int i = secondLen, t = 0; i + firstLen - 1 < n; ++i) {
            t = Math.max(t, s[i] - s[i - secondLen]);
            ans = Math.max(ans, t + s[i + firstLen] - s[i]);
        }
        return ans;
    }
}


or


class Solution {
    public int maxSumTwoNoOverlap(int[] A, int L, int M) {
        int n = A.length;
        if (n == 0) {
            return 0;
        }
        if (L + M > n) {
            throw new IllegalArgumentException();
        }
        
        int[] Ls = new int[n];
        int[] Ms = new int[n];
        
        int lSum = 0;
        int mSum = 0;
        
        for (int i = 0; i <= n - L; i++) {
            if (i == 0) {
                for (int j = 0; j < L; j++) {
                    lSum += A[j];
                }
            } else {
                lSum = lSum - A[i-1] + A[i+L-1];
            }
            
            Ls[i] = lSum;
        }
        
        for (int i = 0; i <= n - M; i++) {
            if (i == 0) {
                for (int j = 0; j < M; j++) {
                    mSum += A[j];
                }
            } else {
                mSum = mSum - A[i-1] + A[i+M-1];
            }
            
            Ms[i] = mSum;
        }
        
        int[] lmax = new int[n+1];
        int[] mmax = new int[n+1];
        
        for (int i = n - 1; i >= 0; i--) {
            lmax[i] = Math.max(lmax[i+1], Ls[i]);
            mmax[i] = Math.max(mmax[i+1], Ms[i]);
        }

        int ans = 0;
        for (int i = 0; i <= n - L - 1; i++) {
            ans = Math.max(ans, Ls[i] + mmax[i+L]);
        }
        for (int i = 0; i <= n - M - 1; i++) {
            ans = Math.max(ans, Ms[i] + lmax[i+M]);
        }

        return ans;
    }
}


or


class Solution {
    public int maxSumTwoNoOverlap(int[] A, int L, int M) {
        int sums[] = new int[A.length+1];
        
        for(int i=1;i<=A.length;i++)
            sums[i] = A[i-1]+sums[i-1];
        
        int maxLval = 0;
        int ans=0;
        for(int i=L;i<=A.length-M;i++)
        {
            maxLval = Math.max(maxLval,sums[i]-sums[i-L]);
            ans = Math.max(ans,sums[i+M]-sums[i]+maxLval);
        }
        int maxRval = 0 ;
        for(int i=M;i<=A.length-L;i++)
        {
            maxRval = Math.max(maxRval,sums[i]-sums[i-M]);
            ans = Math.max(ans,sums[i+L]-sums[i]+maxRval);
        }
        return ans;
    }
}
