http://leetcode.com/problems/maximize-total-cost-of-alternating-subarrays/description/

3196. Maximize Total Cost of Alternating Subarrays
Medium
Topics
Companies
Hint
You are given an integer array nums with length n.

The cost of a subarray nums[l..r], where 0 <= l <= r < n, is defined as:

cost(l, r) = nums[l] - nums[l + 1] + ... + nums[r] * (−1)r − l

Your task is to split nums into subarrays such that the total cost of the subarrays is maximized, ensuring each element belongs to exactly one subarray.

Formally, if nums is split into k subarrays, where k > 1, at indices i1, i2, ..., ik − 1, where 0 <= i1 < i2 < ... < ik - 1 < n - 1, then the total cost will be:

cost(0, i1) + cost(i1 + 1, i2) + ... + cost(ik − 1 + 1, n − 1)

Return an integer denoting the maximum total cost of the subarrays after splitting the array optimally.

Note: If nums is not split into subarrays, i.e. k = 1, the total cost is simply cost(0, n - 1).

 

Example 1:

Input: nums = [1,-2,3,4]

Output: 10

Explanation:

One way to maximize the total cost is by splitting [1, -2, 3, 4] into subarrays [1, -2, 3] and [4]. The total cost will be (1 + 2 + 3) + 4 = 10.

Example 2:

Input: nums = [1,-1,1,-1]

Output: 4

Explanation:

One way to maximize the total cost is by splitting [1, -1, 1, -1] into subarrays [1, -1] and [1, -1]. The total cost will be (1 + 1) + (1 + 1) = 4.

Example 3:

Input: nums = [0]

Output: 0

Explanation:

We cannot split the array further, so the answer is 0.

Example 4:

Input: nums = [1,-1]

Output: 2

Explanation:

Selecting the whole array gives a total cost of 1 + 1 = 2, which is the maximum.

 

Constraints:

1 <= nums.length <= 105
-109 <= nums[i] <= 109


# java


 class Solution {
    public long maximumTotalCost(int[] nums) {
        int n = nums.length;
        long addResult = nums[0];
        long subResult = nums[0];
        for (int i = 1; i < n; i++) {
            long tempAdd = Math.max(addResult, subResult) + nums[i];
            long tempSub = addResult - nums[i];

            addResult = tempAdd;
            subResult = tempSub;
        }
        return Math.max(addResult, subResult);
    }
}



or


class Solution {
  public long maximumTotalCost(int[] nums) {
    long keep = nums[0]; // the maximum cost if the last number is kept
    long flip = nums[0]; // the maximum cost if the last number is flipped

    for (int i = 1; i < nums.length; ++i) {
      final long keepCurr = Math.max(keep, flip) + nums[i];
      final long flipCurr = keep - nums[i];
      keep = keepCurr;
      flip = flipCurr;
    }

    return Math.max(keep, flip);
  }
}


or


class Solution {
  public long maximumTotalCost(int[] nums) {
    // A small trick so that we don't need to handle the edge case and can use
    // ranged-based for loop.
    long keep = Long.MIN_VALUE / 2; // the maximum cost if the last number is kept
    long flip = 0;                  // the maximum cost if the last number is flipped

    for (final int num : nums) {
      final long keepCurr = Math.max(keep, flip) + num;
      final long flipCurr = keep - num;
      keep = keepCurr;
      flip = flipCurr;
    }

    return Math.max(keep, flip);
  }
}


or


class Solution {
    private Long[][] f;
    private int[] nums;
    private int n;

    public long maximumTotalCost(int[] nums) {
        n = nums.length;
        this.nums = nums;
        f = new Long[n][2];
        return dfs(0, 0);
    }

    private long dfs(int i, int j) {
        if (i >= n) {
            return 0;
        }
        if (f[i][j] != null) {
            return f[i][j];
        }
        f[i][j] = nums[i] + dfs(i + 1, 1);
        if (j == 1) {
            f[i][j] = Math.max(f[i][j], -nums[i] + dfs(i + 1, 0));
        }
        return f[i][j];
    }
}
