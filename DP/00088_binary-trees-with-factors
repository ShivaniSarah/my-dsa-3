https://leetcode.com/problems/binary-trees-with-factors/description/

823. Binary Trees With Factors
Medium
Topics
Companies
Given an array of unique integers, arr, where each integer arr[i] is strictly greater than 1.

We make a binary tree using these integers, and each number may be used for any number of times. Each non-leaf node's value should be equal to the product of the values of its children.

Return the number of binary trees we can make. The answer may be too large so return the answer modulo 109 + 7.

 

Example 1:

Input: arr = [2,4]
Output: 3
Explanation: We can make these trees: [2], [4], [4, 2, 2]
Example 2:

Input: arr = [2,4,5,10]
Output: 7
Explanation: We can make these trees: [2], [4], [5], [10], [4, 2, 2], [10, 2, 5], [10, 5, 2].
 

Constraints:

1 <= arr.length <= 1000
2 <= arr[i] <= 109
All the values of arr are unique.


# java

class Solution {
  public int numFactoredBinaryTrees(int[] arr) {
    final int MOD = 1_000_000_007;
    final int n = arr.length;
    // dp[i] := the number of binary trees with arr[i] as the root
    long[] dp = new long[n];
    Map<Integer, Integer> numToIndex = new HashMap<>();

    Arrays.sort(arr);
    Arrays.fill(dp, 1);

    for (int i = 0; i < n; ++i)
      numToIndex.put(arr[i], i);

    for (int i = 0; i < n; ++i) // arr[i] is the root
      for (int j = 0; j < i; ++j)
        if (arr[i] % arr[j] == 0) { // arr[j] is the left subtree
          final int right = arr[i] / arr[j];
          if (numToIndex.containsKey(right)) {
            dp[i] += dp[j] * dp[numToIndex.get(right)];
            dp[i] %= MOD;
          }
        }

    return (int) (Arrays.stream(dp).sum() % MOD);
  }
}


or


class Solution {
    public int numFactoredBinaryTrees(int[] arr) {
        final int mod = (int) 1e9 + 7;
        Arrays.sort(arr);
        int n = arr.length;
        long[] f = new long[n];
        Arrays.fill(f, 1);
        Map<Integer, Integer> idx = new HashMap<>(n);
        for (int i = 0; i < n; ++i) {
            idx.put(arr[i], i);
        }
        for (int i = 0; i < n; ++i) {
            int a = arr[i];
            for (int j = 0; j < i; ++j) {
                int b = arr[j];
                if (a % b == 0) {
                    int c = a / b;
                    if (idx.containsKey(c)) {
                        int k = idx.get(c);
                        f[i] = (f[i] + f[j] * f[k]) % mod;
                    }
                }
            }
        }
        long ans = 0;
        for (long v : f) {
            ans = (ans + v) % mod;
        }
        return (int) ans;
    }
}


or

class Solution {
    public int numFactoredBinaryTrees(int[] arr) {
        Arrays.sort(arr);
        Map<Integer, Long> subtreeCount = new HashMap<>();

        for (int root : arr) {
            subtreeCount.put(root, 1L);

            for (int factor : arr) {
                if (factor >= root) {
                    break;
                }

                if (root % factor == 0 && subtreeCount.containsKey(root / factor)) {
                    subtreeCount.put(root, (subtreeCount.get(root) + subtreeCount.get(factor) * subtreeCount.get(root / factor)));
                }
            }
        }

        long totalTrees = 0L;
        for (int key : subtreeCount.keySet()) {
            totalTrees = (totalTrees + subtreeCount.get(key)) % 1_000_000_007;
        }

        return (int) totalTrees;       
    }
}


or

class Solution {
    public int numFactoredBinaryTrees(int[] arr) {
        Arrays.sort(arr);
        HashMap<Integer,Long>map=new HashMap<Integer,Long>();
        long ans=1;
        map.put(arr[0],ans);
        for(int i=1;i<arr.length;i++)
        {
            long sum=1;
            for(int j=0;j<i;j++)
            {
                if(arr[i]%arr[j]==0 && map.containsKey(arr[i]/arr[j]))
                    sum=sum+(map.get(arr[i]/arr[j])*map.get(arr[j]));
            }
            map.put(arr[i],sum);
            ans=ans+sum;
        }
        return (int)(ans%1000000007);
    }
}

or


class Solution {
    int mod = (int)1e9+7;
    public int numFactoredBinaryTrees(int[] arr) {
        Arrays.sort(arr);
        int ans =0;
        HashMap<Integer, Long> map = new HashMap<>();

        for(int x:arr)
        {
            long ways =1;
            int max = (int)Math.sqrt(x);

            for(int j = 0,left=arr[0];left<=max;left=arr[++j])
            {
                if(x%left!=0)   continue;
                int right =x/left;
                if(map.containsKey(right))
                {
                    ways = (ways+map.get(left)*map.get(right)*(left==right?1:2))%mod;
                }
            }
            map.put(x,ways);
            ans=(int)(ans+ways)%mod;
        }
        return ans;
    }
}
