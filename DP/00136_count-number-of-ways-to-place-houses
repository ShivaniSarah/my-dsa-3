https://leetcode.com/problems/count-number-of-ways-to-place-houses/description/

2320. Count Number of Ways to Place Houses
Medium
Topics
Companies
Hint
There is a street with n * 2 plots, where there are n plots on each side of the street. The plots on each side are numbered from 1 to n. On each plot, a house can be placed.

Return the number of ways houses can be placed such that no two houses are adjacent to each other on the same side of the street. Since the answer may be very large, return it modulo 109 + 7.

Note that if a house is placed on the ith plot on one side of the street, a house can also be placed on the ith plot on the other side of the street.

 

Example 1:

Input: n = 1
Output: 4
Explanation: 
Possible arrangements:
1. All plots are empty.
2. A house is placed on one side of the street.
3. A house is placed on the other side of the street.
4. Two houses are placed, one on each side of the street.
Example 2:


Input: n = 2
Output: 9
Explanation: The 9 possible arrangements are shown in the diagram above.
 

Constraints:

1 <= n <= 104


# java


class Solution {
  public int countHousePlacements(int n) {
    final int MOD = 1_000_000_007;
    int house = 1; // the number of ways ending in a house
    int space = 1; // the number of ways ending in a space
    int total = house + space;

    for (int i = 2; i <= n; ++i) {
      house = space;
      space = total;
      total = (house + space) % MOD;
    }

    return (int) ((long) total * total % MOD);
  }
}


or


class Solution {
    public int countHousePlacements(int n) {
        final int mod = (int) 1e9 + 7;
        int[] f = new int[n];
        int[] g = new int[n];
        f[0] = 1;
        g[0] = 1;
        for (int i = 1; i < n; ++i) {
            f[i] = g[i - 1];
            g[i] = (f[i - 1] + g[i - 1]) % mod;
        }
        long v = (f[n - 1] + g[n - 1]) % mod;
        return (int) (v * v % mod);
    }
}



or


class Solution {
      public int countHousePlacements(int n) {
        int a = 1, b = 1, c = 2, mod = (int)1e9 + 7;
        for (int i = 0; i < n; ++i) {
            c = (a + b) % mod;
            a = b;
            b = c;
        }
        return (int)(1L * b * b % mod);
    }
}


or


class Solution {
    int mod = (int)1e9+7;
    public int countHousePlacements(int n) {
        
        if(n == 1)
            return 4;
        if(n == 2)
            return 9;
        long a = 2;
        long b = 3;
        if(n==1)
            return (int)(a%mod);
        if(n==2)
            return (int)(b%mod);
        long c=0;
        for(int i=3;i<=n;i++)
        {
            c = (a+b)%mod;
            a=b%mod;
            b=c%mod;
        }
        
        return (int)((c*c)%mod);
    }
}


or


class Solution {
    long m = 1000000007;
    long[] dp;
    
    public int countHousePlacements(int n) {
        this.dp = new long[n+1];
        Arrays.fill(this.dp, -1);
        long ans = this.solve(n);
        return (int)((ans* ans)%this.m);
        
    }
    
    // Returns all possible ways we can palce houses in N palces
    public long solve(int n){
        
        // base case (no place left to place a new home)
        if(n <= 0){
            return 1;
        }
        
        // Early return
        if(dp[n] != -1){
            return this.dp[n];
        }
        
        long usedCurrPlace = 1L * this.solve(n-2);
        long notUsedCurrPlace = 1L * this.solve(n-1);
        
        return this.dp[n] = (usedCurrPlace + notUsedCurrPlace)%this.m;
    }
}
