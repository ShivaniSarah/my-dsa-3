https://leetcode.com/problems/find-the-derangement-of-an-array/description/


634. Find the Derangement of An Array
Description
In combinatorial mathematics, a derangement is a permutation of the elements of a set, such that no element appears in its original position.

You are given an integer n. There is originally an array consisting of n integers from 1 to n in ascending order, return the number of derangements it can generate. Since the answer may be huge, return it modulo 109 + 7.

 

Example 1:

Input: n = 3
Output: 2
Explanation: The original array is [1,2,3]. The two derangements are [2,3,1] and [3,1,2].
Example 2:

Input: n = 2
Output: 1
 

Constraints:

1 <= n <= 106





# jav




class Solution {
  public int findDerangement(int n) {
    int[] mem = new int[n + 1];
    return findDerangement(n, mem);
  }

  private static final int MOD = 1_000_000_007;

  private int findDerangement(int i, int[] mem) {
    if (i == 0)
      return 1;
    if (i == 1)
      return 0;
    if (mem[i] > 0)
      return mem[i];
    return mem[i] = (int) ((i - 1L) *
                           (findDerangement(i - 1, mem) + //
                            findDerangement(i - 2, mem)) %
                           MOD);
  }
}



or




class Solution {
  public int findDerangement(int n) {
    final int MOD = 1_000_000_007;
    int[] dp = new int[n + 1];

    dp[0] = 1;

    for (int i = 2; i <= n; ++i)
      dp[i] = (int) ((i - 1L) * (dp[i - 1] + dp[i - 2]) % MOD);

    return dp[n];
  }
}



or



class Solution {
    public int findDerangement(int n) {
        final int mod = (int) 1e9 + 7;
        long a = 1, b = 0;
        for (int i = 2; i <= n; ++i) {
            long c = (i - 1) * (a + b) % mod;
            a = b;
            b = c;
        }
        return (int) b;
    }
}



