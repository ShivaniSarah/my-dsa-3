https://leetcode.com/problems/select-k-disjoint-special-substrings/description/

3458. Select K Disjoint Special Substrings
Medium
Topics
Companies
Hint
Given a string s of length n and an integer k, determine whether it is possible to select k disjoint special substrings.

A special substring is a substring where:

Any character present inside the substring should not appear outside it in the string.
The substring is not the entire string s.
Note that all k substrings must be disjoint, meaning they cannot overlap.

Return true if it is possible to select k such disjoint special substrings; otherwise, return false.

 

Example 1:

Input: s = "abcdbaefab", k = 2

Output: true

Explanation:

We can select two disjoint special substrings: "cd" and "ef".
"cd" contains the characters 'c' and 'd', which do not appear elsewhere in s.
"ef" contains the characters 'e' and 'f', which do not appear elsewhere in s.
Example 2:

Input: s = "cdefdc", k = 3

Output: false

Explanation:

There can be at most 2 disjoint special substrings: "e" and "f". Since k = 3, the output is false.

Example 3:

Input: s = "abeabe", k = 0

Output: true

 

Constraints:

2 <= n == s.length <= 5 * 104
0 <= k <= 26
s consists only of lowercase English letters.



# java

class Solution
{
    public boolean maxSubstringLength(String s, int k)
    {
        int strLen = s.length();
        if (k == 0)
        {
            return true;
        } 
            

        int[] firstOccur = new int[26];
        int[] lastOccur = new int[26];

        Arrays.fill(firstOccur, strLen);
        Arrays.fill(lastOccur, -1);

        // Step 1: Find first and last occurrence of each character
        for (int pos = 0; pos < strLen; pos++)
        {
            int charIdx = s.charAt(pos) - 'a';
            firstOccur[charIdx] = Math.min(firstOccur[charIdx], pos);
            lastOccur[charIdx] = Math.max(lastOccur[charIdx], pos);
        }

        List<int[]> segments = new ArrayList<>();

        // Step 2: Find valid segments
        for (int start = 0; start < strLen; start++)
        {
            if (start != firstOccur[s.charAt(start) - 'a'])
            {
                continue;
            } 

            int farthest = lastOccur[s.charAt(start) - 'a'];
            int current = start;
            boolean isValid = true;

            while (current <= farthest)
            {
                if (firstOccur[s.charAt(current) - 'a'] < start)
                {
                    isValid = false;
                    break;
                }
                
                farthest = Math.max(farthest, lastOccur[s.charAt(current) - 'a']);
                current++;
            }

            if (isValid && !(start == 0 && farthest == strLen - 1))
            {
                segments.add(new int[]{start, farthest});
            }
        }

        // Step 3: Sort the segments based on ending index
        segments.sort(Comparator.comparingInt(pair -> pair[1]));

        // Step 4: Count non-overlapping segments
        int segmentCount = 0, lastIndex = -1;
        for (int[] bounds : segments)
        {
            if (bounds[0] > lastIndex)
            {
                segmentCount++;
                lastIndex = bounds[1];
            }
        }

        return segmentCount >= k;
    }
}



or


class Solution {
    Map<Character, Integer> first, last;
    int[] dp;

    int solve(String s, int index, int n) {
        if (index == n) return 0;

        if (dp[index] != -1) return dp[index];

        // Take the current character if it's the first occurrence
        char ch = s.charAt(index);
        int op1 = 0;
        if (first.get(ch) == index) {
            int lastInd = last.get(ch);
            int cnt = 1;

            // Increase right bound as much as you can
            for (int i = index + 1; i < lastInd; ++i) {
                lastInd = Math.max(lastInd, last.get(s.charAt(i)));
                // if current index exist outside, no need to take cnt = 1
                if (first.get(s.charAt(i)) < index || last.get(s.charAt(i)) > lastInd) {
                    cnt = 0;
                    break;
                }
            }

            // special condition to check whether substring is full string or not, if it's full string, then cnt = 0;
            if (cnt > 0 && index == 0 && lastInd == n - 1) cnt = 0;

            op1 = cnt + solve(s, lastInd + 1, n);
        }

        // Skip the current character
        int op2 = solve(s, index + 1, n);

        return dp[index] = Math.max(op1, op2);
    }

    public boolean maxSubstringLength(String s, int k) {
        if (k == 0) return true;

        int n = s.length();
        dp = new int[n];
        Arrays.fill(dp, -1);

        // Store first occurrence of each character
        first = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            first.putIfAbsent(s.charAt(i), i);
        }

        // Store last occurrence of each character
        last = new HashMap<>();
        for (int i = n - 1; i >= 0; --i) {
            last.putIfAbsent(s.charAt(i), i);
        }

        // Compute the max number of substrings
        int maxPossible = solve(s, 0, n);

        return maxPossible >= k;
    }
}


or


class Solution {
    static public boolean maxSubstringLength(String s, int k) {
        char[] arr = s.toCharArray();
        int n = arr.length;
        int[][] freq = new int[2][26];
        for (int[] is : freq)  Arrays.fill(is, -1);
        
        for (int i = 0; i < n; i++) {
            int x = arr[i] - 97;
            if (freq[0][x] == -1) {
                freq[0][x] = i;
                freq[1][x] = i;
            } else freq[1][x] = i;
        }

        for (int i = 0; i < 26; i++) {
            if (freq[0][i] == -1) continue;
            int max = freq[1][i];
            int min = freq[0][i];
            for (int j = freq[0][i]; j <= max; j++) {
                max = Math.max(max, freq[1][arr[j] - 'a']);
                min = Math.min(min, freq[0][arr[j] - 'a']);
            }
            for (int j = freq[0][i]; j >= min; j--) {
                min = Math.min(min, freq[0][arr[j] - 'a']);
            }
            freq[1][i] = max;
            freq[0][i] = min;
        }

        int[][] temp = new int[2][26];
        int x = 0;
        for (int i = 0; i < 26; i++) {
            if (freq[0][i] != -1) {
                temp[0][x] = freq[0][i];
                temp[1][x] = freq[1][i];
                if (temp[1][x] == -1) temp[1][x] = temp[0][x];
                x++;
            }
        }
        
        int[][] nums = new int[x][2];
        for (int i = 0; i < x; i++) {
            nums[i][0] = temp[0][i];
            nums[i][1] = temp[1][i];
        }

        Arrays.sort(nums,
                (a, b) -> a[0] - b[0]);

        int[][] ans = new int[x][2];
        int y = 0;
        for (int i = 0; i < x; i++) {
            if (y == 0) {
                ans[y][0] = nums[i][0];
                ans[y][1] = nums[i][1];
                y++;
            } else {
                if (ans[y - 1][1] > nums[i][0]) {
                    if (ans[y - 1][1] < nums[i][1]) continue;
                    ans[y - 1][0] = nums[i][0];
                    ans[y - 1][1] = nums[i][1];
                } else {
                    ans[y][0] = nums[i][0];
                    ans[y][1] = nums[i][1];
                    y++;
                }
            }

        }
        if (y >= k) {
            if (k == 1) 
                if (ans[0][0] == 0 && ans[0][1] == n - 1) return false;
            return true;
        }
        return false;
    }
}


or


