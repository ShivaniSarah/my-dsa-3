https://leetcode.com/problems/count-number-of-teams/


1395. Count Number of Teams
Medium
Topics
Companies
Hint
There are n soldiers standing in a line. Each soldier is assigned a unique rating value.

You have to form a team of 3 soldiers amongst them under the following rules:

Choose 3 soldiers with index (i, j, k) with rating (rating[i], rating[j], rating[k]).
A team is valid if: (rating[i] < rating[j] < rating[k]) or (rating[i] > rating[j] > rating[k]) where (0 <= i < j < k < n).
Return the number of teams you can form given the conditions. (soldiers can be part of multiple teams).

 

Example 1:

Input: rating = [2,5,3,4,1]
Output: 3
Explanation: We can form three teams given the conditions. (2,3,4), (5,4,1), (5,3,1). 
Example 2:

Input: rating = [2,1,3]
Output: 0
Explanation: We can't form any team given the conditions.
Example 3:

Input: rating = [1,2,3,4]
Output: 4
 

Constraints:

n == rating.length
3 <= n <= 1000
1 <= rating[i] <= 105
All the integers in rating are unique.


 #java


class Solution {

    public int numTeams(int[] rating) {
        int n = rating.length;
        int teams = 0;
        Integer[][] increasingCache = new Integer[n][4];
        Integer[][] decreasingCache = new Integer[n][4];

        // Calculate total teams by considering each soldier as a starting point
        for (int startIndex = 0; startIndex < n; startIndex++) {
            teams +=
            countIncreasingTeams(rating, startIndex, 1, increasingCache) +
            countDecreasingTeams(rating, startIndex, 1, decreasingCache);
        }

        return teams;
    }

    private int countIncreasingTeams(
        int[] rating,
        int currentIndex,
        int teamSize,
        Integer[][] increasingCache
    ) {
        int n = rating.length;

        // Base case: reached end of array
        if (currentIndex == n) return 0;

        // Base case: found a valid team of size 3
        if (teamSize == 3) return 1;

        // Return cached result if available
        if (increasingCache[currentIndex][teamSize] != null) {
            return increasingCache[currentIndex][teamSize];
        }

        int validTeams = 0;

        // Recursively count teams with increasing ratings
        for (int nextIndex = currentIndex + 1; nextIndex < n; nextIndex++) {
            if (rating[nextIndex] > rating[currentIndex]) {
                validTeams +=
                countIncreasingTeams(
                    rating,
                    nextIndex,
                    teamSize + 1,
                    increasingCache
                );
            }
        }

        // Cache and return the result
        return increasingCache[currentIndex][teamSize] = validTeams;
    }

    private int countDecreasingTeams(
        int[] rating,
        int currentIndex,
        int teamSize,
        Integer[][] decreasingCache
    ) {
        int n = rating.length;

        // Base case: reached end of array
        if (currentIndex == n) return 0;

        // Base case: found a valid team of size 3
        if (teamSize == 3) return 1;

        // Return cached result if available
        if (decreasingCache[currentIndex][teamSize] != null) {
            return decreasingCache[currentIndex][teamSize];
        }

        int validTeams = 0;

        // Recursively count teams with decreasing ratings
        for (int nextIndex = currentIndex + 1; nextIndex < n; nextIndex++) {
            if (rating[nextIndex] < rating[currentIndex]) {
                validTeams +=
                countDecreasingTeams(
                    rating,
                    nextIndex,
                    teamSize + 1,
                    decreasingCache
                );
            }
        }

        // Cache and return the result
        return decreasingCache[currentIndex][teamSize] = validTeams;
    }
}


or


class Solution {

    public int numTeams(int[] rating) {
        int n = rating.length;
        int teams = 0;

        // Tables for increasing and decreasing sequences
        int[][] increasingTeams = new int[n][4];
        int[][] decreasingTeams = new int[n][4];

        // Fill the base cases. (Each soldier is a sequence of length 1)
        for (int i = 0; i < n; i++) {
            increasingTeams[i][1] = 1;
            decreasingTeams[i][1] = 1;
        }

        // Fill the tables
        for (int count = 2; count <= 3; count++) {
            for (int i = 0; i < n; i++) {
                for (int j = i + 1; j < n; j++) {
                    if (rating[j] > rating[i]) {
                        increasingTeams[j][count] +=
                        increasingTeams[i][count - 1];
                    }
                    if (rating[j] < rating[i]) {
                        decreasingTeams[j][count] +=
                        decreasingTeams[i][count - 1];
                    }
                }
            }
        }

        // Sum up the results (All sequences of length 3)
        for (int i = 0; i < n; i++) {
            teams += increasingTeams[i][3] + decreasingTeams[i][3];
        }

        return teams;
    }
}


or


class Solution {

    public int numTeams(int[] rating) {
        int n = rating.length;
        int teams = 0;

        // Iterate through each soldier as the middle soldier
        for (int mid = 0; mid < n; mid++) {
            int leftSmaller = 0;
            int rightLarger = 0;

            // Count soldiers with smaller rating on the left side of the current soldier
            for (int left = mid - 1; left >= 0; left--) {
                if (rating[left] < rating[mid]) {
                    leftSmaller++;
                }
            }

            // Count soldiers with larger ratings on the right side of the current soldier
            for (int right = mid + 1; right < n; right++) {
                if (rating[right] > rating[mid]) {
                    rightLarger++;
                }
            }

            // Calculate and add the number of ascending rating teams (small-mid-large)
            teams += leftSmaller * rightLarger;

            // Calculate soldiers with larger ratings on the left and smaller ratings on the right
            int leftLarger = mid - leftSmaller;
            int rightSmaller = n - mid - 1 - rightLarger;

            // Calculate and add the number of descending rating teams (large-mid-small)
            teams += leftLarger * rightSmaller;
        }

        // Return the total number of valid teams
        return teams;
    }
}


or


class Solution {

    public int numTeams(int[] rating) {
        // Find the maximum rating
        int maxRating = 0;
        for (int r : rating) {
            maxRating = Math.max(maxRating, r);
        }

        // Initialize Binary Indexed Trees for left and right sides
        int[] leftBIT = new int[maxRating + 1];
        int[] rightBIT = new int[maxRating + 1];

        // Populate the right BIT with all ratings initially
        for (int r : rating) {
            updateBIT(rightBIT, r, 1);
        }

        int teams = 0;
        for (int currentRating : rating) {
            // Remove current rating from right BIT
            updateBIT(rightBIT, currentRating, -1);

            // Count soldiers with smaller and larger ratings on both sides
            int smallerRatingsLeft = getPrefixSum(leftBIT, currentRating - 1);
            int smallerRatingsRight = getPrefixSum(rightBIT, currentRating - 1);
            int largerRatingsLeft =
                getPrefixSum(leftBIT, maxRating) -
                getPrefixSum(leftBIT, currentRating);
            int largerRatingsRight =
                getPrefixSum(rightBIT, maxRating) -
                getPrefixSum(rightBIT, currentRating);

            // Count increasing and decreasing sequences
            teams += (smallerRatingsLeft * largerRatingsRight);
            teams += (largerRatingsLeft * smallerRatingsRight);

            // Add current rating to left BIT
            updateBIT(leftBIT, currentRating, 1);
        }

        return teams;
    }

    // Update the Binary Indexed Tree
    private void updateBIT(int[] BIT, int index, int value) {
        while (index < BIT.length) {
            BIT[index] += value;
            index += index & (-index); // Move to the next relevant index in BIT
        }
    }

    // Get the sum of all elements up to the given index in the BIT
    private int getPrefixSum(int[] BIT, int index) {
        int sum = 0;
        while (index > 0) {
            sum += BIT[index];
            index -= index & (-index); // Move to the parent node in BIT
        }
        return sum;
    }
}


or


import java.util.*;

class Solution {
    public int numTeams(int[] rating) {
        int n = rating.length;
        if (n < 3) return 0;
        
        // Create a list of soldiers with their ratings and indices
        List<Soldier> soldiers = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            soldiers.add(new Soldier(rating[i], i));
        }
        
        // Sort soldiers by rating
        Collections.sort(soldiers);
        
        int[] indexMap = new int[n];
        for (int i = 0; i < n; i++) {
            indexMap[soldiers.get(i).index] = i;
        }
        
        int teams = 0;
        
        // Count ascending teams
        teams += countTeams(indexMap, n, true);
        
        // Count descending teams
        teams += countTeams(indexMap, n, false);
        
        return teams;
    }
    
    private int countTeams(int[] indexMap, int n, boolean ascending) {
        int[] bit = new int[n + 1];
        int teams = 0;
        
        for (int i = 0; i < n; i++) {
            int rank = indexMap[i] + 1;
            int left = ascending ? getSum(bit, rank - 1) : getSum(bit, n) - getSum(bit, rank);
            int right = ascending ? n - rank - (getSum(bit, n) - getSum(bit, rank)) : rank - 1 - getSum(bit, rank - 1);
            teams += left * right;
            update(bit, rank, 1);
        }
        
        return teams;
    }
    
    private void update(int[] bit, int index, int val) {
        while (index < bit.length) {
            bit[index] += val;
            index += index & (-index);
        }
    }
    
    private int getSum(int[] bit, int index) {
        int sum = 0;
        while (index > 0) {
            sum += bit[index];
            index -= index & (-index);
        }
        return sum;
    }
    
    private class Soldier implements Comparable<Soldier> {
        int rating;
        int index;
        
        Soldier(int rating, int index) {
            this.rating = rating;
            this.index = index;
        }
        
        @Override
        public int compareTo(Soldier other) {
            return Integer.compare(this.rating, other.rating);
        }
    }
}


or


class Solution {
    public int numTeams(int[] rating) {
        int totalTeams = 0;
        int soldierCount = rating.length;

        for (int currentSoldier = 0; currentSoldier < soldierCount; currentSoldier++) {
            totalTeams += countTeams(rating, currentSoldier, soldierCount);
        }

        return totalTeams;
    }

    private int countTeams(int[] rating, int currentSoldier, int soldierCount) {
        int[] leftCounts = countSmallerAndLarger(rating, 0, currentSoldier, rating[currentSoldier]);
        int[] rightCounts = countSmallerAndLarger(rating, currentSoldier + 1, soldierCount, rating[currentSoldier]);

        int ascendingTeams = leftCounts[0] * rightCounts[1];
        int descendingTeams = leftCounts[1] * rightCounts[0];

        return ascendingTeams + descendingTeams;
    }

    private int[] countSmallerAndLarger(int[] rating, int start, int end, int reference) {
        int smaller = 0, larger = 0;

        for (int i = start; i < end; i++) {
            if (rating[i] < reference) {
                smaller++;
            } else if (rating[i] > reference) {
                larger++;
            }
        }

        return new int[]{smaller, larger};
    }
}


or


class Solution {
    public int numTeams(int[] rating) {
        int n = rating.length;
        if (n < 3) return 0;

        int min = Integer.MAX_VALUE, max = Integer.MIN_VALUE;
        for (int num : rating) {
            min = Math.min(min, num);
            max = Math.max(max, num);
        }
        
        int[] leftTree = new int[max - min + 2];
        int[] rightTree = new int[max - min + 2];
        
        for (int num : rating) {
            update(rightTree, num - min, 1);
        }
        
        int count = 0;
        for (int i = 0; i < n; i++) {
            update(rightTree, rating[i] - min, -1);
            
            int lessLeft = query(leftTree, rating[i] - min - 1);
            int greaterLeft = i - lessLeft;
            
            int lessRight = query(rightTree, rating[i] - min - 1);
            int greaterRight = (n - i - 1) - lessRight;
            
            count += lessLeft * greaterRight + greaterLeft * lessRight;
            
            update(leftTree, rating[i] - min, 1);
        }
        
        return count;
    }

    private void update(int[] tree, int index, int value) {
        index++;
        while (index < tree.length) {
            tree[index] += value;
            index += index & (-index);
        }
    }

    private int query(int[] tree, int index) {
        int sum = 0;
        index++;
        while (index > 0) {
            sum += tree[index];
            index -= index & (-index);
        }
        return sum;
    }
}

or

// tle
class Solution {

    public static int helper2(int[] rating, int ind, int prev, int count){

        if(count == 0){
            return 1;
        }

        if(ind == rating.length){
            return 0;
        }

        int notPick = helper2(rating, ind+1, prev, count);

        int pick = 0;

        if(prev == -1 || rating[ind]<rating[prev]){
            pick = helper2(rating, ind+1, ind, count-1);
        }

        return pick + notPick;

    }

    public static int helper1(int[] rating, int ind, int prev, int count){

        if(count == 0){
            return 1;
        }

        if(ind == rating.length){
            return 0;
        }

        int notPick = helper1(rating, ind+1, prev, count);

        int pick = 0;

        if(prev == -1 || rating[ind]>rating[prev]){
            pick = helper1(rating, ind+1, ind, count-1);
        }

        return pick + notPick;

    }

    public int numTeams(int[] rating) {
        
        int ans1 = helper1(rating, 0, -1, 3);

        int ans2 = helper2(rating, 0, -1, 3);

        return ans1+ans2;

    }

}


or


class Solution {

    public static int helper2(int[] rating, int ind, int prev, int count){

        if(count == 0){
            return 1;
        }

        if(ind == rating.length){
            return 0;
        }

        if(dp2[ind][prev+1][count]!=null){
            return dp2[ind][prev+1][count];
        }

        int notPick = helper2(rating, ind+1, prev, count);

        int pick = 0;

        if(prev == -1 || rating[ind]<rating[prev]){
            pick = helper2(rating, ind+1, ind, count-1);
        }

        return dp2[ind][prev+1][count] = pick + notPick;

    }

    public static int helper1(int[] rating, int ind, int prev, int count){

        if(count == 0){
            return 1;
        }

        if(ind == rating.length){
            return 0;
        }

        if(dp1[ind][prev+1][count]!=null){
            return dp1[ind][prev+1][count];
        }

        int notPick = helper1(rating, ind+1, prev, count);

        int pick = 0;

        if(prev == -1 || rating[ind]>rating[prev]){
            pick = helper1(rating, ind+1, ind, count-1);
        }

        return dp1[ind][prev+1][count] = pick + notPick;

    }

    public static Integer[][][] dp1;

    public static Integer[][][] dp2;

    public int numTeams(int[] rating) {

        dp1 = new Integer[rating.length][rating.length+1][4];
        
        int ans1 = helper1(rating, 0, -1, 3);

        dp2 = new Integer[rating.length][rating.length+1][4];

        int ans2 = helper2(rating, 0, -1, 3);

        return ans1+ans2;

    }

}



