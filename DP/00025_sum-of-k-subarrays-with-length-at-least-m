https://leetcode.com/problems/sum-of-k-subarrays-with-length-at-least-m/description/


3473. Sum of K Subarrays With Length at Least M
Medium
Topics
Companies
Hint
You are given an integer array nums and two integers, k and m.

Return the maximum sum of k non-overlapping subarrays of nums, where each subarray has a length of at least m.

 

Example 1:

Input: nums = [1,2,-1,3,3,4], k = 2, m = 2

Output: 13

Explanation:

The optimal choice is:

Subarray nums[3..5] with sum 3 + 3 + 4 = 10 (length is 3 >= m).
Subarray nums[0..1] with sum 1 + 2 = 3 (length is 2 >= m).
The total sum is 10 + 3 = 13.

Example 2:

Input: nums = [-10,3,-1,-2], k = 4, m = 1

Output: -10

Explanation:

The optimal choice is choosing each element as a subarray. The output is (-10) + 3 + (-1) + (-2) = -10.

 

Constraints:

1 <= nums.length <= 2000
-104 <= nums[i] <= 104
1 <= k <= floor(nums.length / m)
1 <= m <= 3



# java

class Solution {
    public int maxSum(int[] nums, int k, int m) {
        int n = nums.length;

        int[] pre = new int[n + 1];
        for (int i = 0; i < n; i++) {
            pre[i + 1] = pre[i] + nums[i];
        }

        int[][] dp = new int[n + 1][k + 1];
        for (int i = 0; i <= n; i++) {
            for(int j=0; j<=k; j++){
                dp[i][j] = -100000000;
            }
            dp[i][0] = 0;
        }

        for (int j = 1; j <= k; j++) {
            int maxPrev = -100000000;
            for (int i = 1; i <= n; i++) {
                if (i >= m) {
                    maxPrev = Math.max(maxPrev, dp[i - m][j - 1] - pre[i - m]);
                    dp[i][j] = Math.max(dp[i - 1][j], pre[i] + maxPrev);
                } else {
                    dp[i][j] = dp[i - 1][j];
                }
            }
        }

        return dp[n][k];
    }
}



or



class Solution {
    static int l = Integer.MIN_VALUE;
    public int maxSum(int[] nums, int K, int m) {
        int n = nums.length;
        int[] pre = new int[n];
        for (int i = 0; i < n; i++) pre[i] = (i == 0 ? 0 : pre[i - 1]) + nums[i];
        int[][] dp = new int[2][n + 1];
        for (int k = 0; k <= K; k++) {
            int sMax = l;
            for (int i = n; i >= 0; i--) {
                if (i == n) dp[k & 1][i] = (k == 0 ? 0 : l);
                else dp[k & 1][i] = dp[k & 1][i + 1];
                if (i <= n - m && k > 0 && dp[(k - 1) & 1][i + m] != l) {
                    sMax = Math.max(sMax, dp[(k - 1) & 1][i + m] + pre[i + m - 1]);
                    dp[k & 1][i] = Math.max(dp[k & 1][i], sMax - (i == 0 ? 0 : pre[i - 1]));
                }
            }
        }
        return dp[K & 1][0];
    }
}


or


class Solution {
    public int maxSum(int[] nums, int k, int m) {
        int n=nums.length;
        int[] pre=new int[n];
        pre[0]=nums[0];
        
        for(int i=1;i<n;i++){
            pre[i] = nums[i]+pre[i-1];
        }
        long[][][] dp=new long[n][k+1][2];
        for(long[][] i:dp){
            for(long[] j:i) Arrays.fill(j,Long.MIN_VALUE);
        }
        return (int)helper(nums, k,m,0,pre,n,dp,0);
    }

    public long helper(int[] nums, int k, int m, int i, int[] pre, int n,long[][][] dp, int check){
        if(i==n && k>0) return Integer.MIN_VALUE;
        if(i==n || k==0) return 0;
        
        if(dp[i][k][check]!=Long.MIN_VALUE) return dp[i][k][check];
        long ans=Integer.MIN_VALUE;
        if(check==0)ans=Math.max(ans, helper(nums, k, m, i+1, pre,n,dp,0));
        long take=Integer.MIN_VALUE;
        // for(int j=i+m-1;j<n;j++){
        //     long next=helper(nums, k-1,m,j+1, pre,n,dp);
        //     if(next!=Integer.MIN_VALUE);
        //         take = Math.max(take, pre[j]-((i-1>=0)?pre[i-1]:0) + next);
        // }
        take = Math.max(take, nums[i] + helper(nums, k, m,i+1,pre,n,dp,1));
        if(i+m-1<n){
            long next=helper(nums, k-1,m,i+m,pre,n,dp,0);
            if(next!=Integer.MIN_VALUE) take = Math.max(take,next + pre[i+m-1]-((i-1>=0)?pre[i-1]:0));
        }
        ans = Math.max(ans, take);

        dp[i][k][check]=ans;
        return ans;
        
    }
}


or


class Solution {

/**
I changed the variable k to p beacuse i used k for loop.
**/
    public int maxSum(int[] nums, int p, int m) {
        int n = nums.length;
        int[] preSum = new int[n];
        int sum = 0;
        for(int i=0; i<nums.length; i++){
            sum += nums[i];
            preSum[i] = sum;
        }
        int[][] dp = new int[p+1][n];

        for(int i=1; i<=p ; i++){
            int max = Integer.MIN_VALUE;
            for(int j=i*m-1; j<n; j++){
                if(j-m < 0) max = 0;  // to make sure for first transaction or first sbarray of length m
                else max = Math.max(max, dp[i-1][j-m]-preSum[j-m]);
                if(j==i*m-1) dp[i][j] = preSum[j]; // we have to have exactly k subarray hence this 
                else dp[i][j] = Math.max(dp[i][j-1], max+preSum[j]);
                
            }
        }

        return dp[p][n-1];
        
    }
}
