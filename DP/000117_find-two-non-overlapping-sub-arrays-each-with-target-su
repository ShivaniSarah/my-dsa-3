https://leetcode.com/problems/find-two-non-overlapping-sub-arrays-each-with-target-sum/description/

1477. Find Two Non-overlapping Sub-arrays Each With Target Sum
Medium
Topics
Companies
Hint
You are given an array of integers arr and an integer target.

You have to find two non-overlapping sub-arrays of arr each with a sum equal target. There can be multiple answers so you have to find an answer where the sum of the lengths of the two sub-arrays is minimum.

Return the minimum sum of the lengths of the two required sub-arrays, or return -1 if you cannot find such two sub-arrays.

 

Example 1:

Input: arr = [3,2,2,4,3], target = 3
Output: 2
Explanation: Only two sub-arrays have sum = 3 ([3] and [3]). The sum of their lengths is 2.
Example 2:

Input: arr = [7,3,4,7], target = 7
Output: 2
Explanation: Although we have three non-overlapping sub-arrays of sum = 7 ([7], [3,4] and [7]), but we will choose the first and third sub-arrays as the sum of their lengths is 2.
Example 3:

Input: arr = [4,3,2,6,2,3,4], target = 6
Output: -1
Explanation: We have only one sub-array of sum = 6.
 

Constraints:

1 <= arr.length <= 105
1 <= arr[i] <= 1000
1 <= target <= 108


# java


class Solution {
    public int minSumOfLengths(int[] arr, int target) {
        int[] min_len = new int[arr.length];
        Arrays.fill(min_len, Integer.MAX_VALUE);
        
        int sum = 0;
        int start = 0;
        int res = Integer.MAX_VALUE;
        int min = Integer.MAX_VALUE;
        
        for(int end = 0; end < arr.length; end++){
            sum += arr[end];
            
            while(sum > target){
                sum -= arr[start++];
            }
            
            if(sum == target){
                int cur_len = end-start+1;
                if(start > 0 && min_len[start-1] != Integer.MAX_VALUE){
                    res = Math.min(res, cur_len + min_len[start-1]);
                }
                min = Math.min(min, cur_len);
            }
            min_len[end] = min;
        }
        
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}


or


class Solution {
    public int minSumOfLengths(int[] arr, int target) {
        int[] min_len = new int[arr.length];
        Arrays.fill(min_len, Integer.MAX_VALUE);
        
        int sum = 0;
        int start = 0;
        int res = Integer.MAX_VALUE;
        int min = Integer.MAX_VALUE;
        
        for(int end = 0; end < arr.length; end++){
            sum += arr[end];
            
            while(sum > target){
                sum -= arr[start++];
            }
            
            if(sum == target){
                int cur_len = end-start+1;
                if(start > 0 && min_len[start-1] != Integer.MAX_VALUE){
                    res = Math.min(res, cur_len + min_len[start-1]);
                }
                min = Math.min(min, cur_len);
            }
            min_len[end] = min;
        }
        
        return res == Integer.MAX_VALUE ? -1 : res;
    }
}


or


class Solution {
  public int minSumOfLengths(int[] arr, int target) {
    int ans = Integer.MAX_VALUE;
    int leftLength = Integer.MAX_VALUE;
    int prefix = 0;
    Map<Integer, Integer> prefixToIndex = new HashMap<>();
    prefixToIndex.put(0, -1);

    for (int i = 0; i < arr.length; ++i) {
      prefix += arr[i];
      prefixToIndex.put(prefix, i);
    }

    prefix = 0;

    for (int i = 0; i < arr.length; ++i) {
      prefix += arr[i];
      if (prefixToIndex.containsKey(prefix - target))
        leftLength = Math.min(leftLength, i - prefixToIndex.get(prefix - target));
      if (leftLength < Integer.MAX_VALUE)
        if (prefixToIndex.containsKey(prefix + target))
          ans = Math.min(ans, leftLength + prefixToIndex.get(prefix + target) - i);
    }

    return ans == Integer.MAX_VALUE ? -1 : ans;
  }
}


or


class Solution {
  public int minSumOfLengths(int[] arr, int target) {
    int ans = Integer.MAX_VALUE;
    int sum = 0; // the window sum
    // best[i] := the minimum length of subarrays in arr[0..i] that have
    // sum = target
    int[] best = new int[arr.length];
    Arrays.fill(best, Integer.MAX_VALUE);

    for (int l = 0, r = 0; r < arr.length; ++r) {
      sum += arr[r]; // Expand the window.
      while (sum > target)
        sum -= arr[l++]; // Shrink the window.
      if (sum == target) {
        if (l > 0 && best[l - 1] != Integer.MAX_VALUE)
          ans = Math.min(ans, best[l - 1] + r - l + 1);
        best[r] = Math.min(best[r], r - l + 1);
      }
      if (r > 0)
        best[r] = Math.min(best[r], best[r - 1]);
    }

    return ans == Integer.MAX_VALUE ? -1 : ans;
  }
}




or


class Solution {
    public int minSumOfLengths(int[] arr, int target) {
        Map<Integer, Integer> d = new HashMap<>();
        d.put(0, 0);
        int n = arr.length;
        int[] f = new int[n + 1];
        final int inf = 1 << 30;
        f[0] = inf;
        int s = 0, ans = inf;
        for (int i = 1; i <= n; ++i) {
            int v = arr[i - 1];
            s += v;
            f[i] = f[i - 1];
            if (d.containsKey(s - target)) {
                int j = d.get(s - target);
                f[i] = Math.min(f[i], i - j);
                ans = Math.min(ans, f[j] + i - j);
            }
            d.put(s, i);
        }
        return ans > n ? -1 : ans;
    }
}
