https://leetcode.com/problems/maximum-points-tourist-can-earn/description/

3332. Maximum Points Tourist Can Earn
Medium
Topics
Companies
Hint
You are given two integers, n and k, along with two 2D integer arrays, stayScore and travelScore.

A tourist is visiting a country with n cities, where each city is directly connected to every other city. The tourist's journey consists of exactly k 0-indexed days, and they can choose any city as their starting point.

Each day, the tourist has two choices:

Stay in the current city: If the tourist stays in their current city curr during day i, they will earn stayScore[i][curr] points.
Move to another city: If the tourist moves from their current city curr to city dest, they will earn travelScore[curr][dest] points.
Return the maximum possible points the tourist can earn.

 

Example 1:

Input: n = 2, k = 1, stayScore = [[2,3]], travelScore = [[0,2],[1,0]]

Output: 3

Explanation:

The tourist earns the maximum number of points by starting in city 1 and staying in that city.

Example 2:

Input: n = 3, k = 2, stayScore = [[3,4,2],[2,1,2]], travelScore = [[0,2,1],[2,0,4],[3,2,0]]

Output: 8

Explanation:

The tourist earns the maximum number of points by starting in city 1, staying in that city on day 0, and traveling to city 2 on day 1.

 

Constraints:

1 <= n <= 200
1 <= k <= 200
n == travelScore.length == travelScore[i].length == stayScore[i].length
k == stayScore.length
1 <= stayScore[i][j] <= 100
0 <= travelScore[i][j] <= 100
travelScore[i][i] == 0


# java


class Solution {
  public int maxScore(int n, int k, int[][] stayScore, int[][] travelScore) {
    // dp[i][j] := the maximum score after i days being at city j
    int[][] dp = new int[k + 1][n];

    for (int i = 1; i <= k; ++i) {
      for (int dest = 0; dest < n; ++dest) {
        // 1. Stay at the current city.
        dp[i][dest] = dp[i - 1][dest] + stayScore[i - 1][dest];
        // 2. Travel from any other city.
        for (int curr = 0; curr < n; ++curr)
          if (curr != dest)
            dp[i][dest] = Math.max(dp[i][dest], dp[i - 1][curr] + travelScore[curr][dest]);
      }
    }

    return Arrays.stream(dp[k]).max().getAsInt();
  }
}


or


class Solution {
  public int maxScore(int n, int k, int[][] stayScore, int[][] travelScore) {
    // dp[j] := the maximum score after days so far being at city j
    int[] dp = new int[n];

    for (int i = 0; i < k; ++i) {
      int[] newDp = new int[n];
      for (int dest = 0; dest < n; ++dest) {
        // 1. Stay at the current city.
        newDp[dest] = dp[dest] + stayScore[i][dest];
        // 2. Travel from any other city.
        for (int curr = 0; curr < n; ++curr)
          if (curr != dest)
            newDp[dest] = Math.max(newDp[dest], dp[curr] + travelScore[curr][dest]);
      }
      dp = newDp; // Update dp for the next day
    }

    return Arrays.stream(dp).max().getAsInt();
  }
}


or


class Solution {
    public int maxScore(int n, int k, int[][] stayScore, int[][] travelScore) {
        int[][] f = new int[k + 1][n];
        for (var g : f) {
            Arrays.fill(g, Integer.MIN_VALUE);
        }
        Arrays.fill(f[0], 0);
        for (int i = 1; i <= k; ++i) {
            for (int j = 0; j < n; ++j) {
                for (int h = 0; h < n; ++h) {
                    f[i][j] = Math.max(
                        f[i][j], f[i - 1][h] + (j == h ? stayScore[i - 1][j] : travelScore[h][j]));
                }
            }
        }
        return Arrays.stream(f[k]).max().getAsInt();
    }
}


or


public class Solution {
    public int maxScore(int n, int k, int[][] stayScore, int[][] travelScore) {
        int[] curr = new int[n];
        int[] prev = new int[n];

        for (int day = k - 1; day >= 0; day--) {
            for (int city = 0; city < n; city++) {
                int move = 0;
                for (int i = 0; i < n; i++) {
                    move = Math.max(move, prev[i] + travelScore[city][i]);}

                int stay = Math.max(curr[city], prev[city] + stayScore[day][city]);
                curr[city] = Math.max(move, stay);}

            int[] temp = prev;
            prev = curr;
            curr = temp;}

        int maxScore = 0;
        for (int score : prev) {
            maxScore = Math.max(maxScore, score);}

        return maxScore;}
}
