https://leetcode.com/problems/find-minimum-cost-to-remove-array-elements/description/


3469. Find Minimum Cost to Remove Array Elements
Medium
Topics
Companies
Hint
You are given an integer array nums. Your task is to remove all elements from the array by performing one of the following operations at each step until nums is empty:

Choose any two elements from the first three elements of nums and remove them. The cost of this operation is the maximum of the two elements removed.
If fewer than three elements remain in nums, remove all the remaining elements in a single operation. The cost of this operation is the maximum of the remaining elements.
Return the minimum cost required to remove all the elements.

 

Example 1:

Input: nums = [6,2,8,4]

Output: 12

Explanation:

Initially, nums = [6, 2, 8, 4].

In the first operation, remove nums[0] = 6 and nums[2] = 8 with a cost of max(6, 8) = 8. Now, nums = [2, 4].
In the second operation, remove the remaining elements with a cost of max(2, 4) = 4.
The cost to remove all elements is 8 + 4 = 12. This is the minimum cost to remove all elements in nums. Hence, the output is 12.

Example 2:

Input: nums = [2,1,3,3]

Output: 5

Explanation:

Initially, nums = [2, 1, 3, 3].

In the first operation, remove nums[0] = 2 and nums[1] = 1 with a cost of max(2, 1) = 2. Now, nums = [3, 3].
In the second operation remove the remaining elements with a cost of max(3, 3) = 3.
The cost to remove all elements is 2 + 3 = 5. This is the minimum cost to remove all elements in nums. Hence, the output is 5.

 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 106


# java

class Solution {
    public int cal(int ext, int ind, int[] nums, int[][] dp) {
        // Single element left
        if (ind == nums.length) return nums[ext];

        // 2 Elements left
        if (ind == nums.length - 1) return Math.max(nums[ext], nums[ind]);

        if (dp[ind][ext] != -1) return dp[ind][ext];

        // Trying all 3 cases of choosing 2 elements
        int f = Math.max(nums[ind], nums[ind + 1]) + cal(ext, ind + 2, nums, dp);
        int s = Math.max(nums[ext], nums[ind + 1]) + cal(ind, ind + 2, nums, dp);
        int t = Math.max(nums[ext], nums[ind]) + cal(ind + 1, ind + 2, nums, dp);

        // Returning min among the 3
        return dp[ind][ext] = Math.min(f, Math.min(s, t));
    }

    public int minCost(int[] nums) {
        int n = nums.length;

        // Memoization Table
        int[][] dp = new int[n + 1][n + 1];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }

        return cal(0, 1, nums, dp);
    }
}


or


class Solution {
    List<List<Long>> dp;

    long sol(int[] nums, long i, long p) {
        long n = nums.length;
        if (i >= n) {
            if (p < n && p >= 0)
                return nums[(int) p];
            return 0;
        }
        if (i == n - 1) {
            long maxi = nums[(int) i];
            if (p < n && p >= 0)
                maxi = Math.max(maxi, nums[(int) p]);
            return maxi;
        }
        if (dp.get((int) i).get((int) p) != -1)
            return dp.get((int) i).get((int) p);
        long ans = (long) 1e11;
        long j = i + 1;
        ans = Math.min(ans, Math.max(nums[(int) p], nums[(int) i]) + sol(nums, i + 2, i + 1));
        ans = Math.min(ans, Math.max(nums[(int) p], nums[(int) (i + 1)]) + sol(nums, i + 2, i));
        ans = Math.min(ans, Math.max(nums[(int) i], nums[(int) (i + 1)]) + sol(nums, i + 2, p));
        dp.get((int) i).set((int) p, ans);
        return ans;
    }

    public int minCost(int[] nums) {
        int n = nums.length;
        if (n < 3) {
            if (n == 1)
                return nums[n - 1];
            return Math.max(nums[0], nums[1]);
        }
        dp = new ArrayList<>();
        for (int i = 0; i <= n; i++) {
            List<Long> temp = new ArrayList<>(Collections.nCopies(n + 1, -1L));
            dp.add(temp);
        }
        long ans = (long) 1e11;
        ans = sol(nums, 1, 0);
        return (int) ans;
    }
}


or

class Solution {
    private int[][] dp;
    private int recur(int prev,int i,int nums[],int n){
        if(n<=2){
            return Math.max(nums[0],nums[n-1]);
        }
        if(i>=n) return nums[prev];
        if(i==n-1){
            return Math.max(nums[prev],nums[i]);
        }
        if(dp[prev][i] != 0) return dp[prev][i];
        int a = Math.max(nums[i],nums[i+1])+recur(prev,i+2,nums,n);
        int b = Math.max(nums[prev],nums[i+1]) +recur(i,i+2,nums,n);
        int c = Math.max(nums[prev],nums[i]) +recur(i+1,i+2,nums,n);
        return dp[prev][i] = Math.min(a,Math.min(b,c));

    }
    public int minCost(int[] nums) {
        int n = nums.length;
        dp = new int[n][n];
        return recur(0,1,nums,n);
    }
}

or

class Solution {
    private int[][] dp;
    public int minCost(int[] nums) {
        int n = nums.length;
        dp = new int[n][n+1];
        for(int x=0;x<n;x++){
            dp[x][n] = nums[x];
            dp[x][n-1] = Math.max(nums[x],nums[n-1]);
        }
        for(int p= n-2;p>=0;p--){
            for(int i=n-2;i>=0;i--){
                int a = Math.max(nums[i],nums[i+1])+dp[p][i+2];
                int b = Math.max(nums[p],nums[i+1]) +dp[i][i+2];
                int c = Math.max(nums[p],nums[i]) +dp[i+1][i+2];
                dp[p][i] = Math.min(a,Math.min(b,c));
            }
        }
        return dp[0][1];

    }
}


or


class Solution {
    private int[][] dp;
    public int minCost(int[] nums) {
        int n = nums.length;
        dp = new int[n+1][n];
        for(int x=0;x<n;x++){
            dp[n][x] = nums[x];
            dp[n-1][x] = Math.max(nums[x],nums[n-1]);
        }
        for(int i=n-2;i>=0;i--){
            for(int p= n-2;p>=0;p--){
                int a = Math.max(nums[i],nums[i+1])+dp[i+2][p];
                int b = Math.max(nums[p],nums[i+1]) +dp[i+2][i];
                int c = Math.max(nums[p],nums[i]) +dp[i+2][i+1];
                dp[i][p] = Math.min(a,Math.min(b,c));
            }
        }
        return dp[1][0];

    }
}


or


class Solution {
    public int minCost(int[] nums) {
        int n = nums.length;
        int[] next = new int[n];
        int[] nextnext = new int[n];
        for(int x=0;x<n;x++){
            nextnext[x] = nums[x];
            next[x] = Math.max(nums[x],nums[n-1]);
        }
        for(int i=n-2;i>=0;i--){
            int cur[] = new int[n];
            for(int p= n-2;p>=0;p--){
                int a = Math.max(nums[i],nums[i+1])+nextnext[p];
                int b = Math.max(nums[p],nums[i+1]) +nextnext[i];
                int c = Math.max(nums[p],nums[i]) +nextnext[i+1];
                cur[p] = Math.min(a,Math.min(b,c));
            }
            nextnext = next;
            next = cur;
        }
        return nextnext[0];

    }
}
