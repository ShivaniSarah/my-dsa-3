https://leetcode.com/problems/maximum-energy-boost-from-two-drinks/description/


3259. Maximum Energy Boost From Two Drinks
Medium
Topics
Companies
Hint
You are given two integer arrays energyDrinkA and energyDrinkB of the same length n by a futuristic sports scientist. These arrays represent the energy boosts per hour provided by two different energy drinks, A and B, respectively.

You want to maximize your total energy boost by drinking one energy drink per hour. However, if you want to switch from consuming one energy drink to the other, you need to wait for one hour to cleanse your system (meaning you won't get any energy boost in that hour).

Return the maximum total energy boost you can gain in the next n hours.

Note that you can start consuming either of the two energy drinks.

 

Example 1:

Input: energyDrinkA = [1,3,1], energyDrinkB = [3,1,1]

Output: 5

Explanation:

To gain an energy boost of 5, drink only the energy drink A (or only B).

Example 2:

Input: energyDrinkA = [4,1,1], energyDrinkB = [1,1,3]

Output: 7

Explanation:

To gain an energy boost of 7:

Drink the energy drink A for the first hour.
Switch to the energy drink B and we lose the energy boost of the second hour.
Gain the energy boost of the drink B in the third hour.
 

Constraints:

n == energyDrinkA.length == energyDrinkB.length
3 <= n <= 105
1 <= energyDrinkA[i], energyDrinkB[i] <= 105


# java

class Solution {
  public long maxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) {
    long dpA = 0; // the maximum energy boost if the last drink is A
    long dpB = 0; // the maximum energy boost if the last drink is B

    for (int i = 0; i < energyDrinkA.length; ++i) {
      final long newDpA = Math.max(dpB, dpA + energyDrinkA[i]);
      final long newDpB = Math.max(dpA, dpB + energyDrinkB[i]);
      dpA = newDpA;
      dpB = newDpB;
    }

    return Math.max(dpA, dpB);
  }
}


or


class Solution {
    public long maxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) {
        int n = energyDrinkA.length;
        long[][] f = new long[n][2];
        f[0][0] = energyDrinkA[0];
        f[0][1] = energyDrinkB[0];
        for (int i = 1; i < n; ++i) {
            f[i][0] = Math.max(f[i - 1][0] + energyDrinkA[i], f[i - 1][1]);
            f[i][1] = Math.max(f[i - 1][1] + energyDrinkB[i], f[i - 1][0]);
        }
        return Math.max(f[n - 1][0], f[n - 1][1]);
    }
}



or


class Solution {
    //Considering 0 indexed hours
    //drinkType = 0 ===> drink1
    //drinkType = 1 ===> drink2
    public long maxEnergyBoost(int[] drink1, int[] drink2) 
    {
        int n = drink1.length;
		
		 //dp[drinkType][hour]
        long[][] dp = new long[2][n];
        
         //in the last hour, for any given type we have only one option i.e to "DRINK"
        dp[0][n - 1] = drink1[n - 1];
        dp[1][n - 1] = drink2[n - 1];

        for (int currHour = n - 2; currHour >= 0; currHour--)
        {
            for (int currDrinkType = 0; currDrinkType <= 1; currDrinkType++)
            {
                long drinkBoost = (currDrinkType == 0)? drink1[currHour] : drink2[currHour];
                
                long noTypeSwitch = drinkBoost + dp[currDrinkType][currHour + 1];
                long typeSwitch = drinkBoost + ( (currHour + 2 >= n)? 0 : dp[1 - currDrinkType][currHour + 2] );
                
                dp[currDrinkType][currHour] = Math.max(noTypeSwitch, typeSwitch);
            }
        }
        return Math.max(dp[0][0], dp[1][0]);
        
    }
}


or


class Solution {
    //Considering 0 indexed hours
    //drinkType = 0 ===> drink1
    //drinkType = 1 ===> drink2
    long solve(int[] drink1, int[] drink2, long[][] dp, int currHour, int currDrinkType)
    {
        if (currHour >= drink1.length)
            return 0;
        if (dp[currDrinkType][currHour] != -1)
            return dp[currDrinkType][currHour];
        
        long drinkBoost = (currDrinkType == 0)? drink1[currHour] : drink2[currHour];
        
        long noTypeSwitch = drinkBoost + solve(drink1, drink2, dp, currHour + 1, currDrinkType);
        long typeSwitch = drinkBoost + solve(drink1, drink2, dp, currHour + 2, 1 - currDrinkType);

        return dp[currDrinkType][currHour] = Math.max(noTypeSwitch, typeSwitch);
        
    }
    public long maxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) 
    {
        long[][] dp = new long[2][energyDrinkA.length];
        Arrays.fill(dp[0], -1);
        Arrays.fill(dp[1], -1);
        
        long a = solve(energyDrinkA, energyDrinkB, dp, 0, 0);
        long b = solve(energyDrinkA, energyDrinkB, dp, 0, 1);
        return Math.max(a, b);
        
    }
}


or


class Solution {
    //Considering 0 indexed hours
    //drinkType = 0 ===> drink1
    //drinkType = 1 ===> drink2
    long solve(int[] drink1, int[] drink2, int currHour, int currDrinkType)
    {
        if (currHour >= drink1.length)
            return 0;
        
        long drinkBoost = (currDrinkType == 0)? drink1[currHour] : drink2[currHour];
        
        long noTypeSwitch = drinkBoost + solve(drink1, drink2, currHour + 1, currDrinkType);
        long typeSwitch = drinkBoost + solve(drink1, drink2, currHour + 2, 1 - currDrinkType);
        //if you switch types you need to skip next hour so (currHour + 2)
        //(1 - currDrinkType) switches the type (0 to 1) and (1 to 0)
        
        return Math.max(noTypeSwitch, typeSwitch);
        
    }
    public long maxEnergyBoost(int[] energyDrinkA, int[] energyDrinkB) 
    {
        long a = solve(energyDrinkA, energyDrinkB, 0, 0);
        long b = solve(energyDrinkA, energyDrinkB, 0, 1);
        
        return Math.max(a, b);
    }
}
