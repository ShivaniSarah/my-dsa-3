https://leetcode.com/problems/2-keys-keyboard/description/


650. 2 Keys Keyboard
Medium
Topics
Companies
Hint
There is only one character 'A' on the screen of a notepad. You can perform one of two operations on this notepad for each step:

Copy All: You can copy all the characters present on the screen (a partial copy is not allowed).
Paste: You can paste the characters which are copied last time.
Given an integer n, return the minimum number of operations to get the character 'A' exactly n times on the screen.

 

Example 1:

Input: n = 3
Output: 3
Explanation: Initially, we have one character 'A'.
In step 1, we use Copy All operation.
In step 2, we use Paste operation to get 'AA'.
In step 3, we use Paste operation to get 'AAA'.
Example 2:

Input: n = 1
Output: 0
 

Constraints:

1 <= n <= 1000


# java


class Solution {

    int n;

    public int minSteps(int n) {
        if (n == 1) return 0;
        this.n = n;
        // first step is always a Copy All operation
        return 1 + minStepsHelper(1, 1);
    }

    private int minStepsHelper(int currLen, int pasteLen) {
        // base case: reached n A's, don't need more operations
        if (currLen == n) return 0;
        // base case: exceeded n `A`s, not a valid sequence, so
        // return max value
        if (currLen > n) return 1000;

        // copy all + paste
        int opt1 = 2 + minStepsHelper(currLen * 2, currLen);
        // paste
        int opt2 = 1 + minStepsHelper(currLen + pasteLen, pasteLen);

        return Math.min(opt1, opt2);
    }
}


or


class Solution {

    int n;

    public int minSteps(int n) {
        if (n == 1) return 0;
        this.n = n;

        int[][] memo = new int[n + 1][n / 2 + 1];
        return 1 + minStepsHelper(1, 1, memo);
    }

    private int minStepsHelper(int currLen, int pasteLen, int[][] memo) {
        if (currLen == n) return 0;
        if (currLen > n) return 1000;

        // return result if it has been calculated already
        if (memo[currLen][pasteLen] != 0) return memo[currLen][pasteLen];

        int opt1 = 1 + minStepsHelper(currLen + pasteLen, pasteLen, memo);
        int opt2 = 2 + minStepsHelper(currLen * 2, currLen, memo);
        memo[currLen][pasteLen] = Math.min(opt1, opt2);
        return memo[currLen][pasteLen];
    }
}


or


class Solution {

    public int minSteps(int n) {
        int[] dp = new int[n + 1];
        Arrays.fill(dp, 1000);

        // Base case
        dp[1] = 0;
        for (int i = 2; i <= n; i++) {
            for (int j = 1; j <= i / 2; j++) {
                // Copy All and Paste (i-j) / j times
                // for all valid j's
                if (i % j == 0) {
                    dp[i] = Math.min(dp[i], dp[j] + i / j);
                }
            }
        }

        return dp[n];
    }
}


or


class Solution {

    public int minSteps(int n) {
        int ans = 0;
        int d = 2;
        while (n > 1) {
            // If d is prime factor, keep dividing
            // n by d until is no longer divisible
            while (n % d == 0) {
                ans += d;
                n /= d;
            }
            d++;
        }
        return ans;
    }
}



or



class Solution {
    public int minSteps(int n) {
        if (n == 1) return 0;
        
        int steps = 0;
        int factor = 2;
        
        while (n > 1) {
            while (n % factor == 0) {
                steps += factor;
                n /= factor;
            }
            factor++;
        }
        
        return steps;
    }
}
