https://leetcode.com/problems/number-of-people-aware-of-a-secret/description/

2327. Number of People Aware of a Secret
Medium
Topics
Companies
Hint
On day 1, one person discovers a secret.

You are given an integer delay, which means that each person will share the secret with a new person every day, starting from delay days after discovering the secret. You are also given an integer forget, which means that each person will forget the secret forget days after discovering it. A person cannot share the secret on the same day they forgot it, or on any day afterwards.

Given an integer n, return the number of people who know the secret at the end of day n. Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 6, delay = 2, forget = 4
Output: 5
Explanation:
Day 1: Suppose the first person is named A. (1 person)
Day 2: A is the only person who knows the secret. (1 person)
Day 3: A shares the secret with a new person, B. (2 people)
Day 4: A shares the secret with a new person, C. (3 people)
Day 5: A forgets the secret, and B shares the secret with a new person, D. (3 people)
Day 6: B shares the secret with E, and C shares the secret with F. (5 people)
Example 2:

Input: n = 4, delay = 1, forget = 3
Output: 6
Explanation:
Day 1: The first person is named A. (1 person)
Day 2: A shares the secret with B. (2 people)
Day 3: A and B share the secret with 2 new people, C and D. (4 people)
Day 4: A forgets the secret. B, C, and D share the secret with 3 new people. (6 people)
 

Constraints:

2 <= n <= 1000
1 <= delay < forget <= n


# java


class Solution {
  public int peopleAwareOfSecret(int n, int delay, int forget) {
    final int MOD = 1_000_000_007;
    long share = 0;
    // dp[i] := the number of people know the secret at day i
    int[] dp = new int[n]; // Maps day i to i + 1.
    dp[0] = 1;

    for (int i = 1; i < n; ++i) {
      if (i - delay >= 0)
        share += dp[i - delay];
      if (i - forget >= 0)
        share -= dp[i - forget];
      share += MOD;
      share %= MOD;
      dp[i] = (int) share;
    }

    // People before day `n - forget - 1` already forget the secret.
    int ans = 0;
    for (int i = n - forget; i < n; ++i)
      ans = (ans + dp[i]) % MOD;
    return ans;
  }
}


or


class Solution {
    private static final int MOD = (int) 1e9 + 7;

    public int peopleAwareOfSecret(int n, int delay, int forget) {
        int m = (n << 1) + 10;
        long[] d = new long[m];
        long[] cnt = new long[m];
        cnt[1] = 1;
        for (int i = 1; i <= n; ++i) {
            if (cnt[i] > 0) {
                d[i] = (d[i] + cnt[i]) % MOD;
                d[i + forget] = (d[i + forget] - cnt[i] + MOD) % MOD;
                int nxt = i + delay;
                while (nxt < i + forget) {
                    cnt[nxt] = (cnt[nxt] + cnt[i]) % MOD;
                    ++nxt;
                }
            }
        }
        long ans = 0;
        for (int i = 1; i <= n; ++i) {
            ans = (ans + d[i]) % MOD;
        }
        return (int) ans;
    }
}


or


class Solution {
    public int peopleAwareOfSecret(int n, int delay, int forget) {
        long mod = 1_000_000_007l;
        long[] newCount = new long[n];
        long[] extCount = new long[n];
        long[] newCountPrefixSum = new long[n + 1];
        // initialize day 1 values
        newCount[0] = 1l;
        newCountPrefixSum[1] = 1l;
        // run loop for n days
        for (int i = 1; i < n; i++) {
            // update current new count on (i+1)'th day
            if (i - delay >= 0 && i - forget >= 0) newCount[i] = (newCountPrefixSum[i - delay + 1] + mod - newCountPrefixSum[i - forget + 1]) % mod;    
            else if (i - delay >= 0) newCount[i] = newCountPrefixSum[i - delay + 1];
            // update existing count on (i+1)'th day
            if (i - forget < 0) extCount[i] = (newCount[i - 1] + extCount[i - 1]) % mod;
            else extCount[i] = (newCount[i - 1] + extCount[i - 1] + mod - newCount[i - forget]) % mod;
            // update prefix sum for new count computation in O(1)
            newCountPrefixSum[i + 1] = (newCountPrefixSum[i] + newCount[i]) % mod;
        }
        // sum up new and existing count on last day for answer
        return (int)((newCount[n-1] + extCount[n-1]) % 1_000_000_007l);
    }
}


or

class Solution {
    public int peopleAwareOfSecret(int n, int delay, int forget) {
        
        long mod = 1000000007;
        long[] dp = new long[n + 1];
        dp[1] = 1;

        for (int i = 1; i < n; ++i) {
            for (int j = i + delay; j < i + forget && j <= n; ++j) {
                dp[j] = (dp[j] + dp[i]) % mod;
            }
        }

        long res = 0;
        for (int i = n; i > n - forget; --i) {
            res = (res + dp[i]) % mod;
        }

        return (int) res;
        
    }
}
