https://leetcode.com/problems/maximum-number-that-sum-of-the-prices-is-less-than-or-equal-to-k/description/


3007. Maximum Number That Sum of the Prices Is Less Than or Equal to K
Medium
Topics
Companies
Hint
You are given an integer k and an integer x. The price of a number num is calculated by the count of set bits at positions x, 2x, 3x, etc., in its binary representation, starting from the least significant bit. The following table contains examples of how price is calculated.

x	num	Binary Representation	Price
1	13	000001101	3
2	13	000001101	1
2	233	011101001	3
3	13	000001101	1
3	362	101101010	2
The accumulated price of num is the total price of numbers from 1 to num. num is considered cheap if its accumulated price is less than or equal to k.

Return the greatest cheap number.

 

Example 1:

Input: k = 9, x = 1

Output: 6

Explanation:

As shown in the table below, 6 is the greatest cheap number.

x	num	Binary Representation	Price	Accumulated Price
1	1	001	1	1
1	2	010	1	2
1	3	011	2	4
1	4	100	1	5
1	5	101	2	7
1	6	110	2	9
1	7	111	3	12
Example 2:

Input: k = 7, x = 2

Output: 9

Explanation:

As shown in the table below, 9 is the greatest cheap number.

x	num	Binary Representation	Price	Accumulated Price
2	1	0001	0	0
2	2	0010	1	1
2	3	0011	1	2
2	4	0100	0	2
2	5	0101	0	2
2	6	0110	1	3
2	7	0111	1	4
2	8	1000	1	5
2	9	1001	1	6
2	10	1010	2	8
 

Constraints:

1 <= k <= 1015
1 <= x <= 8


# java


class Solution {
  public long findMaximumNumber(long k, int x) {
    long l = 1;
    long r = 1000000000000000L;

    while (l < r) {
      final long m = (l + r + 1) / 2;
      if (getSumPrices(m, x) > k)
        r = m - 1;
      else
        l = m;
    }

    return l;
  }

  // Returns the sum of prices of all numbers from 1 to `num`.
  private long getSumPrices(long num, int x) {
    long sumPrices = 0;
    ++num; // Increment `num` to account the 0-th row in the count of groups.
    for (int i = bitLength(num); i > 0; --i)
      if (i % x == 0) {
        final long groupSize = 1L << i;
        final long halfGroupSize = 1L << i - 1;
        sumPrices += num / groupSize * halfGroupSize;
        sumPrices += Math.max(0L, (num % groupSize) - halfGroupSize);
      }
    return sumPrices;
  }

  private int bitLength(long num) {
    return 64 - Long.numberOfLeadingZeros(num);
  }
}


or


class Solution {
    private int x;
    private long num;
    private Long[][] f;

    public long findMaximumNumber(long k, int x) {
        this.x = x;
        long l = 1, r = (long) 1e17;
        while (l < r) {
            long mid = (l + r + 1) >>> 1;
            num = mid;
            f = new Long[65][65];
            int pos = 64 - Long.numberOfLeadingZeros(mid);
            if (dfs(pos, 0, true) <= k) {
                l = mid;
            } else {
                r = mid - 1;
            }
        }
        return l;
    }

    private long dfs(int pos, int cnt, boolean limit) {
        if (pos == 0) {
            return cnt;
        }
        if (!limit && f[pos][cnt] != null) {
            return f[pos][cnt];
        }
        long ans = 0;
        int up = limit ? (int) (num >> (pos - 1) & 1) : 1;
        for (int i = 0; i <= up; ++i) {
            ans += dfs(pos - 1, cnt + (i == 1 && pos % x == 0 ? 1 : 0), limit && i == up);
        }
        if (!limit) {
            f[pos][cnt] = ans;
        }
        return ans;
    }
}

or



class Solution {
    public long findMaximumNumber(long k, int x) {
        long low=1l,high=(long)1e15,ans=0l;
        while(low<=high){
            long mid = low+(high-low)/2;
            if(possible(mid,x,k)){
                ans=Math.max(ans,mid);
                low=mid+1;
            }
            else high=mid-1;
        }
        return ans;
    }
    
    boolean possible(long num,int x,long k){
        long total=0;
        for(int i=1;i<=62;i++){
            if(i%x!=0) continue;
            long pow=(long)Math.pow(2,i);
            long set = num/pow;
            long rem = num%pow;
            long pow_2 = pow/2;
            total += set*pow_2;
            if(rem>=pow_2) total += rem+1-pow_2;
            if(total>k) return false;
        }
        return true;
    }
}


or


