https://leetcode.com/problems/maximum-frequency-after-subarray-operation/description/

3434. Maximum Frequency After Subarray Operation
Medium
Topics
Companies
Hint
You are given an array nums of length n. You are also given an integer k.

You perform the following operation on nums once:

Select a subarray nums[i..j] where 0 <= i <= j <= n - 1.
Select an integer x and add x to all the elements in nums[i..j].
Find the maximum frequency of the value k after the operation.

 

Example 1:

Input: nums = [1,2,3,4,5,6], k = 1

Output: 2

Explanation:

After adding -5 to nums[2..5], 1 has a frequency of 2 in [1, 2, -2, -1, 0, 1].

Example 2:

Input: nums = [10,2,3,4,5,5,4,3,2,2], k = 10

Output: 4

Explanation:

After adding 8 to nums[1..9], 10 has a frequency of 4 in [10, 10, 11, 12, 13, 13, 12, 11, 10, 10].

 

Constraints:

1 <= n == nums.length <= 105
1 <= nums[i] <= 50
1 <= k <= 50


# java


class Solution {
    public int maxFrequency(int[] A, int k) {
        Map<Integer, Integer> count = new HashMap<>();
        for (int a : A) {
            count.put(a, count.getOrDefault(a, 0) + 1);
        }

        int res = 0;
        for (int b : count.keySet()) {
            res = Math.max(res, kadane(A, k, b));
        }

        return count.getOrDefault(k, 0) + res;
    }

    private int kadane(int[] A, int k, int b) {
        int res = 0, cur = 0;
        for (int a : A) {
            if (a == k) {
                cur--;
            }
            if (a == b) {
                cur++;
            }
            if (cur < 0) {
                cur = 0;
            }
            res = Math.max(res, cur);
        }
        return res;
    }
}


or


class Solution {
    public int maxFrequency(int[] A, int k) {
        int count[] = new int[51], res = 0;
        for (int a : A) {
            count[a] = Math.max(count[a], count[k]) + 1;
            res = Math.max(res, count[a] - count[k]);
        }
        return count[k] + res;
    }
}


or



class Solution {
    public static int solve(int[] nums, int k) {
        int k_freq = 0;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int i : nums) {
            map.put(i, map.getOrDefault(i, 0) + 1);
        }
        
        if (map.containsKey(k)) {
            k_freq += map.get(k);
        }
        
        int max = 0;
        
        for (int v = 1; v <= 50; v++) {
            if (v == k) continue;            
            int curr_sum = 0;
            int temp_max = 0;
            for (int num : nums) {
                if (num == v) {
                    curr_sum += 1;
                } else if (num == k) {
                    curr_sum -= 1;
                }

                if (curr_sum < 0) {
                    curr_sum = 0;
                }

                if (curr_sum > temp_max) {
                    temp_max = curr_sum;
                }
            }

            if (temp_max > max) {
                max = temp_max;
            }
        }

        int maxfreq = k_freq + max;
        return maxfreq;
    }

    public int maxFrequency(int[] nums, int k) {
        return solve(nums, k);
    }
}

