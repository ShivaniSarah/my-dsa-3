https://leetcode.com/problems/toss-strange-coins/description/


1230. Toss Strange Coins
Description
You have some coins.  The i-th coin has a probability prob[i] of facing heads when tossed.

Return the probability that the number of coins facing heads equals target if you toss every coin exactly once.

 

Example 1:

Input: prob = [0.4], target = 1
Output: 0.40000
Example 2:

Input: prob = [0.5,0.5,0.5,0.5,0.5], target = 0
Output: 0.03125
 

Constraints:

1 <= prob.length <= 1000
0 <= prob[i] <= 1
0 <= target <= prob.length
Answers will be accepted as correct if they are within 10^-5 of the correct answer.



# java


class Solution {
  public double probabilityOfHeads(double[] prob, int target) {
    // dp[i][j] := the probability of tossing the first i coins with j heads
    double[][] dp = new double[prob.length + 1][target + 1];
    dp[0][0] = 1.0;

    for (int i = 1; i <= prob.length; ++i)
      for (int j = 0; j <= target; ++j)
        dp[i][j] = (j > 0 ? dp[i - 1][j - 1] * prob[i - 1] : 0) + dp[i - 1][j] * (1 - prob[i - 1]);

    return dp[prob.length][target];
  }
}




or


class Solution {
  public double probabilityOfHeads(double[] prob, int target) {
    // dp[j] := the probability of tossing the coins so far with j heads
    double[] dp = new double[target + 1];
    dp[0] = 1.0;

    for (final double p : prob)
      for (int j = target; j >= 0; --j)
        dp[j] = (j > 0 ? dp[j - 1] * p : 0) + dp[j] * (1 - p);

    return dp[target];
  }
}


or


class Solution {
    public double probabilityOfHeads(double[] prob, int target) {
        int n = prob.length;
        double[][] f = new double[n + 1][target + 1];
        f[0][0] = 1;
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j <= Math.min(i, target); ++j) {
                f[i][j] = (1 - prob[i - 1]) * f[i - 1][j];
                if (j > 0) {
                    f[i][j] += prob[i - 1] * f[i - 1][j - 1];
                }
            }
        }
        return f[n][target];
    }
}

