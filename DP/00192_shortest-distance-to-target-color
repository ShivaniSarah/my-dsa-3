https://leetcode.com/problems/shortest-distance-to-target-color/description/


1182. Shortest Distance to Target Color
Description
You are given an array colors, in which there are three colors: 1, 2 and 3.

You are also given some queries. Each query consists of two integers i and c, return the shortest distance between the given index i and the target color c. If there is no solution return -1.

 

Example 1:

Input: colors = [1,1,2,1,3,2,2,3,3], queries = [[1,3],[2,2],[6,1]]
Output: [3,0,3]
Explanation: 
The nearest 3 from index 1 is at index 4 (3 steps away).
The nearest 2 from index 2 is at index 2 itself (0 steps away).
The nearest 1 from index 6 is at index 3 (3 steps away).
Example 2:

Input: colors = [1,2], queries = [[0,3]]
Output: [-1]
Explanation: There is no 3 in the array.
 

Constraints:

1 <= colors.length <= 5*10^4
1 <= colors[i] <= 3
1 <= queries.length <= 5*10^4
queries[i].length == 2
0 <= queries[i][0] < colors.length
1 <= queries[i][1] <= 3




# java



class Solution {
  public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {
    final int NUM_COLOR = 3;
    final int n = colors.length;
    List<Integer> ans = new ArrayList<>();
    // left[i][c] := the closest index of color c in index i to the left
    int[][] left = new int[n][NUM_COLOR + 1];
    // right[i][c] := the closest index of color c in index i to the right
    int[][] right = new int[n][NUM_COLOR + 1];

    int[] colorToClosestIndex = {0, -1, -1, -1}; // 0-indexed, -1 := N/A
    for (int i = 0; i < n; ++i) {
      colorToClosestIndex[colors[i]] = i;
      for (int c = 1; c <= NUM_COLOR; ++c)
        left[i][c] = colorToClosestIndex[c];
    }

    colorToClosestIndex = new int[] {0, -1, -1, -1}; // Reset
    for (int i = n - 1; i >= 0; --i) {
      colorToClosestIndex[colors[i]] = i;
      for (int c = 1; c <= NUM_COLOR; ++c)
        right[i][c] = colorToClosestIndex[c];
    }

    for (int[] query : queries) {
      final int i = query[0];
      final int c = query[1];
      final int leftDist = left[i][c] == -1 ? Integer.MAX_VALUE : i - left[i][c];
      final int rightDist = right[i][c] == -1 ? Integer.MAX_VALUE : right[i][c] - i;
      final int minDist = Math.min(leftDist, rightDist);
      ans.add(minDist == Integer.MAX_VALUE ? -1 : minDist);
    }

    return ans;
  }
}



or


class Solution {
    public List<Integer> shortestDistanceColor(int[] colors, int[][] queries) {
        int n = colors.length;
        final int inf = 1 << 30;
        int[][] right = new int[n + 1][3];
        Arrays.fill(right[n], inf);
        for (int i = n - 1; i >= 0; --i) {
            for (int j = 0; j < 3; ++j) {
                right[i][j] = right[i + 1][j];
            }
            right[i][colors[i] - 1] = i;
        }
        int[][] left = new int[n + 1][3];
        Arrays.fill(left[0], -inf);
        for (int i = 1; i <= n; ++i) {
            for (int j = 0; j < 3; ++j) {
                left[i][j] = left[i - 1][j];
            }
            left[i][colors[i - 1] - 1] = i - 1;
        }
        List<Integer> ans = new ArrayList<>();
        for (int[] q : queries) {
            int i = q[0], c = q[1] - 1;
            int d = Math.min(i - left[i + 1][c], right[i][c] - i);
            ans.add(d > n ? -1 : d);
        }
        return ans;
    }
}


