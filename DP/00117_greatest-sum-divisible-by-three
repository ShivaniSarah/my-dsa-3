https://leetcode.com/problems/greatest-sum-divisible-by-three/description/

1262. Greatest Sum Divisible by Three
Medium
Topics
Companies
Hint
Given an integer array nums, return the maximum possible sum of elements of the array such that it is divisible by three.

 

Example 1:

Input: nums = [3,6,5,1,8]
Output: 18
Explanation: Pick numbers 3, 6, 1 and 8 their sum is 18 (maximum sum divisible by 3).
Example 2:

Input: nums = [4]
Output: 0
Explanation: Since 4 is not divisible by 3, do not pick any number.
Example 3:

Input: nums = [1,2,3,4,4]
Output: 12
Explanation: Pick numbers 1, 3, 4 and 4 their sum is 12 (maximum sum divisible by 3).
 

Constraints:

1 <= nums.length <= 4 * 104
1 <= nums[i] <= 104


# java


class Solution {
  public int maxSumDivThree(int[] nums) {
    int[] dp = new int[3]; // dp[i] := the maximum sum so far s.t. sum % 3 == i

    for (final int num : nums)
      for (final int sum : dp.clone())
        dp[(sum + num) % 3] = Math.max(dp[(sum + num) % 3], sum + num);

    return dp[0];
  }
}


or


class Solution {
    public int maxSumDivThree(int[] nums) {
        int n = nums.length;
        final int inf = 1 << 30;
        int[][] f = new int[n + 1][3];
        f[0][1] = f[0][2] = -inf;
        for (int i = 1; i <= n; ++i) {
            int x = nums[i - 1];
            for (int j = 0; j < 3; ++j) {
                f[i][j] = Math.max(f[i - 1][j], f[i - 1][(j - x % 3 + 3) % 3] + x);
            }
        }
        return f[n][0];
    }
}

or


class Solution {
   int maxSumDivThree(vector<int>& nums) {
	int f1=-1;
	int s1=-1;
	int f2=-1;
	int s2=-1;
	int ct1=0, ct2=0;
	int res = 0;
	int n = nums.size();
	for(int i=0; i<n; i++) {
		int mod = nums[i]%3;
		if(mod == 1) {
			if(f1 == -1 || nums[i] < nums[f1]) {
				s1 = f1;
				f1 = i;
			} else if(s1 == -1 || nums[i] < nums[s1]) {
				s1 = i;
			}
			ct1 += 1;
		} else if(mod == 2) {
			if(f2 == -1 || nums[i] < nums[f2]) {
				s2 = f2;
				f2 = i;
			} else if(s2 == -1 || nums[i] < nums[s2]) {
				s2 = i;
			}
			ct2 += 1;
		}
		res += nums[i];
	}

	int mod = (ct1+ct2*2)%3;

	if(mod==1) {
		int val2 = INT_MAX;
		int val1 = nums[f1];
		if(f2 != -1 && s2 != -1) val2 = nums[f2]+nums[s2];
		if(val1>val2) res-=val2;
		else res-=val1;
	} else if(mod==2) {
		int val1 = INT_MAX, val2 = INT_MAX;
		if(f1!=-1 and s1!=-1) {
			val1 = nums[f1]+nums[s1];
		}
		if(f2!=-1) val2 = nums[f2];

		if(val1<val2) res-=val1;
		else res-=val2;
	}
	return res;
}
}
