https://leetcode.com/problems/longest-subsequence-with-decreasing-adjacent-difference/description/


3409. Longest Subsequence With Decreasing Adjacent Difference
Medium
Topics
Companies
Hint
You are given an array of integers nums.

Your task is to find the length of the longest subsequence seq of nums, such that the absolute differences between consecutive elements form a non-increasing sequence of integers. In other words, for a subsequence seq0, seq1, seq2, ..., seqm of nums, |seq1 - seq0| >= |seq2 - seq1| >= ... >= |seqm - seqm - 1|.

Return the length of such a subsequence.

 

Example 1:

Input: nums = [16,6,3]

Output: 3

Explanation: 

The longest subsequence is [16, 6, 3] with the absolute adjacent differences [10, 3].

Example 2:

Input: nums = [6,5,3,4,2,1]

Output: 4

Explanation:

The longest subsequence is [6, 4, 2, 1] with the absolute adjacent differences [2, 2, 1].

Example 3:

Input: nums = [10,20,10,19,10,20]

Output: 5

Explanation: 

The longest subsequence is [10, 20, 10, 19, 10] with the absolute adjacent differences [10, 10, 9, 9].

 

Constraints:

2 <= nums.length <= 104
1 <= nums[i] <= 300


# java

class Solution {
   int longestSubsequence(int[] nums) {
    int res = 0;
    int[][] dp = new int[301][301];
    Arrays.stream(dp).forEach(row -> Arrays.fill(row, 0));
    for(int i = nums.length - 1; i >= 0; --i){
        for(int nextNum = 1; nextNum <= 300; ++nextNum){
            int diff = Math.abs(nums[i] - nextNum);
            dp[nums[i]][diff] = Math.max(dp[nums[i]][diff] , dp[nextNum][diff] + 1);
        }
        for(int diff = 1; diff < 300; ++diff){
            dp[nums[i]][diff] = Math.max(dp[nums[i]][diff], dp[nums[i]][diff-1]);
            res = Math.max(res, dp[nums[i]][diff]);
        }
    }
    return res;
}
}


or

class Solution {
    public int longestSubsequence(int[] nums) {
         // Create a 2D array for dynamic programming
        int[][] dp = new int[302][302];
        
        // Iterate through the array from right to left
        for (int i = nums.length - 1; i >= 0; --i) {
            int num = nums[i];
            
            // For each possible next number
            for (int next = 1; next <= 300; ++next) {
                int diff = Math.abs(next - num);
                dp[num][diff] = Math.max(dp[num][diff], dp[next][diff] + 1);
            }
            
            // Update dp values for current number
            for (int j = 1; j <= 300; ++j) {
                dp[num][j] = Math.max(dp[num][j], dp[num][j - 1]);
            }
        }
        
        // Find the maximum value in dp array
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i <= 301; ++i) {
            for (int j = 0; j <= 301; ++j) {
                ans = Math.max(ans, dp[i][j]);
            }
        }
        
        return ans;
    }
}


or


class Solution {
    public int longestSubsequence(int[] nums) {
        int[][] dp=new int[301][301];
        int max=0;
        for(int i=0;i<=300;i++)dp[nums[0]][i]=1;
        for(int i=1;i<nums.length;i++){
            int g=nums[i];
            for(int j=0;j<=300;j++){
                int curr=0;
             if(g-j>0){
                curr=Math.max(dp[g-j][j]+1,curr);
             }
             if(g+j<=300){
               curr=Math.max(dp[g+j][j]+1,curr);
             }
             dp[g][j]=Math.max(curr,dp[g][j]);
            }
            for(int j=299;j>=0;j--){
               dp[g][j]=Math.max(dp[g][j],dp[g][j+1]);
               max=Math.max(max,dp[g][j]);
            }
            
        }
        return max;
        
    }

    
}


or


class Solution {
    public int longestSubsequence(int[] nums) {
        int[][] dp = new int[nums.length][300];
        for(int[] arr : dp) Arrays.fill(arr, 1);

        int[] mp = new int[301];
        Arrays.fill(mp, -1);
        mp[nums[0]] = 0;
        int ans = 1;

        for(int indx = 1; indx < nums.length; indx++) { // 10^4
            for(int difference = 299; difference >= 0; difference--) { // 300
                if(difference != 299) dp[indx][difference] = dp[indx][difference + 1];

                int k = nums[indx] - difference;
                if(k >= 1 && k <= 300 && mp[k] != -1) {
                    int kLastIndx = mp[k];
                    dp[indx][difference] = Math.max(dp[indx][difference], dp[kLastIndx][difference] + 1);
                }

                k = nums[indx] + difference;
                if(k >= 1 && k <= 300 && mp[k] != -1) {
                    int kLastIndx = mp[k];
                    dp[indx][difference] = Math.max(dp[indx][difference], dp[kLastIndx][difference] + 1);
                }
                
                ans = Math.max(ans, dp[indx][difference]);
            }
            
            mp[nums[indx]] = indx;
        }

        return ans;
    }
}


