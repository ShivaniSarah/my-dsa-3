https://leetcode.com/problems/sorting-three-groups/description/

2826. Sorting Three Groups
Medium
Topics
Companies
Hint
You are given an integer array nums. Each element in nums is 1, 2 or 3. In each operation, you can remove an element from nums. Return the minimum number of operations to make nums non-decreasing.

 

Example 1:

Input: nums = [2,1,3,2,1]

Output: 3

Explanation:

One of the optimal solutions is to remove nums[0], nums[2] and nums[3].

Example 2:

Input: nums = [1,3,2,1,3,3]

Output: 2

Explanation:

One of the optimal solutions is to remove nums[1] and nums[2].

Example 3:

Input: nums = [2,2,2,2,3,3]

Output: 0

Explanation:

nums is already non-decreasing.

 

Constraints:

1 <= nums.length <= 100
1 <= nums[i] <= 3
 

Follow-up: Can you come up with an algorithm that runs in O(n) time complexity?


# java


class Solution {
  public int minimumOperations(List<Integer> nums) {
    // dp[i] := the longest non-decreasing subsequence so far with numbers in [1..i]
    int[] dp = new int[4];

    for (final int num : nums) {
      ++dp[num];
      dp[2] = Math.max(dp[2], dp[1]);
      dp[3] = Math.max(dp[3], dp[2]);
    }

    return nums.size() - dp[3];
  }
}


or


class Solution {
    public int minimumOperations(List<Integer> nums) {
        int[] f = new int[3];
        for (int x : nums) {
            int[] g = new int[3];
            if (x == 1) {
                g[0] = f[0];
                g[1] = Math.min(f[0], f[1]) + 1;
                g[2] = Math.min(f[0], Math.min(f[1], f[2])) + 1;
            } else if (x == 2) {
                g[0] = f[0] + 1;
                g[1] = Math.min(f[0], f[1]);
                g[2] = Math.min(f[0], Math.min(f[1], f[2])) + 1;
            } else {
                g[0] = f[0] + 1;
                g[1] = Math.min(f[0], f[1]) + 1;
                g[2] = Math.min(f[0], Math.min(f[1], f[2]));
            }
            f = g;
        }
        return Math.min(f[0], Math.min(f[1], f[2]));
    }
}


or


class Solution {

    private int countOps(List<Integer> nums, int ind, int val, int[][] dp){
        if(ind <= 0){
            return 0;
        }

        if(dp[ind][val] != -1){
            return dp[ind][val];
        }

        Integer res = Integer.MAX_VALUE;
        for(int i = 1; i <= val; i++){
            int cnt = 0;
            if(i == nums.get(ind-1)){
                cnt = countOps(nums, ind-1, i, dp);
            } else{
                cnt  =  1 + countOps(nums, ind-1, i, dp);
            }
            
            res = Math.min(res, cnt);
        }
        return dp[ind][val] = res;
    }
    public int minimumOperations(List<Integer> nums) {
        int n = nums.size();
        int[][] dp = new int[n+1][4];
        for(int i = 0; i <= n; i++){
            for(int j  = 0; j < 4; j++){
                dp[i][j] = -1;
            }
        }
        return countOps(nums, nums.size(), 3, dp);
    }
}


or


class Solution {
        public int minimumOperations(List<Integer> A) {
        int n = A.size(), dp[] = new int[]{n, n, n, n};
        for (int a : A) {
            dp[a]--;
            dp[2] = Math.min(dp[2], dp[1]);
            dp[3] = Math.min(dp[3], dp[2]);
        }
        return dp[3];
    }
}


or


