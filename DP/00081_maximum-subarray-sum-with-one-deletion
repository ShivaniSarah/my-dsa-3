https://leetcode.com/problems/maximum-subarray-sum-with-one-deletion/description/


1186. Maximum Subarray Sum with One Deletion
Medium
Topics
Companies
Hint
Given an array of integers, return the maximum sum for a non-empty subarray (contiguous elements) with at most one element deletion. In other words, you want to choose a subarray and optionally delete one element from it so that there is still at least one element left and the sum of the remaining elements is maximum possible.

Note that the subarray needs to be non-empty after deleting one element.

 

Example 1:

Input: arr = [1,-2,0,3]
Output: 4
Explanation: Because we can choose [1, -2, 0, 3] and drop -2, thus the subarray [1, 0, 3] becomes the maximum value.
Example 2:

Input: arr = [1,-2,-2,3]
Output: 3
Explanation: We just choose [3] and it's the maximum sum.
Example 3:

Input: arr = [-1,-1,-1,-1]
Output: -1
Explanation: The final subarray needs to be non-empty. You can't choose [-1] and delete -1 from it, then get an empty subarray to make the sum equals to 0.
 

Constraints:

1 <= arr.length <= 105
-104 <= arr[i] <= 104


# java


class Solution {
  // Similar to 53. Maximum Subarray
  public int maximumSum(int[] arr) {
    // dp[0][i] := the maximum sum subarray ending in i (no deletion)
    // dp[1][i] := the maximum sum subarray ending in i (at most 1 deletion)
    int[][] dp = new int[2][arr.length];

    dp[0][0] = arr[0];
    dp[1][0] = arr[0];
    for (int i = 1; i < arr.length; ++i) {
      dp[0][i] = Math.max(arr[i], dp[0][i - 1] + arr[i]);
      dp[1][i] = Math.max(arr[i], Math.max(dp[1][i - 1] + arr[i], dp[0][i - 1] /*delete arr[i]*/));
    }

    return Arrays.stream(dp[1]).max().getAsInt();
  }
}


or


class Solution {
  // Similar to 53. Maximum Subarray
  public int maximumSum(int[] arr) {
    final int MIN = Integer.MIN_VALUE / 2;
    int ans = MIN;
    int zero = MIN; // no deletion
    int one = MIN;  // <= 1 deletion

    for (final int a : arr) {
      one = Math.max(a, Math.max(one + a, zero /*delete a*/));
      zero = Math.max(a, zero + a);
      ans = Math.max(ans, one);
    }

    return ans;
  }
}

or


class Solution {
    public int maximumSum(int[] arr) {
        int n = arr.length;
        int[] left = new int[n];
        int[] right = new int[n];
        int ans = -(1 << 30);
        for (int i = 0, s = 0; i < n; ++i) {
            s = Math.max(s, 0) + arr[i];
            left[i] = s;
            ans = Math.max(ans, left[i]);
        }
        for (int i = n - 1, s = 0; i >= 0; --i) {
            s = Math.max(s, 0) + arr[i];
            right[i] = s;
        }
        for (int i = 1; i < n - 1; ++i) {
            ans = Math.max(ans, left[i - 1] + right[i + 1]);
        }
        return ans;
    }
}

or


class Solution {
    public int maximumSum(int[] arr) {
        int n = arr.length;
        
        if(n == 1) return arr[0];
        
        int possibleLargest = -1;
        
        int[] prefixSum = new int[n];
        int[] suffixSum = new int[n];
        
        prefixSum[0] = arr[0];
        suffixSum[n-1] = arr[n-1];
        
        for (int i = 1; i < n; i++) {
            prefixSum[i] = Math.max(prefixSum[i-1] + arr[i], arr[i]);
            possibleLargest = Math.max(possibleLargest, prefixSum[i]);
        }
        for (int i = n-2; i >=0; i--) {
            suffixSum[i] = Math.max(suffixSum[i+1] + arr[i], arr[i]);
            possibleLargest = Math.max(possibleLargest, suffixSum[i]);
        }
        
        for(int i=1; i <= n - 2; i++)
        {
            possibleLargest = Math.max(prefixSum[i-1] + suffixSum[i+1], possibleLargest);
        }
        
        return possibleLargest;
    }
}


or


class Solution {
   public int maximumSum(int[] arr) {
        int N=arr.length, sum_with_delete=arr[0], sum_without_delete=arr[0], result=Integer.MIN_VALUE;
        if(N==1){
            return arr[0];
        }
        
        for(int i=1;i<N;i++){
            int sum_without_delete_temp=Math.max(sum_without_delete+arr[i], arr[i]);
            sum_with_delete=Math.max(sum_without_delete, sum_with_delete+arr[i]);
            sum_without_delete=sum_without_delete_temp;
            
            result=Math.max(result, Math.max(sum_with_delete, sum_without_delete));
        }
        
        return result;
    }
}
