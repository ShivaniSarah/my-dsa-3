https://leetcode.com/problems/video-stitching/

1024. Video Stitching
Medium
Topics
Companies
Hint
You are given a series of video clips from a sporting event that lasted time seconds. These video clips can be overlapping with each other and have varying lengths.

Each video clip is described by an array clips where clips[i] = [starti, endi] indicates that the ith clip started at starti and ended at endi.

We can cut these clips into segments freely.

For example, a clip [0, 7] can be cut into segments [0, 1] + [1, 3] + [3, 7].
Return the minimum number of clips needed so that we can cut the clips into segments that cover the entire sporting event [0, time]. If the task is impossible, return -1.

 

Example 1:

Input: clips = [[0,2],[4,6],[8,10],[1,9],[1,5],[5,9]], time = 10
Output: 3
Explanation: We take the clips [0,2], [8,10], [1,9]; a total of 3 clips.
Then, we can reconstruct the sporting event as follows:
We cut [1,9] into segments [1,2] + [2,8] + [8,9].
Now we have segments [0,2] + [2,8] + [8,10] which cover the sporting event [0, 10].
Example 2:

Input: clips = [[0,1],[1,2]], time = 5
Output: -1
Explanation: We cannot cover [0,5] with only [0,1] and [1,2].
Example 3:

Input: clips = [[0,1],[6,8],[0,2],[5,6],[0,4],[0,3],[6,7],[1,3],[4,7],[1,4],[2,5],[2,6],[3,4],[4,5],[5,7],[6,9]], time = 9
Output: 3
Explanation: We can take clips [0,4], [4,7], and [6,9].
 

Constraints:

1 <= clips.length <= 100
0 <= starti <= endi <= 100
1 <= time <= 100


# java


class Solution {
  public int videoStitching(int[][] clips, int time) {
    int ans = 0;
    int end = 0;
    int farthest = 0;

    Arrays.sort(clips, Comparator.comparingInt(clip -> clip[0]));

    int i = 0;
    while (farthest < time) {
      while (i < clips.length && clips[i][0] <= end)
        farthest = Math.max(farthest, clips[i++][1]);
      if (end == farthest)
        return -1;
      ++ans;
      end = farthest;
    }

    return ans;
  }
}


or


class Solution {
    public int videoStitching(int[][] clips, int time) {
        int[] last = new int[time];
        for (var e : clips) {
            int a = e[0], b = e[1];
            if (a < time) {
                last[a] = Math.max(last[a], b);
            }
        }
        int ans = 0, mx = 0, pre = 0;
        for (int i = 0; i < time; ++i) {
            mx = Math.max(mx, last[i]);
            if (mx <= i) {
                return -1;
            }
            if (pre == i) {
                ++ans;
                pre = mx;
            }
        }
        return ans;
    }
}



or


class Solution {
    public int videoStitching(int[][] clips, int time) {
        int min = 0;
        int max = 0;
        int total = 0;
        
        while(max<time) {
            
            for(int[] clip : clips) {
                int left = clip[0];
                int right = clip[1];
                
                if(left<=min && right >max) {
                    max = right;
                }
            }
            
            if(min == max) {
                return -1;
            }
            
            min = max;
            total++;
        }
        
        
        return total;
    }
}


or


class Solution {
    public int videoStitching(int[][] clips, int time) {
        int[] maxReach = new int[101]; // Constraint: 0 <= starti <= endi <= 100

        // Populate maxReach array
        for (int[] clip : clips) {
            int start = clip[0];
            int end = clip[1];
            maxReach[start] = Math.max(maxReach[start], end);
        }

        int minClips = 0;
        int currentEnd = 0;
        int furthestReach = 0;

        for (int i = 0; i <= time; i++) {
            if (i > furthestReach) {
                return -1; // Impossible to cover the entire time
            }

            if (i > currentEnd) {
                minClips++;
                currentEnd = furthestReach;
            }

            furthestReach = Math.max(furthestReach, maxReach[i]);
        }

        return minClips;
    }
}


or


class Solution {
    public int videoStitching(int[][] clips, int time) {
        List<Pair> intervals = new ArrayList<>();
        for (int[] clip : clips) {
            intervals.add(new Pair(clip[0], clip[1]));
        }

        // Sort intervals based on the start time
        Collections.sort(intervals, (a, b) -> a.start - b.start);

        int minClips = 0;
        int currentEnd = 0;
        int index = 0;
        int n = intervals.size();

        while (currentEnd < time) {
            minClips++;
            int furthestEnd = currentEnd;

            // Find the clip that extends furthest while starting within or before currentEnd
            while (index < n && intervals.get(index).start <= currentEnd) {
                furthestEnd = Math.max(furthestEnd, intervals.get(index).end);
                index++;
            }

            // If we can't extend further, it's impossible to cover the entire time
            if (furthestEnd <= currentEnd) {
                return -1;
            }

            currentEnd = furthestEnd;
        }

        return minClips;
    }

    class Pair {
        int start;
        int end;
        Pair(int start, int end) {
            this.start = start;
            this.end = end;
        }
    }
}
