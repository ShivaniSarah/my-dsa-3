https://leetcode.com/problems/maximize-the-profit-as-the-salesman/description/

2830. Maximize the Profit as the Salesman
Medium
Topics
Companies
Hint
You are given an integer n representing the number of houses on a number line, numbered from 0 to n - 1.

Additionally, you are given a 2D integer array offers where offers[i] = [starti, endi, goldi], indicating that ith buyer wants to buy all the houses from starti to endi for goldi amount of gold.

As a salesman, your goal is to maximize your earnings by strategically selecting and selling houses to buyers.

Return the maximum amount of gold you can earn.

Note that different buyers can't buy the same house, and some houses may remain unsold.

 

Example 1:

Input: n = 5, offers = [[0,0,1],[0,2,2],[1,3,2]]
Output: 3
Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.
We sell houses in the range [0,0] to 1st buyer for 1 gold and houses in the range [1,3] to 3rd buyer for 2 golds.
It can be proven that 3 is the maximum amount of gold we can achieve.
Example 2:

Input: n = 5, offers = [[0,0,1],[0,2,10],[1,3,2]]
Output: 10
Explanation: There are 5 houses numbered from 0 to 4 and there are 3 purchase offers.
We sell houses in the range [0,2] to 2nd buyer for 10 golds.
It can be proven that 10 is the maximum amount of gold we can achieve.
 

Constraints:

1 <= n <= 105
1 <= offers.length <= 105
offers[i].length == 3
0 <= starti <= endi <= n - 1
1 <= goldi <= 103



# java


class Solution {
  public int maximizeTheProfit(int n, List<List<Integer>> offers) {
    // dp[i] := the maximum amount of gold of selling the first i houses
    int[] dp = new int[n + 1];
    List<Pair<Integer, Integer>>[] endToStartAndGolds = new List[n];

    for (int i = 0; i < n; ++i)
      endToStartAndGolds[i] = new ArrayList<>();

    for (List<Integer> offer : offers) {
      final int start = offer.get(0);
      final int end = offer.get(1);
      final int gold = offer.get(2);
      endToStartAndGolds[end].add(new Pair<>(start, gold));
    }

    for (int end = 1; end <= n; ++end) {
      // Get at least the same gold as selling the first `end - 1` houses.
      dp[end] = dp[end - 1];
      for (Pair<Integer, Integer> pair : endToStartAndGolds[end - 1]) {
        final Integer start = pair.getKey();
        final Integer gold = pair.getValue();
        dp[end] = Math.max(dp[end], dp[start] + gold);
      }
    }

    return dp[n];
  }
}


or


class Solution {
    public int maximizeTheProfit(int n, List<List<Integer>> offers) {
        offers.sort((a, b) -> a.get(1) - b.get(1));
        n = offers.size();
        int[] f = new int[n + 1];
        int[] g = new int[n];
        for (int i = 0; i < n; ++i) {
            g[i] = offers.get(i).get(1);
        }
        for (int i = 1; i <= n; ++i) {
            var o = offers.get(i - 1);
            int j = search(g, o.get(0));
            f[i] = Math.max(f[i - 1], f[j] + o.get(2));
        }
        return f[n];
    }

    private int search(int[] nums, int x) {
        int l = 0, r = nums.length;
        while (l < r) {
            int mid = (l + r) >> 1;
            if (nums[mid] >= x) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
}


or


class Solution {
    public int maximizeTheProfit(int n, List<List<Integer>> offers) {
        Collections.sort(offers,
            (a, b) -> Integer.compare(a.get(1), b.get(1))
        );
        
        TreeMap<Integer, Integer> maxDP = new TreeMap<>();
        maxDP.put(-1, 0);
        
        for(List<Integer> each : offers){
            int currentStart = each.get(0);
            int currentEnd = each.get(1);
            int currentProfit = each.get(2);
            
            Integer maxProfitBeforeThisStart = maxDP.floorEntry(currentStart - 1).getValue();
            if(maxProfitBeforeThisStart != null){
                int profitWhenWeDo = maxProfitBeforeThisStart + currentProfit;
                if(profitWhenWeDo > maxDP.lastEntry().getValue()){
                    maxDP.put(currentEnd, profitWhenWeDo);
                }
            }
        }
        
        return maxDP.lastEntry().getValue();
    }
}



or


import java.util.*;

class Solution {
    int[] dp = new int[100001];

    public int maximizeTheProfit(int n, List<List<Integer>> offers) {
        int[][] v = new int[offers.size()][3];
        for (int i = 0; i < offers.size(); i++) {
            v[i][0] = offers.get(i).get(0);
            v[i][1] = offers.get(i).get(1);
            v[i][2] = offers.get(i).get(2);
        }

        Arrays.fill(dp, -1);
        Arrays.sort(v, Comparator.comparingInt(a -> a[0]));
        return solve(0, v, v.length);
    }

    int solve(int i, int[][] v, int m) {
        if (i >= m)
            return 0;
        if (dp[i] != -1)
            return dp[i];

        int skip = solve(i + 1, v, m);
        int next = search(v, i, m);
        int take = v[i][2] + (next == -1 ? 0 : solve(next, v, m));
        return dp[i] = Math.max(skip, take);
    }

    int search(int[][] v, int i, int m) {
        int lo = i + 1, hi = m - 1, res = -1;
        while (lo <= hi) {
            int mid = (lo + hi) / 2;
            if (v[mid][0] > v[i][1]) {
                res = mid;
                hi = mid - 1;
            } else {
                lo = mid + 1;
            }
        }
        return res;
    }
}


or



class Solution {
      public int maximizeTheProfit(int n, List<List<Integer>> offers) {
        int[] dp = new int[n + 1];
        List<List<List<Integer>>> m = new ArrayList<>();
        for (int i = 0; i < n; i++) {
            m.add(new ArrayList<List<Integer>>());
        }
        for (List<Integer> a : offers) {
            m.get(a.get(1)).add(a);
        }
        for (int e = 1; e <= n; e++) {
            dp[e] = dp[e - 1];
            for (List<Integer> a : m.get(e - 1)) {
                dp[e] = Math.max(dp[e], dp[a.get(0)] + a.get(2));
            }
        }
        return dp[n];
    }
}


