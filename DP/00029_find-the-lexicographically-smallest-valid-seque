https://leetcode.com/problems/find-the-lexicographically-smallest-valid-sequence/description/


3302. Find the Lexicographically Smallest Valid Sequence
Medium
Topics
Companies
Hint
You are given two strings word1 and word2.

A string x is called almost equal to y if you can change at most one character in x to make it identical to y.

A sequence of indices seq is called valid if:

The indices are sorted in ascending order.
Concatenating the characters at these indices in word1 in the same order results in a string that is almost equal to word2.
Return an array of size word2.length representing the lexicographically smallest valid sequence of indices. If no such sequence of indices exists, return an empty array.

Note that the answer must represent the lexicographically smallest array, not the corresponding string formed by those indices.

 

Example 1:

Input: word1 = "vbcca", word2 = "abc"

Output: [0,1,2]

Explanation:

The lexicographically smallest valid sequence of indices is [0, 1, 2]:

Change word1[0] to 'a'.
word1[1] is already 'b'.
word1[2] is already 'c'.
Example 2:

Input: word1 = "bacdc", word2 = "abc"

Output: [1,2,4]

Explanation:

The lexicographically smallest valid sequence of indices is [1, 2, 4]:

word1[1] is already 'a'.
Change word1[2] to 'b'.
word1[4] is already 'c'.
Example 3:

Input: word1 = "aaaaaa", word2 = "aaabc"

Output: []

Explanation:

There is no valid sequence of indices.

Example 4:

Input: word1 = "abc", word2 = "ab"

Output: [0,1]

 

Constraints:

1 <= word2.length < word1.length <= 3 * 105
word1 and word2 consist only of lowercase English letters.



# java


class Solution {
       public int[] validSequence(String word1, String word2) {
        int n = word1.length(), m = word2.length();
        int[] last = new int[m];
        Arrays.fill(last, -1);
        for (int i = n - 1, j = m - 1; i >= 0; --i)
            if (j >= 0 && word1.charAt(i) == word2.charAt(j))
                last[j--] = i;
        int j = 0, res[] = new int[m], skip = 0;
        for (int i = 0; i < n && j < m; ++i) {
            if (word1.charAt(i) == word2.charAt(j) || (skip == 0 && (j == m - 1 || i < last[j + 1]))) {
                res[j] = i;
                skip += (word1.charAt(i) != word2.charAt(j)) ? 1 : 0;
                j++;
            }
        }
        return j == m ? res : new int[0];
    }
}


or


class Solution {
    public int[] validSequence(String word1, String word2) {
        int length1 = word1.length();
        int length2 = word2.length();
        int[] indices = new int[length1];
        int j = length2 - 1;

        // Reverse traversal to fill indices
        for (int i = length1 - 1; i >= 0; i--) {
            if (j >= 0 && word1.charAt(i) == word2.charAt(j)) {
                indices[i] = (i == length1 - 1) ? 1 : indices[i + 1] + 1;
                j--;
            } else {
                indices[i] = (i == length1 - 1) ? 0 : indices[i + 1];
            }
        }

        j = 0;
        List<Integer> result = new ArrayList<>();
        int finalIndex = -1;

        // Forward traversal to build the result
        for (int i = 0; i < length1; i++) {
            if (word1.charAt(i) == word2.charAt(j)) {
                result.add(i);
                j++;
                if (j == length2) {
                    break;
                }
            } else {
                if ((i == length1 - 1 ? 0 : indices[i + 1]) >= length2 - j - 1) {
                    result.add(i);
                    j++;
                    finalIndex = i + 1;
                    break;
                }
            }
        }

        if (result.size() == length2) {
            return convertToArray(result);
        }

        if (finalIndex == -1) {
            return new int[0];
        }

        for (int i = finalIndex; i < length1; i++) {
            if (word1.charAt(i) == word2.charAt(j)) {
                result.add(i);
                j++;
            }
            if (j == length2) {
                break;
            }
        }

        return result.size() == length2 ? convertToArray(result) : new int[0];
    }

    private int[] convertToArray(List<Integer> list) {
        return list.stream().mapToInt(Integer::intValue).toArray();
    }
}


or

// tle
class Solution {
    public int[] validSequence(String word1, String word2) {
        int i = 0, j = 0;
        int[] res = new int[word2.length()];
        while (i < word1.length() && j < word2.length() && word1.charAt(i) == word2.charAt(j)) {
            res[j++] = i++;
        }
        while (i < word1.length() && j < word2.length()) {
            if (find(word1, word2, i + 1, j + 1, res)) {
                res[j] = i;
                return res;
            }
            while (i < word1.length() && j < word2.length()) {
                if (word1.charAt(i) == word2.charAt(j)) {
                    while (i < word1.length() && j < word2.length() && word1.charAt(i) == word2.charAt(j)) {
                        res[j++] = i++;
                    }
                    break;
                } else {
                    i++;
                }
            }
        }
        if (j < word2.length()) {
            return new int[]{};
        }
        return res;
    }

    static boolean find(String w1, String w2, int i, int j, int[] res) {
        while (i < w1.length() && j < w2.length()) {
            if (w1.charAt(i) == w2.charAt(j)) {
                res[j++] = i++;
            } else {
                i++;
            }
        }
        return j == w2.length();
    }

}


or


class Solution {
    public int[] validSequence(String word1, String word2) {
        byte[] b1 = word1.getBytes(), b2 = word2.getBytes();
        int n1 = b1.length, n2 = b2.length;
        int[] pref = new int[n1];
        // right to left
        for (int i = n1 - 1, j = n2 - 1; i >= 0; i--) {
            if (i < n1 - 1) {
                pref[i] = pref[i + 1];
            }
            if (j >= 0 && b1[i] == b2[j]) {
                pref[i]++;
                j--;
            }
        }
        // left to right
        int[] res = new int[n2];
        int match = 0;
        for (int i = 0, j = 0; i < n1 && j < n2; i++) {
            if (b1[i] == b2[j]) {
                res[j++] = i;
                match++;
            } else if (i < n1 - 1 && pref[i + 1] >= n2 - match - 1) {
                // greedy fill remaining
                res[j++] = i++;
                while (j < n2) {
                    if (b1[i] == b2[j]) {
                        res[j++] = i;
                    }
                    i++;
                }
                return res;
            }
        }
        // if we matched everything w/o greedy fill
        if (match == n2) {
            return res;
        }
        return new int[] {};
    }
}


or


class Solution {

  int n;
  int m;
  int[] covers;

  public int[] validSequence(String word1, String word2) {
    n = word1.length();
    m = word2.length();
    covers = new int[n];
    int j = m - 1;
    for (int i = n - 1; i >= 0; i--) {
      if (j >= 0 && word1.charAt(i) == word2.charAt(j)) {
        covers[i] = i == n - 1 ? 1 : covers[i + 1] + 1;
        j--;
      } else {
        covers[i] = i == n - 1 ? 0 : covers[i + 1];
      }
    }
    j = 0;
    List<Integer> result = new ArrayList<>();
    int victory = -1;
    for (int i = 0; i < n; i++) {
      if (word1.charAt(i) == word2.charAt(j)) {
        result.add(i);
        j++;
        if (j == m) {
          break;
        }
      } else {
        if ((i == n - 1 ? 0 : covers[i + 1]) >= m - j - 1) {
          result.add(i);
          j++;
          victory = i + 1;
          break;
        }
      }
    }
    if (result.size() == m) {
      return result.stream().mapToInt(Integer::intValue).toArray();
    }
    if (victory == -1) {
      return new int[0];
    }
    for (int i = victory; i < n; i++) {
      if (word1.charAt(i) == word2.charAt(j)) {
        result.add(i);
        j++;
      }
      if (j == m) {
        break;
      }
    }
    return result.size() == m ? result.stream().mapToInt(Integer::intValue).toArray() : new int[0];
  }
}


or


