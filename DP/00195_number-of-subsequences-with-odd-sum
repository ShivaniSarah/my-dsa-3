https://leetcode.com/problems/number-of-subsequences-with-odd-sum/description/


3247. Number of Subsequences with Odd Sum ðŸ”’
Description
Given an array nums, return the number of subsequences with an odd sum of elements.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,1,1]

Output: 4

Explanation:

The odd-sum subsequences are: [1, 1, 1], [1, 1, 1], [1, 1, 1], [1, 1, 1].

Example 2:

Input: nums = [1,2,2]

Output: 4

Explanation:

The odd-sum subsequences are: [1, 2, 2], [1, 2, 2], [1, 2, 2], [1, 2, 2].

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109


# java




class Solution {
  public int subsequenceCount(int[] nums) {
    final int MOD = 1_000_000_007;
    int even = 0; // the number of subsequences with even sum
    int odd = 0;  // the number of subsequences with odd sum

    for (final int num : nums)
      if (num % 2 == 0) {
        // Appending an even number to a subsequence doesn't change the parity.
        // The even number itself is also a valid subsequence.
        even = (even + even + 1) % MOD;
        odd = (odd + odd) % MOD;
      } else {
        // Appending an odd number to a subsequence changes the parity.
        // The odd number itself is also a valid subsequence.
        final int newEven = (even + odd) % MOD;
        odd = (odd + even + 1) % MOD;
        even = newEven;
      }

    return odd % MOD;
  }
}



or



class Solution {
    public int subsequenceCount(int[] nums) {
        final int mod = (int) 1e9 + 7;
        int[] f = new int[2];
        for (int x : nums) {
            int[] g = new int[2];
            if (x % 2 == 1) {
                g[0] = (f[0] + f[1]) % mod;
                g[1] = (f[0] + f[1] + 1) % mod;
            } else {
                g[0] = (f[0] + f[0] + 1) % mod;
                g[1] = (f[1] + f[1]) % mod;
            }
            f = g;
        }
        return f[1];
    }
}




