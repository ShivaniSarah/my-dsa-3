https://leetcode.com/problems/longest-zigzag-path-in-a-binary-tree/description/

1372. Longest ZigZag Path in a Binary Tree
Medium
Topics
Companies
Hint
You are given the root of a binary tree.

A ZigZag path for a binary tree is defined as follow:

Choose any node in the binary tree and a direction (right or left).
If the current direction is right, move to the right child of the current node; otherwise, move to the left child.
Change the direction from right to left or from left to right.
Repeat the second and third steps until you can't move in the tree.
Zigzag length is defined as the number of nodes visited - 1. (A single node has a length of 0).

Return the longest ZigZag path contained in that tree.

 

Example 1:


Input: root = [1,null,1,1,1,null,null,1,1,null,1,null,null,null,1]
Output: 3
Explanation: Longest ZigZag path in blue nodes (right -> left -> right).
Example 2:


Input: root = [1,1,1,null,1,null,null,1,1,null,1]
Output: 4
Explanation: Longest ZigZag path in blue nodes (left -> right -> left -> right).
Example 3:

Input: root = [1]
Output: 0
 

Constraints:

The number of nodes in the tree is in the range [1, 5 * 104].
1 <= Node.val <= 100


# java


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int pathLength = 0;
    private void dfs(TreeNode node, boolean goLeft, int steps) {
        if (node == null) {
            return;
        }
        pathLength = Math.max(pathLength, steps);
        if (goLeft) {
            dfs(node.left, false, steps + 1);
            dfs(node.right, true, 1);
        } else {
            dfs(node.left, false, 1);
            dfs(node.right, true, steps + 1);
        }
    }

    public int longestZigZag(TreeNode root) {
        dfs(root, true, 0);
        return pathLength;
    }
}


or


class Solution {
    public int maxLength=0;
    public void solve(TreeNode root,int dir,int currLength){
        if(root==null) return;
        maxLength=Math.max(maxLength,currLength);
        if(dir==1){
            solve(root.left,0,currLength+1);
            solve(root.right,1,1);
        }
        else{
            solve(root.right,1,currLength+1);
            solve(root.left,0,1);
        }
    }

    public int longestZigZag(TreeNode root) {
        solve(root,0,0);
        solve(root,1,0);
        return maxLength;
    }
}


or



class Solution {
    int MAX;
    Map<TreeNode, int []> dp;
    public int longestZigZag(TreeNode root) {
        
        //postorder traversal
        //Map stores left from node and right from node
        dp = new HashMap<>();
        dfs(root);
        return MAX;
    }

    //returns max length from here if you go in a particular direction
    private void dfs(TreeNode root){
        if(root == null) return;

        if(root.left == null && root.right == null){
            dp.put(root, new int[]{0,0});
            return;
        }
        //In dp value int []
        //index 0 represents left direction
        //index 1 represents right direction
        dfs(root.left);
        dfs(root.right);

        int left = 0, right = 0;

        if(dp.get(root.left) != null)
            left = 1 + dp.get(root.left)[1]; //we go right after left
        
        if(dp.get(root.right) != null)
            right = 1 + dp.get(root.right)[0]; //we go left after right
        dp.put(root, new int[]{left, right});
        MAX = Math.max(MAX, Math.max(left,right));
    }
}
