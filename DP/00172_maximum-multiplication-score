https://leetcode.com/problems/maximum-multiplication-score/description/


3290. Maximum Multiplication Score
Medium
Topics
Companies
Hint
You are given an integer array a of size 4 and another integer array b of size at least 4.

You need to choose 4 indices i0, i1, i2, and i3 from the array b such that i0 < i1 < i2 < i3. Your score will be equal to the value a[0] * b[i0] + a[1] * b[i1] + a[2] * b[i2] + a[3] * b[i3].

Return the maximum score you can achieve.

 

Example 1:

Input: a = [3,2,5,6], b = [2,-6,4,-5,-3,2,-7]

Output: 26

Explanation:
We can choose the indices 0, 1, 2, and 5. The score will be 3 * 2 + 2 * (-6) + 5 * 4 + 6 * 2 = 26.

Example 2:

Input: a = [-1,4,5,-2], b = [-5,-1,-3,-2,-4]

Output: -1

Explanation:
We can choose the indices 0, 1, 3, and 4. The score will be (-1) * (-5) + 4 * (-1) + 5 * (-2) + (-2) * (-4) = -1.

 

Constraints:

a.length == 4
4 <= b.length <= 105
-105 <= a[i], b[i] <= 105


# java


class Solution {
  public long maxScore(int[] a, int[] b) {
    final int n = b.length;
    final long MIN = Long.MIN_VALUE / 2;
    // dp[i][j] := the maximum score by selecting 4 - i numbers from b[j..n - 1]
    // using the corresponding numbers from a[i..3]
    long[][] dp = new long[5][n + 1];

    // Run out of numbers in b but still need to select numbers from a.
    for (int i = 0; i < 4; ++i)
      dp[i][n] = MIN;

    for (int i = 3; i >= 0; --i)
      for (int j = n - 1; j >= 0; --j)
        // Skip b[j] or pair a[i] with b[j].
        dp[i][j] = Math.max(dp[i][j + 1], a[i] * (long) b[j] + dp[i + 1][j + 1]);

    return dp[0][0] == MIN ? -1 : dp[0][0];
  }
}


or


class Solution {
  public long maxScore(int[] a, int[] b) {
    // dp[i] := the maximum score of a[0..i]
    long[] dp = new long[4];
    Arrays.fill(dp, Long.MIN_VALUE / 2);

    for (final long num : b)
      for (int i = 3; i >= 0; --i)
        // Skip `num` or pair a[i] with `num`.
        dp[i] = Math.max(dp[i], (i > 0 ? dp[i - 1] : 0) + a[i] * num);

    return dp[3];
  }
}





or


class Solution {
    private Long[][] f;
    private int[] a;
    private int[] b;

    public long maxScore(int[] a, int[] b) {
        f = new Long[a.length][b.length];
        this.a = a;
        this.b = b;
        return dfs(0, 0);
    }

    private long dfs(int i, int j) {
        if (j >= b.length) {
            return i >= a.length ? 0 : Long.MIN_VALUE / 2;
        }
        if (i >= a.length) {
            return 0;
        }
        if (f[i][j] != null) {
            return f[i][j];
        }
        return f[i][j] = Math.max(dfs(i, j + 1), 1L * a[i] * b[j] + dfs(i + 1, j + 1));
    }
}


or

// one test case failing

class Solution {
    private long helper(int[] a, int[] b, int i1, int i2, long[][] memo) {
        if (i1 == a.length) return 0;
        if (i2 >= b.length) return (long) -1e9;
        
        if (memo[i1][i2] != -1) return memo[i1][i2];
        
        long take = (long) a[i1] * b[i2] + helper(a, b, i1 + 1, i2 + 1, memo);
        long notTake = helper(a, b, i1, i2 + 1, memo);
        
        memo[i1][i2] = Math.max(take, notTake);
        return memo[i1][i2];
    }

    public long maxScore(int[] a, int[] b) {
        long[][] memo = new long[4][b.length];
        for (int i = 0; i < 4; i++) {
            Arrays.fill(memo[i], -1);
        }
        return helper(a, b, 0, 0, memo);
    }
}


or


class Solution {
    public long maxScore(int[] a, int[] b) {
        long[] dp = new long[4];
        Arrays.fill(dp, (long)-1e11);
        for (int bi : b)
            for (int i = 3; i >= 0; i--)
                dp[i] = Math.max(dp[i], (i > 0 ? dp[i - 1] : 0) + 1L * a[i] * bi);
        return dp[3];
    }
}


