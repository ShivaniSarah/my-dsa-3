https://leetcode.com/problems/find-the-number-of-k-even-arrays/description/

3339. Find the Number of K-Even Arrays ðŸ”’
Description
You are given three integers n, m, and k.

An array arr is called k-even if there are exactly k indices such that, for each of these indices i (0 <= i < n - 1):

(arr[i] * arr[i + 1]) - arr[i] - arr[i + 1] is even.
Return the number of possible k-even arrays of size n where all elements are in the range [1, m].

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 3, m = 4, k = 2

Output: 8

Explanation:

The 8 possible 2-even arrays are:

[2, 2, 2]
[2, 2, 4]
[2, 4, 2]
[2, 4, 4]
[4, 2, 2]
[4, 2, 4]
[4, 4, 2]
[4, 4, 4]
Example 2:

Input: n = 5, m = 1, k = 0

Output: 1

Explanation:

The only 0-even array is [1, 1, 1, 1, 1].

Example 3:

Input: n = 7, m = 7, k = 5

Output: 5832

 

Constraints:

1 <= n <= 750
0 <= k <= n - 1
1 <= m <= 1000




# java



class Solution {
    private Integer[][][] f;
    private long cnt0, cnt1;
    private final int mod = (int) 1e9 + 7;

    public int countOfArrays(int n, int m, int k) {
        f = new Integer[n][k + 1][2];
        cnt0 = m / 2;
        cnt1 = m - cnt0;
        return dfs(0, k, 1);
    }

    private int dfs(int i, int j, int k) {
        if (j < 0) {
            return 0;
        }
        if (i >= f.length) {
            return j == 0 ? 1 : 0;
        }
        if (f[i][j][k] != null) {
            return f[i][j][k];
        }
        int a = (int) (cnt1 * dfs(i + 1, j, 1) % mod);
        int b = (int) (cnt0 * dfs(i + 1, j - (k & 1 ^ 1), 0) % mod);
        return f[i][j][k] = (a + b) % mod;
    }
}


or



class Solution {
  public int countOfArrays(int n, int m, int k) {
    final int MOD = 1_000_000_007;
    final int even = m / 2;   // the number of even numbers in [1, m]
    final int odd = m - even; // the number of odd numbers in [1, m]
    // dp[i][j][0/1] := the number of arrays of length i with j consecutive even
    // number pairs ending in an even number (0) or an odd number (1)
    int[][][] dp = new int[n + 1][k + 1][2];

    // Base case: arrays of length 1
    // For an array of length 1, we can't have any even number pairs yet.
    dp[1][0][0] = even;
    dp[1][0][1] = odd;

    for (int i = 2; i <= n; ++i)
      for (int j = 0; j <= k; ++j) {
        // 1. Appending an even number to an array ending in an even number
        //    creates a new consecutive even number pair.
        // 2. Appending an even number to an array ending in an odd number.
        dp[i][j][0] = (int) (((long) (j > 0 ? dp[i - 1][j - 1][0] : 0) * even +
                              (long) dp[i - 1][j][1] * even) %
                             MOD);
        // 3. Appending an odd number to an array.
        dp[i][j][1] = (int) ((long) (dp[i - 1][j][0] + dp[i - 1][j][1]) * odd % MOD);
      }

    return (dp[n][k][0] + dp[n][k][1]) % MOD;
  }
}



or



class Solution {
  public int countOfArrays(int n, int m, int k) {
    final int MOD = 1_000_000_007;
    final int even = m / 2;   // the number of even numbers in [1, m]
    final int odd = m - even; // the number of odd numbers in [1, m]
    // dp[j][0/1] := the number of arrays of length so far i with j consecutive
    // even number pairs ending in an even number (0) or an odd number (1)
    int[][] dp = new int[k + 1][2];

    // Base case: arrays of length 1
    // For an array of length 1, we can't have any even number pairs yet.
    dp[0][0] = even;
    dp[0][1] = odd;

    for (int i = 2; i <= n; ++i) {
      int[][] newDp = new int[k + 1][2];
      for (int j = 0; j <= k; ++j) {
        // 1. Appending an even number to an array ending in an even number
        //    creates a new consecutive even number pair.
        // 2. Appending an even number to an array ending in an odd number.
        newDp[j][0] =
            (int) (((long) (j > 0 ? dp[j - 1][0] : 0) * even + (long) dp[j][1] * even) % MOD);
        // 3. Appending an odd number to an array.
        newDp[j][1] = (int) ((long) (dp[j][0] + dp[j][1]) * odd % MOD);
      }
      dp = newDp;
    }

    return (dp[k][0] + dp[k][1]) % MOD;
  }
}



