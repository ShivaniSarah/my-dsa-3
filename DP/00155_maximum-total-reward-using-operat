https://leetcode.com/problems/maximum-total-reward-using-operations-i/description/

3180. Maximum Total Reward Using Operations I
Medium
Topics
Companies
Hint
You are given an integer array rewardValues of length n, representing the values of rewards.

Initially, your total reward x is 0, and all indices are unmarked. You are allowed to perform the following operation any number of times:

Choose an unmarked index i from the range [0, n - 1].
If rewardValues[i] is greater than your current total reward x, then add rewardValues[i] to x (i.e., x = x + rewardValues[i]), and mark the index i.
Return an integer denoting the maximum total reward you can collect by performing the operations optimally.

 

Example 1:

Input: rewardValues = [1,1,3,3]

Output: 4

Explanation:

During the operations, we can choose to mark the indices 0 and 2 in order, and the total reward will be 4, which is the maximum.

Example 2:

Input: rewardValues = [1,6,4,3,2]

Output: 11

Explanation:

Mark the indices 0, 2, and 1 in order. The total reward will then be 11, which is the maximum.

 

Constraints:

1 <= rewardValues.length <= 2000
1 <= rewardValues[i] <= 2000


# java


import java.math.BigInteger;

class Solution {
  public int maxTotalReward(int[] rewardValues) {
    BigInteger one = BigInteger.ONE;
    BigInteger dp = one; // the possible rewards (initially, 0 is achievable)

    Arrays.sort(rewardValues);

    for (final int num : rewardValues) {
      // Remove the numbers >= the current number.
      BigInteger maskBitsLessThanNum = one.shiftLeft(num).subtract(one);
      BigInteger bitsLessThanNum = dp.and(maskBitsLessThanNum);
      dp = dp.or(bitsLessThanNum.shiftLeft(num));
    }

    return dp.bitLength() - 1;
  }
}




or


class Solution {
    private int[] nums;
    private Integer[] f;

    public int maxTotalReward(int[] rewardValues) {
        nums = rewardValues;
        Arrays.sort(nums);
        int n = nums.length;
        f = new Integer[nums[n - 1] << 1];
        return dfs(0);
    }

    private int dfs(int x) {
        if (f[x] != null) {
            return f[x];
        }
        int i = Arrays.binarySearch(nums, x + 1);
        i = i < 0 ? -i - 1 : i;
        int ans = 0;
        for (; i < nums.length; ++i) {
            ans = Math.max(ans, nums[i] + dfs(x + nums[i]));
        }
        return f[x] = ans;
    }
}


or


class Solution {
    public int maxTotalReward(int[] rewardValues) {
        int n = rewardValues.length;
        int[][] memo = new int[n][2001];
        for (var it : memo) {
            Arrays.fill(it, -1);
        }
        Arrays.sort(rewardValues);
        return dfs(rewardValues, 0, 0, memo);
    }

    private int dfs(int[] nums, int i, int sum, int[][] memo) {
        if (i >= nums.length || sum > 2000) {
            return 0;
        }
        if (memo[i][sum] != -1) {
            return memo[i][sum];
        }
        int j1 = upper_bound(nums, nums[i]);
        int j2 = upper_bound(nums, sum + nums[i]);
        return memo[i][sum] = Math.max(
                dfs(nums, j1, sum, memo),
                nums[i] + dfs(nums, j2, sum + nums[i], memo)
        );
    }

    private static int upper_bound(int[] nums, int target) {
        int l = 0, r = nums.length;
        while (l < r) {
            int mid = (l + r) / 2;
            if (nums[mid] <= target) {
                l = mid + 1;
            } else {
                r = mid;
            }
        }
        return l;
    }
}


or


import java.util.Arrays;

class Solution {
    public int solve(int i, int n, int r, int[] v, int[][] dp) {
        if (i == n) {
            return r;
        }
        if (dp[i][r] != -1) {
            return dp[i][r];
        }
        int include = r;
        if (v[i] > r) {
            include = solve(i + 1, n, r + v[i], v, dp);
        }
        int exclude = solve(i + 1, n, r, v, dp);
        return dp[i][r] = Math.max(include, exclude);
    }

    public int maxTotalReward(int[] v) {
        Arrays.sort(v);
        int n = v.length;
        int[][] dp = new int[2001][4001];
        for (int[] row : dp) {
            Arrays.fill(row, -1);
        }
        return solve(0, n, 0, v, dp);
    }
}


or

class Solution {
    public int maxTotalReward(int[] rewardValues) {
        int n = rewardValues.length;
        Arrays.sort(rewardValues);
        int maxPossibleScove = rewardValues[n - 1] * 2;
        
        boolean[] preDP = new boolean[maxPossibleScove + 1];
        boolean[] curDP = new boolean[maxPossibleScove + 1];
        preDP[0] = true;
        for(int i = 0; i < rewardValues.length; i++) {
            for(int j = 0; j < rewardValues[i]; j++) {
                curDP[j + rewardValues[i]] = curDP[j + rewardValues[i]] | preDP[j];
            }
            for(int j = 0; j < curDP.length; j++) {
                preDP[j] = preDP[j] | curDP[j];
                curDP[j] = false;
            }
        }
        
        int ans = 0;
        for(int i = 0; i < preDP.length; i++) {
            if(preDP[i]) {
                ans = i;
            }
        }
        return ans;
    }
}

or


