https://leetcode.com/problems/find-all-good-indices/description/


2420. Find All Good Indices
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums of size n and a positive integer k.

We call an index i in the range k <= i < n - k good if the following conditions are satisfied:

The k elements that are just before the index i are in non-increasing order.
The k elements that are just after the index i are in non-decreasing order.
Return an array of all good indices sorted in increasing order.

 

Example 1:

Input: nums = [2,1,1,1,3,4,1], k = 2
Output: [2,3]
Explanation: There are two good indices in the array:
- Index 2. The subarray [2,1] is in non-increasing order, and the subarray [1,3] is in non-decreasing order.
- Index 3. The subarray [1,1] is in non-increasing order, and the subarray [3,4] is in non-decreasing order.
Note that the index 4 is not good because [4,1] is not non-decreasing.
Example 2:

Input: nums = [2,1,1,2], k = 2
Output: []
Explanation: There are no good indices in this array.
 

Constraints:

n == nums.length
3 <= n <= 105
1 <= nums[i] <= 106
1 <= k <= n / 2


# java


class Solution {
  // Same as 2100. Find Good Days to Rob the Bank
  public List<Integer> goodIndices(int[] nums, int k) {
    final int n = nums.length;
    List<Integer> ans = new ArrayList<>();
    // dec[i] := 1 + the number of continuous decreasing numbers before i
    int[] dec = new int[n];
    // inc[i] := 1 + the number of continuous increasing numbers after i
    int[] inc = new int[n];

    Arrays.fill(dec, 1);
    Arrays.fill(inc, 1);

    for (int i = 1; i < n; ++i)
      if (nums[i - 1] >= nums[i])
        dec[i] = dec[i - 1] + 1;

    for (int i = n - 2; i >= 0; --i)
      if (nums[i] <= nums[i + 1])
        inc[i] = inc[i + 1] + 1;

    for (int i = k; i < n - k; ++i)
      if (dec[i - 1] >= k && inc[i + 1] >= k)
        ans.add(i);

    return ans;
  }
}


or


class Solution {
    public List<Integer> goodIndices(int[] nums, int k) {
        int n = nums.length;
        int[] decr = new int[n];
        int[] incr = new int[n];
        Arrays.fill(decr, 1);
        Arrays.fill(incr, 1);
        for (int i = 2; i < n - 1; ++i) {
            if (nums[i - 1] <= nums[i - 2]) {
                decr[i] = decr[i - 1] + 1;
            }
        }
        for (int i = n - 3; i >= 0; --i) {
            if (nums[i + 1] <= nums[i + 2]) {
                incr[i] = incr[i + 1] + 1;
            }
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = k; i < n - k; ++i) {
            if (decr[i] >= k && incr[i] >= k) {
                ans.add(i);
            }
        }
        return ans;
    }
}


or


class Solution {
    public List<Integer> goodIndices(int[] nums, int k) {
        List<Integer> result = new ArrayList<>();
        int lIndex = 0;
        int rIndex = k+1;
        int lCount = 1;
        int rCount = 1;

        for(int l = lIndex; l < k - 1; l++) {
            if(nums[l] >= nums[l + 1]) lCount++;
            else lCount = 1;
        }
        lIndex = k - 1;
        for(int r = rIndex; r < 2 * k && r < nums.length - 1; r++) {
            if(nums[r] <= nums[r + 1])  rCount++;
            else  rCount = 1;
        }
        rIndex = k + k;
        if(lCount >= k && rCount >= k) result.add(k);
        
        for (int i = k + 1; i < nums.length - k; i++){
            if(nums[lIndex] >= nums[lIndex + 1]) lCount++;
            else lCount = 1;
            if(nums[rIndex] <= nums[rIndex + 1]) rCount++;
            else rCount = 1;
             
            if(lCount >= k && rCount >= k){
                result.add(i);
            }
            lIndex++;
            rIndex++;
        }
      return result;  
    }
}


or


class Solution {
    public List<Integer> goodIndices(int[] nums, int k) {
        boolean l = true, r = true;
        List<Integer> res = new ArrayList<>();
        if(k == 1){
            for(int i=1; i<nums.length-1; i++)
                res.add(i);
            return res;
        }
        if(k+k+1 > nums.length)
            return res;
        
        int badl = -1, badr = -1;
        for(int i=0; i<k-1; i++){
            if(nums[i] < nums[i+1]){
                l = false;
                badl = i;
            }
            if(nums[i+k+1] > nums[i+k+2]){
                r = false;
                badr = i+k+1;
            }
        }
        
        if(l && r)
            res.add(k);
        
        for(int i=k+1; i<nums.length-k; i++){
            if(nums[i-2] < nums[i-1]){
                l = false;
                badl = i-2;
            }else{
                if(!l){
                    int last = i-k;
                    if(last > badl){
                        l = true;
                    }
                }
            }
            
            if(nums[i+k] < nums[i+k-1]){
                r = false;
                badr = i+k-1;
            }else{
                if(!r){
                    if(i >= badr){
                        r = true;
                    }
                }
            }
            if(l && r)
                res.add(i);
        }
        return res;
    }
}


or

// sufix array

class Solution {
    public List<Integer> goodIndices(int[] nums, int k) {
        int n = nums.length;
        int[] prefix = new int[n]; // number of elements that are just before the index i, which are in non-increasing order
        int[] suffix = new int[n]; // number of elements that are just after the index i, which are in non-decreasing order
        
        List<Integer> ans = new ArrayList<Integer>(); // List to store all good indices
        
        prefix[0] = 0; prefix[1] = 1; // Base condition for prefixes
		// Loop to calculate prefix for all other elements
        for (int i = 2; i < n; i++) {
          if (nums[i-1] <= nums[i - 2])
            prefix[i] = prefix[i - 1] + 1;
          else
            prefix[i] = 1;
        }

        suffix[n - 1] = 0; suffix[n - 2] = 1; // Base condition for suffixes
		// Loop to calculate suffix for all other elements
        for (int i = n - 3; i >= 0; i--) {
          if (nums[i + 1] <= nums[i + 2])
            suffix[i] = suffix[i + 1] + 1;
          else
            suffix[i] = 1;
        }
		
		// Loop to check if k elements before and after nums[i] satisfy the required condition 
        for (int i = 0; i < n; i++) {
            if (prefix[i] >= k && suffix[i] >= k)
                ans.add(i);
        }
        
        return ans;
    }
}


or


class Solution {
    public List<Integer> goodIndices(int[] nums, int k) {
        int n=nums.length;
        int dec[]=new int[n],inc[]=new int[n];
        List<Integer> ans=new ArrayList<Integer>();
        
        int start=nums[0],end=nums[0];
        int len=0;
        for(int i=0; i<n; i++){
            if(nums[i]<=start) len++;
            else len=1;
            start=nums[i];
            dec[i]=len;
        }
        len=0;
        for(int i=0; i<n; i++){
            if(nums[i]>=end) len++;
            else len=1;
            end=nums[i];
            inc[i]=len;
        }
        
        for(int i=k; i<n-k; i++){
            if(dec[i-1]>=k && inc[i+k]>=k) ans.add(i);
        }        
        return ans;
    }
}
