https://leetcode.com/problems/rotated-digits/description/


788. Rotated Digits
Medium
Topics
Companies
An integer x is a good if after rotating each digit individually by 180 degrees, we get a valid number that is different from x. Each digit must be rotated - we cannot choose to leave it alone.

A number is valid if each digit remains a digit after rotation. For example:

0, 1, and 8 rotate to themselves,
2 and 5 rotate to each other (in this case they are rotated in a different direction, in other words, 2 or 5 gets mirrored),
6 and 9 rotate to each other, and
the rest of the numbers do not rotate to any other number and become invalid.
Given an integer n, return the number of good integers in the range [1, n].

 

Example 1:

Input: n = 10
Output: 4
Explanation: There are four good numbers in the range [1, 10] : 2, 5, 6, 9.
Note that 1 and 10 are not good numbers, since they remain unchanged after rotating.
Example 2:

Input: n = 1
Output: 0
Example 3:

Input: n = 2
Output: 1
 

Constraints:

1 <= n <= 104


# java

class Solution {
  public int rotatedDigits(int n) {
    int ans = 0;

    for (int i = 1; i <= n; ++i)
      if (isGoodNumber(i))
        ++ans;

    return ans;
  }

  private boolean isGoodNumber(int i) {
    boolean isRotated = false;

    for (final char c : String.valueOf(i).toCharArray()) {
      if (c == '0' || c == '1' || c == '8')
        continue;
      if (c == '2' || c == '5' || c == '6' || c == '9')
        isRotated = true;
      else
        return false;
    }

    return isRotated;
  }
}

or


class Solution {
    private int[] a = new int[6];
    private int[][] dp = new int[6][2];

    public int rotatedDigits(int n) {
        int len = 0;
        for (var e : dp) {
            Arrays.fill(e, -1);
        }
        while (n > 0) {
            a[++len] = n % 10;
            n /= 10;
        }
        return dfs(len, 0, true);
    }

    private int dfs(int pos, int ok, boolean limit) {
        if (pos <= 0) {
            return ok;
        }
        if (!limit && dp[pos][ok] != -1) {
            return dp[pos][ok];
        }
        int up = limit ? a[pos] : 9;
        int ans = 0;
        for (int i = 0; i <= up; ++i) {
            if (i == 0 || i == 1 || i == 8) {
                ans += dfs(pos - 1, ok, limit && i == up);
            }
            if (i == 2 || i == 5 || i == 6 || i == 9) {
                ans += dfs(pos - 1, 1, limit && i == up);
            }
        }
        if (!limit) {
            dp[pos][ok] = ans;
        }
        return ans;
    }
}


or


class Solution {
    public int rotatedDigits(int N) {
        int count = 0;
        for (int i = 1;i<=N;i++) if (getCount(i) > 0) count++;
        return count;
    }
    
    public int getCount(int num){
        int count  = 0;
        while (num > 0){
                int r = num % 10;
                if (r == 3 || r == 4 || r == 7) return 0;
                if (r == 2 || r == 5 || r == 6 || r == 9) count++;
                num = num / 10;
        }
        return count;
    }
}


or


class Solution {
    private static final char[] ROTATE_SAME = {'0', '1', '8'};
    private static final char[] ROTATE_DIFF = {'2', '5', '6', '9'};
    private int count = 0;
    private String high;
    
    public int rotatedDigits(int N) {
        this.high = String.valueOf(N);
        
        for (int len = 1; len <= high.length(); len++) 
            dfs(0, new char[len], false);
        
        return count;
    }
    
    private void dfs(int idx, char[] arr, boolean valid) {
        if (idx == arr.length) {
            if (!valid) return;
            String res = new String(arr);
            if (!(res.length() == high.length() && res.compareTo(high) > 0)) count++;
            return;
        }
        
        for (char c : ROTATE_SAME) {
            if (idx == 0 && c == '0') continue;
            arr[idx] = c;
            dfs(idx + 1, arr, valid);
        }
        
        for (char c : ROTATE_DIFF) {
            arr[idx] = c;
            dfs(idx + 1, arr, true);
        }
    }
}

or


class Solution {
     public int rotatedDigits(int n) {
        int count = 0;

        for(int i = 1; i <= n; i++){
            String temp = String.valueOf(i) ;
            if(temp.contains("2") || temp.contains("5") || temp.contains("6") || temp.contains("9")) {
                if(!temp.contains("3") && !temp.contains("7") && !temp.contains("4")){
                    count++;
                }
            }
        }
        
        return count;
    }
}
