https://leetcode.com/problems/maximal-square/description/


221. Maximal Square
Medium
Topics
Companies
Given an m x n binary matrix filled with 0's and 1's, find the largest square containing only 1's and return its area.

 

Example 1:


Input: matrix = [["1","0","1","0","0"],["1","0","1","1","1"],["1","1","1","1","1"],["1","0","0","1","0"]]
Output: 4
Example 2:


Input: matrix = [["0","1"],["1","0"]]
Output: 1
Example 3:

Input: matrix = [["0"]]
Output: 0
 

Constraints:

m == matrix.length
n == matrix[i].length
1 <= m, n <= 300
matrix[i][j] is '0' or '1'.


# java


class Solution {
  public int maximalSquare(char[][] matrix) {
    final int m = matrix.length;
    final int n = matrix[0].length;
    int[][] dp = new int[m][n];
    int maxLength = 0;

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        if (i == 0 || j == 0 || matrix[i][j] == '0')
          dp[i][j] = matrix[i][j] == '1' ? 1 : 0;
        else
          dp[i][j] = Math.min(dp[i - 1][j - 1], Math.min(dp[i - 1][j], dp[i][j - 1])) + 1;
        maxLength = Math.max(maxLength, dp[i][j]);
      }

    return maxLength * maxLength;
  }
}


or

class Solution {
  public int maximalSquare(char[][] matrix) {
    final int m = matrix.length;
    final int n = matrix[0].length;
    int[] dp = new int[n];
    int maxLength = 0;
    int prev = 0; // dp[i - 1][j - 1]

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        final int cache = dp[j];
        if (i == 0 || j == 0 || matrix[i][j] == '0')
          dp[j] = matrix[i][j] == '1' ? 1 : 0;
        else
          dp[j] = Math.min(prev, Math.min(dp[j], dp[j - 1])) + 1;
        maxLength = Math.max(maxLength, dp[j]);
        prev = cache;
      }

    return maxLength * maxLength;
  }
}


or


class Solution {
    public int maximalSquare(char[][] matrix) {
        int m = matrix.length, n = matrix[0].length;
        int[][] dp = new int[m + 1][n + 1];
        int mx = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (matrix[i][j] == '1') {
                    dp[i + 1][j + 1] = Math.min(Math.min(dp[i][j + 1], dp[i + 1][j]), dp[i][j]) + 1;
                    mx = Math.max(mx, dp[i + 1][j + 1]);
                }
            }
        }
        return mx * mx;
    }
}


or



class Solution {
    public int maximalSquare(char[][] matrix) {
        int n=matrix.length,m=matrix[0].length;
        int[][] prefix = new int[m][n];

        for(int j=0;j<m;j++){
            int count=0;
            for(int i=0;i<n;i++){
                if(matrix[i][j]=='1')
                count++;
                prefix[j][i]=count;
            }
        }

        
        int left=0,right=Math.min(n,m),mid,ans=0;
        while(left<=right){
            mid = (left+right)/2;
            boolean flag = false;
            int count_req = mid*mid;

            for(int i=0;i<=(n-mid);i++){
                int count=0;
                for(int j=0;j<mid;j++){
                    if(i==0)
                    count += prefix[j][i+mid-1];
                    else count += (prefix[j][i+mid-1]-prefix[j][i-1]);
                }

                if(count==count_req){
                    flag = true;
                    break;
                }

                for(int j=1;j<=(m-mid);j++){
                    if(i==0)
                    count -= prefix[j-1][i+mid-1];
                    else count -= (prefix[j-1][i+mid-1]-prefix[j-1][i-1]);

                    if(i==0)
                    count += (prefix[j+mid-1][i+mid-1]);
                    else count += (prefix[j+mid-1][i+mid-1]-prefix[j+mid-1][i-1]);

                    if(count==count_req){
                        flag = true;
                        break;
                    }
                }

                if(flag)
                break;
            }

            if(flag){
                ans = mid;
                left = mid+1;
            }else right = mid-1;
        }

        return(ans*ans);
    }
}


or


