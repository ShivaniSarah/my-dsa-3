https://leetcode.com/problems/count-substrings-that-differ-by-one-character/description/

1638. Count Substrings That Differ by One Character
Medium
Topics
Companies
Hint
Given two strings s and t, find the number of ways you can choose a non-empty substring of s and replace a single character by a different character such that the resulting substring is a substring of t. In other words, find the number of substrings in s that differ from some substring in t by exactly one character.

For example, the underlined substrings in "computer" and "computation" only differ by the 'e'/'a', so this is a valid way.

Return the number of substrings that satisfy the condition above.

A substring is a contiguous sequence of characters within a string.

 

Example 1:

Input: s = "aba", t = "baba"
Output: 6
Explanation: The following are the pairs of substrings from s and t that differ by exactly 1 character:
("aba", "baba")
("aba", "baba")
("aba", "baba")
("aba", "baba")
("aba", "baba")
("aba", "baba")
The underlined portions are the substrings that are chosen from s and t.
​​Example 2:
Input: s = "ab", t = "bb"
Output: 3
Explanation: The following are the pairs of substrings from s and t that differ by 1 character:
("ab", "bb")
("ab", "bb")
("ab", "bb")
​​​​The underlined portions are the substrings that are chosen from s and t.
 

Constraints:

1 <= s.length, t.length <= 100
s and t consist of lowercase English letters only.


# java


// version 4:  O(1)- space
class Solution {
    private String s;
    private String t;
    private int res = 0;
    public int countSubstrings(String s, String t) {
        this.s = s;
        this.t = t;
        
        // starting from left boundary dp[0][0], dp[1][0], ..., dp[m-1][0]
        for (int i = 0; i < s.length(); i++) {
            traverseRightBottom(i, 0);
        }
        
        // starting from top boundary dp[0][1], dp[0][2], ..., dp[0][n-1]
        for (int j = 1; j < t.length(); j++) {
            traverseRightBottom(0, j);
        }
        
        return res;
    }
    
    private void traverseRightBottom(int i, int j) {
        int prev0 = 0;      // dp[i][j][0]
        int prev1 = 0;      // dp[i][j][1]
        
        while (i < s.length() && j < t.length()) {
            boolean match = (s.charAt(i++) == t.charAt(j++));
            int curr0 = match ? prev0 + 1 : 0;            // dp[i+1][j+1][0]
            int curr1 = match ? prev1     : prev0 + 1;    // dp[i+1][j+1][1]
            
            res += curr1; 
            
            prev0 = curr0;
            prev1 = curr1;
        }
    }
}



or


// version 3: O(min(M, N)) space
class Solution {
    public int countSubstrings(String s, String t) {
        int m = s.length(), n = t.length();
        if (m < n) return countSubstrings(t, s);
        
        int res = 0;
        int[][] dp = new int[n+1][2];
        
        for (int i = 0; i < m; i++) {
            int[][] next = new int[n+1][2];
            for (int j = 0; j < n; j++) {
                next[j+1][0] = (s.charAt(i) == t.charAt(j)) ? dp[j][0] + 1 : 0;
                next[j+1][1] = (s.charAt(i) == t.charAt(j)) ? dp[j][1] : dp[j][0] + 1;
                res += next[j+1][1];
            }
            
            dp = next;
        }
        
        return res;
    }
}


or


// version 2 : O(MN) space
class Solution {
    public int countSubstrings(String s, String t) {
        int m = s.length(), n = t.length(), res = 0;
        int[][][] dp = new int[m+1][n+1][2];
        
        // dp[i][j] : count for s[0:i) & t[0:j)
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                dp[i+1][j+1][0] = (s.charAt(i) == t.charAt(j)) ? dp[i][j][0] + 1 : 0;
                dp[i+1][j+1][1] = (s.charAt(i) == t.charAt(j)) ? dp[i][j][1] : dp[i][j][0] + 1;
                res += dp[i+1][j+1][1];
            }
        }
        
        return res;
    }
}


or

// version 1 : O(mn) space
class Solution {
    public int countSubstrings(String s, String t) {
        int m = s.length(), n = t.length();

        int[][][] dp = new int[m][n][2];
        
        int res = 0;
        // first col s[0:i] match t[0:0]
        for (int i = 0; i < m; i++) {
            dp[i][0][0] = (s.charAt(i) == t.charAt(0)) ? 1 : 0;
            dp[i][0][1] = (s.charAt(i) == t.charAt(0)) ? 0 : 1;
            res += dp[i][0][1];
        }
      
        
        // first row s[0:0] match t[0:j]
        for (int j = 1; j < n; j++) {
            dp[0][j][0] = (s.charAt(0) == t.charAt(j)) ? 1 : 0;
            dp[0][j][1] = (s.charAt(0) == t.charAt(j)) ? 0 : 1;
            res += dp[0][j][1];
        }
        
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j][0] = (s.charAt(i) == t.charAt(j)) ? dp[i-1][j-1][0] + 1 : 0;
                dp[i][j][1] = (s.charAt(i) == t.charAt(j)) ? dp[i-1][j-1][1] : dp[i-1][j-1][0] + 1;
                res += dp[i][j][1];
            }
        }

        return res;
    }
}


or




class Solution {
    public int countSubstrings(String s, String t) {
    int ans = 0;
    for(int i = 0; i<s.length(); i++){
        for(int j = 0; j<t.length(); j++){
            int x = i;
            int y = j;
            int d = 0;
            while(x<s.length() && y<t.length()){
                if(s.charAt(x)!=t.charAt(y))d++;
                if(d==1)ans++;
                if(d==2)break;
                x++;
                y++;
            }
        }
    }
    return ans;
}
}


or



class Solution {
    public int countSubstrings(String s, String t) {
        char[] charS = s.toCharArray();
        char[] charT = t.toCharArray();
        int total = 0;

        for(int i = 0; i < charS.length; i++){
            for(int j = 0; j < charT.length; j++){
                if(charS[i] == charT[j]) continue;

                int left = 0;
                int x = i - 1, y = j - 1;

                while(x >= 0 && y >= 0){
                    if(charS[x--] == charT[y--]) ++left;
                    else break;
                }

                int right = 0;
                x = i + 1;
                y = j + 1;

                while(x < charS.length  && y < charT.length){
                    if(charS[x++] == charT[y++]) ++right;
                    else break;
                }

                total += (left + 1) * (right + 1);
            }
        }
        return  total;
    }
}
