https://leetcode.com/problems/paint-fence/description/


276 - Paint Fence

Question
Formatted question description: https://leetcode.ca/all/276.html

You are painting a fence of n posts with k different colors. You must paint the posts following these rules:

Every post must be painted exactly one color.
There cannot be three or more consecutive posts with the same color.
Given the two integers n and k, return the number of ways you can paint the fence.

 

Example 1:



Input: n = 3, k = 2
Output: 6
Explanation: All the possibilities are shown.
Note that painting all the posts red or all the posts green is invalid because there cannot be three posts in a row with the same color.
Example 2:

Input: n = 1, k = 1
Output: 1
Example 3:

Input: n = 7, k = 2
Output: 42
 

Constraints:

1 <= n <= 50
1 <= k <= 105
The testcases are generated such that the answer is in the range [0, 231 - 1] for the given n and k.



# java




public class Paint_Fence {

    public static void main(String[] args) {
        Paint_Fence out = new Paint_Fence();

        Solution s1 = out.new Solution();
        Solution_noArray s2 = out.new Solution_noArray();

        System.out.println(s1.numWays(3, 2)); // 6
        System.out.println(s2.numWays(3, 2));
    }

    class Solution {
        public int numWays(int n, int k) {
            if (n == 0 || k == 0)
                return 0;

            // `dp[i][0]` same color
            // `dp[i][1]` different color
            int[][] dp = new int[n][2];
            dp[0][0] = 0;
            dp[0][1] = k;
            for (int i = 1; i < n; i++) {
                dp[i][0] = dp[i - 1][1]; // or else 3-posts the same color
                dp[i][1] = (dp[i - 1][0] + dp[i - 1][1]) * (k - 1);
            }
            return dp[n - 1][0] + dp[n - 1][1];
        }
    }

    public class Solution_noArray {
        public int numWays(int n, int k) {
            if (n == 0) return 0;
            int same = 0, diff = k;
            for (int i = 2; i <= n; ++i) {
                int t = diff;
                diff = (same + diff) * (k - 1);
                same = t;
            }
            return same + diff;
        }
    }
}

############

class Solution {
    public int numWays(int n, int k) {
        int[][] dp = new int[n][2];
        dp[0][0] = k;
        for (int i = 1; i < n; ++i) {
            dp[i][0] = (dp[i - 1][0] + dp[i - 1][1]) * (k - 1);
            dp[i][1] = dp[i - 1][0];
        }
        return dp[n - 1][0] + dp[n - 1][1];
    }
}



or


class Solution {
  public int numWays(int n, int k) {
    if (n == 0)
      return 0;
    if (n == 1)
      return k;
    if (n == 2)
      return k * k;

    // dp[i] := the number of ways to paint n posts with k colors
    int[] dp = new int[n + 1];
    dp[0] = 0;
    dp[1] = k;
    dp[2] = k * k;

    for (int i = 3; i <= n; ++i)
      dp[i] = (dp[i - 1] + dp[i - 2]) * (k - 1);

    return dp[n];
  }
}



