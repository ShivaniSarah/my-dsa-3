https://leetcode.com/problems/flip-string-to-monotone-increasing/description/

926. Flip String to Monotone Increasing
Medium
Topics
Companies
A binary string is monotone increasing if it consists of some number of 0's (possibly none), followed by some number of 1's (also possibly none).

You are given a binary string s. You can flip s[i] changing it from 0 to 1 or from 1 to 0.

Return the minimum number of flips to make s monotone increasing.

 

Example 1:

Input: s = "00110"
Output: 1
Explanation: We flip the last digit to get 00111.
Example 2:

Input: s = "010110"
Output: 2
Explanation: We flip to get 011111, or alternatively 000111.
Example 3:

Input: s = "00011000"
Output: 2
Explanation: We flip to get 00000000.
 

Constraints:

1 <= s.length <= 105
s[i] is either '0' or '1'.


# java


class Solution {
    public int minFlipsMonoIncr(String s) {
        int zeroes = 0;
        int ones = 0;
        for(char ch : s.toCharArray()){
            if(ch == '0'){
                zeroes++;
            }
        }
        int output = zeroes;
        for(char ch : s.toCharArray()){
            if(ch == '0'){
                zeroes--;
            }
            else if(ch == '1'){
                ones++;
            }
            output = Math.min(output, zeroes+ones);
        }
        return output;
    }
}


or


class Solution {
    public int minFlipsMonoIncr(String s) {
        int zeroes = 0;
        int ones = 0;
        for(char ch : s.toCharArray()){
            if(ch == '0'){
                zeroes++;
            }
        }
        int output = zeroes;
        for(char ch : s.toCharArray()){
            if(ch == '0'){
                zeroes--;
            }
            else if(ch == '1'){
                ones++;
            }
            output = Math.min(output, zeroes+ones);
        }
        return output;
    }
}


or


class Solution {
    public int minFlipsMonoIncr(String s) {
        // Initialize variables to store the minimum number of flips and the number of flips currently needed
        int ans = 0, noOfFlip = 0;
        
        // Iterate through each character in the input string
        for(int i =0; i < s.length(); i++){
            // If the current character is a '0', update the minimum number of flips and add 1 to the current number of flips
            if(s.charAt(i) == '0') ans = Math.min(noOfFlip,ans+1);
            // If the current character is a '1', increment the number of flips
            else noOfFlip++;
        }
        // Return the minimum number of flips
        return ans;
    }
}


or


class Solution {
    public int minFlipsMonoIncr(String s) {
        
		// occurrence of 1 in strings s
        int occOf1 = 0;
		
		// counter of flips of 1->0 and 0->1
        int flips = 0;
        
		// scan each digit on substring
        for( char ch : s.toCharArray() ){
            
            if( ch == '1' ){
				
				// update occurrence of '1'
                occOf1 += 1;
				
				// current digit is '1'
                // no need to flip when 1 is on the tail of current substring
            
            }else{
			
				// current digit is '0'
                // need to flip when 0 is on the tail of current substring
                
                // option_1: flip current 0 to 1, keep leading digits, then substring is monotone increasing
                
                // option_2: flip leading 1s to 0s, keep current 0, then substring is monotone increasing
                
                // select optimal solution
                flips = Math.min(flips+1, occOf1);
            }
            
        }
        return flips;
    }
}


or

