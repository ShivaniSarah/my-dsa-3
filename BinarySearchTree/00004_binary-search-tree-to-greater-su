https://leetcode.com/problems/binary-search-tree-to-greater-sum-tree/description/

1038. Binary Search Tree to Greater Sum Tree
Medium
Topics
Companies
Hint
Given the root of a Binary Search Tree (BST), convert it to a Greater Tree such that every key of the original BST is changed to the original key plus the sum of all keys greater than the original key in BST.

As a reminder, a binary search tree is a tree that satisfies these constraints:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
 

Example 1:


Input: root = [4,1,6,0,2,5,7,null,null,null,3,null,null,null,8]
Output: [30,36,21,36,35,26,15,null,null,null,33,null,null,null,8]
Example 2:

Input: root = [0,null,1]
Output: [1,null,1]
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
0 <= Node.val <= 100
All the values in the tree are unique.
 

Note: This question is the same as 538: https://leetcode.com/problems/convert-bst-to-greater-tree/


# java


class Solution {

    public TreeNode bstToGst(TreeNode root) {
        // Store the inorder traversal in an array.
        List<Integer> inorderTraversal = new ArrayList<>();
        inorder(root, inorderTraversal);

        // Reverse the array to get descending order.
        Collections.reverse(inorderTraversal);

        // Modify the values in the tree.
        replaceValues(root, inorderTraversal);
        return root;
    }

    // Perform any traversal of your choice to store node values.
    private void inorder(TreeNode root, List<Integer> inorderTraversal) {
        if (root == null) {
            return;
        }
        inorder(root.left, inorderTraversal);
        inorderTraversal.add(root.val);
        inorder(root.right, inorderTraversal);
    }

    // Function to modify the values in the tree.
    private void replaceValues(TreeNode root, List<Integer> inorderTraversal) {
        if (root == null) {
            return;
        }
        replaceValues(root.left, inorderTraversal);
        replaceValues(root.right, inorderTraversal);

        int nodeSum = 0;
        // Replace node with values greater than the current value.
        for (int i : inorderTraversal) {
            if (i > root.val) {
                nodeSum += i;
            } else {
                break;
            }
        }

        root.val += nodeSum;
    }
}

or


class Solution {

    public TreeNode bstToGst(TreeNode root) {
        int[] nodeSum = new int[1];
        bstToGstHelper(root, nodeSum);
        return root;
    }

    private void bstToGstHelper(TreeNode root, int[] nodeSum) {
        // If root is null, make no changes.
        if (root == null) {
            return;
        }

        bstToGstHelper(root.right, nodeSum);
        nodeSum[0] += root.val;
        // Update the value of root.
        root.val = nodeSum[0];
        bstToGstHelper(root.left, nodeSum);
    }
}


or


class Solution {

    public TreeNode bstToGst(TreeNode root) {
        int nodeSum = 0;
        Stack<TreeNode> st = new Stack<>();
        TreeNode node = root;

        while (!st.empty() || node != null) {
            while (node != null) {
                st.push(node);
                node = node.right;
            }

            // Store the top value of stack in node and pop it.
            node = st.pop();

            // Update value of node.
            nodeSum += node.val;
            node.val = nodeSum;

            // Move to the left child of node.
            node = node.left;
        }
        return root;
    }
}


or


class Solution {

    public TreeNode bstToGst(TreeNode root) {
        int sum = 0;
        TreeNode node = root;

        while (node != null) {
            // If there is no right subtree, then we can visit this node and
            // continue traversing left.
            if (node.right == null) {
                sum += node.val;
                node.val = sum;
                node = node.left;
            }
            //  If there is a right subtree, then there is at least one node that
            //  has a greater value than the current one. therefore, we must
            //  traverse that subtree first.
            else {
                TreeNode succ = getSuccessor(node);
                //If the left subtree is null, then we have never been here before.
                if (succ.left == null) {
                    succ.left = node;
                    node = node.right;
                }
                //If there is a left subtree, it is a link that we created on a
                //previous pass, so we should unlink it and visit this node.
                else {
                    succ.left = null;
                    sum += node.val;
                    node.val = sum;
                    node = node.left;
                }
            }
        }

        return root;
    }

    // Get the node with the smallest value greater than this one.
    private TreeNode getSuccessor(TreeNode node) {
        TreeNode succ = node.right;
        while (succ.left != null && succ.left != node) {
            succ = succ.left;
        }
        return succ;
    }
}


or


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode bstToGst(TreeNode root) {
        int s = 0;
        TreeNode node = root;
        while (root != null) {
            if (root.right == null) {
                s += root.val;
                root.val = s;
                root = root.left;
            } else {
                TreeNode next = root.right;
                while (next.left != null && next.left != root) {
                    next = next.left;
                }
                if (next.left == null) {
                    next.left = root;
                    root = root.right;
                } else {
                    s += root.val;
                    root.val = s;
                    next.left = null;
                    root = root.left;
                }
            }
        }
        return node;
    }
}


or


class Solution {
    private int sum = 0;
    
    public TreeNode bstToGst(TreeNode root) {  
        if (root != null) {
            bstToGst(root.right);  // Traverse the right subtree
            sum += root.val;  // Update the sum
            root.val = sum;  // Update the current node's value
            bstToGst(root.left);  // Traverse the left subtree
        }
        return root;
    }
}
