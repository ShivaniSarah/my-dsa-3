https://leetcode.com/problems/trim-a-binary-search-tree/description/

669. Trim a Binary Search Tree
Medium
Topics
Companies
Given the root of a binary search tree and the lowest and highest boundaries as low and high, trim the tree so that all its elements lies in [low, high]. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node's descendant should remain a descendant). It can be proven that there is a unique answer.

Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.

 

Example 1:


Input: root = [1,0,2], low = 1, high = 2
Output: [1,null,2]
Example 2:


Input: root = [3,0,4,null,2,null,null,1], low = 1, high = 3
Output: [3,2,null,1]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
0 <= Node.val <= 104
The value of each node in the tree is unique.
root is guaranteed to be a valid binary search tree.
0 <= low <= high <= 104


# java


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) {
            return root;
        }
        if (root.val > high) {
            return trimBST(root.left, low, high);
        }
        if (root.val < low) {
            return trimBST(root.right, low, high);
        }
        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);
        return root;
    }
}


or


class Solution {
  public TreeNode trimBST(TreeNode root, int low, int high) {
    if (root == null)
      return null;
    if (root.val < low)
      return trimBST(root.right, low, high);
    if (root.val > high)
      return trimBST(root.left, low, high);
    root.left = trimBST(root.left, low, high);
    root.right = trimBST(root.right, low, high);
    return root;
  }
}





or


class Solution {
    public TreeNode trimBST(TreeNode root, int L, int R) {
        if (root == null) {
            return null;
        }
        //if the range is correct then checking both root left and right
        if (root.val >= L && root.val <= R) {
            root.left = trimBST(root.left, L, R);//Trim the left subtree
            root.right = trimBST(root.right, L, R);//Trim the right subtree
        } else if (root.val < L) {
            //if the root val is less than low then getting values from left will be even lower(binary tree rule) so we need to set the root to root.right;
            root = trimBST(root.right, L, R);
        } else if (root.val > R) {
            //if the root val is greater than high then getting values from right will be even higher(binary tree rule) so we need to the root to root.left.
            root = trimBST(root.left, L, R);
        }
        return root;
    }
}


or


class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null)
            return null;
        if (root.val > high)
            return trimBST(root.left, low, high);
        if (root.val < low)
            return trimBST(root.right, low, high);
        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);
        ;
        return root;
    }
}


or



// Recursive Pre Order

class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) return root;
        
        if (root.val < low)  return trimBST(root.right, low, high); // recurse on the right node since the current node is lesser
        if (root.val > high) return trimBST(root.left, low, high); // recurse on the left node since the current node is greater
        
        root.left = trimBST(root.left, low, high); // left node is passed to the next level
        root.right = trimBST(root.right, low, high); // right node is passed to the next level
        
        return root;
     }
}


or


// Recursive Post Order

class Solution {
    public TreeNode trimBST(TreeNode root, int low, int high) {
       if (root == null) return null;
        
        root.left = trimBST(root.left, low, high);
        root.right = trimBST(root.right, low, high);
        
        if (root.val < low) return root.right;
        if (root.val > high) return root.left;
        
        return root;
    }
}



or


// Iterative DFS Solution

public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) return root;
        
        //remove all the non range nodes
        while(root.val < low || root.val > high) {
            if(root.val < low) root = root.right;
            if(root.val > high) root = root.left;
        }
        
        Stack<TreeNode> stack = new Stack<>();
        stack.push(root);
        boolean flag = false;
        while(!stack.isEmpty()){
            TreeNode node = stack.pop();
            
            //fix the nodes to point to correct child
            if (node.left != null && node.left.val < low){
                node.left = node.left.right;
                flag = true;
            }
            if (node.right != null && node.right.val > high){
                node.right = node.right.left;
                flag = true;
            }
            
            if (flag) stack.push(node);   
            else {
                if(node.left != null) stack.push(node.left);
                if(node.right != null) stack.push(node.right);   
            }
                
            flag = false;
        }
        
        return root;
    }


or



// Iterative BFS Solution

 class Solution {
	public TreeNode trimBST(TreeNode root, int low, int high) {
        if (root == null) return root;
        
        // Add the valid node's to the list in BFS
        List<TreeNode> list = new ArrayList<>();
        Queue<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (!q.isEmpty()){
            int size = q.size();
            for (int i=0;i<size;i++){
                TreeNode node = q.poll();
                if (node.val >= low && node.val <= high) list.add(node);
                if (node.left != null) q.offer(node.left);
                if (node.right != null) q.offer(node.right);
            }
        }
        
        //Start from the list index 0, set the left and right as null
        TreeNode parent = list.get(0);
        parent.left = null;
        parent.right = null;
        
        // iterate for each valid nodes and insert it back in valid BST fashion
        for (int i=1;i<list.size();i++){
            TreeNode node = list.get(i);
            node.left = null;
            node.right = null;
            insertChild(parent, node);
        }
        return parent;
    }
    
    private void insertChild(TreeNode parent, TreeNode node){
        while (parent != null){
            if (parent.val > node.val){ // BST Parent should be greater than left node
                if (parent.left == null){
                    parent.left = node;
                    return;
                }
                parent = parent.left;
            }
            else if (parent.val < node.val){  // BST Parent should be smaller than right node
                if (parent.right == null){
                    parent.right = node;
                    return;
                }
                parent = parent.right;
            }
         }
    }
}
