https://leetcode.com/problems/closest-nodes-queries-in-a-binary-search-tree/description/


2476. Closest Nodes Queries in a Binary Search Tree
Solved
Medium
Topics
Companies
Hint
You are given the root of a binary search tree and an array queries of size n consisting of positive integers.

Find a 2D array answer of size n where answer[i] = [mini, maxi]:

mini is the largest value in the tree that is smaller than or equal to queries[i]. If a such value does not exist, add -1 instead.
maxi is the smallest value in the tree that is greater than or equal to queries[i]. If a such value does not exist, add -1 instead.
Return the array answer.

 

Example 1:


Input: root = [6,2,13,1,4,9,15,null,null,null,null,null,null,14], queries = [2,5,16]
Output: [[2,2],[4,6],[15,-1]]
Explanation: We answer the queries in the following way:
- The largest number that is smaller or equal than 2 in the tree is 2, and the smallest number that is greater or equal than 2 is still 2. So the answer for the first query is [2,2].
- The largest number that is smaller or equal than 5 in the tree is 4, and the smallest number that is greater or equal than 5 is 6. So the answer for the second query is [4,6].
- The largest number that is smaller or equal than 16 in the tree is 15, and the smallest number that is greater or equal than 16 does not exist. So the answer for the third query is [15,-1].
Example 2:


Input: root = [4,null,9], queries = [3]
Output: [[-1,4]]
Explanation: The largest number that is smaller or equal to 3 in the tree does not exist, and the smallest number that is greater or equal to 3 is 4. So the answer for the query is [-1,4].
 

Constraints:

The number of nodes in the tree is in the range [2, 105].
1 <= Node.val <= 106
n == queries.length
1 <= n <= 105
1 <= queries[i] <= 106



# java


class Solution {
  public List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
    List<List<Integer>> ans = new ArrayList<>();
    List<Integer> sortedVals = new ArrayList<>();

    inorder(root, sortedVals);

    for (final int query : queries) {
      final int i = firstGreaterEqual(sortedVals, query);
      // query is presented in the tree, so just use {query, query}.
      if (i != sortedVals.size() && sortedVals.get(i) == query)
        ans.add(Arrays.asList(query, query));
      // query isn't presented in the tree, so find the cloest one if possible.
      else
        ans.add(Arrays.asList(i == 0 ? -1 : sortedVals.get(i - 1),
                              i == sortedVals.size() ? -1 : sortedVals.get(i)));
    }

    return ans;
  }

  // Walks the BST to collect the sorted numbers.
  private void inorder(TreeNode root, List<Integer> sortedVals) {
    if (root == null)
      return;
    inorder(root.left, sortedVals);
    sortedVals.add(root.val);
    inorder(root.right, sortedVals);
  }

  private int firstGreaterEqual(List<Integer> A, int target) {
    final int i = Collections.binarySearch(A, target);
    return i < 0 ? -i - 1 : i;
  }
}


or

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private List<Integer> nums = new ArrayList<>();

    public List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
        dfs(root);
        List<List<Integer>> ans = new ArrayList<>();
        for (int x : queries) {
            int i = Collections.binarySearch(nums, x + 1);
            int j = Collections.binarySearch(nums, x);
            i = i < 0 ? -i - 2 : i - 1;
            j = j < 0 ? -j - 1 : j;
            int mi = i >= 0 && i < nums.size() ? nums.get(i) : -1;
            int mx = j >= 0 && j < nums.size() ? nums.get(j) : -1;
            ans.add(List.of(mi, mx));
        }
        return ans;
    }

    private void dfs(TreeNode root) {
        if (root == null) {
            return;
        }
        dfs(root.left);
        nums.add(root.val);
        dfs(root.right);
    }
}


or


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
       var set = new TreeSet<Integer>();
       dfs(root, set);
       var result = new ArrayList<List<Integer>>();
    
       for (var query : queries) {
           var min = set.lower(query + 1);
           var max = set.higher(query - 1);
           if (min == null) {
               min = -1;
           }
           if (max == null) {
               max = -1;
           }
           result.add(List.of(min, max));
       }
       return result;
   }

   private void dfs(TreeNode root, TreeSet<Integer> set) {
       if (root == null) return;
       dfs(root.left, set);
       set.add(root.val);
       dfs(root.right, set);
   }
}


or


class Solution {
    List<Integer> nodes = new ArrayList<>(); 
    void traverse(TreeNode root) {
        if (root == null) return;
        
        traverse(root.left);
        nodes.add(root.val);
        traverse(root.right);
    }
    
    List<List<Integer>> closestNodes(TreeNode root, List<Integer> queries) {
        traverse(root);                         // traverse all nodes and store them in ArrayList
        
        List<List<Integer>> ans = new ArrayList<>();
        int n = nodes.size();
        
        for (int q : queries) {            
            if (q == nodes.get(0) || q == nodes.get(n-1)) {           // if value is already found, no need to do BS
            	ans.add(Arrays.asList(q, q));
            }
            else if (q < nodes.get(0)) {
            	ans.add(Arrays.asList(-1, nodes.get(0)));             // if value == first element, no need to do BS
            }
            else if (q > nodes.get(n-1)) {
            	ans.add(Arrays.asList(nodes.get(n-1), -1));          // if value == last element, no need to do BS
            }
            else {
            	int lo = 0;
            	int hi = n-1;
            	boolean found = false;
            	while (lo < hi) {
            		int m = (lo+hi) >> 1;
            		int mid = nodes.get(m);
            		if (q == mid) {
            			found = true;
            			ans.add(Arrays.asList(q, q));
            			break;
            		}
            		else if (q > mid) {
            			lo = m + 1;
            		}
            		else {
            			hi = m;
            		}
            	}
            	
				// now lo and hi are equal
            	if (!found) {
            		ans.add(Arrays.asList(nodes.get(lo-1), nodes.get(lo)));
            	}
            }
        }
        
        return ans;
    } 
}

