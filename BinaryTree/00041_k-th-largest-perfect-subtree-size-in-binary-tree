https://leetcode.com/problems/k-th-largest-perfect-subtree-size-in-binary-tree/description/

3319. K-th Largest Perfect Subtree Size in Binary Tree
Medium
Topics
Companies
Hint
You are given the root of a binary tree and an integer k.

Return an integer denoting the size of the kth largest perfect binary subtree, or -1 if it doesn't exist.

A perfect binary tree is a tree where all leaves are on the same level, and every parent has two children.

 

Example 1:

Input: root = [5,3,6,5,2,5,7,1,8,null,null,6,8], k = 2

Output: 3

Explanation:



The roots of the perfect binary subtrees are highlighted in black. Their sizes, in non-increasing order are [3, 3, 1, 1, 1, 1, 1, 1].
The 2nd largest size is 3.

Example 2:

Input: root = [1,2,3,4,5,6,7], k = 1

Output: 7

Explanation:



The sizes of the perfect binary subtrees in non-increasing order are [7, 3, 3, 1, 1, 1, 1]. The size of the largest perfect binary subtree is 7.

Example 3:

Input: root = [1,2,3,null,4], k = 3

Output: -1

Explanation:



The sizes of the perfect binary subtrees in non-increasing order are [1, 1]. There are fewer than 3 perfect binary subtrees.

 

Constraints:

The number of nodes in the tree is in the range [1, 2000].
1 <= Node.val <= 2000
1 <= k <= 1024


# java

record T(boolean isPerfect, int sz) {}

class Solution {
  public int kthLargestPerfectSubtree(TreeNode root, int k) {
    List<Integer> ans = new ArrayList<>();
    dfs(root, ans);
    Collections.sort(ans, Collections.reverseOrder());
    return ans.size() < k ? -1 : ans.get(k - 1);
  }

  private T dfs(TreeNode root, List<Integer> ans) {
    if (root == null)
      return new T(true, 0);
    T l = dfs(root.left, ans);
    T r = dfs(root.right, ans);
    if (l.isPerfect() && r.isPerfect() && l.sz() == r.sz()) {
      final int sz = 1 + l.sz() + r.sz();
      ans.add(sz);
      return new T(true, sz);
    }
    return new T(false, 0);
  }
}



or


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private List<Integer> nums = new ArrayList<>();

    public int kthLargestPerfectSubtree(TreeNode root, int k) {
        dfs(root);
        if (nums.size() < k) {
            return -1;
        }
        nums.sort(Comparator.reverseOrder());
        return nums.get(k - 1);
    }

    private int dfs(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int l = dfs(root.left);
        int r = dfs(root.right);
        if (l < 0 || l != r) {
            return -1;
        }
        int cnt = l + r + 1;
        nums.add(cnt);
        return cnt;
    }
}




or



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
import java.util.*;

class Solution {
    List<Integer> ans = new ArrayList<>();

    // Method to recursively check for perfect subtree and calculate its size
    public Pair<Boolean, Integer> makeTree(TreeNode root) {
        if (root == null) {
            return new Pair<>(true, 0);
        }

        Pair<Boolean, Integer> l = makeTree(root.left);
        Pair<Boolean, Integer> r = makeTree(root.right);

        if (l.getKey() && r.getKey() && l.getValue().equals(r.getValue())) {
            int s = l.getValue() + r.getValue() + 1;
            ans.add(s);
            return new Pair<>(true, s);
        }

        return new Pair<>(false, 0);
    }

    public int kthLargestPerfectSubtree(TreeNode root, int k) {
        if (root == null) {
            return -1;
        }

        ans.clear();
        makeTree(root);

        Collections.sort(ans, Collections.reverseOrder());

        if (ans.size() >= k) {
            return ans.get(k - 1);
        }

        return -1;
    }

}



or



class Solution {
        public int kthLargestPerfectSubtree(TreeNode root, int k) {
        List<Integer> res = new ArrayList<>();
        dfs(root, res);
        Collections.sort(res);
        if (k <= res.size()) {
            return (1 << res.get(res.size() - k)) - 1;
        }
        return -1;
    }

    private int dfs(TreeNode root, List<Integer> res) {
        if (root == null) return 0;
        int l = dfs(root.left, res), r = dfs(root.right, res);
        if (l == r && l >= 0) {
            res.add(l + 1);
            return l + 1;
        }
        return -1;
    }
}


or


    class Solution {
    // To store depths of perfect subtrees
    List<Integer> a = new ArrayList<>();

    public int dfs(TreeNode root) {
        if (root == null) {
            return 0;
        }

        int left = dfs(root.left);
        int right = dfs(root.right);

        if (left == -1 || right == -1 || left != right) {
            return -1;
        }
        a.add(left + 1);
        return left + 1;
    }

    public int kthLargestPerfectSubtree(TreeNode root, int k) {
        dfs(root);
        Collections.sort(a, Collections.reverseOrder());
        if (a.size() < k) {
            return -1;
        }
        return (1 << a.get(k - 1)) - 1;
    }
}
