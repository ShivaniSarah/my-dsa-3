https://leetcode.com/problems/binary-tree-vertical-order-traversal/description/

314. Binary Tree Vertical Order Traversal
Description
Given the root of a binary tree, return the vertical order traversal of its nodes' values. (i.e., from top to bottom, column by column).

If two nodes are in the same row and column, the order should be from left to right.

 

Example 1:



Input: root = [3,9,20,null,null,15,7]
Output: [[9],[3,15],[20],[7]]
Example 2:



Input: root = [3,9,8,4,0,1,7]
Output: [[4],[9],[3,0,1],[8],[7]]
Example 3:



Input: root = [3,9,8,4,0,1,7,null,null,null,2,5]
Output: [[4],[9,5],[3,0,1],[8,2],[7]]
 

Constraints:

The number of nodes in the tree is in the range [0, 100].
-100 <= Node.val <= 100


# java



class Solution {
  public List<List<Integer>> verticalOrder(TreeNode root) {
    if (root == null)
      return new ArrayList<>();

    List<List<Integer>> ans = new ArrayList<>();
    Queue<Pair<TreeNode, Integer>> q = new ArrayDeque<>(); // (TreeNode, x)
    int[] range = new int[2];
    getRange(root, range, 0); // Get the leftmost and the rightmost x index.

    for (int i = range[0]; i <= range[1]; ++i)
      ans.add(new ArrayList<>());

    q.offer(new Pair<>(root, -range[0]));

    while (!q.isEmpty()) {
      final TreeNode node = q.peek().getKey();
      final int x = q.poll().getValue();
      ans.get(x).add(node.val);
      if (node.left != null)
        q.offer(new Pair<>(node.left, x - 1));
      if (node.right != null)
        q.offer(new Pair<>(node.right, x + 1));
    }

    return ans;
  }

  private void getRange(TreeNode root, int[] range, int x) {
    if (root == null)
      return;

    range[0] = Math.min(range[0], x);
    range[1] = Math.max(range[1], x);

    getRange(root.left, range, x - 1);
    getRange(root.right, range, x + 1);
  }
}




or




/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        List<List<Integer>> ans = new ArrayList<>();
        if (root == null) {
            return ans;
        }
        Deque<Pair<TreeNode, Integer>> q = new ArrayDeque<>();
        q.offer(new Pair<>(root, 0));
        TreeMap<Integer, List<Integer>> d = new TreeMap<>();
        while (!q.isEmpty()) {
            for (int n = q.size(); n > 0; --n) {
                var p = q.pollFirst();
                root = p.getKey();
                int offset = p.getValue();
                d.computeIfAbsent(offset, k -> new ArrayList()).add(root.val);
                if (root.left != null) {
                    q.offer(new Pair<>(root.left, offset - 1));
                }
                if (root.right != null) {
                    q.offer(new Pair<>(root.right, offset + 1));
                }
            }
        }
        return new ArrayList<>(d.values());
    }
}
