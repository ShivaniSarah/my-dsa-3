https://leetcode.com/problems/longest-univalue-path/description/

687. Longest Univalue Path
Medium
Topics
Companies
Given the root of a binary tree, return the length of the longest path, where each node in the path has the same value. This path may or may not pass through the root.

The length of the path between two nodes is represented by the number of edges between them.

 

Example 1:


Input: root = [5,4,5,1,1,null,5]
Output: 2
Explanation: The shown image shows that the longest path of the same value (i.e. 5).
Example 2:


Input: root = [1,4,5,4,4,null,5]
Output: 2
Explanation: The shown image shows that the longest path of the same value (i.e. 4).
 

Constraints:

The number of nodes in the tree is in the range [0, 104].
-1000 <= Node.val <= 1000
The depth of the tree will not exceed 1000.

# java


class Solution {
  public int longestUnivaluePath(TreeNode root) {
    longestUnivaluePathDownFrom(root);
    return ans;
  }

  private int ans = 0;

  private int longestUnivaluePathDownFrom(TreeNode root) {
    if (root == null)
      return 0;

    final int l = longestUnivaluePathDownFrom(root.left);
    final int r = longestUnivaluePathDownFrom(root.right);
    final int arrowLeft = root.left != null && root.left.val == root.val ? l + 1 : 0;
    final int arrowRight = root.right != null && root.right.val == root.val ? r + 1 : 0;
    ans = Math.max(ans, arrowLeft + arrowRight);
    return Math.max(arrowLeft, arrowRight);
  }
}


or


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int ans;

    public int longestUnivaluePath(TreeNode root) {
        ans = 0;
        dfs(root);
        return ans;
    }

    private int dfs(TreeNode root) {
        if (root == null) {
            return 0;
        }
        int left = dfs(root.left);
        int right = dfs(root.right);
        left = root.left != null && root.left.val == root.val ? left + 1 : 0;
        right = root.right != null && root.right.val == root.val ? right + 1 : 0;
        ans = Math.max(ans, left + right);
        return Math.max(left, right);
    }
}


or


// Returns the length of the longest path (number of nodes) under the root
// that have the value same as the root. The path could either be
// on the left or right child of the root. The length includes the root as well.
class Solution {
    int ans;

    int solve(TreeNode root, int parent) {
        if (root == null) {
            return 0;
        }

        //The longest univalue path will cover nodes on both sides of the root.
        int left = solve(root.left, root.val);
        int right = solve(root.right, root.val);

        //The longest univalue path will cover nodes on both sides of the root.
        ans = Math.max(ans, left + right);

        // The number of nodes will be zero if the root value isn't equal to the root.
        // Otherwise return the max of left and right nodes plus one for the root itself.
        return root.val == parent ? Math.max(left, right) + 1 : 0;
    }

    public int longestUnivaluePath(TreeNode root) {
        // Use -1 for the parent value for the tree root node.
        solve(root, -1);

        return ans;
    }
}

or


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
        private  int maxVal=0;
    public int longestUnivaluePath(TreeNode root) {
        if(root ==null)
            return 0;
        this.dfs(root,root.val);
        return  this.maxVal;
    }
    private int dfs(TreeNode node, int prevVal){
        if (node ==null){
            return  0;
        }
        int left=this.dfs(node.left,node.val);
        int right=this.dfs(node.right,node.val);
        this.maxVal=Math.max(this.maxVal, left+right);
        if (node.val==prevVal){
            return Math.max(left,right)+1;
        }
        return  0;
    }
}


or

class Solution 
{
    private int Lpath= 0;//maximum univalued path length
    public int longestUnivaluePath(TreeNode root) 
    {
        pathCalculator(root);//helps to calculate the univalued path 
        return  Lpath;
    }
    private int pathCalculator(TreeNode root)
    {//postorder traversal DFS
       if(root == null)//base case, we we hit null node 
          return 0;//we tell the parent that there is no node ahed of this point and no need to traverse
      
       int left= pathCalculator(root.left);//recursing down the left subtree and knowing about the left child 
       int right= pathCalculator(root.right);//recursing down the right subtree and knowing about the right child 
      
       int Tleft= 0, Tright= 0;//total path achived in left and right path 
      
       //Root or Parent 
       if(root.left != null && root.left.val == root.val)
          Tleft+= left + 1;//increasing the edge count, if this two end vertex are same 
      
       if(root.right != null && root.right.val == root.val)
          Tright+= right+ 1;//increasing the edge count, if this two end vertex are same 
      
       Lpath= Math.max(Lpath, Tleft + Tright);//current maximum path achived 
      
       return Math.max(Tleft, Tright);//moving forward, we only choose one max(frequency count high) path to move ahed 
    }
}//Please do Upvote, it helps a lot 


or


class Solution {
    int max = 0;

    public int longestUnivaluePath(TreeNode root) {
        dfs(root);
        return max;
    }

    private int dfs(TreeNode root) {
        if (root == null) return 0;

        int left = dfs(root.left);
        int right = dfs(root.right);

        int leftPath = 0, rightPath = 0;

        if (root.left != null && root.val == root.left.val) {
            leftPath = left + 1;
        }

        if (root.right != null && root.val == root.right.val) {
            rightPath = right + 1;
        }

        max = Math.max(max, leftPath + rightPath);

        return Math.max(leftPath, rightPath);
    }
}
