https://leetcode.com/problems/closest-leaf-in-a-binary-tree/description/

742. Closest Leaf in a Binary Tree
Description
Given the root of a binary tree where every node has a unique value and a target integer k, return the value of the nearest leaf node to the target k in the tree.

Nearest to a leaf means the least number of edges traveled on the binary tree to reach any leaf of the tree. Also, a node is called a leaf if it has no children.

 

Example 1:



Input: root = [1,3,2], k = 1
Output: 2
Explanation: Either 2 or 3 is the nearest leaf node to the target of 1.
Example 2:



Input: root = [1], k = 1
Output: 1
Explanation: The nearest leaf node is the root node itself.
Example 3:



Input: root = [1,2,3,4,null,null,null,5,null,6], k = 2
Output: 3
Explanation: The leaf node with value 3 (and not the leaf node with value 6) is nearest to the node with value 2.
 

Constraints:

The number of nodes in the tree is in the range [1, 1000].
1 <= Node.val <= 1000
All the values of the tree are unique.
There exist some node in the tree where Node.val == k.




# java



class Solution {
  public int findClosestLeaf(TreeNode root, int k) {
    ans = -1;
    minDist = 1000;
    // {node: distance to TreeNode(k)}
    Map<TreeNode, Integer> nodeToDist = new HashMap<>();

    getDists(root, k, nodeToDist);
    getClosestLeaf(root, 0, nodeToDist);

    return ans;
  }

  private int ans;
  private int minDist;

  private void getDists(TreeNode root, int k, Map<TreeNode, Integer> nodeToDist) {
    if (root == null)
      return;
    if (root.val == k) {
      nodeToDist.put(root, 0);
      return;
    }

    getDists(root.left, k, nodeToDist);
    if (nodeToDist.containsKey(root.left)) {
      // The TreeNode(k) is in the left subtree.
      nodeToDist.put(root, nodeToDist.get(root.left) + 1);
      return;
    }

    getDists(root.right, k, nodeToDist);
    if (nodeToDist.containsKey(root.right))
      // The TreeNode(k) is in the right subtree.
      nodeToDist.put(root, nodeToDist.get(root.right) + 1);
  }

  private void getClosestLeaf(TreeNode root, int dist, Map<TreeNode, Integer> nodeToDist) {
    if (root == null)
      return;
    if (nodeToDist.containsKey(root))
      dist = nodeToDist.get(root);
    if (root.left == null && root.right == null) {
      if (dist < minDist) {
        minDist = dist;
        ans = root.val;
      }
      return;
    }

    getClosestLeaf(root.left, dist + 1, nodeToDist);
    getClosestLeaf(root.right, dist + 1, nodeToDist);
  }
}



or



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private Map<TreeNode, List<TreeNode>> g;

    public int findClosestLeaf(TreeNode root, int k) {
        g = new HashMap<>();
        dfs(root, null);
        Deque<TreeNode> q = new LinkedList<>();
        for (Map.Entry<TreeNode, List<TreeNode>> entry : g.entrySet()) {
            if (entry.getKey() != null && entry.getKey().val == k) {
                q.offer(entry.getKey());
                break;
            }
        }
        Set<TreeNode> seen = new HashSet<>();
        while (!q.isEmpty()) {
            TreeNode node = q.poll();
            seen.add(node);
            if (node != null) {
                if (node.left == null && node.right == null) {
                    return node.val;
                }
                for (TreeNode next : g.get(node)) {
                    if (!seen.contains(next)) {
                        q.offer(next);
                    }
                }
            }
        }
        return 0;
    }

    private void dfs(TreeNode root, TreeNode p) {
        if (root != null) {
            g.computeIfAbsent(root, k -> new ArrayList<>()).add(p);
            g.computeIfAbsent(p, k -> new ArrayList<>()).add(root);
            dfs(root.left, root);
            dfs(root.right, root);
        }
    }
}



