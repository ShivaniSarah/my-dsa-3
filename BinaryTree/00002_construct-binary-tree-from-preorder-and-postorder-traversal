https://leetcode.com/problems/construct-binary-tree-from-preorder-and-postorder-traversal/description/

889. Construct Binary Tree from Preorder and Postorder Traversal
Medium
Topics
Companies
Given two integer arrays, preorder and postorder where preorder is the preorder traversal of a binary tree of distinct values and postorder is the postorder traversal of the same tree, reconstruct and return the binary tree.

If there exist multiple answers, you can return any of them.

 

Example 1:


Input: preorder = [1,2,4,5,3,6,7], postorder = [4,5,2,6,7,3,1]
Output: [1,2,3,4,5,6,7]
Example 2:

Input: preorder = [1], postorder = [1]
Output: [1]
 

Constraints:

1 <= preorder.length <= 30
1 <= preorder[i] <= preorder.length
All the values of preorder are unique.
postorder.length == preorder.length
1 <= postorder[i] <= postorder.length
All the values of postorder are unique.
It is guaranteed that preorder and postorder are the preorder traversal and postorder traversal of the same binary tree.


# java


class Solution {
  public TreeNode constructFromPrePost(int[] pre, int[] post) {
    Map<Integer, Integer> postToIndex = new HashMap<>();

    for (int i = 0; i < post.length; ++i)
      postToIndex.put(post[i], i);

    return build(pre, 0, pre.length - 1, post, 0, post.length - 1, postToIndex);
  }

  private TreeNode build(int[] pre, int preStart, int preEnd, int[] post, int postStart,
                         int postEnd, Map<Integer, Integer> postToIndex) {
    if (preStart > preEnd)
      return null;
    if (preStart == preEnd)
      return new TreeNode(pre[preStart]);

    final int rootVal = pre[preStart];
    final int leftRootVal = pre[preStart + 1];
    final int leftRootPostIndex = postToIndex.get(leftRootVal);
    final int leftSize = leftRootPostIndex - postStart + 1;

    TreeNode root = new TreeNode(rootVal);
    root.left = build(pre, preStart + 1, preStart + leftSize, post, postStart, leftRootPostIndex,
                      postToIndex);
    root.right = build(pre, preStart + leftSize + 1, preEnd, post, leftRootPostIndex + 1,
                       postEnd - 1, postToIndex);
    return root;
  }
}


or

/**
     * Definition for a binary tree node.
     * public class TreeNode {
     *     int val;
     *     TreeNode left;
     *     TreeNode right;
     *     TreeNode(int x) { val = x; }
     * }
     */

    class Solution {

        /*
            preorder -> [1] [2,4,5] [3,6,7]
            postorder -> [4,5,2] [6,7,3] [root]
         */
        public TreeNode constructFromPrePost(int[] pre, int[] post) {

            return helper(pre, 0, pre.length - 1, post, 0, post.length - 1);
        }

        // preL 和 preR 分别表示左子树区间的开头和结尾位置
        // postL 和 postR 表示右子树区间的开头和结尾位置
        TreeNode helper(int[] pre, int preL, int preR, int[] post, int postL, int postR) {
            if (preL > preR || postL > postR) {
                return null;
            }

            // root node
            TreeNode node = new TreeNode(pre[preL]);

            if (preL == preR) { // leaf node
                return node;
            }

            // 找左子树的根结点(pre[preL + 1)  在 post[] 中的位置
            // pre[preL + 1 here "+1" to skip above root node
            int idx = -1;
            for (idx = postL; idx <= postR; ++idx) {
                if (pre[preL + 1] == post[idx]) {
                    break;
                }
            }

            // left sub tree length: (idx - postL)
            // right sub tree length:
            node.left = helper(pre, preL + 1, preL + 1 + (idx - postL), post, postL, idx);
            node.right = helper(pre, preL + 1 + (idx - postL) + 1, preR, post, idx + 1, postR - 1); // postR - 1 to skip root

            return node;
        }
    }


or


class Solution {
    public TreeNode constructFromPrePost(int[] pre, int[] post) {
        int length = pre.length;
        if (length == 0)
            return null;
        else if (length == 1)
            return new TreeNode(pre[0]);
        else {
            TreeNode root = new TreeNode(pre[0]);
            int leftChild = pre[1];
            int leftCount = 0;
            for (int i = 0; i < length; i++) {
                if (post[i] == leftChild) {
                    leftCount = i + 1;
                    break;
                }
            }
            root.left = constructFromPrePost(Arrays.copyOfRange(pre, 1, 1 + leftCount), Arrays.copyOfRange(post, 0, leftCount));
            root.right = constructFromPrePost(Arrays.copyOfRange(pre, 1 + leftCount, length), Arrays.copyOfRange(post, leftCount, length - 1));
            return root;
        }
    }
}

or

class Solution {
    public TreeNode constructFromPrePost(int[] preorder, int[] postorder) {
        int[] index = new int[]{0};
        return construct(preorder, postorder, index, 0, preorder.length - 1);
    }
    private TreeNode construct(int[] preorder, int[] postorder, int[] index, int l, int h){
        if(index[0] >= preorder.length || l > h)
            return null;

        TreeNode root = new TreeNode(preorder[index[0]++]);
        if(l == h) return root;

        int i;
        for(i = l; i <= h; i++){
            if(postorder[i] == preorder[index[0]]) break;
        }
        if(l <= h){
            root.left = construct(preorder, postorder, index, l, i);
            root.right = construct(preorder, postorder, index, i + 1, h - 1);
        }
        return root;
    }
}
