https://leetcode.com/problems/stepping-numbers/description/



1215. Stepping Numbers
Description
A stepping number is an integer such that all of its adjacent digits have an absolute difference of exactly 1.

For example, 321 is a stepping number while 421 is not.
Given two integers low and high, return a sorted list of all the stepping numbers in the inclusive range [low, high].

 

Example 1:

Input: low = 0, high = 21
Output: [0,1,2,3,4,5,6,7,8,9,10,12,21]
Example 2:

Input: low = 10, high = 15
Output: [10,12]
 

Constraints:

0 <= low <= high <= 2 * 109



# java


class Solution {
  public List<Integer> countSteppingNumbers(int low, int high) {
    List<Integer> ans = new ArrayList<>();
    if (low == 0)
      ans.add(0);

    Queue<Long> q = new ArrayDeque<>();

    for (long i = 1; i <= 9; ++i)
      q.offer(i);

    while (!q.isEmpty()) {
      final long curr = q.poll();
      if (curr > high)
        continue;
      if (curr >= low)
        ans.add((int) curr);
      final long lastDigit = curr % 10;
      if (lastDigit > 0)
        q.offer(curr * 10 + lastDigit - 1);
      if (lastDigit < 9)
        q.offer(curr * 10 + lastDigit + 1);
    }

    return ans;
  }
}




or



class Solution {
  public List<Integer> countSteppingNumbers(int low, int high) {
    List<Integer> ans = new ArrayList<>();
    if (low == 0)
      ans.add(0);

    for (long i = 1; i <= 9; ++i)
      dfs(i, low, high, ans);

    Collections.sort(ans);
    return ans;
  }

  private void dfs(long curr, int low, int high, List<Integer> ans) {
    if (curr > high)
      return;
    if (curr >= low)
      ans.add((int) curr);

    final long lastDigit = curr % 10;
    if (lastDigit > 0)
      dfs(curr * 10 + lastDigit - 1, low, high, ans);
    if (lastDigit < 9)
      dfs(curr * 10 + lastDigit + 1, low, high, ans);
  }
}


or



class Solution {
    public List<Integer> countSteppingNumbers(int low, int high) {
        List<Integer> ans = new ArrayList<>();
        if (low == 0) {
            ans.add(0);
        }
        Deque<Long> q = new ArrayDeque<>();
        for (long i = 1; i < 10; ++i) {
            q.offer(i);
        }
        while (!q.isEmpty()) {
            long v = q.pollFirst();
            if (v > high) {
                break;
            }
            if (v >= low) {
                ans.add((int) v);
            }
            int x = (int) v % 10;
            if (x > 0) {
                q.offer(v * 10 + x - 1);
            }
            if (x < 9) {
                q.offer(v * 10 + x + 1);
            }
        }
        return ans;
    }
}


