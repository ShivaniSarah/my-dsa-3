https://leetcode.com/problems/count-nodes-with-the-highest-score/description/


2049. Count Nodes With the Highest Score
Medium
Topics
Companies
Hint
There is a binary tree rooted at 0 consisting of n nodes. The nodes are labeled from 0 to n - 1. You are given a 0-indexed integer array parents representing the tree, where parents[i] is the parent of node i. Since node 0 is the root, parents[0] == -1.

Each node has a score. To find the score of a node, consider if the node and the edges connected to it were removed. The tree would become one or more non-empty subtrees. The size of a subtree is the number of the nodes in it. The score of the node is the product of the sizes of all those subtrees.

Return the number of nodes that have the highest score.

 

Example 1:

example-1
Input: parents = [-1,2,0,2,0]
Output: 3
Explanation:
- The score of node 0 is: 3 * 1 = 3
- The score of node 1 is: 4 = 4
- The score of node 2 is: 1 * 1 * 2 = 2
- The score of node 3 is: 4 = 4
- The score of node 4 is: 4 = 4
The highest score is 4, and three nodes (node 1, node 3, and node 4) have the highest score.
Example 2:

example-2
Input: parents = [-1,2,0]
Output: 2
Explanation:
- The score of node 0 is: 2 = 2
- The score of node 1 is: 2 = 2
- The score of node 2 is: 1 * 1 = 1
The highest score is 2, and two nodes (node 0 and node 1) have the highest score.
 

Constraints:

n == parents.length
2 <= n <= 105
parents[0] == -1
0 <= parents[i] <= n - 1 for i != 0
parents represents a valid binary tree.



# java



class Solution {
  public int countHighestScoreNodes(int[] parents) {
    List<Integer>[] tree = new List[parents.length];

    for (int i = 0; i < tree.length; ++i)
      tree[i] = new ArrayList<>();

    for (int i = 0; i < parents.length; ++i) {
      if (parents[i] == -1)
        continue;
      tree[parents[i]].add(i);
    }

    dfs(tree, 0);
    return ans;
  }

  private int ans = 0;
  private long maxScore = 0;

  private int dfs(List<Integer>[] tree, int u) {
    int count = 1;
    long score = 1;
    for (final int v : tree[u]) {
      final int childCount = dfs(tree, v);
      count += childCount;
      score *= childCount;
    }
    final int aboveCount = tree.length - count;
    score *= Math.max(aboveCount, 1);
    if (score > maxScore) {
      maxScore = score;
      ans = 1;
    } else if (score == maxScore) {
      ++ans;
    }
    return count;
  }
}



or



class Solution {
    private List<Integer>[] g;
    private int ans;
    private long mx;
    private int n;

    public int countHighestScoreNodes(int[] parents) {
        n = parents.length;
        g = new List[n];
        Arrays.setAll(g, i -> new ArrayList<>());
        for (int i = 1; i < n; ++i) {
            g[parents[i]].add(i);
        }
        dfs(0, -1);
        return ans;
    }

    private int dfs(int i, int fa) {
        int cnt = 1;
        long score = 1;
        for (int j : g[i]) {
            if (j != fa) {
                int t = dfs(j, i);
                cnt += t;
                score *= t;
            }
        }
        if (n - cnt > 0) {
            score *= n - cnt;
        }
        if (mx < score) {
            mx = score;
            ans = 1;
        } else if (mx == score) {
            ++ans;
        }
        return cnt;
    }
}


or


class Solution {
   long dfs(List<List<Integer>> al, long[] s, int i) {
    long prod = 1, sum = 1;
    for (int j : al.get(i)) {
        long cnt = dfs(al, s, j);
        prod *= cnt;
        sum += cnt;
    }
    s[i] = prod * (Math.max(1, al.size() - sum));
    return sum;
}    
public int countHighestScoreNodes(int[] p) {
    List<List<Integer>> al = new ArrayList<>();
    for (int i = 0; i < p.length; ++i)
        al.add(new ArrayList<Integer>());         
    long[] s = new long[p.length];
    for (int i = 1; i < p.length; ++i)
        al.get(p[i]).add(i);
    dfs(al, s, 0);
    long max_val = Arrays.stream(s).max().getAsLong();
    return (int)Arrays.stream(s).filter(v -> v == max_val).count();
}
}



or


class Solution {
    long max = 0, res = 0;
    public int countHighestScoreNodes(int[] parents) {
        Map<Integer, List<Integer>> hm = new HashMap();
        for(int i = 0; i < parents.length; i++) {   // build the tree
            hm.computeIfAbsent(parents[i], x ->new ArrayList<>()).add(i);
        }
        dfs(0, parents.length, hm); // traverse the tree to get the result
        return (int)res;
    }
    int dfs(int s, int n, Map<Integer, List<Integer>> hm) {
        int sum = 1;
        long mult = 1L;
        for(int child : hm.getOrDefault(s, new ArrayList<>())) {
            int count = dfs(child, n, hm); // subtree node count
            sum += count;
            mult *= count; // multiply the result by children size
        }     
        mult *= (s == 0 ? 1L : n - sum); // multiply the result by remain size except self and children size(the nodes through parent)
        if(mult > max) {
            max = mult;
            res = 1;
        } else if (mult == max) {
            res++;
        }
        return sum; // return the node count of the tree rooted at s
    }
}


or



// if you found my solution usefull please upvote it
class Solution 
{
    public HashMap<Long,Integer> hash;
    public int dfs(int i,List<Integer>[] adj,int totalNodes)
    {
        int sumOfNodes=0;
        long product=1l;
        for(int curr : adj[i])
        {
            int currNodes=dfs(curr,adj,totalNodes);
            sumOfNodes+=currNodes;
            product*=currNodes;
        }
        int upNodes=(totalNodes-sumOfNodes-1);
        if(upNodes>0) product*=upNodes;
        hash.put(product,hash.getOrDefault(product,0)+1);
        return sumOfNodes+1;
    }
    public int countHighestScoreNodes(int[] parents) 
    {
        List<Integer>[] adj=new ArrayList[parents.length];
        for(int i=0;i<parents.length;i++)  adj[i]=new ArrayList();
        for(int i=1;i<parents.length;i++)
        {
            adj[parents[i]].add(i);
        }
        hash=new HashMap<>();
        dfs(0,adj,parents.length);
        long max=0;
        for(long i : hash.keySet()) max=Math.max(max,i);
        return hash.get(max);
    }
}
