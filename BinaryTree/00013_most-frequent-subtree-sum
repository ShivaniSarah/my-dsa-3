https://leetcode.com/problems/most-frequent-subtree-sum/description/

508. Most Frequent Subtree Sum
Medium
Topics
Companies
Given the root of a binary tree, return the most frequent subtree sum. If there is a tie, return all the values with the highest frequency in any order.

The subtree sum of a node is defined as the sum of all the node values formed by the subtree rooted at that node (including the node itself).

 

Example 1:


Input: root = [5,2,-3]
Output: [2,-3,4]
Example 2:


Input: root = [5,2,-5]
Output: [2]
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
-105 <= Node.val <= 105


# java



class Solution {
    private HashMap<Integer, Integer> sumFreq = new HashMap<Integer, Integer>();
    private Integer maxFreq = 0;
    
    private int findTreeSum(TreeNode root) {
        if (root == null) {
            return 0;
        }
        // Current root's tree's sum.
        return root.val + findTreeSum(root.left) + findTreeSum(root.right);
    }
    
    private void preOrderTraversal(TreeNode root) {
        if (root == null) {
            return;
        }
        
        // Find current node's tree's sum.
        int currSum = findTreeSum(root);
        sumFreq.put(currSum, sumFreq.getOrDefault(currSum, 0) + 1);
        maxFreq = Math.max(maxFreq, sumFreq.get(currSum));
        
        // Iterate on left and right subtrees and find their sums.
        preOrderTraversal(root.left);
        preOrderTraversal(root.right);
    }
    
    public int[] findFrequentTreeSum(TreeNode root) {
        // Traverse on all nodes one by one, and find it's tree's sum.
        preOrderTraversal(root);
        
        List<Integer> ansList = new ArrayList<Integer>(); 
        for (Map.Entry<Integer, Integer> mapElement : sumFreq.entrySet()) {
            Integer sum = mapElement.getKey();
            Integer freq = mapElement.getValue();
            
            if (freq == maxFreq) {
                ansList.add(sum);
            }
        }
        
        int maxFreqSums[] = new int[ansList.size()];
        for (int i = 0; i < ansList.size(); i++) {
            maxFreqSums[i] =  ansList.get(i).intValue();
        }
        
        return maxFreqSums;
    }
}

or


class Solution {
    private HashMap<Integer, Integer> sumFreq = new HashMap<Integer, Integer>();
    private Integer maxFreq = 0;
    
    private int subtreeSum(TreeNode root) {
        if (root == null) {
            return 0;
        }
        
        // Get left and right subtree's sum.
        int leftSubtreeSum = subtreeSum(root.left);
        int rightSubtreeSum = subtreeSum(root.right);

        // Use child's tree's sums to get current root's tree's sum
        int currSum = root.val + leftSubtreeSum + rightSubtreeSum;
        
        sumFreq.put(currSum, sumFreq.getOrDefault(currSum, 0) + 1);
        maxFreq = Math.max(maxFreq, sumFreq.get(currSum));
        return currSum;
    }
    
    public int[] findFrequentTreeSum(TreeNode root) {
        // Traverse on all nodes one by one, and find it's tree's sum.
        subtreeSum(root);
        
        List<Integer> ansList = new ArrayList<Integer>(); 
        for (Map.Entry<Integer, Integer> mapElement : sumFreq.entrySet()) {
            Integer sum = mapElement.getKey();
            Integer freq = mapElement.getValue();
            
            if (freq == maxFreq) {
                ansList.add(sum);
            }
        }
        
        int maxFreqSums[] = new int[ansList.size()];
        for (int i = 0; i < ansList.size(); i++) {
            maxFreqSums[i] =  ansList.get(i).intValue();
        }
        
        return maxFreqSums;
    }
}


or


class Solution {
    Map<Integer,Integer> map = new HashMap();
    int mostFreq = 0;
    
    public int[] findFrequentTreeSum(TreeNode root) {
        postorder(root);
        
        ArrayList<Integer> temp = new ArrayList();
        for(int i : map.keySet()){
            if(map.get(i) == mostFreq)temp.add(i); 
        }
        
        int []res = new int[temp.size()];
        for(int i = 0;i< temp.size();i++){
            res[i] = temp.get(i);
        }
        return res;
    }
    
    public int postorder(TreeNode root){
        if(root == null)return 0;
        
        int left = postorder(root.left);
        int right = postorder(root.right);      
        int sum = left + right + root.val;
        
        map.put(sum,map.getOrDefault(sum,0) + 1);
        mostFreq = Math.max(mostFreq,map.get(sum));
        
        return sum;
    }
}


olr

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    int max = -1; // maximum frequency of any the subtree sum
    public int[] findFrequentTreeSum(TreeNode root) {
        Map<Integer,Integer> map = new HashMap<>(); // to keep track of frequency of each subtree sum
        traverse(root,map); 
        List<Integer> res = new ArrayList<>(); // result list
        for(int i:map.keySet()) if(map.get(i) == max) res.add(i); // adding the subtree sum values that have max frequency
        return res.stream().mapToInt(i->i).toArray();  // convert list to array the return 
    }
    public void traverse(TreeNode root,Map<Integer,Integer> map){
        if(root == null) return;
        traverse(root.left,map);
        traverse(root.right,map); 
        // bottom-up
        int sum=root.val; // after reaching the leaf node is is obvious that the subtree sum will be node's value itself
        if(root.left != null) sum+= root.left.val; // if not the leaf node we will calculate the subtree sum
        if(root.right != null) sum+= root.right.val;
        map.put(sum,map.getOrDefault(sum,0)+1); // tracking the frequency of the sunstree sum
        max = Math.max(max,map.get(sum)); // keeping track of the maximum frequency of any subtree sum
        root.val = sum; // as we are operating bottom-up we will update the value of the root with it's subtree sum
    }
}

or

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int mostFrequency = 0;
    private int dfs(TreeNode root, Map<Integer, Integer> map){
        if(root == null){
            return 0;
        }
        int sum = root.val + dfs(root.left, map) + dfs(root.right, map);
        int frequency = map.getOrDefault(sum, 0) + 1;
        map.put(sum, frequency);
        if(frequency > mostFrequency){
            mostFrequency = frequency;
        }
        return sum;
    }
    public int[] findFrequentTreeSum(TreeNode root) {
        Map<Integer, Integer> map = new HashMap<>();
        dfs(root, map);
        List<Integer> list = new ArrayList<>();
        for(int key : map.keySet()){
            if(map.get(key) == mostFrequency){
                list.add(key);
            }
        }
        return list.stream().mapToInt(i -> i).toArray();
    }
}


