https://leetcode.com/problems/sum-of-nodes-with-even-valued-grandparent/description/

1315. Sum of Nodes with Even-Valued Grandparent
Medium
Topics
Companies
Hint
Given the root of a binary tree, return the sum of values of nodes with an even-valued grandparent. If there are no nodes with an even-valued grandparent, return 0.

A grandparent of a node is the parent of its parent if it exists.

 

Example 1:


Input: root = [6,7,8,2,7,1,3,9,null,1,4,null,null,null,5]
Output: 18
Explanation: The red nodes are the nodes with even-value grandparent while the blue nodes are the even-value grandparents.
Example 2:


Input: root = [1]
Output: 0
 

Constraints:

The number of nodes in the tree is in the range [1, 104].
1 <= Node.val <= 100


# java


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  public int sumEvenGrandparent(TreeNode root) {
    return dfs(root, 1, 1); // The parent and the grandparent are odd at first.
  }

  private int dfs(TreeNode root, int p, int gp) {
    if (root == null)
      return 0;
    return (gp % 2 == 0 ? root.val : 0) + //
        dfs(root.left, root.val, p) +     //
        dfs(root.right, root.val, p);
  }
}


or


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private int res;

    public int sumEvenGrandparent(TreeNode root) {
        res = 0;
        dfs(root, root.left);
        dfs(root, root.right);
        return res;
    }

    private void dfs(TreeNode g, TreeNode p) {
        if (p == null) {
            return;
        }
        if (g.val % 2 == 0) {
            if (p.left != null) {
                res += p.left.val;
            }
            if (p.right != null) {
                res += p.right.val;
            }
        }
        dfs(p, p.left);
        dfs(p, p.right);
    }
}


or


class Solution {
    int solve(TreeNode root, int parent, int gParent) {
        if (root == null) {
            return 0;
        }
        
        // Iterate over the child with updated values of parent and grandparent.
        return solve(root.left, root.val, parent) 
                + solve(root.right, root.val, parent)
                + (gParent % 2 != 0 ? 0 : root.val);
    }

    public int sumEvenGrandparent(TreeNode root) {
        return solve(root, -1, -1);
    }
}


or

class Solution {
    int findVal(TreeNode root) {
        return root == null ? 0 : root.val;
    }
    
    public int sumEvenGrandparent(TreeNode root) {
        if (root == null) {
            return 0;
        }
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
        
        int sum = 0;
        while (!q.isEmpty()) {
            TreeNode curr = q.remove();
            
            // If the node value is even, then Check the four grandchildren
            // And add the value.
            if (curr.val % 2 == 0) {
                if (curr.left != null) {
                    sum += findVal(curr.left.left) + findVal(curr.left.right);
                }
                if (curr.right != null) {
                    sum += findVal(curr.right.left) + findVal(curr.right.right);
                }
            }
            
            // Add the non-null child of the current node.
            if (curr.left != null) 
                q.add(curr.left);
            if (curr.right != null)
                q.add(curr.right);
        }
        
        return sum;
    }
}



or



class Solution {
    
    int sum = 0;
    
    public int sumEvenGrandparent(TreeNode root) {
        
        dfs(root, null, null);
        return sum;
    }
    
    public void dfs(TreeNode root, TreeNode parent, TreeNode gparent) {
        if (root == null) return;
        
        if (gparent != null && gparent.val % 2 == 0) {
            sum += root.val;
        }
        
        if (root.left != null) {
            dfs(root.left, root, parent);
        }
        
        if (root.right != null) {
            dfs(root.right, root, parent);
        }
    }
}


or


class Solution {
    public int sumEvenGrandparent(TreeNode root) {
        if(root == null)
            return 0;
        int sum = 0;
        if(root.val % 2 == 0)
        {
            if(root.left !=null && root.left.left !=null)
                sum+=root.left.left.val;
            if(root.left !=null && root.left.right !=null)
                sum+=root.left.right.val;
            if(root.right !=null && root.right.left !=null)
                sum+=root.right.left.val;
            if(root.right !=null && root.right.right !=null)
                sum+=root.right.right.val;
        }
        sum += sumEvenGrandparent(root.left) + sumEvenGrandparent(root.right);
        return sum;
    }
}

