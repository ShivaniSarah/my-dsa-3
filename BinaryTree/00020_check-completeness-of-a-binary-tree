https://leetcode.com/problems/check-completeness-of-a-binary-tree/description/


958. Check Completeness of a Binary Tree
Medium
Topics
Companies
Given the root of a binary tree, determine if it is a complete binary tree.

In a complete binary tree, every level, except possibly the last, is completely filled, and all nodes in the last level are as far left as possible. It can have between 1 and 2h nodes inclusive at the last level h.

 

Example 1:


Input: root = [1,2,3,4,5,6]
Output: true
Explanation: Every level before the last is full (ie. levels with node-values {1} and {2, 3}), and all nodes in the last level ({4, 5, 6}) are as far left as possible.
Example 2:


Input: root = [1,2,3,4,5,null,7]
Output: false
Explanation: The node with value 7 isn't as far left as possible.
 

Constraints:

The number of nodes in the tree is in the range [1, 100].
1 <= Node.val <= 1000


# java


class Solution {
  public boolean isCompleteTree(TreeNode root) {
    if (root == null)
      return true;

    Queue<TreeNode> q = new LinkedList<>(Arrays.asList(root));

    while (q.peek() != null) {
      TreeNode node = q.poll();
      q.offer(node.left);
      q.offer(node.right);
    }

    while (!q.isEmpty() && q.peek() == null)
      q.poll();

    return q.isEmpty();
  }
}

or


class Solution {
  public boolean isCompleteTree(TreeNode root) {
    final int count = getCount(root);
    return validIndex(root, 1, count);
  }

  private int getCount(TreeNode root) {
    if (root == null)
      return 0;
    return 1 + getCount(root.left) + getCount(root.right);
  }

  // Returns true if there's no index > the number of nodes.
  private boolean validIndex(TreeNode root, int index, int count) {
    if (root == null)
      return true;
    if (index > count)
      return false;
    return validIndex(root.left, index * 2, count) && validIndex(root.right, index * 2 + 1, count);
  }
}


or

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public boolean isCompleteTree(TreeNode root) {
        Deque<TreeNode> q = new LinkedList<>();
        q.offer(root);
        while (q.peek() != null) {
            TreeNode node = q.poll();
            q.offer(node.left);
            q.offer(node.right);
        }
        while (!q.isEmpty() && q.peek() == null) {
            q.poll();
        }
        return q.isEmpty();
    }
}



or


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
// Define the Solution class
class Solution {
  
  // Define the isCompleteTree function that takes a TreeNode as input and returns a boolean
  public boolean isCompleteTree(TreeNode root) {
    // Check if the root node is null, if so, return true (an empty tree is complete)
    if (root == null)
      return true;

    // Create a queue to store the nodes of the tree in level order
    Queue<TreeNode> q = new LinkedList<>(Arrays.asList(root));

    // Traverse the tree in level order
    while (q.peek() != null) {
      // Remove the first node from the queue
      TreeNode node = q.poll();
      // Add the left and right child nodes of the current node to the queue
      q.offer(node.left);
      q.offer(node.right);
    }

    // Remove any remaining null nodes from the end of the queue
    while (!q.isEmpty() && q.peek() == null)
      q.poll();

    // Check if there are any remaining nodes in the queue
    // If so, the tree is not complete, so return false
    // Otherwise, the tree is complete, so return true
    return q.isEmpty();
  }
}


or


class Solution {
    public boolean isCompleteTree(TreeNode root) {
        
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        queue.offer( root );
        
        TreeNode prevNode = root;
        
        // Launch level-order traversal
        while( queue.size() > 0 ){
            
            TreeNode curNode = queue.poll();
            
            if( curNode != null ){
                
                if( prevNode == null ){
                    // Empty node in the middle means this is not a complete binary tree ( not left-compact)
                    return false;
                }
                
                queue.offer( curNode.left );
                queue.offer( curNode.right );
            }
            // udpate previous node
            prevNode = curNode;
        }
        return true;
    }
}


or


class Solution {
    public boolean isCompleteTree(TreeNode root) {
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        boolean isNullInBetweenNodes = false;
        while (!queue.isEmpty()) {
            int totalNodesInLevel = queue.size();
            while (totalNodesInLevel-- > 0) {
                TreeNode currNode = queue.poll();
                if (currNode == null) {
                    isNullInBetweenNodes = true;
                }
                else {
                    if (isNullInBetweenNodes) {
                        return false;
                    }
                    queue.add(currNode.left);
                    queue.add(currNode.right);
                }
            }
        }
        return true;
    }
}
