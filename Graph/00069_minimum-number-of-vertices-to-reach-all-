https://leetcode.com/problems/minimum-number-of-vertices-to-reach-all-nodes/description/


1557. Minimum Number of Vertices to Reach All Nodes
Medium
Topics
Companies
Hint
Given a directed acyclic graph, with n vertices numbered from 0 to n-1, and an array edges where edges[i] = [fromi, toi] represents a directed edge from node fromi to node toi.

Find the smallest set of vertices from which all nodes in the graph are reachable. It's guaranteed that a unique solution exists.

Notice that you can return the vertices in any order.

 

Example 1:



Input: n = 6, edges = [[0,1],[0,2],[2,5],[3,4],[4,2]]
Output: [0,3]
Explanation: It's not possible to reach all the nodes from a single vertex. From 0 we can reach [0,1,2,5]. From 3 we can reach [3,4,2,5]. So we output [0,3].
Example 2:



Input: n = 5, edges = [[0,1],[2,1],[3,1],[1,4],[2,4]]
Output: [0,2,3]
Explanation: Notice that vertices 0, 3 and 2 are not reachable from any other node, so we must include them. Also any of these vertices can reach nodes 1 and 4.
 

Constraints:

2 <= n <= 10^5
1 <= edges.length <= min(10^5, n * (n - 1) / 2)
edges[i].length == 2
0 <= fromi, toi < n
All pairs (fromi, toi) are distinct.



# java


class Solution {
  public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {
    List<Integer> ans = new ArrayList<>();
    int[] inDegrees = new int[n];

    for (List<Integer> edge : edges)
      ++inDegrees[edge.get(1)];

    for (int i = 0; i < inDegrees.length; ++i)
      if (inDegrees[i] == 0)
        ans.add(i);

    return ans;
  }
}


or



class Solution {
    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {
        var cnt = new int[n];
        for (var e : edges) {
            ++cnt[e.get(1)];
        }
        List<Integer> ans = new ArrayList<>();
        for (int i = 0; i < n; ++i) {
            if (cnt[i] == 0) {
                ans.add(i);
            }
        }
        return ans;
    }
}



or



class Solution {
    public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {
        Map<Integer,Integer> hm=new HashMap();
        List<Integer> ans=new ArrayList<>();
        for(List<Integer> edge: edges)
        {
            int a=edge.get(1);
            hm.put(a,hm.getOrDefault(a,0)+1);
        }
        for(int i=0;i<n;i++)
        {
            if(!hm.containsKey(i))
                ans.add(i);
        }
        return ans;
    }
}


or



class Solution {
  List<Integer>[] adj;
  int[] parent;
  boolean[] seen;

  private void dfs(int node, int start) {
    parent[node] = start;

    if (seen[node]) return;
    seen[node] = true;

    for (var neighbor : adj[node])
      dfs(neighbor, start);
  }

  public List<Integer> findSmallestSetOfVertices(int n, List<List<Integer>> edges) {
    var ans = new ArrayList<Integer>();

    seen = new boolean[n];
    parent = new int[n];
    adj = new ArrayList[n];

    for (var i=0; i<n; i++) 
      adj[i] = new ArrayList<>();
    
    for (var e : edges)
      adj[e.get(0)].add(e.get(1));

    for (var i=0; i<n; i++)
      if (!seen[i]) dfs(i, i);

    Arrays.fill(seen, false);

    for (var i=0; i<n; i++) {
      if (seen[parent[i]]) continue;

      int j;
      for (j = i; parent[j] != j; j = parent[j]);
    
      if (!seen[j]) ans.add(j);
      seen[parent[i]] = seen[j] = true;
    }
    return ans;
  }
}


or


