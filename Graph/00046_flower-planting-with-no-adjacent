https://leetcode.com/problems/flower-planting-with-no-adjacent/description/

1042. Flower Planting With No Adjacent
Medium
Topics
Companies
Hint
You have n gardens, labeled from 1 to n, and an array paths where paths[i] = [xi, yi] describes a bidirectional path between garden xi to garden yi. In each garden, you want to plant one of 4 types of flowers.

All gardens have at most 3 paths coming into or leaving it.

Your task is to choose a flower type for each garden such that, for any two gardens connected by a path, they have different types of flowers.

Return any such a choice as an array answer, where answer[i] is the type of flower planted in the (i+1)th garden. The flower types are denoted 1, 2, 3, or 4. It is guaranteed an answer exists.

 

Example 1:

Input: n = 3, paths = [[1,2],[2,3],[3,1]]
Output: [1,2,3]
Explanation:
Gardens 1 and 2 have different types.
Gardens 2 and 3 have different types.
Gardens 3 and 1 have different types.
Hence, [1,2,3] is a valid answer. Other valid answers include [1,2,4], [1,4,2], and [3,2,1].
Example 2:

Input: n = 4, paths = [[1,2],[3,4]]
Output: [1,2,1,2]
Example 3:

Input: n = 4, paths = [[1,2],[2,3],[3,4],[4,1],[1,3],[2,4]]
Output: [1,2,3,4]
 

Constraints:

1 <= n <= 104
0 <= paths.length <= 2 * 104
paths[i].length == 2
1 <= xi, yi <= n
xi != yi
Every garden has at most 3 paths coming into or leaving it.


# java

class Solution {
    public int[] gardenNoAdj(int n, int[][] paths) {
        List<Integer>[] g = new List[n];
        Arrays.setAll(g, k -> new ArrayList<>());
        for (var p : paths) {
            int x = p[0] - 1, y = p[1] - 1;
            g[x].add(y);
            g[y].add(x);
        }
        int[] ans = new int[n];
        boolean[] used = new boolean[5];
        for (int x = 0; x < n; ++x) {
            Arrays.fill(used, false);
            for (int y : g[x]) {
                used[ans[y]] = true;
            }
            for (int c = 1; c < 5; ++c) {
                if (!used[c]) {
                    ans[x] = c;
                    break;
                }
            }
        }
        return ans;
    }
}


or


class Solution {
  public int[] gardenNoAdj(int n, int[][] paths) {
    int[] ans = new int[n]; // ans[i] := 1, 2, 3, or 4
    List<Integer>[] graph = new List[n];

    for (int i = 0; i < n; ++i)
      graph[i] = new ArrayList<>();

    for (int[] path : paths) {
      final int u = path[0] - 1;
      final int v = path[1] - 1;
      graph[u].add(v);
      graph[v].add(u);
    }

    for (int u = 0; u < n; ++u) {
      int used = 0;
      for (final int v : graph[u])
        used |= 1 << ans[v];
      ans[u] = getFirstUnusedType(used);
    }

    return ans;
  }

  private int getFirstUnusedType(int used) {
    for (int type = 1; type <= 4; ++type)
      if ((used >> type & 1) == 0)
        return type;
    throw new IllegalArgumentException();
  }
}


or


class Solution {
    public int[] gardenNoAdj(int n, int[][] paths) {
        List<List<Integer>> adj = getAdjacencyList(paths, n);
        int[] result = new int[n];
        solve(1, adj, result, n);
        return result;
    }

    private boolean solve(int node, List<List<Integer>> adj, int[] result, int n) {
        if (node == n + 1) return true;

        for (int col = 1; col <= 4; col++) {
            if (isPossible(node, col, adj, result)) {
                result[node - 1] = col;
                if (solve(node + 1, adj, result, n)) return true;
                result[node - 1] = 0;
            }
        }
        return false;
    }

    private boolean isPossible(int node, int col, List<List<Integer>> adj, int[] result) {
        for (int it : adj.get(node)) {
            if (result[it - 1] == col) return false;
        }
        return true;
    }

    private List<List<Integer>> getAdjacencyList(int[][] paths, int n) {
        List<List<Integer>> adj = new ArrayList<>();
        for (int i = 0; i <= n; i++) adj.add(new ArrayList<>());
        for (int[] path : paths) {
            adj.get(path[0]).add(path[1]);
            adj.get(path[1]).add(path[0]);
        }
        return adj;
    }
}


or


class Solution {
    public int[] gardenNoAdj(int n, int[][] paths) {
        int[] color = new int[n];

        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();

        for(int i = 0; i < n; i++){
            adj.add(new ArrayList<>());
        }

        for(int i = 0; i < paths.length; i++){
            int u = paths[i][0];
            int v = paths[i][1];
            adj.get(u-1).add(v-1);
            adj.get(v-1).add(u-1);
        }

        Arrays.fill(color, -1);

        Queue<Integer> q = new LinkedList<>();
        // boolean[] vis = new boolean[n];

        for(int i = 0; i < n; i++){
            if(color[i] == -1){
                solve(adj, color, i);
            }
        }

        return color;
    }

    void solve(ArrayList<ArrayList<Integer>> adj, int[] color, int node){
        Queue<Integer> q = new LinkedList<>();
        q.add(node);
        color[node] = 1;

        while(!q.isEmpty()){
            int curr = q.poll();
            int c = color[curr];

            for(int n : adj.get(curr)){
                if(color[n] == -1 || c == color[n]){
                    if(c == 4){
                        color[n] = 1;
                    }
                    else{
                        color[n] = c+1;
                    }
                    q.add(n);
                }
            }

        }


    }


}


or

