https://leetcode.com/problems/maximum-star-sum-of-a-graph/description/


2497. Maximum Star Sum of a Graph
Medium
Topics
Companies
Hint
There is an undirected graph consisting of n nodes numbered from 0 to n - 1. You are given a 0-indexed integer array vals of length n where vals[i] denotes the value of the ith node.

You are also given a 2D integer array edges where edges[i] = [ai, bi] denotes that there exists an undirected edge connecting nodes ai and bi.

A star graph is a subgraph of the given graph having a center node containing 0 or more neighbors. In other words, it is a subset of edges of the given graph such that there exists a common node for all edges.

The image below shows star graphs with 3 and 4 neighbors respectively, centered at the blue node.


The star sum is the sum of the values of all the nodes present in the star graph.

Given an integer k, return the maximum star sum of a star graph containing at most k edges.

 

Example 1:


Input: vals = [1,2,3,4,10,-10,-20], edges = [[0,1],[1,2],[1,3],[3,4],[3,5],[3,6]], k = 2
Output: 16
Explanation: The above diagram represents the input graph.
The star graph with the maximum star sum is denoted by blue. It is centered at 3 and includes its neighbors 1 and 4.
It can be shown it is not possible to get a star graph with a sum greater than 16.
Example 2:

Input: vals = [-5], edges = [], k = 0
Output: -5
Explanation: There is only one possible star graph, which is node 0 itself.
Hence, we return -5.
 

Constraints:

n == vals.length
1 <= n <= 105
-104 <= vals[i] <= 104
0 <= edges.length <= min(n * (n - 1) / 2, 105)
edges[i].length == 2
0 <= ai, bi <= n - 1
ai != bi
0 <= k <= n - 1



# java



class Solution {
  public int maxStarSum(int[] vals, int[][] edges, int k) {
    final int n = vals.length;
    int ans = Integer.MIN_VALUE;
    List<Pair<Integer, Integer>>[] graph = new List[n];

    for (int i = 0; i < n; ++i)
      graph[i] = new ArrayList<>();

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      graph[u].add(new Pair<>(v, vals[v]));
      graph[v].add(new Pair<>(u, vals[u]));
    }

    for (int i = 0; i < n; ++i) {
      Queue<Integer> maxHeap = new PriorityQueue<>(Collections.reverseOrder());
      for (Pair<Integer, Integer> pair : graph[i]) {
        final int val = pair.getValue();
        if (val > 0)
          maxHeap.offer(val);
      }
      int starSum = vals[i];
      for (int j = 0; j < k && !maxHeap.isEmpty(); ++j)
        starSum += maxHeap.poll();
      ans = Math.max(ans, starSum);
    }

    return ans;
  }
}



or



class Solution {
    public int maxStarSum(int[] vals, int[][] edges, int k) {
        int n = vals.length;
        List<Integer>[] g = new List[n];
        Arrays.setAll(g, key -> new ArrayList<>());
        for (var e : edges) {
            int a = e[0], b = e[1];
            if (vals[b] > 0) {
                g[a].add(vals[b]);
            }
            if (vals[a] > 0) {
                g[b].add(vals[a]);
            }
        }
        for (var e : g) {
            Collections.sort(e, (a, b) -> b - a);
        }
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i < n; ++i) {
            int v = vals[i];
            for (int j = 0; j < Math.min(g[i].size(), k); ++j) {
                v += g[i].get(j);
            }
            ans = Math.max(ans, v);
        }
        return ans;
    }
}




or

// best

class Solution {
    public int maxStarSum(int[] vals, int[][] edges, int k) {
        int res = vals[0];
        if (k == 0) { // corner case
            for (var x : vals) res = Math.max(res, x);
            return res;
        }

        // create graph
        int n = vals.length;
        List<Integer>[] g = new List[n];
        for (int i = 0; i < n; i++) g[i] = new ArrayList<>();
        for (var e : edges) {
            if (vals[e[1]] > 0) g[e[0]].add(vals[e[1]]);
            if (vals[e[0]] > 0) g[e[1]].add(vals[e[0]]);
        }

        for (int i = 0; i < n; i++) res = Math.max(res, topK(g[i], vals[i], k));
        return res;
    }

    private int topK(List<Integer> l, int res, int k) {
        Queue<Integer> q = new PriorityQueue<>();
        for (int x : l) {
            if (q.size() < k) q.offer(x);
            else if (x > q.peek()) {
                q.poll();
                q.offer(x);
            }
        }

        while (!q.isEmpty()) res += q.poll();

        return res;
    }
}


or


class Solution {
    public int maxStarSum(int[] vals, int[][] edges, int k) {
        int n = vals.length;
        List<Integer>[] graph = new List[n];
        
        for (int i = 0; i < n; i++) {
            graph[i] = new ArrayList<Integer>();
        }
        
        for (int[] edge : edges) {
            int a = edge[0], b = edge[1];
            graph[a].add(b);
            graph[b].add(a);
        }
        
        long res = Long.MIN_VALUE;
        
        for (int i = 0; i < n; i++) {
            List<Integer> curr = graph[i];
            
            curr.sort((a, b) -> vals[b]-vals[a]);
            
            long max = vals[i], sum = vals[i];
            
            for (int j = 0; j < k && j < curr.size(); j++) {
                sum += vals[curr.get(j)];
                max = Math.max(max, sum);
            }
            
            res = Math.max(res, max);
        }
        
        return (int) res;
    }
}


or


class Solution {
    public int maxStarSum(int[] vals, int[][] edges, int k) {
        ArrayList<ArrayList<Integer>> list=new ArrayList();
        int arr[]=new int[vals.length];
        for(int i=0;i<vals.length;i++)
            arr[i]=vals[i];
//edge cases
        if(vals.length==1)
            return vals[0];
        
        int n=vals.length;
        for(int i=0;i<=n;i++){
            list.add(new ArrayList<Integer>());
        }
        for(int row[]:edges){
            list.get(row[0]).add(row[1]);
            list.get(row[1]).add(row[0]);
        }
//edge cases
        Arrays.sort(vals);
        if(edges.length==0)
            return vals[vals.length-1];
        int max=0;
        
        for(int i=0;i<n;i++){
            List<Integer> adj=list.get(i);
            List<Integer> temp=new ArrayList<Integer>();
            for(int it:adj){
                temp.add(arr[it]);
            }
           Collections.sort(temp, Collections.reverseOrder());
            int sum=arr[i];
            max=Math.max(sum,max);
            int s=k;
            for(int it:temp){
                sum+=it;
                max=Math.max(sum,max);
                s--;
                if(s==0)
                    break;
            }
            
            
         
        }
        return max;
        
        
    }
}
