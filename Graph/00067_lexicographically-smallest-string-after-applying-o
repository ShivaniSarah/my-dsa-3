https://leetcode.com/problems/lexicographically-smallest-string-after-applying-operations/description/


1625. Lexicographically Smallest String After Applying Operations
Solved
Medium
Topics
Companies
Hint
You are given a string s of even length consisting of digits from 0 to 9, and two integers a and b.

You can apply either of the following two operations any number of times and in any order on s:

Add a to all odd indices of s (0-indexed). Digits post 9 are cycled back to 0. For example, if s = "3456" and a = 5, s becomes "3951".
Rotate s to the right by b positions. For example, if s = "3456" and b = 1, s becomes "6345".
Return the lexicographically smallest string you can obtain by applying the above operations any number of times on s.

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b. For example, "0158" is lexicographically smaller than "0190" because the first position they differ is at the third letter, and '5' comes before '9'.

 

Example 1:

Input: s = "5525", a = 9, b = 2
Output: "2050"
Explanation: We can apply the following operations:
Start:  "5525"
Rotate: "2555"
Add:    "2454"
Add:    "2353"
Rotate: "5323"
Add:    "5222"
Add:    "5121"
Rotate: "2151"
Add:    "2050"​​​​​
There is no way to obtain a string that is lexicographically smaller than "2050".
Example 2:

Input: s = "74", a = 5, b = 1
Output: "24"
Explanation: We can apply the following operations:
Start:  "74"
Rotate: "47"
​​​​​​​Add:    "42"
​​​​​​​Rotate: "24"​​​​​​​​​​​​
There is no way to obtain a string that is lexicographically smaller than "24".
Example 3:

Input: s = "0011", a = 4, b = 2
Output: "0011"
Explanation: There are no sequence of operations that will give us a lexicographically smaller string than "0011".
 

Constraints:

2 <= s.length <= 100
s.length is even.
s consists of digits from 0 to 9 only.
1 <= a <= 9
1 <= b <= s.length - 1





# java


class Solution {
  public String findLexSmallestString(String s, int a, int b) {
    ans = s;

    dfs(s, a, b, new HashSet<>());

    return ans;
  }

  private String ans;

  private void dfs(String s, int a, int b, Set<String> seen) {
    if (seen.contains(s))
      return;

    seen.add(s);
    if (ans.compareTo(s) > 0)
      ans = s;

    dfs(add(s, a), a, b, seen);
    dfs(rotate(s, b), a, b, seen);
  }

  private String add(final String s, int a) {
    StringBuilder sb = new StringBuilder(s);
    for (int i = 1; i < sb.length(); i += 2)
      sb.setCharAt(i, (char) ('0' + (s.charAt(i) - '0' + a) % 10));
    return sb.toString();
  }

  private String rotate(final String s, int b) {
    final int n = s.length();
    return s.substring(n - b, n) + s.substring(0, n - b);
  }
}





or




class Solution {
    public String findLexSmallestString(String s, int a, int b) {
        Deque<String> q = new ArrayDeque<>();
        q.offer(s);
        Set<String> vis = new HashSet<>();
        vis.add(s);
        String ans = s;
        int n = s.length();
        while (!q.isEmpty()) {
            s = q.poll();
            if (ans.compareTo(s) > 0) {
                ans = s;
            }
            char[] cs = s.toCharArray();
            for (int i = 1; i < n; i += 2) {
                cs[i] = (char) (((cs[i] - '0' + a) % 10) + '0');
            }
            String t1 = String.valueOf(cs);
            String t2 = s.substring(n - b) + s.substring(0, n - b);
            for (String t : List.of(t1, t2)) {
                if (vis.add(t)) {
                    q.offer(t);
                }
            }
        }
        return ans;
    }
}


or



class Solution {
    private String result;
    public String findLexSmallestString(String s, int a, int b) {
        result = "z";
        HashSet<String> set = new HashSet<>();
        dfs(s, a, b, set);
        return result;
    }
    private void dfs(String s, int a, int b, HashSet<String> set) {
        if(set.contains(s))
            return;
        set.add(s);
        String s1, s2;
        s1 = addA(s, a);
        s2 = rotateB(s, b);
        dfs(s1, a , b, set);
        dfs(s2, a , b, set);
    }
    private String addA(String s, int a) {
        char c[] = s.toCharArray();
        int i, temp;
        for(i=1;i<s.length();i+=2) {
            temp = c[i] - '0';
            temp += a;
            temp = temp % 10;
            c[i] = (char)(temp + '0');
        } 
        s = new String(c);
        if(result.compareTo(s) > 0)
            result = s;
        return s;
    }
    private String rotateB(String s, int b) {
        if(b < 0)
            b += s.length();
        b = b % s.length();
        b = s.length() - b;
        s = s.substring(b) + s.substring(0, b);
        if(result.compareTo(s) > 0)
            result = s;
        return s;
    }
}


or



class Solution {
    static String op1(String str, int a) {
        char[] arr = str.toCharArray();
        for (int i = 1; i < arr.length; i += 2) {
            arr[i] = (char) ((arr[i] - '0' + a) % 10 + '0');
        }
        return String.valueOf(arr);
    }

    static String op2(String str, int b) {
        return str.substring(str.length() - b) + str.substring(0, str.length() - b);
    }

    public String findLexSmallestString(String s, int a, int b) {

        Queue<String> q = new LinkedList<String>();
        HashSet<String> hs = new HashSet<String>();
        q.add(s);
        String min_str = s;
        while (!q.isEmpty()) {
            String str = q.remove();
            if (str.compareTo(min_str) < 0)
                min_str = str;
            String s1 = op1(str, a);
            if (!hs.contains(s1)) {
                q.add(s1);
                hs.add(s1);
            }
            String s2 = op2(str, b);
            if (!hs.contains(s2)) {
                q.add(s2);
                hs.add(s2);
            }
        }
        return min_str;
    }
}



or


class Solution {
    public String findLexSmallestString(String ss, int a, int b) {
        
        StringBuilder temp = new StringBuilder(ss);
        StringBuilder ans = temp;
        int n = ss.length();
        
        do{
            
            StringBuilder s = new StringBuilder(temp);
			
            // extract the int value from index 1
            int x = (int)(s.charAt(1)-'0');
            int whichMultiple = 0;
            int zz = x;
			
            // find out which multiple of 'a' should be added to the index1 so that it becomes minimum
			// here 'whichMultiple' variable represent that value (i'th multiple of  'a')
            for(int i=0;i<10;i++){
                int z = ((i*a)+x)%10;
                if(z<zz){
                    zz = z;
                    whichMultiple = i;
                }
            }
            
			// then add that multiple of 'a' to all odd index values and take the last digit as we have to cycle back to 0 after crossing 9
            for(int i=0;i<n;i++){
                if(i%2==1){
                    s.setCharAt(i,(char)((((whichMultiple*a)+(s.charAt(i)-'0'))%10)+'0'));
                }
            }
            
			// Repeat the above process for even index values if b is odd
            if(b%2==1){
                int y = s.charAt(0)-'0';
                int whichMultiple2 = 0;
                int ww = y;
                for(int i=0;i<10;i++){
                    int z = ((i*a)+y)%10;
                    if(z<ww){
                        ww = z;
                        whichMultiple2 = i;
                    }
                }
                for(int i=0;i<n;i++){
                    if(i%2==0){
                        s.setCharAt(i,(char)((((whichMultiple2*a)+(s.charAt(i)-'0'))%10)+'0'));
                    }
                } 
            }
            
			// finally compare the modified string( variable 's') to the 'ans' string which stores smallest string found till now
			// update the 'ans' if currently modified string( variable 's') is smaller than it.
            if(ans.compareTo(s)>0){
                ans = s;
            }
            
			
			// rotate the original string 'b' times to the right
            temp.insert(0,temp.substring(n-b,n)); // take last 'b' characters and append them to the head(starting od string)
            temp.delete(n,n+b); // delete those last 'b' characters
            
        }while(!temp.toString().equals(ss)); // continue this process until the the 'temp' string becomes equal to the input string( variable 'ss') 
		// which indicates that we have iterated through all possible different strings (which will be n/gcd(n,b), here n is size of input string)
        
        return ans.toString();
    }
}


or


