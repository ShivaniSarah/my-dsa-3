https://leetcode.com/problems/battleships-in-a-board/description/


419. Battleships in a Board
Medium
Topics
Companies
Given an m x n matrix board where each cell is a battleship 'X' or empty '.', return the number of the battleships on board.

Battleships can only be placed horizontally or vertically on board. In other words, they can only be made of the shape 1 x k (1 row, k columns) or k x 1 (k rows, 1 column), where k can be of any size. At least one horizontal or vertical cell separates between two battleships (i.e., there are no adjacent battleships).

 

Example 1:


Input: board = [["X",".",".","X"],[".",".",".","X"],[".",".",".","X"]]
Output: 2
Example 2:

Input: board = [["."]]
Output: 0
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 200
board[i][j] is either '.' or 'X'.
 

Follow up: Could you do it in one-pass, using only O(1) extra memory and without modifying the values board?



# java


class Solution {
    public int countBattleships(char[][] board) {
        int m = board.length, n = board[0].length;
        int ans = 0;
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (board[i][j] == '.') {
                    continue;
                }
                if (i > 0 && board[i - 1][j] == 'X') {
                    continue;
                }
                if (j > 0 && board[i][j - 1] == 'X') {
                    continue;
                }
                ++ans;
            }
        }
        return ans;
    }
}



or



class Solution {
  public int countBattleships(char[][] board) {
    int ans = 0;

    for (int i = 0; i < board.length; ++i)
      for (int j = 0; j < board[0].length; ++j) {
        if (board[i][j] == '.')
          continue;
        if (i > 0 && board[i - 1][j] == 'X')
          continue;
        if (j > 0 && board[i][j - 1] == 'X')
          continue;
        ++ans;
      }

    return ans;
  }
}


or


// best
class Solution {
    public int countBattleships(char[][] board) {
        if (board == null) {
            throw new IllegalArgumentException("Input is null");
        }
        if (board.length == 0 || board[0].length == 0) {
            return 0;
        }

        int rows = board.length;
        int cols = board[0].length;
        int count = 0;

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                if (board[i][j] == 'X'
						&& (j == cols - 1 || board[i][j + 1] == '.')
                        && (i == rows - 1 || board[i + 1][j] == '.')) {
                    count++;
                }
            }
        }

        return count;
    }
}



or


class Solution {
    public int countBattleships(char[][] board) {
        int answer = 0;

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] != 'X') continue;

                if ((i == 0 || board[i-1][j] != 'X') && (j == 0 || board[i][j-1] != 'X')) answer++;
            }
        }

        return answer;
    }
}


or


class Solution {
    public int countBattleships(char[][] board) {
	//count of our battleships
	int n = 0;

	//iterate thru the board
	for (int i = 0; i < board.length; i++) {
		for (int j = 0; j < board[i].length; j++) {
			//check if we hit a battleship
			if (board[i][j] == 'X') {
				//increment count
				n++;
				//sink ship
				DFS(board, i, j);
			}
		}
	}

	//result
	return n;
}

//recursive helper method for DFS (sink the ships)
private void DFS(char[][] board, int i, int j) {
	//sink current piece (change to dot)
	board[i][j] = '.';

	//up
	if (i > 0 && board[i-1][j] == 'X') {
		DFS(board, i-1, j);
	}

	//down
	if (i < board.length - 1 && board[i+1][j] == 'X') {
		DFS(board, i+1, j);
	}

	//left
	if (j > 0 && board[i][j-1] == 'X') {
		DFS(board, i, j-1);
	}

	//right
	if (j < board[i].length - 1 && board[i][j+1] == 'X') {
		DFS(board, i, j+1);
	}
}
}


