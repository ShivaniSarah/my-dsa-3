https://leetcode.com/problems/count-the-number-of-houses-at-a-certain-distance-i/description/

3015. Count the Number of Houses at a Certain Distance I
Medium
Topics
Companies
Hint
You are given three positive integers n, x, and y.

In a city, there exist houses numbered 1 to n connected by n streets. There is a street connecting the house numbered i with the house numbered i + 1 for all 1 <= i <= n - 1 . An additional street connects the house numbered x with the house numbered y.

For each k, such that 1 <= k <= n, you need to find the number of pairs of houses (house1, house2) such that the minimum number of streets that need to be traveled to reach house2 from house1 is k.

Return a 1-indexed array result of length n where result[k] represents the total number of pairs of houses such that the minimum streets required to reach one house from the other is k.

Note that x and y can be equal.

 

Example 1:


Input: n = 3, x = 1, y = 3
Output: [6,0,0]
Explanation: Let's look at each pair of houses:
- For the pair (1, 2), we can go from house 1 to house 2 directly.
- For the pair (2, 1), we can go from house 2 to house 1 directly.
- For the pair (1, 3), we can go from house 1 to house 3 directly.
- For the pair (3, 1), we can go from house 3 to house 1 directly.
- For the pair (2, 3), we can go from house 2 to house 3 directly.
- For the pair (3, 2), we can go from house 3 to house 2 directly.
Example 2:


Input: n = 5, x = 2, y = 4
Output: [10,8,2,0,0]
Explanation: For each distance k the pairs are:
- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (2, 4), (4, 2), (3, 4), (4, 3), (4, 5), and (5, 4).
- For k == 2, the pairs are (1, 3), (3, 1), (1, 4), (4, 1), (2, 5), (5, 2), (3, 5), and (5, 3).
- For k == 3, the pairs are (1, 5), and (5, 1).
- For k == 4 and k == 5, there are no pairs.
Example 3:


Input: n = 4, x = 1, y = 1
Output: [6,4,2,0]
Explanation: For each distance k the pairs are:
- For k == 1, the pairs are (1, 2), (2, 1), (2, 3), (3, 2), (3, 4), and (4, 3).
- For k == 2, the pairs are (1, 3), (3, 1), (2, 4), and (4, 2).
- For k == 3, the pairs are (1, 4), and (4, 1).
- For k == 4, there are no pairs.
 

Constraints:

2 <= n <= 100
1 <= x, y <= n


# java

class Solution {
  public int[] countOfPairs(int n, int x, int y) {
    if (x > y) {
      final int temp = x;
      x = y;
      y = temp;
    }

    final int ringLen = y - x + 1;
    final int leftLineLen = x - 1;
    final int rightLineLen = n - y;

    int[] ans = new int[n];
    ans = addVectors(ans, bothInRing(n, ringLen));
    ans = addVectors(ans, bothInTheSameLine(n, leftLineLen));
    ans = addVectors(ans, bothInTheSameLine(n, rightLineLen));
    ans = addVectors(ans, lineToRing(n, leftLineLen, ringLen));
    ans = addVectors(ans, lineToRing(n, rightLineLen, ringLen));
    ans = addVectors(ans, lineToLine(n, x, y, leftLineLen, rightLineLen));
    for (int i = 0; i < ans.length; ++i)
      ans[i] *= 2;
    return ans;
  }

  // Returns the contribution from the scenario where two houses are located in
  // the ring.
  private int[] bothInRing(int n, int ringLen) {
    int[] res = new int[n];
    for (int k = 1; k <= (ringLen - 1) / 2; ++k)
      res[k - 1] += ringLen;
    if (ringLen % 2 == 0)
      res[ringLen / 2 - 1] += ringLen / 2;
    return res;
  }

  // Returns the contribution from the scenario where two houses are either
  // located in the left line [1, x) or the right line (y, n].
  private int[] bothInTheSameLine(int n, int lineLen) {
    int[] res = new int[n];
    for (int k = 1; k <= lineLen; ++k)
      res[k - 1] += lineLen - k;
    return res;
  }

  // Returns the contribution from the scenario where one house is either
  // located in the left line [1, x) or the right line (y, n] and the other
  // house is located in the cycle.
  private int[] lineToRing(int n, int lineLen, int ringLen) {
    int[] res = new int[n];
    for (int k = 1; k <= lineLen + ringLen; ++k) {
      // min(
      //   at most k - 1 since we need to give 1 to the line,
      //   at most ringLen / 2 since for length > ringLen / 2, it can always be
      //     calculated as ringLen - ringLen / 2
      // )
      final int maxInRingLen = Math.min(k - 1, ringLen / 2);
      // max(at least 0, at lest k - lineLen)
      final int minInRingLen = Math.max(0, k - lineLen);
      if (minInRingLen <= maxInRingLen) {
        // Each ring length contributes 2 to the count due to the split of
        // paths when entering the ring: One path traverses the upper half of
        // the ring, and the other traverses the lower half.
        // This is illustrated as follows:
        //   Path 1: ... -- x -- (upper half of the ring)
        //   Path 2: ... -- x -- (lower half of the ring)
        res[k - 1] += (maxInRingLen - minInRingLen + 1) * 2;
        if (minInRingLen == 0)
          // Subtract 1 since there's no split.
          res[k - 1] -= 1;
        if (maxInRingLen * 2 == ringLen)
          // Subtract 1 since the following case only contribute one:
          //   ... -- x -- (upper half of the ring) -- middle point
          //   ... -- x -- (upper half of the ring) -- middle point
          res[k - 1] -= 1;
      }
    }
    return res;
  }

  // Returns the contribution from the scenario where one house is in the left
  // line [1, x) and the other house is in the right line (y, n].
  private int[] lineToLine(int n, int x, int y, int leftLineLen, int rightLineLen) {
    int[] res = new int[n];
    for (int k = 1; k <= leftLineLen + rightLineLen + 2; ++k) {
      // min(
      //   at most leftLineLen,
      //   at most k - 1 - (x < y) since we need to give 1 to the right line
      //     and if x < y we need to give another 1 to "x - y".
      // )
      final int maxInLeft = Math.min(leftLineLen, k - 1 - (x < y ? 1 : 0));
      // max(at least 1, at least k - rightLineLen - (x < y))
      final int minInLeft = Math.max(1, k - rightLineLen - (x < y ? 1 : 0));
      if (minInLeft <= maxInLeft)
        res[k - 1] += maxInLeft - minInLeft + 1;
    }
    return res;
  }

  private int[] addVectors(int[] a, int[] b) {
    for (int i = 0; i < a.length; ++i)
      a[i] += b[i];
    return a;
  }
}


or


class Solution {
    public int[] countOfPairs(int n, int x, int y) {
        int[] ans = new int[n];
        x--;
        y--;
        for (int i = 0; i < n; ++i) {
            for (int j = i + 1; j < n; ++j) {
                int a = j - i;
                int b = Math.abs(i - x) + 1 + Math.abs(j - y);
                int c = Math.abs(i - y) + 1 + Math.abs(j - x);
                ans[Math.min(a, Math.min(b, c)) - 1] += 2;
            }
        }
        return ans;
    }
}


or



class Solution {
    public int[] countOfPairs(int n, int x, int y) {
         // Initialization of Distance Matrix (dist):
         int[][] dist = new int[n + 1][n + 1];

        for (int i = 1; i <= n; i++) {
            Arrays.fill(dist[i], Integer.MAX_VALUE);
            dist[i][i] = 0; // The distance from a house to itself is zero.
            if (i < n) 
                dist[i][i + 1] = 1;  //there's a street connecting house i to house i + 1 with distance 1.
            if (i > 1) 
                dist[i][i-1] = 1; // there's a street connecting house i - 1 to house i with distance 1.
    
        }
        dist[x][y] = dist[y][x] = 1; // An additional street connects the house numbered x with the house numbered y.
        
        for (int k = 1; k <= n; k++) { // Floyd-Warshall algorithm to calculate all-pairs shortest paths
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    if (dist[i][k] != Integer.MAX_VALUE && dist[k][j] != Integer.MAX_VALUE) {
                        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);
                    }
                }
            }
        }
        
        // Counts the number of pairs of houses for each distance and stores it in a map (countMap).
        Map<Integer, Integer> countMap = new HashMap<>();
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (dist[i][j] != Integer.MAX_VALUE && i!=j) {
                    countMap.put(dist[i][j], countMap.getOrDefault(dist[i][j], 0) + 1);
                }
            }
        }
        
        // Convert the map to the result array
        // result array where result[k - 1] stores the total number of pairs with minimum distance k.
        int[] result = new int[n];
        for (int k = 1; k <= n; k++) {
            result[k - 1] = countMap.getOrDefault(k, 0);
        }

        return result;
    }
}


or


class Solution {
    public int[] countOfPairs(int n, int x, int y) {
        // Initialize an array to store the result (result):
        int[] result = new int[n];

        // Iterate over all pairs of houses:
        for (int i = 1; i <= n; i++) {
            for (int j = i + 1; j <= n; j++) {
                // Calculate the minimum distance using a different approaches
                int val = Math.min(
                    Math.abs(i - j),  // Direct distance between houses i and j, i->j 
                    Math.min(
                        Math.abs(i - x) + 1 + Math.abs(y - j),  // Distance through x and y,  i->x->y->j 
                        Math.abs(i - y) + 1 + Math.abs(x - j)  // Distance through y and x, i->y->x->j 
                    )
                );
                // Update the result array based on the minimum distance 
                result[val - 1] += 2; // from i to j and j to i
            }
        }
        return result;
    }
}


or

import java.util.Arrays;

public class Solution {
    public int[] countOfPairs(int n, int x, int y) {
        int[][] grid = new int[n+1][n+1];
        for (int[] row : grid) {
            Arrays.fill(row, 1000);
        }

        for (int j = 1; j < n; j++) {
            grid[j][j+1] = 1;
            grid[j+1][j] = 1;
        }
        grid[x][y] = 1;
        grid[y][x] = 1;

        for (int k = 1; k <= n; k++) {
            for (int i = 1; i <= n; i++) {
                for (int j = 1; j <= n; j++) {
                    grid[i][j] = Math.min(grid[i][j], grid[i][k] + grid[k][j]);
                }
            }
        }

        int[] result = new int[n];
        for (int i = 1; i <= n; i++) {
            for (int j = 1; j <= n; j++) {
                if (i != j) {
                    int val = grid[i][j];
                    result[val-1]++;
                }
            }
        }

        return result;
    }
}


