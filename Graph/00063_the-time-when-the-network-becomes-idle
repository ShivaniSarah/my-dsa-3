https://leetcode.com/problems/the-time-when-the-network-becomes-idle/


2039. The Time When the Network Becomes Idle
Medium
Topics
Companies
Hint
There is a network of n servers, labeled from 0 to n - 1. You are given a 2D integer array edges, where edges[i] = [ui, vi] indicates there is a message channel between servers ui and vi, and they can pass any number of messages to each other directly in one second. You are also given a 0-indexed integer array patience of length n.

All servers are connected, i.e., a message can be passed from one server to any other server(s) directly or indirectly through the message channels.

The server labeled 0 is the master server. The rest are data servers. Each data server needs to send its message to the master server for processing and wait for a reply. Messages move between servers optimally, so every message takes the least amount of time to arrive at the master server. The master server will process all newly arrived messages instantly and send a reply to the originating server via the reversed path the message had gone through.

At the beginning of second 0, each data server sends its message to be processed. Starting from second 1, at the beginning of every second, each data server will check if it has received a reply to the message it sent (including any newly arrived replies) from the master server:

If it has not, it will resend the message periodically. The data server i will resend the message every patience[i] second(s), i.e., the data server i will resend the message if patience[i] second(s) have elapsed since the last time the message was sent from this server.
Otherwise, no more resending will occur from this server.
The network becomes idle when there are no messages passing between servers or arriving at servers.

Return the earliest second starting from which the network becomes idle.

 

Example 1:

example 1
Input: edges = [[0,1],[1,2]], patience = [0,2,1]
Output: 8
Explanation:
At (the beginning of) second 0,
- Data server 1 sends its message (denoted 1A) to the master server.
- Data server 2 sends its message (denoted 2A) to the master server.

At second 1,
- Message 1A arrives at the master server. Master server processes message 1A instantly and sends a reply 1A back.
- Server 1 has not received any reply. 1 second (1 < patience[1] = 2) elapsed since this server has sent the message, therefore it does not resend the message.
- Server 2 has not received any reply. 1 second (1 == patience[2] = 1) elapsed since this server has sent the message, therefore it resends the message (denoted 2B).

At second 2,
- The reply 1A arrives at server 1. No more resending will occur from server 1.
- Message 2A arrives at the master server. Master server processes message 2A instantly and sends a reply 2A back.
- Server 2 resends the message (denoted 2C).
...
At second 4,
- The reply 2A arrives at server 2. No more resending will occur from server 2.
...
At second 7, reply 2D arrives at server 2.

Starting from the beginning of the second 8, there are no messages passing between servers or arriving at servers.
This is the time when the network becomes idle.
Example 2:

example 2
Input: edges = [[0,1],[0,2],[1,2]], patience = [0,10,10]
Output: 3
Explanation: Data servers 1 and 2 receive a reply back at the beginning of second 2.
From the beginning of the second 3, the network becomes idle.
 

Constraints:

n == patience.length
2 <= n <= 105
patience[0] == 0
1 <= patience[i] <= 105 for 1 <= i < n
1 <= edges.length <= min(105, n * (n - 1) / 2)
edges[i].length == 2
0 <= ui, vi < n
ui != vi
There are no duplicate edges.
Each server can directly or indirectly reach another server.


# java


class Solution {
  public int networkBecomesIdle(int[][] edges, int[] patience) {
    final int n = patience.length;
    int ans = 0;
    List<Integer>[] graph = new List[n];
    Queue<Integer> q = new ArrayDeque<>(List.of(0));
    int[] dist = new int[n]; // dist[i] := the distance between i and 0
    Arrays.fill(dist, Integer.MAX_VALUE);
    dist[0] = 0;

    for (int i = 0; i < n; ++i)
      graph[i] = new ArrayList<>();

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      graph[u].add(v);
      graph[v].add(u);
    }

    while (!q.isEmpty())
      for (int sz = q.size(); sz > 0; --sz) {
        final int u = q.poll();
        for (final int v : graph[u])
          if (dist[v] == Integer.MAX_VALUE) {
            dist[v] = dist[u] + 1;
            q.offer(v);
          }
      }

    for (int i = 1; i < n; ++i) {
      final int numResending = (dist[i] * 2 - 1) / patience[i];
      final int lastResendingTime = patience[i] * numResending;
      final int lastArrivingTime = lastResendingTime + dist[i] * 2;
      ans = Math.max(ans, lastArrivingTime);
    }

    return ans + 1;
  }
}


or


class Solution {
    public int networkBecomesIdle(int[][] edges, int[] patience) {
        int n = patience.length;
        List<Integer>[] g = new List[n];
        Arrays.setAll(g, k -> new ArrayList<>());
        for (int[] e : edges) {
            int u = e[0], v = e[1];
            g[u].add(v);
            g[v].add(u);
        }
        Deque<Integer> q = new ArrayDeque<>();
        q.offer(0);
        boolean[] vis = new boolean[n];
        vis[0] = true;
        int ans = 0, d = 0;
        while (!q.isEmpty()) {
            ++d;
            int t = d * 2;
            for (int i = q.size(); i > 0; --i) {
                int u = q.poll();
                for (int v : g[u]) {
                    if (!vis[v]) {
                        vis[v] = true;
                        q.offer(v);
                        ans = Math.max(ans, (t - 1) / patience[v] * patience[v] + t + 1);
                    }
                }
            }
        }
        return ans;
    }
}


or


class Solution {
    private int getLastSend(int d, int p) {
        if (p >= 2 * d) {
            return 0;
        }
        if ((2 * d) % p == 0) {
            return 2 * d - p;
        }
        return 2 * d - (2 * d) % p;
    }

    public int networkBecomesIdle(int[][] edges, int[] patience) {
        // Build adjacency list.
        List<List<Integer>> graph = new ArrayList<>();
        for (int i = 0; i < patience.length; i++) {
            graph.add(new ArrayList<>());
        }
        for (int[] edge : edges) {
            int u = edge[0];
            int v = edge[1];
            graph.get(u).add(v);
            graph.get(v).add(u);
        }

        // Perform BFS to find the min distance of each node from the root.
        int[] distance = new int[patience.length];
        boolean[] visited = new boolean[patience.length];
        visited[0] = true;
        Queue<Integer> queue = new LinkedList<>();
        queue.add(0);
        while (!queue.isEmpty()) {
            int node = queue.remove();
            for (int neighbor : graph.get(node)) {
                if (!visited[neighbor]) {
                    distance[neighbor] = 1 + distance[node];
                    queue.add(neighbor);
                    visited[neighbor] = true;
                }
            }
        }

        int maxTime = 0;
        for (int n = 1; n < patience.length; n++) {
            int lastSend = getLastSend(distance[n], patience[n]);
            int lastReceive = lastSend + 2 * distance[n];
            maxTime = Math.max(maxTime, lastReceive);
        }
        return maxTime + 1;
    }
}


or


class Solution {
    public int networkBecomesIdle(int[][] edges, int[] patience) {
        int n = patience.length;
        
		// creating adjacency list
        ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
        for(int i = 0 ; i < n ; i++ ) {
            adj.add(new ArrayList<>());
        }
        
        for(int[] edge : edges) {
            adj.get(edge[0]).add(edge[1]);
            adj.get(edge[1]).add(edge[0]);
        }        
         
		 // getting the distance array using dijkstra algorithm
        int[] dist = dijkstra(adj);        
     
	 // variable to store the result
        int ans = 0;
        
		
		// performing the calculations discussed above for each index
        for(int x = 1; x < n ; x++) {
            
			// round trip time
            int time = 2*dist[x];
			
            int p = patience[x];
			
			//total number of messages the station will send until it receives the reply of first message
            int numberOfMessagesSent = (time)/p;
            
			//handling an edge case if round trip time is a multiple of patience example time =24 patience = 4  
			//then the reply would be received at 24 therefore station will not send any message at t = 24 
            if(time%p == 0) {
                numberOfMessagesSent--;
            }
        
		// time of last message
            int lastMessage = numberOfMessagesSent*p;
			
			// updating the ans to store max of time at which the station becomes idle
            ans = Math.max(ans,lastMessage+ 2*dist[x]+1);
            
        }

        return ans;
    }
    
	// simple dijkstra algorithm implementation
    private int[] dijkstra(ArrayList<ArrayList<Integer>> adj) {
        
        int n = adj.size();
        
        int[] dist = new int[n];
        boolean[] visited = new boolean[n];
        
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[0] = 0;
        
        PriorityQueue<int[]> pq = new PriorityQueue<>((o1,o2)->o1[1]-o2[1]);
        
        pq.add(new int[]{0,0});
        
        while(!pq.isEmpty()) {
            int[] node = pq.remove();
            if(!visited[node[0]]) {
                visited[node[0]] = true;   
                for(int nbr : adj.get(node[0])) {
                    if(dist[nbr] > dist[node[0]]+1) {
                        dist[nbr] = dist[node[0]]+1;
                        pq.add(new int[]{nbr,dist[nbr]});
                    }
                }
            }           
            
        }
        
        return dist;
    }
    
}


or


class Solution {
	
    List<Integer> adj[];
	int min[];
	boolean vis[];
	void dfs(int i,int level)
	{
		for(Integer ele : adj[i])
		{
			if(vis[ele])
			{
                if(min[ele]>level*2) {
				
                    min[ele]=level*2;
                    dfs(ele,level+1);
                }
				continue;
			}
			vis[ele]=true;
			min[ele]=level*2;
			dfs(ele,level+1);
		}
	}
    public int networkBecomesIdle(int[][] arr, int[] pat) {

    	int i,n=pat.length;
    	
        adj=new ArrayList[n];
    	min=new int[n];
    	vis=new boolean[n];
    	vis[0]=true;
    	
        for(i=0;i<n;i++)
    		adj[i]=new ArrayList<>();
    	for(i=0;i<arr.length;i++)
    	{
    		adj[arr[i][0]].add(arr[i][1]);
    		adj[arr[i][1]].add(arr[i][0]);
    	}
    	
        dfs(0,1);
        
        int max=0;
    	for(i=1;i<n;i++)
    	{
    		if(adj[i].size()==0)
    			continue;
    		if(pat[i]>=min[i])
    			max=Math.max(max,min[i]);
    		else 
    			max=Math.max(max, min[i]+pat[i]*((int)Math.ceil(min[i]/(double)pat[i])-1));
    	}
    	return max+1;
    }
}

