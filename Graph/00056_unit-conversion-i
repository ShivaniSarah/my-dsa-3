https://leetcode.com/problems/unit-conversion-i/description/


3528. Unit Conversion I
Medium
Topics
Companies
Hint
There are n types of units indexed from 0 to n - 1. You are given a 2D integer array conversions of length n - 1, where conversions[i] = [sourceUniti, targetUniti, conversionFactori]. This indicates that a single unit of type sourceUniti is equivalent to conversionFactori units of type targetUniti.

Return an array baseUnitConversion of length n, where baseUnitConversion[i] is the number of units of type i equivalent to a single unit of type 0. Since the answer may be large, return each baseUnitConversion[i] modulo 109 + 7.

 

Example 1:

Input: conversions = [[0,1,2],[1,2,3]]

Output: [1,2,6]

Explanation:

Convert a single unit of type 0 into 2 units of type 1 using conversions[0].
Convert a single unit of type 0 into 6 units of type 2 using conversions[0], then conversions[1].

Example 2:

Input: conversions = [[0,1,2],[0,2,3],[1,3,4],[1,4,5],[2,5,2],[4,6,3],[5,7,4]]

Output: [1,2,3,8,10,6,30,24]

Explanation:

Convert a single unit of type 0 into 2 units of type 1 using conversions[0].
Convert a single unit of type 0 into 3 units of type 2 using conversions[1].
Convert a single unit of type 0 into 8 units of type 3 using conversions[0], then conversions[2].
Convert a single unit of type 0 into 10 units of type 4 using conversions[0], then conversions[3].
Convert a single unit of type 0 into 6 units of type 5 using conversions[1], then conversions[4].
Convert a single unit of type 0 into 30 units of type 6 using conversions[0], conversions[3], then conversions[5].
Convert a single unit of type 0 into 24 units of type 7 using conversions[1], conversions[4], then conversions[6].
 

Constraints:

2 <= n <= 105
conversions.length == n - 1
0 <= sourceUniti, targetUniti < n
1 <= conversionFactori <= 109
It is guaranteed that unit 0 can be converted into any other unit through a unique combination of conversions without using any conversions in the opposite direction.



# java

// 1 test case not pased
class Solution {
    int mod= 1000000007;
    public int[] baseUnitConversions(int[][] conversions) {
        long[] ans = new long[conversions.length + 1];
        Arrays.fill(ans, -1);
        ans[0] = 1;
        for (int[] conversion : conversions) {
            int source = conversion[0];
            int target = conversion[1];
            int factor = conversion[2];
            if (ans[source] != -1) {
                ans[target] = (ans[source] * factor)%mod;
            }
        }

        int[] result = new int[ans.length];
        for (int i = 0; i < ans.length; i++) {
            result[i] = ans[i] == -1 ? -1 : (int) ans[i];
        }
        return result;
    }
}

or

// 1 test case not passed

class Solution {
    public int[] baseUnitConversions(int[][] conversions) {
        int n=conversions.length + 1;
        int[] ans=new int[n];
        int mod = 1000000007;
        ans[0]=1;
        for(int i=0;i<n-1;i++){
            int s = conversions[i][0];
            int e = conversions[i][1];
            int cost = conversions[i][2];

            ans[e] = (int)((long)((long)ans[s] * cost) % mod);
        }

        return ans;
    }
}

or

// pass
class Solution {
    int[] solve(List<int[]>[] g,int src){

        Queue<int[]> q = new LinkedList<int[]>();
        q.offer(new int[]{src,1});

        int[] dist = new int[g.length];
        Arrays.fill(dist,Integer.MAX_VALUE);
        dist[src] = 1;

        int mod = (int)(1e9+7);

        while(!q.isEmpty()){
            int[] top = q.poll();

            for(int[] adj:g[top[0]]){

                int w =(int) (((long)top[1]*adj[1])%mod);

                if(w<dist[adj[0]]){
                    dist[adj[0]] = w;
                    q.offer(new int[]{adj[0],w});
                }
            }
        }
        return dist;
    }
    public int[] baseUnitConversions(int[][] conversions) {
        int n = conversions.length+1;
        List<int[]>[] g= new List[n];

        for(int i = 0;i<n;i++)
            g[i] = new ArrayList<int[]>();

        for(int[] e:conversions){
            g[e[0]].add(new int[]{e[1],e[2]});
        }

        int[] dist = solve(g,0);
        return dist;
    }
}


or


public class Node
{
    int d,cF;
    public Node(int dst,int c)
    {
        d=dst;
        cF=c;
    }
}
class Solution {
    public int[] baseUnitConversions(int[][] conversions) {
        int result[]=new int[conversions.length+1];
        HashMap<Integer,ArrayList<Node>> h=new HashMap<Integer,ArrayList<Node>>();
        result[0]=1;
        for(int i=0;i<conversions.length;i++)
        {
            if(conversions[i][0]==0)
            {
                result[conversions[i][1]]=conversions[i][2];
            }
            if(!h.containsKey(conversions[i][0]))
            {
                ArrayList<Node> l=new ArrayList<Node>();
                l.add(new Node(conversions[i][1],conversions[i][2]));
                h.put(conversions[i][0],l);
            }
            else
            {
                ArrayList<Node> l=h.get(conversions[i][0]);
                l.add(new Node(conversions[i][1],conversions[i][2]));
                h.put(conversions[i][0],l);
            }
        }
        Queue<Node> q=new LinkedList<Node>();
        q.add(new Node(0,1));
        HashSet<Integer> hset=new HashSet<Integer>();
        hset.add(0);
        while(q.size()>0)
        {
            Node node=q.poll();
            if(h.containsKey(node.d))
            {
                ArrayList<Node> l=h.get(node.d);
                for(int j=0;j<l.size();j++)
                {
                    Node p=l.get(j);
                    long val=1l;
                    val=val*node.cF*p.cF;
                    val=val%(1000000007);
                    if(!hset.contains(p.d))
                    {
                        hset.add(p.d);
                        q.add(new Node(p.d,(int)(val)));
                    }
                    if(result[p.d]==0)
                    {
                        result[p.d]=(int)(val);
                    }
                }
            }
        }

        return result;
    }
}
