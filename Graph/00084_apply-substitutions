https://leetcode.com/problems/apply-substitutions/description/


3481. Apply Substitutions ðŸ”’
Description
You are given a replacements mapping and a text string that may contain placeholders formatted as %var%, where each var corresponds to a key in the replacements mapping. Each replacement value may itself contain one or more such placeholders. Each placeholder is replaced by the value associated with its corresponding replacement key.

Return the fully substituted text string which does not contain any placeholders.

 

Example 1:

Input: replacements = [["A","abc"],["B","def"]], text = "%A%_%B%"

Output: "abc_def"

Explanation:

The mapping associates "A" with "abc" and "B" with "def".
Replace %A% with "abc" and %B% with "def" in the text.
The final text becomes "abc_def".
Example 2:

Input: replacements = [["A","bce"],["B","ace"],["C","abc%B%"]], text = "%A%_%B%_%C%"

Output: "bce_ace_abcace"

Explanation:

The mapping associates "A" with "bce", "B" with "ace", and "C" with "abc%B%".
Replace %A% with "bce" and %B% with "ace" in the text.
Then, for %C%, substitute %B% in "abc%B%" with "ace" to obtain "abcace".
The final text becomes "bce_ace_abcace".
 

Constraints:

1 <= replacements.length <= 10
Each element of replacements is a two-element list [key, value], where:
key is a single uppercase English letter.
value is a non-empty string of at most 8 characters that may contain zero or more placeholders formatted as %<key>%.
All replacement keys are unique.
The text string is formed by concatenating all key placeholders (formatted as %<key>%) randomly from the replacements mapping, separated by underscores.
text.length == 4 * replacements.length - 1
Every placeholder in the text or in any replacement value corresponds to a key in the replacements mapping.
There are no cyclic dependencies between replacement keys.



# java


class Solution {
  public String applySubstitutions(List<List<String>> replacements, String text) {
    Map<String, String> replaceMap = new HashMap<>();

    for (List<String> replacement : replacements) {
      final String key = replacement.get(0);
      final String value = replacement.get(1);
      replaceMap.put(key, value);
    }

    return evaluate(text, replaceMap);
  }

  // Evaluates the `text` and replaces the placeholders with the values
  // from the `replaceMap` recursively.
  private String evaluate(final String text, Map<String, String> replaceMap) {
    StringBuilder sb = new StringBuilder();
    int i = 0;
    while (i < text.length())
      if (text.charAt(i) == '%') {
        final int j = i + 1 + text.substring(i + 1).indexOf('%');
        final String key = text.substring(i + 1, j);
        final String value = replaceMap.get(key);
        sb.append(evaluate(value, replaceMap));
        i = j + 1;
      } else {
        sb.append(text.charAt(i++));
      }
    return sb.toString();
  }
}


or



class Solution {
    private final Map<String, String> d = new HashMap<>();

    public String applySubstitutions(List<List<String>> replacements, String text) {
        for (List<String> e : replacements) {
            d.put(e.get(0), e.get(1));
        }
        return dfs(text);
    }

    private String dfs(String s) {
        int i = s.indexOf("%");
        if (i == -1) {
            return s;
        }
        int j = s.indexOf("%", i + 1);
        if (j == -1) {
            return s;
        }
        String key = s.substring(i + 1, j);
        String replacement = dfs(d.getOrDefault(key, ""));
        return s.substring(0, i) + replacement + dfs(s.substring(j + 1));
    }
}


