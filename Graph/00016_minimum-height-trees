https://leetcode.com/problems/minimum-height-trees/description/


310. Minimum Height Trees
Medium
Topics
Companies
Hint
A tree is an undirected graph in which any two vertices are connected by exactly one path. In other words, any connected graph without simple cycles is a tree.

Given a tree of n nodes labelled from 0 to n - 1, and an array of n - 1 edges where edges[i] = [ai, bi] indicates that there is an undirected edge between the two nodes ai and bi in the tree, you can choose any node of the tree as the root. When you select a node x as the root, the result tree has height h. Among all possible rooted trees, those with minimum height (i.e. min(h))  are called minimum height trees (MHTs).

Return a list of all MHTs' root labels. You can return the answer in any order.

The height of a rooted tree is the number of edges on the longest downward path between the root and a leaf.

 

Example 1:


Input: n = 4, edges = [[1,0],[1,2],[1,3]]
Output: [1]
Explanation: As shown, the height of the tree is 1 when the root is the node with label 1 which is the only MHT.
Example 2:


Input: n = 6, edges = [[3,0],[3,1],[3,2],[3,4],[5,4]]
Output: [3,4]
 

Constraints:

1 <= n <= 2 * 104
edges.length == n - 1
0 <= ai, bi < n
ai != bi
All the pairs (ai, bi) are distinct.
The given input is guaranteed to be a tree and there will be no repeated edges.


# java


class Solution {
  public List<Integer> findMinHeightTrees(int n, int[][] edges) {
    if (n == 0 || edges.length == 0)
      return List.of(0);

    List<Integer> ans = new ArrayList<>();
    Map<Integer, Set<Integer>> graph = new HashMap<>();

    for (int i = 0; i < n; ++i)
      graph.put(i, new HashSet<>());

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      graph.get(u).add(v);
      graph.get(v).add(u);
    }

    for (Map.Entry<Integer, Set<Integer>> entry : graph.entrySet()) {
      final int label = entry.getKey();
      Set<Integer> children = entry.getValue();
      if (children.size() == 1)
        ans.add(label);
    }

    while (n > 2) {
      n -= ans.size();
      List<Integer> nextLeaves = new ArrayList<>();
      for (final int leaf : ans) {
        final int u = (int) graph.get(leaf).iterator().next();
        graph.get(u).remove(leaf);
        if (graph.get(u).size() == 1)
          nextLeaves.add(u);
      }
      ans = nextLeaves;
    }

    return ans;
  }
}


or



class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        if (n == 1) {
            return Collections.singletonList(0);
        }
        List<Integer>[] g = new List[n];
        Arrays.setAll(g, k -> new ArrayList<>());
        int[] degree = new int[n];
        for (int[] e : edges) {
            int a = e[0], b = e[1];
            g[a].add(b);
            g[b].add(a);
            ++degree[a];
            ++degree[b];
        }
        Queue<Integer> q = new LinkedList<>();
        for (int i = 0; i < n; ++i) {
            if (degree[i] == 1) {
                q.offer(i);
            }
        }
        List<Integer> ans = new ArrayList<>();
        while (!q.isEmpty()) {
            ans.clear();
            for (int i = q.size(); i > 0; --i) {
                int a = q.poll();
                ans.add(a);
                for (int b : g[a]) {
                    if (--degree[b] == 1) {
                        q.offer(b);
                    }
                }
            }
        }
        return ans;
    }
}


or


class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        if (n == 1) return List.of(0); 
		//the only edge case becase trees are connected, so all indexes will show up inside edges[][] except when there is no edge. 

        List<Integer> ans = new ArrayList<>();
        HashMap<Integer, List<Integer>> map = new HashMap<>();
        int[] indeg = new int[n];
        for (int[] e : edges){ //we build the connection graph map here and the indegree array
            map.computeIfAbsent(e[0], o -> new ArrayList<>()).add(e[1]);
            map.computeIfAbsent(e[1], o -> new ArrayList<>()).add(e[0]);
            indeg[e[0]]++;
            indeg[e[1]]++;
        }

        Queue<Integer> queue = new LinkedList<>();
        for (int i = 0; i < n; i++)
            if (indeg[i] == 1) //those that have indegree of 1 are in the outermost layer
                queue.add(i);

        while(n > 2){ //remove it layer by layer until there are at most 2 nodes left.
            int size = queue.size();
            n -= size;
            while (size-- > 0)
                for (int v : map.get(queue.poll()))
                    if(--indeg[v] == 1)
                        queue.offer(v);
        }

        while(!queue.isEmpty()) ans.add(queue.poll()); 
		//the remaining nodes will be in the queue, so add them to the ans list.

        return ans;
    }
}


or


class Solution {
    public List<Integer> findMinHeightTrees(int n, int[][] edges) {
        List<Integer> result = new ArrayList();
        if (n < 2) {
            for (int i = 0; i < n; i++)
                result.add(i);
            
            return result;
        }
        
        int[] degree = new int[n];
        Map<Integer, List<Integer>> graph = new HashMap();
        for (int i = 0; i < n; i++)
            graph.put(i, new ArrayList());
        
        for (int[] edge : edges) {
            graph.get(edge[0]).add(edge[1]);
            degree[edge[0]]++;
            graph.get(edge[1]).add(edge[0]);
            degree[edge[1]]++;
        }
        
        Queue<Integer> queue = new ArrayDeque();
        for (int i = 0; i < n; i++) {
            if (degree[i] == 1)
                queue.add(i);
        }
        
        int size = 0;
        while (!queue.isEmpty()) {
            result = new ArrayList();
            size = queue.size();
            for (int i = 0; i < size; i++) {
                int node = queue.poll();
                result.add(node);
                degree[node]--;
                
                for (int neighbor : graph.get(node)) {                    
                    degree[neighbor]--;
                    
                    if (degree[neighbor] == 1)
                        queue.add(neighbor);
                }
            }
        }
        return result;
    }
}


or

