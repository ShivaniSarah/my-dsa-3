https://leetcode.com/problems/coloring-a-border/description/

1034. Coloring A Border
Medium
Topics
Companies
Hint
You are given an m x n integer matrix grid, and three integers row, col, and color. Each value in the grid represents the color of the grid square at that location.

Two squares are called adjacent if they are next to each other in any of the 4 directions.

Two squares belong to the same connected component if they have the same color and they are adjacent.

The border of a connected component is all the squares in the connected component that are either adjacent to (at least) a square not in the component, or on the boundary of the grid (the first or last row or column).

You should color the border of the connected component that contains the square grid[row][col] with color.

Return the final grid.

 

Example 1:

Input: grid = [[1,1],[1,2]], row = 0, col = 0, color = 3
Output: [[3,3],[3,2]]
Example 2:

Input: grid = [[1,2,2],[2,3,2]], row = 0, col = 1, color = 3
Output: [[1,3,3],[2,3,3]]
Example 3:

Input: grid = [[1,1,1],[1,1,1],[1,1,1]], row = 1, col = 1, color = 2
Output: [[2,2,2],[2,1,2],[2,2,2]]
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
1 <= grid[i][j], color <= 1000
0 <= row < m
0 <= col < n


# java


class Solution {
  public int[][] colorBorder(int[][] grid, int r0, int c0, int color) {
    dfs(grid, r0, c0, grid[r0][c0]);

    for (int i = 0; i < grid.length; ++i)
      for (int j = 0; j < grid[0].length; ++j)
        if (grid[i][j] < 0)
          grid[i][j] = color;

    return grid;
  }

  private void dfs(int[][] grid, int i, int j, int startColor) {
    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
      return;
    if (grid[i][j] != startColor)
      return;

    grid[i][j] = -startColor;
    dfs(grid, i + 1, j, startColor);
    dfs(grid, i - 1, j, startColor);
    dfs(grid, i, j + 1, startColor);
    dfs(grid, i, j - 1, startColor);

    // If this cell is already on the boarder, it must be painted later.
    if (i == 0 || i == grid.length - 1 || j == 0 || j == grid[0].length - 1)
      return;

    if (Math.abs(grid[i + 1][j]) == startColor && //
        Math.abs(grid[i - 1][j]) == startColor && //
        Math.abs(grid[i][j + 1]) == startColor && //
        Math.abs(grid[i][j - 1]) == startColor)
      grid[i][j] = startColor;
  }
}


or


class Solution {
    private int[][] grid;
    private int color;
    private int m;
    private int n;
    private boolean[][] vis;

    public int[][] colorBorder(int[][] grid, int row, int col, int color) {
        this.grid = grid;
        this.color = color;
        m = grid.length;
        n = grid[0].length;
        vis = new boolean[m][n];
        dfs(row, col, grid[row][col]);
        return grid;
    }

    private void dfs(int i, int j, int c) {
        vis[i][j] = true;
        int[] dirs = {-1, 0, 1, 0, -1};
        for (int k = 0; k < 4; ++k) {
            int x = i + dirs[k], y = j + dirs[k + 1];
            if (x >= 0 && x < m && y >= 0 && y < n) {
                if (!vis[x][y]) {
                    if (grid[x][y] == c) {
                        dfs(x, y, c);
                    } else {
                        grid[i][j] = color;
                    }
                }
            } else {
                grid[i][j] = color;
            }
        }
    }
}


or


class Solution {
    public int[][] colorBorder(int[][] grid, int r0, int c0, int color) {
        if(grid == null || grid.length == 0)
            return null;
        boolean[][] visited = new boolean[grid.length][grid[0].length];
        dfs(grid, visited, r0, c0, grid[r0][c0], color);
        return grid;
    }
    public void dfs(int[][] grid, boolean[][] visited, int i, int j, int oldColor, int newColor) {
        if (i > grid.length - 1 || i < 0 || j > grid[0].length - 1 || j < 0 || grid[i][j] != oldColor || visited[i][j])
            return;
        visited[i][j] = true;
        boolean border = false;
        if(i == 0 || j == 0 || j == grid[0].length - 1 || i == grid.length - 1 || grid[i+1][j] != oldColor || grid[i-1][j] != oldColor || grid[i][j-1] != oldColor || grid[i][j+1] != oldColor)
            border = true;
        dfs(grid, visited, i+1, j, oldColor, newColor);
        dfs(grid, visited, i-1, j, oldColor, newColor);
        dfs(grid, visited, i, j+1, oldColor, newColor);
        dfs(grid, visited, i, j-1, oldColor, newColor);
        if(border) 
            grid[i][j] = newColor;            
    }
}


or


class Solution {
    boolean visited[][];
    int col;
    int colorr;

    public int[][] colorBorder(int[][] grid, int r0, int c0, int color) {
        //basically we will to the given node and appy dfs
        //while applying dfs we will count the number of calls 
        //jis bhi node se 4 calls lagi hongi usse change nhi krna hai
        //baki sab ko color se paint krdo
        col = grid[r0][c0];
        colorr = color;
        visited = new boolean[grid.length][grid[0].length];
        dfs(r0, c0, grid);
        return grid;
    }

    public void dfs(int i, int j, int[][] grid) {
        if (i < 0 || j < 0 || i >= grid.length || j >= grid[0].length) {
            return;
        }
        int count = 0;
        visited[i][j] = true;
        grid[i][j] = colorr;

        if (i + 1 < grid.length && (grid[i + 1][j] == col || visited[i + 1][j])) {
            count++;
            if (!visited[i + 1][j])
                dfs(i + 1, j, grid);
        }
        if (i - 1 >= 0 && (grid[i - 1][j] == col || visited[i - 1][j])) {
            count++;
            if (!visited[i - 1][j])
                dfs(i - 1, j, grid);
        }
        if (j + 1 < grid[0].length && (grid[i][j + 1] == col || visited[i][j + 1])) {
            count++;
            if (!visited[i][j + 1])
                dfs(i, j + 1, grid);
        }
        if (j - 1 >= 0 && (grid[i][j - 1] == col || visited[i][j - 1])) {
            count++;
            if (!visited[i][j - 1])
                dfs(i, j - 1, grid);
        }
        if (count == 4) {
            grid[i][j] = col;
        }

    }
}

or


