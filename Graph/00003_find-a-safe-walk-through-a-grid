https://leetcode.com/problems/find-a-safe-walk-through-a-grid/


3286. Find a Safe Walk Through a Grid
Medium
Topics
Companies
Hint
You are given an m x n binary matrix grid and an integer health.

You start on the upper-left corner (0, 0) and would like to get to the lower-right corner (m - 1, n - 1).

You can move up, down, left, or right from one cell to another adjacent cell as long as your health remains positive.

Cells (i, j) with grid[i][j] = 1 are considered unsafe and reduce your health by 1.

Return true if you can reach the final cell with a health value of 1 or more, and false otherwise.

 

Example 1:

Input: grid = [[0,1,0,0,0],[0,1,0,1,0],[0,0,0,1,0]], health = 1

Output: true

Explanation:

The final cell can be reached safely by walking along the gray cells below.


Example 2:

Input: grid = [[0,1,1,0,0,0],[1,0,1,0,0,0],[0,1,1,1,0,1],[0,0,1,0,1,0]], health = 3

Output: false

Explanation:

A minimum of 4 health points is needed to reach the final cell safely.


Example 3:

Input: grid = [[1,1,1],[1,0,1],[1,1,1]], health = 5

Output: true

Explanation:

The final cell can be reached safely by walking along the gray cells below.



Any path that does not go through the cell (1, 1) is unsafe since your health will drop to 0 when reaching the final cell.

 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
2 <= m * n
1 <= health <= m + n
grid[i][j] is either 0 or 1.


# java


class Solution {
  public boolean findSafeWalk(List<List<Integer>> grid, int health) {
    record T(int i, int j, int h) {}
    final int[][] DIRS = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    final int m = grid.size();
    final int n = grid.get(0).size();
    final int initialHealth = health - grid.get(0).get(0);
    Queue<T> q = new ArrayDeque<>(List.of(new T(0, 0, initialHealth)));
    boolean[][][] seen = new boolean[m][n][health + 1];
    seen[0][0][initialHealth] = true;

    while (!q.isEmpty())
      for (int sz = q.size(); sz > 0; --sz) {
        final int i = q.peek().i;
        final int j = q.peek().j;
        final int h = q.poll().h;
        if (i == m - 1 && j == n - 1 && h > 0)
          return true;
        for (int k = 0; k < 4; ++k) {
          final int x = i + DIRS[k][0];
          final int y = j + DIRS[k][1];
          if (x < 0 || x == m || y < 0 || y == n)
            continue;
          final int nextHealth = h - grid.get(x).get(y);
          if (nextHealth <= 0 || seen[x][y][nextHealth])
            continue;
          q.offer(new T(x, y, nextHealth));
          seen[x][y][nextHealth] = true;
        }
      }

    return false;
  }
}



or


class Solution {
    public boolean findSafeWalk(List<List<Integer>> grid, int health) {
        int m = grid.size();
        int n = grid.get(0).size();
        int[][] dist = new int[m][n];
        for (int[] row : dist) {
            Arrays.fill(row, Integer.MAX_VALUE);
        }
        dist[0][0] = grid.get(0).get(0);
        Deque<int[]> q = new ArrayDeque<>();
        q.offer(new int[] {0, 0});
        final int[] dirs = {-1, 0, 1, 0, -1};
        while (!q.isEmpty()) {
            int[] curr = q.poll();
            int x = curr[0], y = curr[1];
            for (int i = 0; i < 4; i++) {
                int nx = x + dirs[i];
                int ny = y + dirs[i + 1];
                if (nx >= 0 && nx < m && ny >= 0 && ny < n
                    && dist[nx][ny] > dist[x][y] + grid.get(nx).get(ny)) {
                    dist[nx][ny] = dist[x][y] + grid.get(nx).get(ny);
                    q.offer(new int[] {nx, ny});
                }
            }
        }
        return dist[m - 1][n - 1] < health;
    }
}



or


class Solution {
    boolean[][] vis;
    int[][][] dp;
    boolean check(List<List<Integer>> grid, int row, int col, int hlt) {
        int m = grid.size(); int n = grid.get(0).size();
        if (row >= m || col >= n || row<0 || col<0 || hlt<=0 || vis[row][col]) return false;
        if (row==m-1 && col==n-1) {
            return hlt>grid.get(row).get(col);
        }
        if (dp[row][col][hlt]!=-1) return dp[row][col][hlt]==1;
        vis[row][col] = true;
        boolean up = check(grid,row-1,col,hlt-grid.get(row).get(col));
        boolean dw = check(grid,row+1,col,hlt-grid.get(row).get(col));
        boolean lf = check(grid,row,col-1,hlt-grid.get(row).get(col));
        boolean rf = check(grid,row,col+1,hlt-grid.get(row).get(col));
        vis[row][col] = false;
        boolean result = up || dw || lf || rf;
        if(result){
            dp[row][col][hlt]=1;
        }
        else dp[row][col][hlt]=0;
        return result;
    }
    public boolean findSafeWalk(List<List<Integer>> grid, int health) {
        int m = grid.size();
        int n = grid.get(0).size();
        dp = new int[m][n][health+1];
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
                Arrays.fill(dp[i][j],-1);
            }
        }
        vis = new boolean[m][n];
        return check(grid, 0, 0, health);
    }
}



or


class Solution {
    public boolean findSafeWalk(List<List<Integer>> grid, int health) {
        int n = grid.size();
        int m = grid.get(0).size();
        
        int[] dr = new int[] {0, 0, 1, -1};
        int[] dc = new int[] {1, -1, 0, 0};
        
        boolean[][][] visited = new boolean[n][m][health + 1];
        Queue<int[]> bfs = new LinkedList<>();
        
        bfs.add(new int[]{0, 0, health - grid.get(0).get(0)});
        visited[0][0][health - grid.get(0).get(0)] = true;
        
        while(!bfs.isEmpty()) {
            int size = bfs.size();
            while(size-- > 0) {
                int[] currNode = bfs.poll();
                int r = currNode[0];
                int c = currNode[1];
                int h = currNode[2];
               
                if(r == n-1 && c == m-1 && h > 0) {
                    return true;
                }
                 
                for(int k = 0; k < 4; k++) {
                    int nr = r + dr[k];
                    int nc = c + dc[k];
                    if(isValidMove(nr, nc, n, m)) {
                        int nh = h - grid.get(nr).get(nc);
                        if(nh >= 0 && visited[nr][nc][nh] == false) {
                            visited[nr][nc][nh] = true;
                            bfs.add(new int[]{nr, nc, nh});
                        }
                    }
                }
            }
        }
        
        return false;
    }
    
    private boolean isValidMove(int r, int c, int n, int m) {
        return r >= 0 && c >= 0 && r < n && c < m;
    }
}


or


