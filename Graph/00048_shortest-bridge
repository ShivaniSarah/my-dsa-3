https://leetcode.com/problems/shortest-bridge/description/


934. Shortest Bridge
Solved
Medium
Topics
Companies
You are given an n x n binary matrix grid where 1 represents land and 0 represents water.

An island is a 4-directionally connected group of 1's not connected to any other 1's. There are exactly two islands in grid.

You may change 0's to 1's to connect the two islands to form one island.

Return the smallest number of 0's you must flip to connect the two islands.

 

Example 1:

Input: grid = [[0,1],[1,0]]
Output: 1
Example 2:

Input: grid = [[0,1,0],[0,0,0],[0,0,1]]
Output: 2
Example 3:

Input: grid = [[1,1,1,1,1],[1,0,0,0,1],[1,0,1,0,1],[1,0,0,0,1],[1,1,1,1,1]]
Output: 1
 

Constraints:

n == grid.length == grid[i].length
2 <= n <= 100
grid[i][j] is either 0 or 1.
There are exactly two islands in grid.






 #java



class Solution {
  public int shortestBridge(int[][] grid) {
    markGridTwo(grid);

    for (int color = 2;; ++color)
      for (int i = 0; i < grid.length; ++i)
        for (int j = 0; j < grid[0].length; ++j)
          if (grid[i][j] == color)
            if (expand(grid, i + 1, j, color) || expand(grid, i - 1, j, color) ||
                expand(grid, i, j + 1, color) || expand(grid, i, j - 1, color))
              return color - 2;
  }

  // Marks one group to 2s by DFS.
  private void markGridTwo(int[][] grid) {
    for (int i = 0; i < grid.length; ++i)
      for (int j = 0; j < grid[0].length; ++j)
        if (grid[i][j] == 1) {
          markGridTwo(grid, i, j);
          return;
        }
  }

  private void markGridTwo(int[][] grid, int i, int j) {
    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
      return;
    if (grid[i][j] != 1)
      return;
    grid[i][j] = 2;
    markGridTwo(grid, i + 1, j);
    markGridTwo(grid, i - 1, j);
    markGridTwo(grid, i, j + 1);
    markGridTwo(grid, i, j - 1);
  }

  // Returns true if we touch 1s' group through expanding.
  private boolean expand(int[][] grid, int i, int j, int color) {
    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
      return false;
    if (grid[i][j] == 0)
      grid[i][j] = color + 1;
    return grid[i][j] == 1;
  }
}



or


class Solution {
  public int shortestBridge(int[][] grid) {
    final int[][] DIRS = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};
    final int n = grid.length;
    Queue<Pair<Integer, Integer>> q = new ArrayDeque<>();

    markGridTwo(grid, q);

    for (int ans = 0; !q.isEmpty(); ++ans)
      for (int sz = q.size(); sz > 0; --sz) {
        final int i = q.peek().getKey();
        final int j = q.poll().getValue();
        for (int[] dir : DIRS) {
          final int x = i + dir[0];
          final int y = j + dir[1];
          if (x < 0 || x == n || y < 0 || y == n)
            continue;
          if (grid[x][y] == 2)
            continue;
          if (grid[x][y] == 1)
            return ans;
          grid[x][y] = 2;
          q.offer(new Pair<>(x, y));
        }
      }

    throw new IllegalArgumentException();
  }

  // Marks one group to 2s by DFS.
  private void markGridTwo(int[][] grid, Queue<Pair<Integer, Integer>> q) {
    for (int i = 0; i < grid.length; ++i)
      for (int j = 0; j < grid[0].length; ++j)
        if (grid[i][j] == 1) {
          markGridTwo(grid, i, j, q);
          return;
        }
  }

  // Marks one group to 2s by DFS and pushes them to the queue.
  private void markGridTwo(int[][] grid, int i, int j, Queue<Pair<Integer, Integer>> q) {
    if (i < 0 || i == grid.length || j < 0 || j == grid[0].length)
      return;
    if (grid[i][j] != 1)
      return;
    grid[i][j] = 2;
    q.offer(new Pair<>(i, j));
    markGridTwo(grid, i + 1, j, q);
    markGridTwo(grid, i - 1, j, q);
    markGridTwo(grid, i, j + 1, q);
    markGridTwo(grid, i, j - 1, q);
  }
}



or


class Solution {
    private int[] dirs = {-1, 0, 1, 0, -1};
    private Deque<int[]> q = new ArrayDeque<>();
    private int[][] grid;
    private int n;

    public int shortestBridge(int[][] grid) {
        this.grid = grid;
        n = grid.length;
        for (int i = 0, x = 1; i < n && x == 1; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    dfs(i, j);
                    x = 0;
                    break;
                }
            }
        }
        int ans = 0;
        while (true) {
            for (int i = q.size(); i > 0; --i) {
                var p = q.pollFirst();
                for (int k = 0; k < 4; ++k) {
                    int x = p[0] + dirs[k], y = p[1] + dirs[k + 1];
                    if (x >= 0 && x < n && y >= 0 && y < n) {
                        if (grid[x][y] == 1) {
                            return ans;
                        }
                        if (grid[x][y] == 0) {
                            grid[x][y] = 2;
                            q.offer(new int[] {x, y});
                        }
                    }
                }
            }
            ++ans;
        }
    }

    private void dfs(int i, int j) {
        grid[i][j] = 2;
        q.offer(new int[] {i, j});
        for (int k = 0; k < 4; ++k) {
            int x = i + dirs[k], y = j + dirs[k + 1];
            if (x >= 0 && x < n && y >= 0 && y < n && grid[x][y] == 1) {
                dfs(x, y);
            }
        }
    }
}


or


class Solution {

    private List<int[]> bfsQueue;

    // Recursively check the neighboring land cell of current cell grid[x][y] and add all
    // land cells of island A to bfsQueue.
    private void dfs(int[][] grid, int x, int y, int n) {
        grid[x][y] = 2;
        bfsQueue.add(new int[] { x, y });
        for (int[] pair : new int[][] {
            { x + 1, y },
            { x - 1, y },
            { x, y + 1 },
            { x, y - 1 },
        }) {
            int curX = pair[0], curY = pair[1];
            if (
                0 <= curX &&
                curX < n &&
                0 <= curY &&
                curY < n &&
                grid[curX][curY] == 1
            ) {
                dfs(grid, curX, curY, n);
            }
        }
    }

    // Find any land cell, and we treat it as a cell of island A.
    public int shortestBridge(int[][] grid) {
        int n = grid.length;
        int firstX = -1, firstY = -1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    firstX = i;
                    firstY = j;
                    break;
                }
            }
        }

        // Add all land cells of island A to bfsQueue.
        bfsQueue = new ArrayList<>();
        dfs(grid, firstX, firstY, n);

        int distance = 0;
        while (!bfsQueue.isEmpty()) {
            List<int[]> newBfs = new ArrayList<>();
            for (int[] pair : bfsQueue) {
                int x = pair[0], y = pair[1];
                for (int[] nextPair : new int[][] {
                    { x + 1, y },
                    { x - 1, y },
                    { x, y + 1 },
                    { x, y - 1 },
                }) {
                    int curX = nextPair[0], curY = nextPair[1];
                    if (0 <= curX && curX < n && 0 <= curY && curY < n) {
                        if (grid[curX][curY] == 1) {
                            return distance;
                        } else if (grid[curX][curY] == 0) {
                            newBfs.add(nextPair);
                            grid[curX][curY] = -1;
                        }
                    }
                }
            }

            // Once we finish one round without finding land cells of island B, we will
            // start the next round on all water cells that are 1 cell further away from
            // island A and increment the distance by 1.
            bfsQueue = newBfs;
            distance++;
        }

        return distance;
    }
}


or


class Solution {

    public int shortestBridge(int[][] grid) {
        int n = grid.length;
        int firstX = -1, firstY = -1;

        // Find any land cell, and we treat it as a cell of island A.
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (grid[i][j] == 1) {
                    firstX = i;
                    firstY = j;
                    break;
                }
            }
        }

        // bfsQueue for BFS on land cells of island A; secondBfsQueue for BFS on water cells.
        List<int[]> bfsQueue = new ArrayList<>();
        List<int[]> secondBfsQueue = new ArrayList<>();
        bfsQueue.add(new int[] { firstX, firstY });
        secondBfsQueue.add(new int[] { firstX, firstY });
        grid[firstX][firstY] = 2;

        // BFS for all land cells of island A and add them to secondBfsQueue.
        while (!bfsQueue.isEmpty()) {
            List<int[]> newBfs = new ArrayList<>();
            for (int[] cell : bfsQueue) {
                int x = cell[0];
                int y = cell[1];
                for (int[] next : new int[][] {
                    { x + 1, y },
                    { x - 1, y },
                    { x, y + 1 },
                    { x, y - 1 },
                }) {
                    int curX = next[0];
                    int curY = next[1];
                    if (
                        curX >= 0 &&
                        curX < n &&
                        curY >= 0 &&
                        curY < n &&
                        grid[curX][curY] == 1
                    ) {
                        newBfs.add(new int[] { curX, curY });
                        secondBfsQueue.add(new int[] { curX, curY });
                        grid[curX][curY] = 2;
                    }
                }
            }
            bfsQueue = newBfs;
        }

        int distance = 0;
        while (!secondBfsQueue.isEmpty()) {
            List<int[]> newBfs = new ArrayList<>();
            for (int[] cell : secondBfsQueue) {
                int x = cell[0];
                int y = cell[1];
                for (int[] next : new int[][] {
                    { x + 1, y },
                    { x - 1, y },
                    { x, y + 1 },
                    { x, y - 1 },
                }) {
                    int curX = next[0];
                    int curY = next[1];
                    if (curX >= 0 && curX < n && curY >= 0 && curY < n) {
                        if (grid[curX][curY] == 1) {
                            return distance;
                        } else if (grid[curX][curY] == 0) {
                            newBfs.add(new int[] { curX, curY });
                            grid[curX][curY] = -1;
                        }
                    }
                }
            }

            // Once we finish one round without finding land cells of island B, we will
            // start the next round on all water cells that are 1 cell further away from
            // island A and increment the distance by 1.
            secondBfsQueue = newBfs;
            distance++;
        }
        return distance;
    }
}


or


class Solution 
{
    public int shortestBridge(int[][] grid) 
    {
        Queue<int[]> q= new LinkedList<>();
        boolean flag= false;
        for(int i= 0; i< grid.length; i++)
        {
            for(int j= 0; j< grid[0].length; j++)
            {
                if(grid[i][j] == 1)//finding one island cell, to traverse the whole component and add it to the Queue 
                {
                    dfs(grid, i, j, q);//Connected island cells 
                    flag= true;
                    break;
                }
            }
            if(flag == true)break;
        }
        
        return findNearestIslandBFS(grid, q);
    }
    
    private void dfs(int[][] grid, int i, int j, Queue<int[]> q)
    {//Preorder DFS is used to add the sub-land of island into the queue
        if(i < 0 || i >= grid.length || j < 0 || j >= grid[0].length || grid[i][j] == -1 || grid[i][j] == 0)
            return;//base case 1)index out of  bound 2)not visiting the visited node  3)not visiting the water cell 
        
        grid[i][j]= -1;//marking the node as visited, so that we don't traverse the node again 
        q.offer(new int[]{i, j});//adding the sub-land of the island into the Queue 
        
        //CSS Border Order
        dfs(grid, i-1, j, q);//Top
        dfs(grid, i, j+1, q);//Right
        dfs(grid, i+1, j, q);//Bottom 
        dfs(grid, i, j-1, q);//Left
        
        return;
    }
    
    private int findNearestIslandBFS(int[][] grid, Queue<int[]> q)
    {//BFS finds the shortest path length between the two points, so we use here to find the minimum distance between two point of island //Top to Bottom Approach //Multiple Variate BFS 
        int[][] trav= {{-1,0},{0,1},{1,0},{0,-1}};//Traversing in 4 Direction 
        
        int level= 0;//current level//source starting island level 
        
        while(!q.isEmpty())
        {
            int size= q.size();//Level popping constraint 
            while(size-- > 0)//Radially traversing breadth wise 
            {
                int []temp= q.poll();//polling the current node 
                for(int []dirc: trav)
                {
                    //new co-ordinate 
                    int i_= temp[0]+ dirc[0];
                    int j_= temp[1]+ dirc[1];
                    if(i_ >= grid.length || i_ < 0 || j_ >= grid[0].length || j_ < 0 || grid[i_][j_] == -1)
                        continue;//base case 1)index out of bound 2)not visiting the visited node again 
                    
                    if(grid[i_][j_] == 1)//when we find a island cell, we return the current level(n-1)
                        return level;//previous level of the destination level//0 1 2 ... (n-1) n, [1 -> n-1] swap required//returning the n-1 level //n -> level of the destination level, 0 -> source starting island level
                    
                    else
                    {//water cell case, we are adding it to the next level of the queue, to expand the search and to find the min path length between two island
                        grid[i_][j_]= -1;//marking it as visited, so that we dont traverse it again 
                        q.offer(new int[]{i_, j_});//adding the the water cell into the Queue 
                    }
                }
            }
            level+= 1;//increasing the level 
        }
        return -1;//base case
    }
}//Please do Upvote, it helps a lot 



or


class Solution {
    int row, col;
    public int shortestBridge(int[][] a) {
        row = a.length;
        col = a[0].length;
        Queue<int[]> q = new LinkedList();
        for (int i = 0; i < row && q.isEmpty(); i++) {
            for (int j = 0; j < col && q.isEmpty(); j++) {
                if (a[i][j]==1) dfs(i, j, q, a);
            }
        }
        int[][] dirs = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        while (q.isEmpty()==false) {
            int[] cur = q.poll();
            for (int[] dir : dirs) {
                int i = cur[0] + dir[0], j = cur[1] + dir[1];
                if (i < 0 || i == row || j < 0 || j == col || a[i][j]==-1) continue;
                if (a[i][j]==1) return cur[2];
                a[i][j] = -1;
                q.add(new int[]{i, j, cur[2]+1});//increase distance
            }
        }
        return -1;
    }
    public void dfs(int i, int j, Queue<int[]> q, int[][] a) {
        if (i < 0 || i == row || j < 0 || j == col || a[i][j]!=1) return;
        //a value is 1
        a[i][j] = -1;
        q.add(new int[]{i, j, 0});//0 distance travelled
        dfs(i+1, j, q, a);
        dfs(i-1, j, q, a);
        dfs(i, j+1, q, a);
        dfs(i, j-1, q, a);
    }
}


or


