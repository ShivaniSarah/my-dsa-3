https://leetcode.com/problems/check-if-there-is-a-valid-path-in-a-grid/description/

1391. Check if There is a Valid Path in a Grid
Medium
Topics
Companies
Hint
You are given an m x n grid. Each cell of grid represents a street. The street of grid[i][j] can be:

1 which means a street connecting the left cell and the right cell.
2 which means a street connecting the upper cell and the lower cell.
3 which means a street connecting the left cell and the lower cell.
4 which means a street connecting the right cell and the lower cell.
5 which means a street connecting the left cell and the upper cell.
6 which means a street connecting the right cell and the upper cell.

You will initially start at the street of the upper-left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1). The path should only follow the streets.

Notice that you are not allowed to change any street.

Return true if there is a valid path in the grid or false otherwise.

 

Example 1:


Input: grid = [[2,4,3],[6,5,2]]
Output: true
Explanation: As shown you can start at cell (0, 0) and visit all the cells of the grid to reach (m - 1, n - 1).
Example 2:


Input: grid = [[1,2,1],[1,2,1]]
Output: false
Explanation: As shown you the street at cell (0, 0) is not connected with any street of any other cell and you will get stuck at cell (0, 0)
Example 3:

Input: grid = [[1,1,2]]
Output: false
Explanation: You will get stuck at cell (0, 1) and you cannot reach cell (0, 2).
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 300
1 <= grid[i][j] <= 6



# java


class Solution {
  public boolean hasValidPath(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    // g := upscaled grid
    boolean[][] g = new boolean[m * 3][n * 3];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        switch (grid[i][j]) {
          case 1:
            g[i * 3 + 1][j * 3 + 0] = true;
            g[i * 3 + 1][j * 3 + 1] = true;
            g[i * 3 + 1][j * 3 + 2] = true;
            break;
          case 2:
            g[i * 3 + 0][j * 3 + 1] = true;
            g[i * 3 + 1][j * 3 + 1] = true;
            g[i * 3 + 2][j * 3 + 1] = true;
            break;
          case 3:
            g[i * 3 + 1][j * 3 + 0] = true;
            g[i * 3 + 1][j * 3 + 1] = true;
            g[i * 3 + 2][j * 3 + 1] = true;
            break;
          case 4:
            g[i * 3 + 1][j * 3 + 1] = true;
            g[i * 3 + 1][j * 3 + 2] = true;
            g[i * 3 + 2][j * 3 + 1] = true;
            break;
          case 5:
            g[i * 3 + 0][j * 3 + 1] = true;
            g[i * 3 + 1][j * 3 + 0] = true;
            g[i * 3 + 1][j * 3 + 1] = true;
            break;
          case 6:
            g[i * 3 + 0][j * 3 + 1] = true;
            g[i * 3 + 1][j * 3 + 1] = true;
            g[i * 3 + 1][j * 3 + 2] = true;
            break;
        }

    return dfs(g, 1, 1);
  }

  private boolean dfs(boolean[][] g, int i, int j) {
    if (i < 0 || i == g.length || j < 0 || j == g[0].length)
      return false;
    if (!g[i][j]) // There's no path here.
      return false;
    if (i == g.length - 2 && j == g[0].length - 2)
      return true;

    g[i][j] = false; // Mark as visited.
    return dfs(g, i + 1, j) || dfs(g, i - 1, j) || dfs(g, i, j + 1) || dfs(g, i, j - 1);
  }
}


or


class Solution {
    private int[] p;
    private int[][] grid;
    private int m;
    private int n;

    public boolean hasValidPath(int[][] grid) {
        this.grid = grid;
        m = grid.length;
        n = grid[0].length;
        p = new int[m * n];
        for (int i = 0; i < p.length; ++i) {
            p[i] = i;
        }
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                int e = grid[i][j];
                if (e == 1) {
                    left(i, j);
                    right(i, j);
                } else if (e == 2) {
                    up(i, j);
                    down(i, j);
                } else if (e == 3) {
                    left(i, j);
                    down(i, j);
                } else if (e == 4) {
                    right(i, j);
                    down(i, j);
                } else if (e == 5) {
                    left(i, j);
                    up(i, j);
                } else {
                    right(i, j);
                    up(i, j);
                }
            }
        }
        return find(0) == find(m * n - 1);
    }

    private int find(int x) {
        if (p[x] != x) {
            p[x] = find(p[x]);
        }
        return p[x];
    }

    private void left(int i, int j) {
        if (j > 0 && (grid[i][j - 1] == 1 || grid[i][j - 1] == 4 || grid[i][j - 1] == 6)) {
            p[find(i * n + j)] = find(i * n + j - 1);
        }
    }

    private void right(int i, int j) {
        if (j < n - 1 && (grid[i][j + 1] == 1 || grid[i][j + 1] == 3 || grid[i][j + 1] == 5)) {
            p[find(i * n + j)] = find(i * n + j + 1);
        }
    }

    private void up(int i, int j) {
        if (i > 0 && (grid[i - 1][j] == 2 || grid[i - 1][j] == 3 || grid[i - 1][j] == 4)) {
            p[find(i * n + j)] = find((i - 1) * n + j);
        }
    }

    private void down(int i, int j) {
        if (i < m - 1 && (grid[i + 1][j] == 2 || grid[i + 1][j] == 5 || grid[i + 1][j] == 6)) {
            p[find(i * n + j)] = find((i + 1) * n + j);
        }
    }
}


or


class Solution {
    public boolean hasValidPath(int[][] grid) {
        int m=grid.length, n=grid[0].length;
        int[][] visited=new int[m][n];
        return dfs(grid, 0, 0, m, n, visited);
    }
    public boolean dfs(int[][] grid, int i, int j, int m, int n, int[][] visited){
        if(i==m-1 && j==n-1) return true;
        if(i<0 || i>=m || j<0 || j>=n || visited[i][j]==1) return false;
        visited[i][j]=1;
        if(grid[i][j]==1){
            if( (j>0 && (grid[i][j-1]==1 || grid[i][j-1]==4 || grid[i][j-1]==6) && dfs(grid, i, j-1, m, n, visited)) || 
			    (j<n-1 && (grid[i][j+1]==1 || grid[i][j+1]==3 || grid[i][j+1]==5 ) && dfs(grid, i, j+1, m, n, visited) )) return true;
        }else if(grid[i][j]==2){
            if( (i<m-1 && (grid[i+1][j]==2 || grid[i+1][j]==5 || grid[i+1][j]==6) && dfs(grid, i+1, j, m, n, visited)) || 
                (i>0 && (grid[i-1][j]==2 || grid[i-1][j]==3 || grid[i-1][j]==4) && dfs(grid, i-1, j, m, n, visited))) return true;
        }else if(grid[i][j]==3){
            if( (j>0 && (grid[i][j-1]==1 || grid[i][j-1]==4 || grid[i][j-1]==6) && dfs(grid, i, j-1, m, n, visited)) || 
			    (i<m-1 && (grid[i+1][j]==2 || grid[i+1][j]==5 || grid[i+1][j]==6) && dfs(grid, i+1, j, m, n, visited))) return true;
        }else if(grid[i][j]==4){
            if( ((i<m-1 && (grid[i+1][j]==2 || grid[i+1][j]==5 || grid[i+1][j]==6)) && dfs(grid, i+1, j, m, n, visited)) || 
			    (j<n-1 && (grid[i][j+1]==1 || grid[i][j+1]==3 || grid[i][j+1]==5) && dfs(grid, i, j+1, m, n, visited))) return true;
        }else if(grid[i][j]==5){
            if( (j>0 && (grid[i][j-1]==1 || grid[i][j-1]==4 || grid[i][j-1]==6) && dfs(grid, i, j-1, m, n, visited)) || 
			    (i>0 && (grid[i-1][j]==2 || grid[i-1][j]==3 || grid[i-1][j]==4) && dfs(grid, i-1, j, m, n, visited))) return true;
        }else{
            if( (i>0 && (grid[i-1][j]==2 || grid[i-1][j]==3 || grid[i-1][j]==4) && dfs(grid, i-1, j, m, n, visited)) || 
			    (j<n-1 && (grid[i][j+1]==1 || grid[i][j+1]==3 || grid[i][j+1]==5) && dfs(grid, i, j+1, m, n, visited))) return true;
        }
        return false;
    }
}


or


class Solution {
    int[][][] dirs = {
                {{0, -1}, {0, 1}},
                {{-1, 0}, {1, 0}},
                {{0, -1}, {1, 0}},
                {{0, 1}, {1, 0}},
                {{0, -1}, {-1, 0}},
                {{0, 1}, {-1, 0}}
    };

    private class Cell {
        int x;
        int y;

        public Cell(int x, int y) {
            this.x = x;
            this.y = y;
        }
    }

    public boolean hasValidPath(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;

        boolean[][] visited = new boolean[m][n];
        Queue<Cell> queue = new LinkedList<>();
        queue.offer(new Cell(0, 0));
        visited[0][0] = true;

        while (!queue.isEmpty()) {
            Cell curr = queue.poll();
            int x = curr.x;
            int y = curr.y;

            for (int[] dir : dirs[grid[x][y] - 1]) {
                int i = x + dir[0];
                int j = y + dir[1];

                // Travel to the adjacent cell and come back to ensure both directions are the same
                if (isValidPosition(i, j, m, n) && !visited[i][j]) {
                    for (int[] backDir : dirs[grid[i][j] - 1]) {
                        if (i + backDir[0] == x && j + backDir[1] == y) {
                            visited[i][j] = true;
                            queue.offer(new Cell(i, j));
                        }
                    }
                }
            }
        }   

        return visited[m - 1][n - 1];
    }

    private boolean isValidPosition(int x, int y, int m, int n) {
        return x >= 0 && x < m && y >= 0 && y < n;
    }
}



or



class Solution {
    
    // can we go up
    boolean isUp(int val)
    {
        return val == 2 || val == 5 || val == 6;
    }
    //can we go left
    boolean isLeft(int val)
    {
        return val == 1 || val == 3 || val == 5;
    }
    //can we go down
    boolean isDown(int val)
    {
        return val == 2 || val == 3 || val == 4;
    }
    //can we go right
    boolean isRight(int val)
    {
        return val == 1 || val == 4 || val == 6;
    }
    
    boolean isPath(int[][] grid, int x, int y, 
                   int m, int n, char sign)
    {
        if(!(x<m && x>=0 && y<n && y>=0 && grid[x][y] != -1))
            return  false;
        
        if(!(x==0 && y==0))
        {
              if(sign == 'U' && !isDown(grid[x][y]))
                  return false;
              else if(sign == 'L' && !isRight(grid[x][y]))
                  return false;
              else if(sign == 'D' && !isUp(grid[x][y]))
                  return false;
              else if(sign == 'R' && !isLeft(grid[x][y]))
                  return false;
        }
        
        //check if destination cell reached
        if(x==m-1 && y==n-1)
            return true;
        
        
        int val = grid[x][y];
        grid[x][y] = -1;
      
        if(isUp(val) && isPath(grid, x-1, y, m, n, 'U'))
            return true;
        if(isLeft(val) && isPath(grid, x, y-1, m, n, 'L'))
            return true;
        if(isDown(val) && isPath(grid, x+1, y, m, n, 'D'))
            return true;
        if(isRight(val) && isPath(grid, x, y+1, m, n, 'R'))
            return true;
        
        grid[x][y] = val;
        
        return false;
    }
    
    public boolean hasValidPath(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
           
        return isPath(grid, 0, 0, m, n, '0');
    }
}


