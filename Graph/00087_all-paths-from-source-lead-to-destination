https://leetcode.com/problems/all-paths-from-source-lead-to-destination/description/



1059. All Paths from Source Lead to Destination
Description
Given the edges of a directed graph where edges[i] = [ai, bi] indicates there is an edge between nodes ai and bi, and two nodes source and destination of this graph, determine whether or not all paths starting from source eventually, end at destination, that is:

At least one path exists from the source node to the destination node
If a path exists from the source node to a node with no outgoing edges, then that node is equal to destination.
The number of possible paths from source to destination is a finite number.
Return true if and only if all roads from source lead to destination.

 

Example 1:



Input: n = 3, edges = [[0,1],[0,2]], source = 0, destination = 2
Output: false
Explanation: It is possible to reach and get stuck on both node 1 and node 2.
Example 2:



Input: n = 4, edges = [[0,1],[0,3],[1,2],[2,1]], source = 0, destination = 3
Output: false
Explanation: We have two possibilities: to end at node 3, or to loop over node 1 and node 2 indefinitely.
Example 3:



Input: n = 4, edges = [[0,1],[0,2],[1,3],[2,3]], source = 0, destination = 3
Output: true
 

Constraints:

1 <= n <= 104
0 <= edges.length <= 104
edges.length == 2
0 <= ai, bi <= n - 1
0 <= source <= n - 1
0 <= destination <= n - 1
The given graph may have self-loops and parallel edges.



# java



enum State { INIT, VISITING, VISITED }

class Solution {
  public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
    List<Integer>[] graph = new List[n];
    State[] states = new State[n];

    for (int i = 0; i < n; ++i)
      graph[i] = new ArrayList<>();

    for (int[] edge : edges) {
      final int u = edge[0];
      final int v = edge[1];
      graph[u].add(v);
    }

    return acyclic(graph, source, destination, states);
  }

  private boolean acyclic(List<Integer>[] graph, int u, int dest, State[] states) {
    if (graph[u].isEmpty())
      return u == dest;
    if (states[u] == State.VISITING)
      return false;
    if (states[u] == State.VISITED)
      return true;

    states[u] = State.VISITING;
    for (final int v : graph[u])
      if (!acyclic(graph, v, dest, states))
        return false;
    states[u] = State.VISITED;

    return true;
  }
}




or





class Solution {
    private List<Integer>[] g;
    private int[] f;
    private boolean[] vis;
    private int k;

    public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
        vis = new boolean[n];
        g = new List[n];
        k = destination;
        f = new int[n];
        Arrays.setAll(g, key -> new ArrayList<>());
        for (var e : edges) {
            g[e[0]].add(e[1]);
        }
        return dfs(source);
    }

    private boolean dfs(int i) {
        if (i == k) {
            return g[i].isEmpty();
        }
        if (f[i] != 0) {
            return f[i] == 1;
        }
        if (vis[i] || g[i].isEmpty()) {
            return false;
        }
        vis[i] = true;
        for (int j : g[i]) {
            if (!dfs(j)) {
                f[i] = -1;
                return false;
            }
        }
        f[i] = 1;
        return true;
    }
}

//////

public class All_Paths_from_Source_Lead_to_Destination {

    class Solution_bfs {
        public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
            Set<Integer>[] graph = new Set[n]; // node => set of its next nodes

            for (int i = 0; i < n; i++) {
                graph[i] = new HashSet<Integer>();
            }

            int[] inDegrees = new int[n];
            for (int[] edge : edges) {
                graph[edge[0]].add(edge[1]);
                inDegrees[edge[1]]++;
            }

            LinkedList<Integer> q = new LinkedList<Integer>();
            q.add(source);

            while (!q.isEmpty()) {
                int cur = q.poll();
                if (graph[cur].size() == 0 && cur != destination) {
                    return false;
                }

                for (int nei : graph[cur]) {
                    if (inDegrees[nei] < 0) { // i.e. a cycle
                        return false;
                    }

                    inDegrees[nei]--;

                    q.add(nei);
                }
            }

            return true;
        }
    }

    class Solution_dfs {
        public boolean leadsToDestination(int n, int[][] edges, int source, int destination) {
            Map<Integer, Set<Integer>> graph = new HashMap<>();
            for (int[] edge : edges) {
                Set<Integer> neighbours = graph.getOrDefault(edge[0], new HashSet<>());
                neighbours.add(edge[1]);
                graph.put(edge[0], neighbours);
            }
            if (graph.get(destination) != null) return false;
            boolean[] isVisited = new boolean[n];
            isVisited[source] = true;
            return dfs(graph, isVisited, source, destination);
        }

        private boolean dfs(Map<Integer, Set<Integer>> graph, boolean[] isVisited, int source, int destination) {
            if (source == destination) {
                return true;
            }

            Set<Integer> neighbours = graph.getOrDefault(source, new HashSet<>());
            if (neighbours.size() == 0) return false;
            for (int neib : neighbours) {

                if (isVisited[neib]) return false; // cycle spotted

                isVisited[neib] = true;
                if (!dfs(graph, isVisited, neib, destination)) return false;
                isVisited[neib] = false;
            }
            return true;
        }
    }
}




