https://leetcode.com/problems/subsequence-of-size-k-with-the-largest-even-sum/description/

2098. Subsequence of Size K With the Largest Even Sum
Description
You are given an integer array nums and an integer k. Find the largest even sum of any subsequence of nums that has a length of k.

Return this sum, or -1 if such a sum does not exist.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

 

Example 1:

Input: nums = [4,1,5,3,1], k = 3
Output: 12
Explanation:
The subsequence with the largest possible even sum is [4,5,3]. It has a sum of 4 + 5 + 3 = 12.
Example 2:

Input: nums = [4,6,2], k = 3
Output: 12
Explanation:
The subsequence with the largest possible even sum is [4,6,2]. It has a sum of 4 + 6 + 2 = 12.
Example 3:

Input: nums = [1,3,5], k = 1
Output: -1
Explanation:
No subsequence of nums with length 1 has an even sum.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105
1 <= k <= nums.length


# java


class Solution {
  public long largestEvenSum(int[] nums, int k) {
    Arrays.sort(nums);

    long sum = 0;
    int minOdd = -1;
    int minEven = -1;
    int maxOdd = -1;
    int maxEven = -1;

    for (int i = nums.length - 1; i + k >= nums.length; --i) {
      sum += nums[i];
      if (nums[i] % 2 == 1)
        minOdd = nums[i];
      else
        minEven = nums[i];
    }

    if (sum % 2 == 0)
      return sum;

    for (int i = 0; i + k < nums.length; ++i)
      if (nums[i] % 2 == 1)
        maxOdd = nums[i];
      else
        maxEven = nums[i];

    long ans = -1;

    if (maxEven >= 0 && minOdd >= 0)
      ans = Math.max(ans, sum + maxEven - minOdd);
    if (maxOdd >= 0 && minEven >= 0)
      ans = Math.max(ans, sum + maxOdd - minEven);
    return ans;
  }
}


or


class Solution {
    public long largestEvenSum(int[] nums, int k) {
        Arrays.sort(nums);
        long ans = 0;
        int n = nums.length;
        for (int i = 0; i < k; ++i) {
            ans += nums[n - i - 1];
        }
        if (ans % 2 == 0) {
            return ans;
        }
        final int inf = 1 << 29;
        int mx1 = -inf, mx2 = -inf;
        for (int i = 0; i < n - k; ++i) {
            if (nums[i] % 2 == 1) {
                mx1 = nums[i];
            } else {
                mx2 = nums[i];
            }
        }
        int mi1 = inf, mi2 = inf;
        for (int i = n - 1; i >= n - k; --i) {
            if (nums[i] % 2 == 1) {
                mi2 = nums[i];
            } else {
                mi1 = nums[i];
            }
        }
        ans = Math.max(-1, Math.max(ans - mi1 + mx1, ans - mi2 + mx2));
        return ans % 2 != 0 ? -1 : ans;
    }
}

