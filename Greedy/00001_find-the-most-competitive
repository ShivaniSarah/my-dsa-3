https://leetcode.com/problems/find-the-most-competitive-subsequence/description/

1673. Find the Most Competitive Subsequence
Medium
Topics
Companies
Hint
Given an integer array nums and a positive integer k, return the most competitive subsequence of nums of size k.

An array's subsequence is a resulting sequence obtained by erasing some (possibly zero) elements from the array.

We define that a subsequence a is more competitive than a subsequence b (of the same length) if in the first position where a and b differ, subsequence a has a number less than the corresponding number in b. For example, [1,3,4] is more competitive than [1,3,5] because the first position they differ is at the final number, and 4 is less than 5.

 

Example 1:

Input: nums = [3,5,2,6], k = 2
Output: [2,6]
Explanation: Among the set of every possible subsequence: {[3,5], [3,2], [3,6], [5,2], [5,6], [2,6]}, [2,6] is the most competitive.
Example 2:

Input: nums = [2,4,3,3,5,4,9,6], k = 4
Output: [2,3,3,4]
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
1 <= k <= nums.length


# java


// TC-o(n)- Monotonously increasing stack
class Solution {
    public int[] mostCompetitive(int[] nums, int k) {
        int n=nums.length;
        Stack<Integer> st=new Stack<>();
        int[] res=new int[k];
        int rem=n-k;
        for(int i=0;i<n;i++){
            while(!st.isEmpty() && st.peek()>nums[i] && rem>0){
                st.pop();
                rem--;
            }
            st.push(nums[i]);
            
        }
        while(rem>0){
            st.pop();
            rem--;
        }
        for(int i=k-1;i>=0;i--){
            res[i]=st.pop();
        }
        return res;
    }
}

or

class Solution {
    public int[] mostCompetitive(int[] nums, int k) {
        int[] stack = new int[k];
        for(int i=0,j=0;i<nums.length;i++) {
          while(j>0 && stack[j-1]>nums[i] && j+nums.length-i>k) {
              j--;
          }
          if(j<k) {
              stack[j++]=nums[i];
          }
        }
        return stack;
    }
}


or


class Solution {
     public int[] mostCompetitive(int[] nums, int k) {
        int[] op = new int[k];
        Deque<Integer> stack = new LinkedList<>();
        for(int i=0;i<nums.length;i++) {
            while(!stack.isEmpty() && nums[stack.peek()]>nums[i] && nums.length-i+stack.size()>k) {
                stack.pop();
            }
            if(stack.size()<k) {
                stack.push(i);            
            }
        }
        for(int i=k-1;i>=0;i--) {
             op[i]=nums[stack.pop()];
        }
        return op;
    }
}


or


class Solution {
    public int[] mostCompetitive(int[] N, int K) {
        int len = N.length;
        int moves = len - K;
        for (int i = 0, j = 1; j < len;) {
            while (moves > 0 && i >= 0 && N[j] < N[i]) {
                i--;
                moves--;
            }
            N[++i] = N[j++];
        }
        return Arrays.copyOfRange(N,0,K);
    }
}
