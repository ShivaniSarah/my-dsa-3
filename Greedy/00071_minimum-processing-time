https://leetcode.com/problems/minimum-processing-time/description/


2895. Minimum Processing Time
Medium
Topics
Companies
Hint
You have a certain number of processors, each having 4 cores. The number of tasks to be executed is four times the number of processors. Each task must be assigned to a unique core, and each core can only be used once.

You are given an array processorTime representing the time each processor becomes available and an array tasks representing how long each task takes to complete. Return the minimum time needed to complete all tasks.

 

Example 1:

Input: processorTime = [8,10], tasks = [2,2,3,1,8,7,4,5]

Output: 16

Explanation:

Assign the tasks at indices 4, 5, 6, 7 to the first processor which becomes available at time = 8, and the tasks at indices 0, 1, 2, 3 to the second processor which becomes available at time = 10. 

The time taken by the first processor to finish the execution of all tasks is max(8 + 8, 8 + 7, 8 + 4, 8 + 5) = 16.

The time taken by the second processor to finish the execution of all tasks is max(10 + 2, 10 + 2, 10 + 3, 10 + 1) = 13.

Example 2:

Input: processorTime = [10,20], tasks = [2,3,1,2,5,8,4,3]

Output: 23

Explanation:

Assign the tasks at indices 1, 4, 5, 6 to the first processor and the others to the second processor.

The time taken by the first processor to finish the execution of all tasks is max(10 + 3, 10 + 5, 10 + 8, 10 + 4) = 18.

The time taken by the second processor to finish the execution of all tasks is max(20 + 2, 20 + 1, 20 + 2, 20 + 3) = 23.

 

Constraints:

1 <= n == processorTime.length <= 25000
1 <= tasks.length <= 105
0 <= processorTime[i] <= 109
1 <= tasks[i] <= 109
tasks.length == 4 * n


# jva

class Solution {
  public int minProcessingTime(List<Integer> processorTime, List<Integer> tasks) {
    int ans = 0;
    Collections.sort(processorTime);
    Collections.sort(tasks, Collections.reverseOrder());

    // It's optimal to run each 4 longer tasks with a smaller processor time.
    // Therefore, for each processor, take the maximum of the sum of the
    // processor time and the largest assigned tasks[i].
    for (int i = 0; i < processorTime.size(); ++i)
      ans = Math.max(ans, processorTime.get(i) + tasks.get(i * 4));

    return ans;
  }
}


or


class Solution {
    public int minProcessingTime(List<Integer> processorTime, List<Integer> tasks) {
        processorTime.sort((a, b) -> a - b);
        tasks.sort((a, b) -> a - b);
        int ans = 0, i = tasks.size() - 1;
        for (int t : processorTime) {
            ans = Math.max(ans, t + tasks.get(i));
            i -= 4;
        }
        return ans;
    }
}


or


import java.util.Arrays;

public class Solution {
    public int minProcessingTime(int[] t, int[] v) {
        int n = v.length;
        Arrays.sort(t);
        Arrays.sort(v);
        int j = n - 1;
        int m = t.length;
        int ans = 0;
        for (int i = 0; i < m; i++) {
            int c = 0;
            while (c < 4) {
                ans = Math.max(ans, t[i] + v[j]);
                c++;
                j--;
            }
        }
        return ans;
    }
}


or


import java.util.Collections;
import java.util.List;

class Solution {
    public int minProcessingTime(List<Integer> processorTimes, List<Integer> taskTimes) {
        // Sort processorTimes in ascending order
        Collections.sort(processorTimes);
        
        // Sort taskTimes in descending order
        Collections.sort(taskTimes, Collections.reverseOrder());
        
        int processorIndex = 0, answer = 0;
        
        for (int processingTime : processorTimes) {
            int currentMax = 0, taskCount = 0;
            
            while (processorIndex < taskTimes.size() && taskCount < 4) {
                currentMax = Math.max(currentMax, processingTime + taskTimes.get(processorIndex));
                processorIndex++;
                taskCount++;
            }
            
            answer = Math.max(answer, currentMax);
        }
        
        return answer;
    }
}


or


class Solution {
    public int minProcessingTime(List<Integer> processorTime, List<Integer> tasks) {
        Collections.sort(processorTime);
        Collections.sort(tasks, Collections.reverseOrder());
        int time = 0;
        for(int i=0; i<tasks.size(); i++){
            int pTime = processorTime.get(i/4);
            int timeTaken = pTime + tasks.get(i);
            time = Math.max(timeTaken, time);
        }
        return time;
    }
}


or


