https://leetcode.com/problems/minimum-operations-to-make-the-array-alternating/description/


2170. Minimum Operations to Make the Array Alternating
Medium
Topics
Companies
Hint
You are given a 0-indexed array nums consisting of n positive integers.

The array nums is called alternating if:

nums[i - 2] == nums[i], where 2 <= i <= n - 1.
nums[i - 1] != nums[i], where 1 <= i <= n - 1.
In one operation, you can choose an index i and change nums[i] into any positive integer.

Return the minimum number of operations required to make the array alternating.

 

Example 1:

Input: nums = [3,1,3,2,4,3]
Output: 3
Explanation:
One way to make the array alternating is by converting it to [3,1,3,1,3,1].
The number of operations required in this case is 3.
It can be proven that it is not possible to make the array alternating in less than 3 operations. 
Example 2:

Input: nums = [1,2,2,2,2]
Output: 2
Explanation:
One way to make the array alternating is by converting it to [1,2,1,2,1].
The number of operations required in this case is 2.
Note that the array cannot be converted to [2,2,2,2,2] because in this case nums[0] == nums[1] which violates the conditions of an alternating array.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105



# java


class T {
  public Map<Integer, Integer> count = new HashMap<>();
  public int mx = 0;
  public int secondMax = 0;
  public int maxFreq = 0;
  public int secondMaxFreq = 0;
}

class Solution {
  public int minimumOperations(int[] nums) {
    T[] ts = new T[2];
    ts[0] = new T();
    ts[1] = new T();

    for (int i = 0; i < nums.length; ++i) {
      T t = ts[i % 2];
      t.count.merge(nums[i], 1, Integer::sum);
      final int freq = t.count.get(nums[i]);
      if (freq > t.maxFreq) {
        t.maxFreq = freq;
        t.mx = nums[i];
      } else if (freq > t.secondMaxFreq) {
        t.secondMaxFreq = freq;
        t.secondMax = nums[i];
      }
    }

    if (ts[0].mx == ts[1].mx)
      return nums.length -
          Math.max(ts[0].maxFreq + ts[1].secondMaxFreq, ts[1].maxFreq + ts[0].secondMaxFreq);
    return nums.length - (ts[0].maxFreq + ts[1].maxFreq);
  }
}



or



class Solution {
    private int[] nums;
    private int n;

    public int minimumOperations(int[] nums) {
        this.nums = nums;
        n = nums.length;
        int ans = Integer.MAX_VALUE;
        for (int[] e1 : get(0)) {
            for (int[] e2 : get(1)) {
                if (e1[0] != e2[0]) {
                    ans = Math.min(ans, n - (e1[1] + e2[1]));
                }
            }
        }
        return ans;
    }

    private int[][] get(int i) {
        Map<Integer, Integer> freq = new HashMap<>();
        for (; i < n; i += 2) {
            freq.put(nums[i], freq.getOrDefault(nums[i], 0) + 1);
        }
        int a = 0;
        int n1 = 0;
        int b = 0;
        int n2 = 0;
        for (Map.Entry<Integer, Integer> e : freq.entrySet()) {
            int k = e.getKey();
            int v = e.getValue();
            if (v > n1) {
                b = a;
                n2 = n1;
                a = k;
                n1 = v;
            } else if (v > n2) {
                b = k;
                n2 = v;
            }
        }
        return new int[][] { {a, n1}, {b, n2} };
    }
}



or



class Solution {
    public int minimumOperations(int[] nums) {
        int freq[][] = new int[100005][2];
        int i, j, k, ans=0;
        for(i = 0; i < nums.length; i++) {
    			freq[nums[i]][i&1]++;
    		}
    		
    		for(i = 1, j=k=0; i <= 100000; i++) {
			// Add the maximum frequency of odd indexes to maximum frequency even indexes 
		    //and vice versa, it will give us how many elements we don't need to change. 
    		ans = Math.max(ans, Math.max(freq[i][0] + k, freq[i][1] + j));
            j = Math.max(j, freq[i][0]);
            k = Math.max(k, freq[i][1]);
        }
        return nums.length - ans;
    }
}



or



class Solution {
    public int minimumOperations(int[] nums) {
        if (nums.length == 1) {
            return 0;
        }
        
        // Create frequency maps for both sections
        final Map<Integer, Integer> aFreq = new HashMap<>();
        final Map<Integer, Integer> bFreq = new HashMap<>();
        for (int i = 0; i < nums.length; i++) {
            int num = nums[i];
            if (i % 2 == 0) {
                aFreq.put(num, aFreq.getOrDefault(num, 0) + 1);
            } else {
                bFreq.put(num, bFreq.getOrDefault(num, 0) + 1);
            }
        }
        
        // Create PriorityQueues of the most frequent elements
        PriorityQueue<Integer> aQ = new PriorityQueue<>(10, (a,b) -> Integer.compare(aFreq.get(b), aFreq.get(a)));
        PriorityQueue<Integer> bQ = new PriorityQueue<>(10, (a,b) -> Integer.compare(bFreq.get(b), bFreq.get(a)));
        for (Map.Entry<Integer, Integer> e: aFreq.entrySet()) {
            aQ.offer(e.getKey());
        }
        for (Map.Entry<Integer, Integer> e: bFreq.entrySet()) {
            bQ.offer(e.getKey());
        }
        
        // Get maximums, check if they differ. If they do, check the secondmost frequent element
        int aMaxNum = aQ.poll();
        int aMaxFreq = aFreq.get(aMaxNum);
        int bMaxNum = bQ.poll();
        int bMaxFreq = bFreq.get(bMaxNum);
        if (aMaxNum != bMaxNum) {
            return nums.length - aMaxFreq - bMaxFreq;
        } else {
            int bSecondFreq = 0;
            int aSecondFreq = 0;
            if (!bQ.isEmpty()) {
                bSecondFreq = bFreq.get(bQ.poll());
            }
            if (!aQ.isEmpty()) {
                aSecondFreq = aFreq.get(aQ.poll());
            }
            return Math.min(nums.length - aMaxFreq - bSecondFreq, nums.length - bMaxFreq - aSecondFreq);
        }
    }
}



or

import static java.util.Collections.*;
import static java.lang.Math.*;
class Solution {
    public int minimumOperations(int[] nums) {
        HashMap<Integer, Integer> even = new HashMap<>(), odd = new HashMap<>();
        int n = nums.length, n1 = 0, n2 = 0;
        if(n == 1) return 0;
        for(int i = 0; i<nums.length; i++) 
            if(i%2 == 0) even.merge(nums[i], 1, Integer :: sum); 
            else odd.merge(nums[i], 1, Integer :: sum);
        List<int[]> a = new ArrayList<>(), b = new ArrayList<>();
        for(int i : even.keySet()) a.add(new int[]{i, even.get(i)});
        for(int i : odd.keySet()) b.add(new int[]{i, odd.get(i)});
        sort(a, (x, y) -> y[1] - x[1]);
        sort(b, (x, y) -> y[1] - x[1]);
        if(a.get(0)[0] != b.get(0)[0]) return n - a.get(0)[1] - b.get(0)[1];
        if(a.size() == 1 && b.size() == 1) return min(a.get(0)[1], b.get(0)[1]);
        if(a.size() == 1) return n - a.get(0)[1] - b.get(1)[1];
        if(b.size() == 1) return n - a.get(1)[1] - b.get(0)[1];
        return min(n - a.get(0)[1] - b.get(1)[1], n - a.get(1)[1] - b.get(0)[1]);
    }
}



