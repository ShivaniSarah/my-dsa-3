https://leetcode.com/problems/steps-to-make-array-non-decreasing/description/


2289. Steps to Make Array Non-decreasing
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums. In one step, remove all elements nums[i] where nums[i - 1] > nums[i] for all 0 < i < nums.length.

Return the number of steps performed until nums becomes a non-decreasing array.

 

Example 1:

Input: nums = [5,3,4,4,7,3,6,11,8,5,11]
Output: 3
Explanation: The following are the steps performed:
- Step 1: [5,3,4,4,7,3,6,11,8,5,11] becomes [5,4,4,7,6,11,11]
- Step 2: [5,4,4,7,6,11,11] becomes [5,4,7,11,11]
- Step 3: [5,4,7,11,11] becomes [5,7,11,11]
[5,7,11,11] is a non-decreasing array. Therefore, we return 3.
Example 2:

Input: nums = [4,5,7,7,13]
Output: 0
Explanation: nums is already a non-decreasing array. Therefore, we return 0.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109



 #java

class Solution {
  public int totalSteps(int[] nums) {
    // dp[i] := the number of steps to remove nums[i]
    int[] dp = new int[nums.length];
    Deque<Integer> stack = new ArrayDeque<>();

    for (int i = 0; i < nums.length; ++i) {
      int step = 1;
      while (!stack.isEmpty() && nums[stack.peek()] <= nums[i])
        step = Math.max(step, dp[stack.pop()] + 1);
      if (!stack.isEmpty())
        dp[i] = step;
      stack.push(i);
    }

    return Arrays.stream(dp).max().getAsInt();
  }
}


or


class Solution {
    public int totalSteps(int[] nums) {
        Deque<Integer> stk = new ArrayDeque<>();
        int ans = 0;
        int n = nums.length;
        int[] dp = new int[n];
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.isEmpty() && nums[i] > nums[stk.peek()]) {
                dp[i] = Math.max(dp[i] + 1, dp[stk.pop()]);
                ans = Math.max(ans, dp[i]);
            }
            stk.push(i);
        }
        return ans;
    }
}

or


class Solution {
        public int totalSteps(int[] A) {
        int n = A.length, res = 0, j = -1;
        int dp[] = new int[n], stack[] = new int[n];
        for (int i = n - 1; i >= 0; --i) {
            while (j >= 0 && A[i] > A[stack[j]]) {
                dp[i] = Math.max(++dp[i], dp[stack[j--]]);
                res = Math.max(res, dp[i]);
            }
            stack[++j] = i;
        }
        return res;
    }
}


or


class Solution {
    public int totalSteps(int[] nums) {
    LinkedList<int[]> stack = new LinkedList<>();
    int max = 0;
    for(int num : nums) {
        int score = 0;
        while(stack.size() > 0 && stack.getLast()[0] <= num) {
            score = Math.max(score, stack.removeLast()[1]);
        }
        stack.add(new int[]{num, stack.size() == 0 ? 0 : score+1});
        max = Math.max(max, stack.getLast()[1]);
    }
    return max;
}
}


or


class Solution {
    public int totalSteps(int[] nums) {
        Stack<int[]> stack = new Stack<>();
        stack.push(new int[]{nums[0], 0});
        int steps = 0;
        for (int i = 1; i < nums.length; i++) {
            int temp = 0;
            while (!stack.isEmpty() && stack.peek()[0] <= nums[i]) {
                temp = Math.max(temp, stack.peek()[1]);
                stack.pop();
            }
            if (!stack.isEmpty()) {
                temp += 1;
            } else {
                temp = 0;
            }
            steps = Math.max(steps, temp);
            stack.push(new int[]{nums[i], temp});
        }
        return steps;
    }
}



or





