https://leetcode.com/problems/reach-end-of-array-with-max-score/description/


3282. Reach End of Array With Max Score
Medium
Topics
Companies
Hint
You are given an integer array nums of length n.

Your goal is to start at index 0 and reach index n - 1. You can only jump to indices greater than your current index.

The score for a jump from index i to index j is calculated as (j - i) * nums[i].

Return the maximum possible total score by the time you reach the last index.

 

Example 1:

Input: nums = [1,3,1,5]

Output: 7

Explanation:

First, jump to index 1 and then jump to the last index. The final score is 1 * 1 + 2 * 3 = 7.

Example 2:

Input: nums = [4,3,1,3,2]

Output: 16

Explanation:

Jump directly to the last index. The final score is 4 * 4 = 16.

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 105



# java


class Solution {
  // Similar to 3205. Maximum Array Hopping Score I
  public long findMaximumScore(List<Integer> nums) {
    // The optimal jump is the nearest index j > i s.t. nums[j] > nums[i].
    long ans = 0;
    int mx = 0;

    for (final int num : nums) {
      ans += mx;
      mx = Math.max(mx, num);
    }

    return ans;
  }
}



or



class Solution {
    public long findMaximumScore(List<Integer> nums) {
        long ans = 0;
        int mx = 0;
        for (int i = 0; i + 1 < nums.size(); ++i) {
            mx = Math.max(mx, nums.get(i));
            ans += mx;
        }
        return ans;
    }
}



or


class Solution {
       public long findMaximumScore(List<Integer> A) {
        long res = 0, ma = 0;
        for (int a: A) {
            res += ma;
            ma = Math.max(ma, a);
        }
        return res;
    }
}


or


