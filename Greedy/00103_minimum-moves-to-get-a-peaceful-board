https://leetcode.com/problems/minimum-moves-to-get-a-peaceful-board/description/


3189. Minimum Moves to Get a Peaceful Board ðŸ”’
Description
Given a 2D array rooks of length n, where rooks[i] = [xi, yi] indicates the position of a rook on an n x n chess board. Your task is to move the rooks 1 cell at a time vertically or horizontally (to an adjacent cell) such that the board becomes peaceful.

A board is peaceful if there is exactly one rook in each row and each column.

Return the minimum number of moves required to get a peaceful board.

Note that at no point can there be two rooks in the same cell.

 

Example 1:

Input: rooks = [[0,0],[1,0],[1,1]]

Output: 3

Explanation:


Example 2:

Input: rooks = [[0,0],[0,1],[0,2],[0,3]]

Output: 6

Explanation:


 

Constraints:

1 <= n == rooks.length <= 500
0 <= xi, yi <= n - 1
The input is generated such that there are no 2 rooks in the same cell.


# java




class Solution {
  public int minMoves(int[][] rooks) {
    final int n = rooks.length;
    int ans = 0;
    int[][] sortedByRow = rooks.clone();
    int[][] sortedByCol = rooks.clone();

    Arrays.sort(sortedByRow, Comparator.comparingInt(a -> a[0]));
    Arrays.sort(sortedByCol, Comparator.comparingInt(a -> a[1]));

    for (int i = 0; i < n; ++i) {
      ans += Math.abs(sortedByRow[i][0] - /*targetRow=*/i);
      ans += Math.abs(sortedByCol[i][1] - /*targetCol=*/i);
    }

    return ans;
  }
}



or



class Solution {
    public int minMoves(int[][] rooks) {
        Arrays.sort(rooks, (a, b) -> a[0] - b[0]);
        int ans = 0;
        int n = rooks.length;
        for (int i = 0; i < n; ++i) {
            ans += Math.abs(rooks[i][0] - i);
        }
        Arrays.sort(rooks, (a, b) -> a[1] - b[1]);
        for (int j = 0; j < n; ++j) {
            ans += Math.abs(rooks[j][1] - j);
        }
        return ans;
    }
}



