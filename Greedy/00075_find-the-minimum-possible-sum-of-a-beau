https://leetcode.com/problems/find-the-minimum-possible-sum-of-a-beautiful-array/description/

2834. Find the Minimum Possible Sum of a Beautiful Array
Medium
Topics
Companies
Hint
You are given positive integers n and target.

An array nums is beautiful if it meets the following conditions:

nums.length == n.
nums consists of pairwise distinct positive integers.
There doesn't exist two distinct indices, i and j, in the range [0, n - 1], such that nums[i] + nums[j] == target.
Return the minimum possible sum that a beautiful array could have modulo 109 + 7.

 

Example 1:

Input: n = 2, target = 3
Output: 4
Explanation: We can see that nums = [1,3] is beautiful.
- The array nums has length n = 2.
- The array nums consists of pairwise distinct positive integers.
- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.
It can be proven that 4 is the minimum possible sum that a beautiful array could have.
Example 2:

Input: n = 3, target = 3
Output: 8
Explanation: We can see that nums = [1,3,4] is beautiful.
- The array nums has length n = 3.
- The array nums consists of pairwise distinct positive integers.
- There doesn't exist two distinct indices, i and j, with nums[i] + nums[j] == 3.
It can be proven that 8 is the minimum possible sum that a beautiful array could have.
Example 3:

Input: n = 1, target = 1
Output: 1
Explanation: We can see, that nums = [1] is beautiful.
 

Constraints:

1 <= n <= 109
1 <= target <= 109


# jva


class Solution {
    public long minimumPossibleSum(int n, int target) {
        boolean[] vis = new boolean[n + target];
        long ans = 0;
        for (int i = 1; n > 0; --n, ++i) {
            while (vis[i]) {
                ++i;
            }
            ans += i;
            if (target >= i) {
                vis[target - i] = true;
            }
        }
        return ans;
    }
}


or


class Solution {
       public long minimumPossibleSum(int n, int target) {
        long k = target / 2;
        if (n <= k)
            return 1L * n * (n + 1) / 2;
        return k * (k + 1) / 2 + (target + target + n - k - 1) * (n - k) / 2;
    }
}


or


class Solution {
    public int minimumPossibleSum(int n, int target) {
        long k = target / 2;

        if (n <= k) {
            return (int) (1L * n * (n + 1) / 2);
        }

        long firstPart = k * (k + 1) / 2;
        long remaining = n - k;
        long secondPart = (long) (target + target + remaining - 1) * remaining / 2;

        return (int) (firstPart + secondPart);
    }
}



or

// bets
class Solution {
    public int minimumPossibleSum(int n, int target) {
        int mod = 1_000_000_007;
        long k = Math.min(target / 2, n);

        // Sum of first k natural numbers: k * (k + 1) / 2
        long part1 = k % mod * ((k + 1) % mod) % mod * inv(2, mod) % mod;

        int rem = n - (int)k;
        long a = target;
        long b = target + rem - 1;

        // Sum of rem terms from a to b: (a + b) * rem / 2
        long part2 = ((a + b) % mod) * (rem % mod) % mod * inv(2, mod) % mod;

        return (int)((part1 + part2) % mod);
    }

    // Modular inverse using Fermat's little theorem
    private long inv(long x, int mod) {
        return pow(x, mod - 2, mod);
    }

    private long pow(long a, long b, int mod) {
        long res = 1;
        a %= mod;
        while (b > 0) {
            if ((b & 1) == 1)
                res = res * a % mod;
            a = a * a % mod;
            b >>= 1;
        }
        return res;
    }
}



or


class Solution {
    public long minimumPossibleSum(int n, int target) {
        Map<Integer,Integer> nm=new HashMap<>();
        long sum=0;
        for(int i=1;nm.size()<n;i++)
        {
            if(!nm.containsKey(target-i))
            {
                sum+=(long)(i);
                nm.put(i,1);
            }
            //System.out.println(i+" "+sum+" "+nm);
        }
        return sum;
    }
}


or

class Solution {
    public long minimumPossibleSum(int n, int target) {
        int i=1;
        int count = 0;
        long Sum = 0;
        while(count<n){
            if(i <= target /2 || i >= target ){
                count++;
                Sum+=i;        
                }
                i++;
            }
        return Sum;  
    }
}



