https://leetcode.com/problems/largest-values-from-labels/description/

1090. Largest Values From Labels
Medium
Topics
Companies
Hint
You are given n item's value and label as two integer arrays values and labels. You are also given two integers numWanted and useLimit.

Your task is to find a subset of items with the maximum sum of their values such that:

The number of items is at most numWanted.
The number of items with the same label is at most useLimit.
Return the maximum sum.

 

Example 1:

Input: values = [5,4,3,2,1], labels = [1,1,2,2,3], numWanted = 3, useLimit = 1

Output: 9

Explanation:

The subset chosen is the first, third, and fifth items with the sum of values 5 + 3 + 1.

Example 2:

Input: values = [5,4,3,2,1], labels = [1,3,3,3,2], numWanted = 3, useLimit = 2

Output: 12

Explanation:

The subset chosen is the first, second, and third items with the sum of values 5 + 4 + 3.

Example 3:

Input: values = [9,8,8,7,6], labels = [0,0,0,1,1], numWanted = 3, useLimit = 1

Output: 16

Explanation:

The subset chosen is the first and fourth items with the sum of values 9 + 7.

 

Constraints:

n == values.length == labels.length
1 <= n <= 2 * 104
0 <= values[i], labels[i] <= 2 * 104
1 <= numWanted, useLimit <= n


# java


class Solution {
    public int largestValsFromLabels(int[] values, int[] labels, int numWanted, int useLimit) {
        int n = values.length;
        int[][] pairs = new int[n][2];
        for (int i = 0; i < n; ++i) {
            pairs[i] = new int[] {values[i], labels[i]};
        }
        Arrays.sort(pairs, (a, b) -> b[0] - a[0]);
        Map<Integer, Integer> cnt = new HashMap<>();
        int ans = 0, num = 0;
        for (int i = 0; i < n && num < numWanted; ++i) {
            int v = pairs[i][0], l = pairs[i][1];
            if (cnt.getOrDefault(l, 0) < useLimit) {
                cnt.merge(l, 1, Integer::sum);
                num += 1;
                ans += v;
            }
        }
        return ans;
    }
}



or


class Solution {
    public class Pair implements Comparable<Pair> {
        int v, l;

        Pair(int v, int l) {
            this.v = v;
            this.l = l;
        }

        public int compareTo(Pair p) {
            return p.v - this.v;
        }
    }

    public int largestValsFromLabels(int[] values, int[] labels, int numWanted, int useLimit) {
        int n = values.length, sum = 0;

        Pair[] pairs = IntStream.range(0, n).mapToObj(i -> new Pair(values[i], labels[i])).sorted()
                .toArray(Pair[]::new);

        int[] freq = new int[20001];

        for (int i = 0; i < n && numWanted > 0; i++) {
            if (++freq[pairs[i].l] <= useLimit) {
                sum += pairs[i].v;
                numWanted--;
            }
        }

        return sum;
    }
}


or

class Solution {

    class Pair{
        int num;
        int label;
        Pair(int num, int label){
            this.num = num;
            this.label = label;
        }
    }

    public int largestValsFromLabels(int[] val, int[] lab, int numWanted, int useLimit) {
        HashMap<Integer,Integer> hp = new HashMap<>();
        ArrayList<Pair> arr = new ArrayList<>();

        for(int i=0; i<lab.length; i++){
            arr.add(new Pair(val[i],lab[i]));
        }

        Collections.sort(arr,(a,b)->(b.num-a.num));
        int ans = 0;
        for(int i=0; i<arr.size(); i++){
            Pair p = arr.get(i);
            int num = p.num;
            int label = p.label;

            if(numWanted>0){
                if(!hp.containsKey(label)){
                    ans = ans+num;
                    hp.put(label,1);
                    numWanted--;
                }else{
                    if(hp.get(label)<useLimit){
                        ans = ans + num;
                        hp.put(label,hp.get(label)+1);
                        numWanted--;
                    }
                }
            }
        }
        return ans;
    }
}



