https://leetcode.com/problems/maximum-array-hopping-score-ii/description/


3221. Maximum Array Hopping Score II ðŸ”’
Description
Given an array nums, you have to get the maximum score starting from index 0 and hopping until you reach the last element of the array.

In each hop, you can jump from index i to an index j > i, and you get a score of (j - i) * nums[j].

Return the maximum score you can get.

 

Example 1:

Input: nums = [1,5,8]

Output: 16

Explanation:

There are two possible ways to reach the last element:

0 -> 1 -> 2 with a score of (1 - 0) * 5 + (2 - 1) * 8 = 13.
0 -> 2 with a score of (2 - 0) * 8 = 16.
Example 2:

Input: nums = [4,5,2,8,9,1,3]

Output: 42

Explanation:

We can do the hopping 0 -> 4 -> 6 with a score of (4 - 0) * 9 + (6 - 4) * 3 = 42.

 

Constraints:

2 <= nums.length <= 105
1 <= nums[i] <= 105


# java


class Solution {
  // Same as 3205. Maximum Array Hopping Score I
  public long maxScore(int[] nums) {
    // The optimal jump is the maximum number in the remaining suffix.
    long ans = 0;
    int mx = 0;

    for (int i = nums.length - 1; i > 0; --i) {
      mx = Math.max(mx, nums[i]);
      ans += mx;
    }

    return ans;
  }
}


or


class Solution {
    public long maxScore(int[] nums) {
        Deque<Integer> stk = new ArrayDeque<>();
        for (int i = 0; i < nums.length; ++i) {
            while (!stk.isEmpty() && nums[stk.peek()] <= nums[i]) {
                stk.pop();
            }
            stk.push(i);
        }
        long ans = 0, i = 0;
        while (!stk.isEmpty()) {
            int j = stk.pollLast();
            ans += (j - i) * nums[j];
            i = j;
        }
        return ans;
    }
}


