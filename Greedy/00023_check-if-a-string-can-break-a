https://leetcode.com/problems/check-if-a-string-can-break-another-string/description/


1433. Check If a String Can Break Another String
Medium
Topics
Companies
Hint
Given two strings: s1 and s2 with the same size, check if some permutation of string s1 can break some permutation of string s2 or vice-versa. In other words s2 can break s1 or vice-versa.

A string x can break string y (both of size n) if x[i] >= y[i] (in alphabetical order) for all i between 0 and n-1.

 

Example 1:

Input: s1 = "abc", s2 = "xya"
Output: true
Explanation: "ayx" is a permutation of s2="xya" which can break to string "abc" which is a permutation of s1="abc".
Example 2:

Input: s1 = "abe", s2 = "acd"
Output: false 
Explanation: All permutations for s1="abe" are: "abe", "aeb", "bae", "bea", "eab" and "eba" and all permutation for s2="acd" are: "acd", "adc", "cad", "cda", "dac" and "dca". However, there is not any permutation from s1 which can break some permutation from s2 and vice-versa.
Example 3:

Input: s1 = "leetcodee", s2 = "interview"
Output: true
 

Constraints:

s1.length == n
s2.length == n
1 <= n <= 10^5
All strings consist of lowercase English letters.



# java


class Solution {
  public boolean checkIfCanBreak(String s1, String s2) {
    int[] count1 = new int[26];
    int[] count2 = new int[26];

    for (final char c : s1.toCharArray())
      ++count1[c - 'a'];

    for (final char c : s2.toCharArray())
      ++count2[c - 'a'];

    return canBreak(count1, count2) || canBreak(count2, count1);
  }

  // Returns true if count1 can break count2.
  private boolean canBreak(int[] count1, int[] count2) {
    int diff = 0;
    for (int i = 0; i < 26; ++i) {
      diff += count2[i] - count1[i];
      // count2 is alphabetically greater than count1.
      if (diff < 0)
        return false;
    }
    return true;
  }
}




or



class Solution {
  public boolean checkIfCanBreak(String s1, String s2) {
    int[] count = new int[26];

    for (final char c : s1.toCharArray())
      ++count[c - 'a'];

    for (final char c : s2.toCharArray())
      --count[c - 'a'];

    for (int i = 1; i < 26; ++i)
      count[i] += count[i - 1];

    return Arrays.stream(count).allMatch(c -> c <= 0) || Arrays.stream(count).allMatch(c -> c >= 0);
  }
}


or


class Solution {
    public boolean checkIfCanBreak(String s1, String s2) {
        char[] cs1 = s1.toCharArray();
        char[] cs2 = s2.toCharArray();
        Arrays.sort(cs1);
        Arrays.sort(cs2);
        return check(cs1, cs2) || check(cs2, cs1);
    }

    private boolean check(char[] cs1, char[] cs2) {
        for (int i = 0; i < cs1.length; ++i) {
            if (cs1[i] < cs2[i]) {
                return false;
            }
        }
        return true;
    }
}



or



class Solution {
    public boolean checkIfCanBreak(String s1, String s2) {
	char[] x = s1.toCharArray();
	char[] y = s2.toCharArray();
	Arrays.sort(x);
	Arrays.sort(y);
	boolean xx = true;
	boolean yy = true;
	for (int i = 0; i < x.length && (xx || yy); i++) {
		if (x[i] < y[i]) xx = false;
		if (y[i] < x[i]) yy = false;
	}
	return xx || yy;
}
}


or


class Solution {
    public boolean checkIfCanBreak(String s1, String s2) {
        char[] a = s1.toCharArray(), b = s2.toCharArray();
        Arrays.sort(a);
        Arrays.sort(b);
        int more = 0, less = 0;
        for (int i = 0; i < a.length; i++) {
            int diff = a[i] - b[i];
            if (diff >= 0) more++;
            if (diff <= 0) less++;
        }
        return more == a.length || less == a.length;
    }
}

