https://leetcode.com/problems/minimum-score-by-changing-two-elements/description/


2567. Minimum Score by Changing Two Elements
Medium
Topics
Companies
Hint
You are given an integer array nums.

The low score of nums is the minimum absolute difference between any two integers.
The high score of nums is the maximum absolute difference between any two integers.
The score of nums is the sum of the high and low scores.
Return the minimum score after changing two elements of nums.

 

Example 1:

Input: nums = [1,4,7,8,5]

Output: 3

Explanation:

Change nums[0] and nums[1] to be 6 so that nums becomes [6,6,7,8,5].
The low score is the minimum absolute difference: |6 - 6| = 0.
The high score is the maximum absolute difference: |8 - 5| = 3.
The sum of high and low score is 3.
Example 2:

Input: nums = [1,4,3]

Output: 0

Explanation:

Change nums[1] and nums[2] to 1 so that nums becomes [1,1,1].
The sum of maximum absolute difference and minimum absolute difference is 0.
 

Constraints:

3 <= nums.length <= 105
1 <= nums[i] <= 109



# jvaa



class Solution {
  public int minimizeSum(int[] nums) {
    Arrays.sort(nums);
    // Can always change the number to any other number in `nums`, so `low` becomes 0.
    // Thus, rephrase the problem as finding the minimum `high`.
    final int n = nums.length;
    final int highOfChangingTwoMins = nums[n - 1] - nums[2];
    final int highOfChangingTwoMaxs = nums[n - 3] - nums[0];
    final int highOfChangingMinAndMax = nums[n - 2] - nums[1];
    return Math.min(Math.min(highOfChangingTwoMins, highOfChangingTwoMaxs),
                    highOfChangingMinAndMax);
  }
}



or



class Solution {
    public int minimizeSum(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        int a = nums[n - 1] - nums[2];
        int b = nums[n - 2] - nums[1];
        int c = nums[n - 3] - nums[0];
        return Math.min(a, Math.min(b, c));
    }
}


or


class Solution {
       public int minimizeSum(int[] A) {
        int n = A.length;
        Arrays.sort(A);
        return Math.min(Math.min(A[n - 1] - A[2], A[n - 3] - A[0]), A[n - 2] - A[1]);
    }
}



