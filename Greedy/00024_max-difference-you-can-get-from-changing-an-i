https://leetcode.com/problems/max-difference-you-can-get-from-changing-an-integer/description/


1432. Max Difference You Can Get From Changing an Integer
Medium
Topics
Companies
Hint
You are given an integer num. You will apply the following steps exactly two times:

Pick a digit x (0 <= x <= 9).
Pick another digit y (0 <= y <= 9). The digit y can be equal to x.
Replace all the occurrences of x in the decimal representation of num by y.
The new integer cannot have any leading zeros, also the new integer cannot be 0.
Let a and b be the results of applying the operations to num the first and second times, respectively.

Return the max difference between a and b.

 

Example 1:

Input: num = 555
Output: 888
Explanation: The first time pick x = 5 and y = 9 and store the new integer in a.
The second time pick x = 5 and y = 1 and store the new integer in b.
We have now a = 999 and b = 111 and max difference = 888
Example 2:

Input: num = 9
Output: 8
Explanation: The first time pick x = 9 and y = 9 and store the new integer in a.
The second time pick x = 9 and y = 1 and store the new integer in b.
We have now a = 9 and b = 1 and max difference = 8
 

Constraints:

1 <= num <= 108



 #java


class Solution {
    public int maxDiff(int num) {
        String a = String.valueOf(num);
        String b = a;
        for (int i = 0; i < a.length(); ++i) {
            if (a.charAt(i) != '9') {
                a = a.replace(a.charAt(i), '9');
                break;
            }
        }
        if (b.charAt(0) != '1') {
            b = b.replace(b.charAt(0), '1');
        } else {
            for (int i = 1; i < b.length(); ++i) {
                if (b.charAt(i) != '0' && b.charAt(i) != '1') {
                    b = b.replace(b.charAt(i), '0');
                    break;
                }
            }
        }
        return Integer.parseInt(a) - Integer.parseInt(b);
    }
}



or


class Solution {
      public int maxDiff(int num) {
        char[] a = Integer.toString(num).toCharArray(), b = a.clone();
        char x = a[0], y = 0;
        for (int i = 0; i < a.length; ++i) {
            if (a[i] == x) {
                a[i] = '9';
                b[i] = '1';
            }else if (x == '1' && a[i] > '0' || x == '9' && a[i] < '9') {
                if (y == 0) {
                    y = a[i];
                } 
                if (y == a[i]) {
                    if (x == '1')
                        b[i] = '0';
                    else
                        a[i] = '9';
                }
            }
        }
        return Integer.parseInt(String.valueOf(a)) - Integer.parseInt(String.valueOf(b));
    }
}


or


class Solution {
     public int maxDiff(int num) {
        String str = Integer.toString(num);
        
        String num1 = new String(str);
        String num2 = new String(str);
        
		//create the max number
        for(int i = 0; i < str.length(); i++ ){
            if(str.charAt(i) != '9'){
                String c = str.charAt(i) + "";
                num1 = str.replace(c, "9");
                break;
            }
        }
        
		//special case, can return earlier 
        if(str.charAt(0) != '1'){
            String c = str.charAt(0) + "";
            num2 = str.replace(c, "1");
            return Integer.parseInt(num1) - Integer.parseInt(num2);
        }
        
		//create the min number 
        for(int i = 1; i < str.length(); i++ ){ 
            if(str.charAt(i) != '0' && str.charAt(i) !='1'){
                String c = str.charAt(i) + "";
                num2 = str.replace(c, "0");
                break;
            }
        }
        
        return Integer.parseInt(num1) - Integer.parseInt(num2);
           
    }
}



or


class Solution {
    public int maxDiff(int num) {
        String a = Integer.toString(num);
        String b = Integer.toString(num);
        char x = '9';
        int n = a.length();
        for (int i = 0; i< n; i++) {
            if (a.charAt(i) < x) {
                x = a.charAt(i);
                break;
            }
        }
        // we take y=9
        int num1 = Integer.parseInt(a.replace(x, '9'));
        if (b.charAt(0) != '1') {
            // we take first digit as x and y=1
            int num2 = Integer.parseInt(b.replace(b.charAt(0), '1'));
            return num1-num2;
        }
        x = '0';
        for (int i = 1; i< n; i++) {
            if (b.charAt(i) > x && b.charAt(i)!=b.charAt(0)){
                x = b.charAt(i);
                break;
            }
        }
        // we take y=0
        int num2 = Integer.parseInt(b.replace(x, '0'));
        return num1-num2;
    }
}


