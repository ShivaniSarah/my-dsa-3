https://leetcode.com/problems/maximum-number-of-potholes-that-can-be-fixed/description/

3119. Maximum Number of Potholes That Can Be Fixed ðŸ”’
Description
You are given a string road, consisting only of characters "x" and ".", where each "x" denotes a pothole and each "." denotes a smooth road, and an integer budget.

In one repair operation, you can repair n consecutive potholes for a price of n + 1.

Return the maximum number of potholes that can be fixed such that the sum of the prices of all of the fixes doesn't go over the given budget.

 

Example 1:

Input: road = "..", budget = 5

Output: 0

Explanation:

There are no potholes to be fixed.

Example 2:

Input: road = "..xxxxx", budget = 4

Output: 3

Explanation:

We fix the first three potholes (they are consecutive). The budget needed for this task is 3 + 1 = 4.

Example 3:

Input: road = "x.x.xxx...x", budget = 14

Output: 6

Explanation:

We can fix all the potholes. The total cost would be (1 + 1) + (1 + 1) + (3 + 1) + (1 + 1) = 10 which is within our budget of 14.

 

Constraints:

1 <= road.length <= 105
1 <= budget <= 105 + 1
road consists only of characters '.' and 'x'.



# java



class Solution {
  public int maxPotholes(String road, int budget) {
    int ans = 0;

    for (final int length : getSortedPotholeLengths(road)) {
      final int canRepair = Math.max(0, budget - 1);
      if (length > canRepair)
        return ans + canRepair;
      ans += length;
      budget -= length + 1;
    }

    return ans;
  }

  private List<Integer> getSortedPotholeLengths(final String road) {
    List<Integer> potholeLengths = new ArrayList<>();
    for (String pothole : road.split("\\."))
      potholeLengths.add(pothole.length());
    Collections.sort(potholeLengths, Collections.reverseOrder());
    return potholeLengths;
  }
}






or




class Solution {
    public int maxPotholes(String road, int budget) {
        road += ".";
        int n = road.length();
        int[] cnt = new int[n];
        int k = 0;
        for (char c : road.toCharArray()) {
            if (c == 'x') {
                ++k;
            } else if (k > 0) {
                ++cnt[k];
                k = 0;
            }
        }
        int ans = 0;
        for (k = n - 1; k > 0 && budget > 0; --k) {
            int t = Math.min(budget / (k + 1), cnt[k]);
            ans += t * k;
            budget -= t * (k + 1);
            cnt[k - 1] += cnt[k] - t;
        }
        return ans;
    }
}



