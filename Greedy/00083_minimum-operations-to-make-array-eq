https://leetcode.com/problems/minimum-operations-to-make-array-equal-ii/description/

2541. Minimum Operations to Make Array Equal II
Medium
Topics
Companies
Hint
You are given two integer arrays nums1 and nums2 of equal length n and an integer k. You can perform the following operation on nums1:

Choose two indexes i and j and increment nums1[i] by k and decrement nums1[j] by k. In other words, nums1[i] = nums1[i] + k and nums1[j] = nums1[j] - k.
nums1 is said to be equal to nums2 if for all indices i such that 0 <= i < n, nums1[i] == nums2[i].

Return the minimum number of operations required to make nums1 equal to nums2. If it is impossible to make them equal, return -1.

 

Example 1:

Input: nums1 = [4,3,1,4], nums2 = [1,3,7,1], k = 3
Output: 2
Explanation: In 2 operations, we can transform nums1 to nums2.
1st operation: i = 2, j = 0. After applying the operation, nums1 = [1,3,4,4].
2nd operation: i = 2, j = 3. After applying the operation, nums1 = [1,3,7,1].
One can prove that it is impossible to make arrays equal in fewer operations.
Example 2:

Input: nums1 = [3,8,5,2], nums2 = [2,4,1,6], k = 1
Output: -1
Explanation: It can be proved that it is impossible to make the two arrays equal.
 

Constraints:

n == nums1.length == nums2.length
2 <= n <= 105
0 <= nums1[i], nums2[j] <= 109
0 <= k <= 105



# jva


class Solution {
  public long minOperations(int[] nums1, int[] nums2, int k) {
    if (k == 0)
      return Arrays.equals(nums1, nums2) ? 0 : -1;

    long ans = 0;
    long opsDiff = 0; // the number of increments - the number of decrements

    for (int i = 0; i < nums1.length; ++i) {
      final int diff = nums1[i] - nums2[i];
      if (diff == 0)
        continue;
      if (diff % k != 0)
        return -1;
      final int ops = diff / k;
      opsDiff += ops;
      ans += Math.abs(ops);
    }

    return opsDiff == 0 ? ans / 2 : -1;
  }
}


or


class Solution {
    public long minOperations(int[] nums1, int[] nums2, int k) {
        long ans = 0, x = 0;
        for (int i = 0; i < nums1.length; ++i) {
            int a = nums1[i], b = nums2[i];
            if (k == 0) {
                if (a != b) {
                    return -1;
                }
                continue;
            }
            if ((a - b) % k != 0) {
                return -1;
            }
            int y = (a - b) / k;
            ans += Math.abs(y);
            x += y;
        }
        return x == 0 ? ans / 2 : -1;
    }
}


or


class Solution {
       public long minOperations(int[] nums1, int[] nums2, int k) {
        if (k == 0) {
            return Arrays.equals(nums1, nums2) ? 0 : -1;
        }
        long ops = 0, bal = 0;
        for (int i = 0; i < nums1.length; ++i) {
            int diff = nums1[i] - nums2[i];
            if (diff % k != 0) {
                return -1;
            }
            if (diff > 0) {
                ops += diff / k;
            }
            bal += diff;
        } 
        return bal == 0 ? ops : -1;        
    }
}


or


class Solution {
    public long minOperations(int[] nums1, int[] nums2, int k) {
        
    int n = nums1.length;
    long[] diff = new long[n];
    for (int i = 0; i < n; i++) {
        diff[i] = nums2[i] - nums1[i];
    }
    if(k==0){
        for(int i=0;i<n;i++)
            if(diff[i]!=0)return -1;
        return 0;
    }
    long ans = 0;
    long sum=0;
    for (int i = 0; i < n; i++) {
        sum+=diff[i];
        if (diff[i] % k != 0) {
            return -1;
        }
        ans += Math.abs(diff[i] / k);
    }

    return sum==0? ans/2:-1;
    }
}



or


class Solution {
    public long minOperations(int[] nums1, int[] nums2, int k) {
        long up = 0, down = 0;
        for(int i = 0; i < nums1.length; i++){
            if(nums1[i] == nums2[i]) continue;
            int abs = Math.abs(nums1[i] - nums2[i]);
            if(k == 0) return -1;
            else if( abs % k == 0){
                if(nums1[i] > nums2[i]) down += abs/k;
                else up += abs/k;
            }
            else return -1;
        }
        return (up==down)?up: -1;
    }
}


or

