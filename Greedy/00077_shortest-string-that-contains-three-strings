https://leetcode.com/problems/shortest-string-that-contains-three-strings/

2800. Shortest String That Contains Three Strings
Medium
Topics
Companies
Hint
Given three strings a, b, and c, your task is to find a string that has the minimum length and contains all three strings as substrings.
If there are multiple such strings, return the lexicographically smallest one.

Return a string denoting the answer to the problem.

Notes

A string a is lexicographically smaller than a string b (of the same length) if in the first position where a and b differ, string a has a letter that appears earlier in the alphabet than the corresponding letter in b.
A substring is a contiguous sequence of characters within a string.
 

Example 1:

Input: a = "abc", b = "bca", c = "aaa"
Output: "aaabca"
Explanation:  We show that "aaabca" contains all the given strings: a = ans[2...4], b = ans[3..5], c = ans[0..2]. It can be shown that the length of the resulting string would be at least 6 and "aaabca" is the lexicographically smallest one.
Example 2:

Input: a = "ab", b = "ba", c = "aba"
Output: "aba"
Explanation: We show that the string "aba" contains all the given strings: a = ans[0..1], b = ans[1..2], c = ans[0..2]. Since the length of c is 3, the length of the resulting string would be at least 3. It can be shown that "aba" is the lexicographically smallest one.
 

Constraints:

1 <= a.length, b.length, c.length <= 100
a, b, c consist only of lowercase English letters.


# java


class Solution {
  public String minimumString(String a, String b, String c) {
    final String abc = merge(a, merge(b, c));
    final String acb = merge(a, merge(c, b));
    final String bac = merge(b, merge(a, c));
    final String bca = merge(b, merge(c, a));
    final String cab = merge(c, merge(a, b));
    final String cba = merge(c, merge(b, a));
    return getMin(Arrays.asList(abc, acb, bac, bca, cab, cba));
  }

  // Merges a and b.
  private String merge(String a, String b) {
    if (b.contains(a)) // a is a substring of b.
      return b;
    for (int i = 0; i < a.length(); ++i) {
      final String aSuffix = a.substring(i);
      final String bPrefix = b.substring(0, Math.min(b.length(), aSuffix.length()));
      if (aSuffix.equals(bPrefix))
        return a + b.substring(bPrefix.length());
    }
    return a + b;
  }

  // Returns the lexicographically smallest string.
  private String getMin(List<String> words) {
    String res = words.get(0);
    for (int i = 1; i < words.size(); ++i)
      res = getMin(res, words.get(i));
    return res;
  }

  // Returns the lexicographically smaller string.
  private String getMin(String a, String b) {
    return (a.length() < b.length() || (a.length() == b.length() && a.compareTo(b) < 0)) ? a : b;
  }
}


or


class Solution {
    public String minimumString(String a, String b, String c) {
        String[] s = {a, b, c};
        int[][] perm = { {0, 1, 2}, {0, 2, 1}, {1, 0, 2}, {1, 2, 0}, {2, 1, 0}, {2, 0, 1} };
        String ans = "";
        for (var p : perm) {
            int i = p[0], j = p[1], k = p[2];
            String t = f(f(s[i], s[j]), s[k]);
            if ("".equals(ans) || t.length() < ans.length()
                || (t.length() == ans.length() && t.compareTo(ans) < 0)) {
                ans = t;
            }
        }
        return ans;
    }

    private String f(String s, String t) {
        if (s.contains(t)) {
            return s;
        }
        if (t.contains(s)) {
            return t;
        }
        int m = s.length(), n = t.length();
        for (int i = Math.min(m, n); i > 0; --i) {
            if (s.substring(m - i).equals(t.substring(0, i))) {
                return s + t.substring(i);
            }
        }
        return s + t;
    }
}


or

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class Solution {
    public String solve(String a, String b) {
        int x = a.indexOf(b);
        if (x != -1)
            return a;
        String ans = a;
        for (int i = 0; i < a.length(); i++) {
            int j = 0;
            int k = i;
            int c = 0;
            while (k < a.length() && j < b.length()) {
                if (a.charAt(k) == b.charAt(j))
                    c++;
                else
                    break;
                k++;
                j++;
            }
            if (k == a.length()) {
                for (int m = c; m < b.length(); m++)
                    ans += b.charAt(m);
                return ans;
            }
        }
        for (int i = 0; i < b.length(); i++)
            ans += b.charAt(i);
        return ans;
    }

    public String minimumString(String a, String b, String c) {
        List<String> v = new ArrayList<>();
        v.add(a);
        v.add(b);
        v.add(c);
        Collections.sort(v);
        a = v.get(0);
        b = v.get(1);
        c = v.get(2);
        String m = a + b + c + a;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                for (int k = 0; k < 3; k++) {
                    if (i != j && j != k && i != k) {
                        String x = solve(v.get(i), v.get(j));
                        String ans = solve(x, v.get(k));
                        if (ans.length() <= m.length()) {
                            if (ans.length() == m.length())
                                m = (m.compareTo(ans) < 0) ? m : ans;
                            else
                                m = ans;
                        }
                    }
                }
            }
        }
        return m;
    }
}


or


class Solution {
    private String merge(String s1, String s2) {
        if (s1.contains(s2)) return s1;
        for (int i = 0; i < s1.length(); i++) {
            if (s2.startsWith(s1.substring(i))) return s1.substring(0, i) + s2;
        }
        return s1 + s2;
    }

    public String minimumString(String a, String b, String c) {
        String res = "";
        int l = Integer.MAX_VALUE;
        for (String s : new String[]{
            merge(merge(a, b), c),
            merge(merge(b, a), c),
            merge(merge(c, b), a),
            merge(merge(b, c), a),
            merge(merge(a, c), b),
            merge(merge(c, a), b)
        }) {
            if (s.length() < l) {
                res = s;
                l = s.length();
            } else if (s.length() == l) {
                res = res.compareTo(s) < 0 ? res : s;
            }
        }
        return res;
    }
}


or

