https://leetcode.com/problems/lexicographically-smallest-string-after-operations-with-constraint/description/


3106. Lexicographically Smallest String After Operations With Constraint
Medium
Topics
Companies
Hint
You are given a string s and an integer k.

Define a function distance(s1, s2) between two strings s1 and s2 of the same length n as:

The sum of the minimum distance between s1[i] and s2[i] when the characters from 'a' to 'z' are placed in a cyclic order, for all i in the range [0, n - 1].
For example, distance("ab", "cd") == 4, and distance("a", "z") == 1.

You can change any letter of s to any other lowercase English letter, any number of times.

Return a string denoting the lexicographically smallest string t you can get after some changes, such that distance(s, t) <= k.

 

Example 1:

Input: s = "zbbz", k = 3

Output: "aaaz"

Explanation:

Change s to "aaaz". The distance between "zbbz" and "aaaz" is equal to k = 3.

Example 2:

Input: s = "xaxcd", k = 4

Output: "aawcd"

Explanation:

The distance between "xaxcd" and "aawcd" is equal to k = 4.

Example 3:

Input: s = "lol", k = 0

Output: "lol"

Explanation:

It's impossible to change any character as k = 0.

 

Constraints:

1 <= s.length <= 100
0 <= k <= 2000
s consists only of lowercase English letters.


# jvaa



class Solution {
  public String getSmallestString(String s, int k) {
    StringBuilder sb = new StringBuilder(s);

    for (int i = 0; i < sb.length(); ++i) {
      if (k == 0)
        break;
      final int distToA = Math.min(sb.charAt(i) - 'a', 'z' - sb.charAt(i) + 1);
      if (k >= distToA) {
        k -= distToA;
        sb.setCharAt(i, 'a');
      } else {
        // k is not enough to change the current letter to 'a', so move as
        // closer to 'a' as possible.
        sb.setCharAt(i, (char) (sb.charAt(i) - k));
        k = 0;
      }
    }

    return sb.toString();
  }
}






or




class Solution {
    public String getSmallestString(String s, int k) {
        char[] cs = s.toCharArray();
        for (int i = 0; i < cs.length; ++i) {
            char c1 = cs[i];
            for (char c2 = 'a'; c2 < c1; ++c2) {
                int d = Math.min(c1 - c2, 26 - c1 + c2);
                if (d <= k) {
                    cs[i] = c2;
                    k -= d;
                    break;
                }
            }
        }
        return new String(cs);
    }
}



or



class Solution {
    public String getSmallestString(String s, int k) {
        StringBuilder nm=new StringBuilder();
        for(int i=0;i<s.length();i++)
            {
                char c=s.charAt(i);
                int val=Math.min(123-c, c-97);
                if(k>0)
                {
                    if(val<=k)
                    {
                        nm.append("a");
                        k-=val;
                    }
                    else
                    {
                        c=(char)(c-k);
                        nm.append(c);
                        k-=val;
                    }
                }
                else
                {
                    nm.append(c);
                }
            }
        return nm.toString();
    }
}


or



class Solution {
    public int cyclicDistance(char ch1, char ch2) {
        int dist = Math.abs(ch1 - ch2);
        return Math.min(dist, 26 - dist);
    }
    public String getSmallestString(String s, int k) {
        char[] sArray = s.toCharArray();
        for(int i = 0; i < sArray.length; i++) {
            int distToA = cyclicDistance(sArray[i], 'a');
            if(distToA <= k) {
                sArray[i] = 'a';
                k -= distToA;
            } else if(k > 0) {
                sArray[i] = (char) (sArray[i] -  k);
                k = 0;
            }
        }
        return new String(sArray);
    }
}


