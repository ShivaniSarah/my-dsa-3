https://leetcode.com/problems/equal-sum-arrays-with-minimum-number-of-operations/description/

1775. Equal Sum Arrays With Minimum Number of Operations
Medium
Topics
Companies
Hint
You are given two arrays of integers nums1 and nums2, possibly of different lengths. The values in the arrays are between 1 and 6, inclusive.

In one operation, you can change any integer's value in any of the arrays to any value between 1 and 6, inclusive.

Return the minimum number of operations required to make the sum of values in nums1 equal to the sum of values in nums2. Return -1​​​​​ if it is not possible to make the sum of the two arrays equal.

 

Example 1:

Input: nums1 = [1,2,3,4,5,6], nums2 = [1,1,2,2,2,2]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed.
- Change nums2[0] to 6. nums1 = [1,2,3,4,5,6], nums2 = [6,1,2,2,2,2].
- Change nums1[5] to 1. nums1 = [1,2,3,4,5,1], nums2 = [6,1,2,2,2,2].
- Change nums1[2] to 2. nums1 = [1,2,2,4,5,1], nums2 = [6,1,2,2,2,2].
Example 2:

Input: nums1 = [1,1,1,1,1,1,1], nums2 = [6]
Output: -1
Explanation: There is no way to decrease the sum of nums1 or to increase the sum of nums2 to make them equal.
Example 3:

Input: nums1 = [6,6], nums2 = [1]
Output: 3
Explanation: You can make the sums of nums1 and nums2 equal with 3 operations. All indices are 0-indexed. 
- Change nums1[0] to 2. nums1 = [2,6], nums2 = [1].
- Change nums1[1] to 2. nums1 = [2,2], nums2 = [1].
- Change nums2[0] to 4. nums1 = [2,2], nums2 = [4].
 

Constraints:

1 <= nums1.length, nums2.length <= 105
1 <= nums1[i], nums2[i] <= 6


# java


class Solution {
  public int minOperations(int[] nums1, int[] nums2) {
    if (nums1.length * 6 < nums2.length || nums2.length * 6 < nums1.length)
      return -1;

    int sum1 = Arrays.stream(nums1).sum();
    int sum2 = Arrays.stream(nums2).sum();
    if (sum1 > sum2)
      return minOperations(nums2, nums1);

    int ans = 0;
    // increasing in `nums1` and decreasing in `nums2`
    int[] count = new int[6];

    Arrays.stream(nums1).forEach(num -> ++count[6 - num]);
    Arrays.stream(nums2).forEach(num -> ++count[num - 1]);

    for (int i = 5; sum2 > sum1;) {
      while (count[i] == 0)
        --i;
      sum1 += i;
      --count[i];
      ++ans;
    }

    return ans;
  }
}


or


class Solution {
    public int minOperations(int[] nums1, int[] nums2) {
        int s1 = Arrays.stream(nums1).sum();
        int s2 = Arrays.stream(nums2).sum();
        if (s1 == s2) {
            return 0;
        }
        if (s1 > s2) {
            return minOperations(nums2, nums1);
        }
        int d = s2 - s1;
        int[] arr = new int[nums1.length + nums2.length];
        int k = 0;
        for (int v : nums1) {
            arr[k++] = 6 - v;
        }
        for (int v : nums2) {
            arr[k++] = v - 1;
        }
        Arrays.sort(arr);
        for (int i = 1, j = arr.length - 1; j >= 0; ++i, --j) {
            d -= arr[j];
            if (d <= 0) {
                return i;
            }
        }
        return -1;
    }
}


or



class Solution {
    public int minOperations(int[] nums1, int[] nums2) {
        int m = nums1.length, n = nums2.length;
        if (m > 6 * n || n > 6 * m) return -1;
        
        int sum1 = 0, sum2 = 0;
        for (int i : nums1) sum1 += i;
        for (int i : nums2) sum2 += i;
        
        int diff = sum1 - sum2;
        if (diff == 0) return 0;
        
        return (diff > 0 ? helper(nums1, nums2, diff) 
                         : helper(nums2, nums1, -diff));
    }
    
    private int helper(int[] nums1, int[] nums2, int diff) {
        // count[i] : frequency of numbers that can reduce the diff by i
        int[] count = new int[6];
        for (int num : nums1) count[num - 1]++;
        for (int num : nums2) count[6 - num]++;
        
        int res = 0;
        for (int i = 5; i > 0; i--) {
            int c = Math.min(count[i], diff / i + (diff % i == 0 ? 0 : 1));
            
            res += c;
            diff -= c * i;
            
            if (diff <= 0) break;
        }
        return res;
    }
}

or

class Solution {
     public int minOperations(int[] nums1, int[] nums2) {
    if (nums1.length > 6 * nums2.length || nums2.length > 6 * nums1.length) {
      return -1;
    }
    int sum1 = Arrays.stream(nums1).sum();
    int sum2 = Arrays.stream(nums2).sum();
    int diff = Math.abs(sum1 - sum2);
    PriorityQueue<Integer> pq = new PriorityQueue<>((a, b) -> (b - a));
    if (sum1 > sum2) {
      for (int num : nums1) {
        pq.add(num - 1);
      }
      for (int num : nums2) {
        pq.add(6 - num);
      }
    } else {
      for (int num : nums1) {
        pq.add(6 - num);
      }
      for (int num : nums2) {
        pq.add(num - 1);
      }
    }
    int minOps = 0;
    while (!pq.isEmpty() && diff > 0) {
      diff -= pq.poll();
      minOps++;
    }
    return diff > 0 ? -1 : minOps;
  }
}


or

