https://leetcode.com/problems/maximum-array-hopping-score-i/description/


3205. Maximum Array Hopping Score I ðŸ”’
Description
Given an array nums, you have to get the maximum score starting from index 0 and hopping until you reach the last element of the array.

In each hop, you can jump from index i to an index j > i, and you get a score of (j - i) * nums[j].

Return the maximum score you can get.

 

Example 1:

Input: nums = [1,5,8]

Output: 16

Explanation:

There are two possible ways to reach the last element:

0 -> 1 -> 2 with a score of (1 - 0) * 5 + (2 - 1) * 8 = 13.
0 -> 2 with a score of (2 - 0) * 8 = 16.
Example 2:

Input: nums = [4,5,2,8,9,1,3]

Output: 42

Explanation:

We can do the hopping 0 -> 4 -> 6 with a score of (4 - 0) * 9 + (6 - 4) * 3 = 42.

 

Constraints:

2 <= nums.length <= 103
1 <= nums[i] <= 105



# java




class Solution {
  public int maxScore(int[] nums) {
    final int n = nums.length;
    // dp[i] := the maximum score to jump from index i to n - 1
    int[] dp = new int[n];

    for (int i = n - 1; i >= 0; --i)
      for (int j = i + 1; j < n; ++j)
        // Jump from i to j, and then jump from j to n - 1.
        dp[i] = Math.max(dp[i], (j - i) * nums[j] + dp[j]);

    return dp[0];
  }
}



or


class Solution {
  public int maxScore(int[] nums) {
    // The optimal jump is the maximum number in the remaining suffix.
    int ans = 0;
    int mx = 0;

    for (int i = nums.length - 1; i > 0; --i) {
      mx = Math.max(mx, nums[i]);
      ans += mx;
    }

    return ans;
  }
}


or



class Solution {
    private Integer[] f;
    private int[] nums;
    private int n;

    public int maxScore(int[] nums) {
        n = nums.length;
        f = new Integer[n];
        this.nums = nums;
        return dfs(0);
    }

    private int dfs(int i) {
        if (f[i] != null) {
            return f[i];
        }
        f[i] = 0;
        for (int j = i + 1; j < n; ++j) {
            f[i] = Math.max(f[i], (j - i) * nums[j] + dfs(j));
        }
        return f[i];
    }
}


