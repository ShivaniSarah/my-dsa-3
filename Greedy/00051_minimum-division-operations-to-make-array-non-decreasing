https://leetcode.com/problems/minimum-division-operations-to-make-array-non-decreasing/description/

3326. Minimum Division Operations to Make Array Non Decreasing
Medium
Topics
Companies
Hint
You are given an integer array nums.

Any positive divisor of a natural number x that is strictly less than x is called a proper divisor of x. For example, 2 is a proper divisor of 4, while 6 is not a proper divisor of 6.

You are allowed to perform an operation any number of times on nums, where in each operation you select any one element from nums and divide it by its greatest proper divisor.

Return the minimum number of operations required to make the array non-decreasing.

If it is not possible to make the array non-decreasing using any number of operations, return -1.

 

Example 1:

Input: nums = [25,7]

Output: 1

Explanation:

Using a single operation, 25 gets divided by 5 and nums becomes [5, 7].

Example 2:

Input: nums = [7,7,6]

Output: -1

Example 3:

Input: nums = [1,1,1,1]

Output: 0

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 106



# java

class Solution {
  public int minOperations(int[] nums) {
    int ans = 0;

    for (int i = nums.length - 2; i >= 0; --i)
      if (nums[i] > nums[i + 1]) {
        final int minDivisor = getMinDivisor(nums[i]);
        if (minDivisor > nums[i + 1])
          return -1;
        nums[i] = minDivisor;
        ++ans;
      }

    return ans;
  }

  private int getMinDivisor(int num) {
    for (int divisor = 2; divisor <= Math.sqrt(num); ++divisor)
      if (num % divisor == 0)
        return divisor;
    return num;
  }
}


or



class Solution {
    private static final int MX = (int) 1e6 + 1;
    private static final int[] LPF = new int[MX + 1];
    static {
        for (int i = 2; i <= MX; ++i) {
            for (int j = i; j <= MX; j += i) {
                if (LPF[j] == 0) {
                    LPF[j] = i;
                }
            }
        }
    }
    public int minOperations(int[] nums) {
        int ans = 0;
        for (int i = nums.length - 2; i >= 0; i--) {
            if (nums[i] > nums[i + 1]) {
                nums[i] = LPF[nums[i]];
                if (nums[i] > nums[i + 1]) {
                    return -1;
                }
                ans++;
            }
        }
        return ans;
    }
}



or


class Solution {
    private Map<Integer, Integer> cache = new HashMap<>();

    public int leastPrime(int num) {
        if (num % 2 == 0) return 2;

        for (int prime = 3; prime * prime <= num; prime += 2) {
            if (num % prime == 0) return prime;}

        return num;}

    public int minOperations(int[] nums) {
        int ans = 0;
        int n = nums.length;

        for (int i = n - 2; i >= 0; --i) {
            if (nums[i] <= nums[i + 1]) continue;

            if (!cache.containsKey(nums[i])) {
                cache.put(nums[i], leastPrime(nums[i]));
            }
            nums[i] = cache.get(nums[i]);

            if (nums[i] > nums[i + 1]) return -1;

            ans++;}

        return ans;}
}


or


class Solution {
    public int minOperations(int[] nums) {
        int ans = 0;
        for (int i = nums.length - 1; i > 0; i--) {
            if (nums[i] < nums[i - 1]) {
                nums[i - 1] = findNum(nums[i], nums[i - 1]);
                if (nums[i - 1] == -1) return -1;
                ans++;
            }
        }
        return ans;
    }

    private int findNum(int n1, int n2) {
        for (int i = 2; i < n1 + 1; i++) {
            if (n2 % i == 0) return i;
        }
        return -1;
    }
}

