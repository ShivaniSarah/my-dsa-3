https://leetcode.com/problems/cinema-seat-allocation/description/

1386. Cinema Seat Allocation
Medium
Topics
Companies
Hint


A cinema has n rows of seats, numbered from 1 to n and there are ten seats in each row, labelled from 1 to 10 as shown in the figure above.

Given the array reservedSeats containing the numbers of seats already reserved, for example, reservedSeats[i] = [3,8] means the seat located in row 3 and labelled with 8 is already reserved.

Return the maximum number of four-person groups you can assign on the cinema seats. A four-person group occupies four adjacent seats in one single row. Seats across an aisle (such as [3,3] and [3,4]) are not considered to be adjacent, but there is an exceptional case on which an aisle split a four-person group, in that case, the aisle split a four-person group in the middle, which means to have two people on each side.

 

Example 1:



Input: n = 3, reservedSeats = [[1,2],[1,3],[1,8],[2,6],[3,1],[3,10]]
Output: 4
Explanation: The figure above shows the optimal allocation for four groups, where seats mark with blue are already reserved and contiguous seats mark with orange are for one group.
Example 2:

Input: n = 2, reservedSeats = [[2,1],[1,8],[2,6]]
Output: 2
Example 3:

Input: n = 4, reservedSeats = [[4,3],[1,4],[4,6],[1,7]]
Output: 4
 

Constraints:

1 <= n <= 10^9
1 <= reservedSeats.length <= min(10*n, 10^4)
reservedSeats[i].length == 2
1 <= reservedSeats[i][0] <= n
1 <= reservedSeats[i][1] <= 10
All reservedSeats[i] are distinct.



# java



class Solution {
  public int maxNumberOfFamilies(int n, int[][] reservedSeats) {
    int ans = 0;
    Map<Integer, Integer> rowToSeats = new HashMap<>();

    for (int[] reservedSeat : reservedSeats) {
      final int row = reservedSeat[0];
      final int seat = reservedSeat[1];
      rowToSeats.put(row, rowToSeats.getOrDefault(row, 0) | 1 << (seat - 1));
    }

    for (final int seats : rowToSeats.values())
      if ((seats & 0b0111111110) == 0)
        // Can fit 2 four-person groups.
        ans += 2;
      else if ((seats & 0b0111100000) == 0 || // The left is not occupied.
               (seats & 0b0001111000) == 0 || // The middle is not occupied.
               (seats & 0b0000011110) == 0)   // The right is notoccupied.
        // Can fit 1 four-person group.
        ans += 1;

    // Any empty row can fit 2 four-person groups.
    return ans + (n - rowToSeats.size()) * 2;
  }
}



or


class Solution {
    public int maxNumberOfFamilies(int n, int[][] reservedSeats) {
        Map<Integer, Integer> d = new HashMap<>();
        for (var e : reservedSeats) {
            int i = e[0], j = e[1];
            d.merge(i, 1 << (10 - j), (x, y) -> x | y);
        }
        int[] masks = {0b0111100000, 0b0000011110, 0b0001111000};
        int ans = (n - d.size()) * 2;
        for (int x : d.values()) {
            for (int mask : masks) {
                if ((x & mask) == 0) {
                    x |= mask;
                    ++ans;
                }
            }
        }
        return ans;
    }
}


or


class Solution {
    public int maxNumberOfFamilies(int n, int[][] reservedSeats) {
        Map<Integer,List<Integer>> map = new HashMap<>();
        
        
        for(int[] i : reservedSeats){
            map.putIfAbsent(i[0],new ArrayList<>());
            map.get(i[0]).add(i[1]);
        }
        
        
        int ans = 2*(n - map.size());
        
        for(Map.Entry<Integer,List<Integer>> entry : map.entrySet()){
            List<Integer> seats = entry.getValue();
            
            boolean isLeftAisle = false, isRightAisle = false, isMiddle = false;
            
            for(int seat : seats){
                
                if(seat >= 2 && seat <= 5)
                    isLeftAisle = true;
                if(seat >= 6 && seat <= 9)
                    isRightAisle = true;
                if(seat >=4 && seat <= 7)
                    isMiddle = true;
                    
                if(isLeftAisle && isRightAisle && isMiddle){
                    break;
                }
            }
            
            if(!isLeftAisle)
                ans += 1;
            if(!isRightAisle)
                ans += 1;
            if(isLeftAisle && isRightAisle && !isMiddle)
                ans += 1;
            
        }
       
        return ans;
        
    }
}



or




class Solution {
	public int maxNumberOfFamilies(int n, int[][] reservedSeats) {
		int count = 0;
		Map<Integer, List<Integer>> rowReserved = new HashMap<>();
		for (int [] row: reservedSeats) {
			if (rowReserved.containsKey(row[0]))
				rowReserved.get(row[0]).add(row[1]);
			else
				rowReserved.put(row[0], new ArrayList<>(Arrays.asList(row[1])));
		}
		count = (n - rowReserved.size()) * 2; //  here no reservation
		for (List<Integer> list: rowReserved.values()) {
			boolean filled = false;
			if (!list.contains(2) && !list.contains(3) && !list.contains(4) && !list.contains(5)) {
				filled = true;
				count += 1;
			}
			if (!list.contains(6) && !list.contains(7) && !list.contains(8) && !list.contains(9)) {
				filled = true;
				count += 1;
			}
			if (!filled) {
				if (!list.contains(4) && !list.contains(5) && !list.contains(6) && !list.contains(7)) {
					count += 1;
				}
			}
		}
		return count;
    }
}



