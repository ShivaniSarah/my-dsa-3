https://leetcode.com/problems/smallest-missing-non-negative-integer-after-operations/description/

2598. Smallest Missing Non-negative Integer After Operations
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums and an integer value.

In one operation, you can add or subtract value from any element of nums.

For example, if nums = [1,2,3] and value = 2, you can choose to subtract value from nums[0] to make nums = [-1,2,3].
The MEX (minimum excluded) of an array is the smallest missing non-negative integer in it.

For example, the MEX of [-1,2,3] is 0 while the MEX of [1,0,3] is 2.
Return the maximum MEX of nums after applying the mentioned operation any number of times.

 

Example 1:

Input: nums = [1,-10,7,13,6,8], value = 5
Output: 4
Explanation: One can achieve this result by applying the following operations:
- Add value to nums[1] twice to make nums = [1,0,7,13,6,8]
- Subtract value from nums[2] once to make nums = [1,0,2,13,6,8]
- Subtract value from nums[3] twice to make nums = [1,0,2,3,6,8]
The MEX of nums is 4. It can be shown that 4 is the maximum MEX we can achieve.
Example 2:

Input: nums = [1,-10,7,13,6,8], value = 7
Output: 2
Explanation: One can achieve this result by applying the following operation:
- subtract value from nums[2] once to make nums = [1,-10,0,13,6,8]
The MEX of nums is 2. It can be shown that 2 is the maximum MEX we can achieve.
 

Constraints:

1 <= nums.length, value <= 105
-109 <= nums[i] <= 109



# jvaa


class Solution {
  public int findSmallestInteger(int[] nums, int value) {
    Map<Integer, Integer> count = new HashMap<>();

    for (final int num : nums)
      count.merge((num % value + value) % value, 1, Integer::sum);

    for (int i = 0; i < nums.length; ++i) {
      if (count.getOrDefault(i % value, 0) == 0)
        return i;
      count.merge(i % value, -1, Integer::sum);
    }

    return nums.length;
  }
}





or


class Solution {
    public int findSmallestInteger(int[] nums, int value) {
        int[] cnt = new int[value];
        for (int x : nums) {
            ++cnt[(x % value + value) % value];
        }
        for (int i = 0;; ++i) {
            if (cnt[i % value]-- == 0) {
                return i;
            }
        }
    }
}


or



class Solution {
        public int findSmallestInteger(int[] A, int k) {
        int stop = 0, count[] = new int[k];
        for (int a : A)
            count[(a % k + k) % k]++;
        for (int i = 0; i < k; ++i)
            if (count[i] < count[stop])
                stop = i;
        return k * count[stop] + stop;
    }
}


or



class Solution {
    public int findSmallestInteger(int[] nums, int value) {
        int n = nums.length;
        HashMap<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            int mod = num % value;
            mod = mod >= 0 ? mod : mod + value;
            map.put(mod, map.getOrDefault(mod, 0) + 1);
        }
        for (int i = 0; i < n; i++) {
            int check = i % value;
            if (!map.containsKey(check)) {
                return i;
            }
            int freq = map.get(check);
            if (freq <= 0) {
                return i;
            }
            map.put(check, freq - 1);
        }
        return n;
    }
}



