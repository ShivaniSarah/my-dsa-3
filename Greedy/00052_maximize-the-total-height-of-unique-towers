https://leetcode.com/problems/maximize-the-total-height-of-unique-towers/description/


3301. Maximize the Total Height of Unique Towers
Medium
Topics
Companies
Hint
You are given an array maximumHeight, where maximumHeight[i] denotes the maximum height the ith tower can be assigned.

Your task is to assign a height to each tower so that:

The height of the ith tower is a positive integer and does not exceed maximumHeight[i].
No two towers have the same height.
Return the maximum possible total sum of the tower heights. If it's not possible to assign heights, return -1.

 

Example 1:

Input: maximumHeight = [2,3,4,3]

Output: 10

Explanation:

We can assign heights in the following way: [1, 2, 4, 3].

Example 2:

Input: maximumHeight = [15,10]

Output: 25

Explanation:

We can assign heights in the following way: [15, 10].

Example 3:

Input: maximumHeight = [2,2,1]

Output: -1

Explanation:

It's impossible to assign positive heights to each index so that no two towers have the same height.

 

Constraints:

1 <= maximumHeight.length <= 105
1 <= maximumHeight[i] <= 109



# java


class Solution {
  public long maximumTotalSum(int[] maximumHeight) {
    long ans = 0;
    int mn = Integer.MAX_VALUE;

    Arrays.sort(maximumHeight);

    for (int i = maximumHeight.length - 1; i >= 0; --i) {
      final int assigned = Math.min(maximumHeight[i], mn - 1);
      if (assigned == 0)
        return -1;
      ans += assigned;
      mn = assigned;
    }

    return ans;
  }
}





or



class Solution {
    public long maximumTotalSum(int[] maximumHeight) {
        long ans = 0;
        int mx = 1 << 30;
        Arrays.sort(maximumHeight);
        for (int i = maximumHeight.length - 1; i >= 0; --i) {
            int x = Math.min(maximumHeight[i], mx - 1);
            if (x <= 0) {
                return -1;
            }
            ans += x;
            mx = x;
        }
        return ans;
    }
}


or



class Solution {
    public long maximumTotalSum(int[] maximumHeight) {
        int n = maximumHeight.length;
        Arrays.sort(maximumHeight);
        
        long sum = 0;
        int lastAssignedHeight = Integer.MAX_VALUE;
        
        for (int i = n - 1; i >= 0; i--) {
            int currentHeight = Math.min(maximumHeight[i], lastAssignedHeight - 1);
            
            if (currentHeight < 1) {
                return -1;
            }
            
            sum += currentHeight;
            lastAssignedHeight = currentHeight;
        }
        
        return sum;
    }
}



or


class Solution {
        public long maximumTotalSum(int[] A) {
        long res = 0;
        int pre = Integer.MAX_VALUE, a;
        Arrays.sort(A);
        for (int i = A.length - 1; i >= 0; --i) {
            pre = a = Math.min(pre - 1, A[i]);
            if (a == 0) {
                return -1;
            }
            res += a;
        }
        return res;
    }
}


or


