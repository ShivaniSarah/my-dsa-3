https://leetcode.com/problems/maximum-xor-product/description/

2939. Maximum Xor Product
Medium
Topics
Companies
Hint
Given three integers a, b, and n, return the maximum value of (a XOR x) * (b XOR x) where 0 <= x < 2n.

Since the answer may be too large, return it modulo 109 + 7.

Note that XOR is the bitwise XOR operation.

 

Example 1:

Input: a = 12, b = 5, n = 4
Output: 98
Explanation: For x = 2, (a XOR x) = 14 and (b XOR x) = 7. Hence, (a XOR x) * (b XOR x) = 98. 
It can be shown that 98 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.
Example 2:

Input: a = 6, b = 7 , n = 5
Output: 930
Explanation: For x = 25, (a XOR x) = 31 and (b XOR x) = 30. Hence, (a XOR x) * (b XOR x) = 930.
It can be shown that 930 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.
Example 3:

Input: a = 1, b = 6, n = 3
Output: 12
Explanation: For x = 5, (a XOR x) = 4 and (b XOR x) = 3. Hence, (a XOR x) * (b XOR x) = 12.
It can be shown that 12 is the maximum value of (a XOR x) * (b XOR x) for all 0 <= x < 2n.
 

Constraints:

0 <= a, b < 250
0 <= n <= 50



# java


class Solution {
    public int maximumXorProduct(long a, long b, int n) {
        final int mod = (int) 1e9 + 7;
        long ax = (a >> n) << n;
        long bx = (b >> n) << n;
        for (int i = n - 1; i >= 0; --i) {
            long x = a >> i & 1;
            long y = b >> i & 1;
            if (x == y) {
                ax |= 1L << i;
                bx |= 1L << i;
            } else if (ax < bx) {
                ax |= 1L << i;
            } else {
                bx |= 1L << i;
            }
        }
        ax %= mod;
        bx %= mod;
        return (int) (ax * bx % mod);
    }
}


or


class Solution {
   public int maximumXorProduct(long a, long b, int n) {
        int mod = 1000000007;
        for (int i = n - 1; i >= 0; --i) {
            long mask = (long) 1 << i;
            if ((a & mask) != 0 && (b & mask) != 0) {
                continue;
            } else if ((a & mask) != 0) {
                if (a > b) {
                    a ^= mask;
                    b |= mask;
                }
                continue;
            } else if ((b & mask) != 0) {
                if (a < b) {
                    a |= mask;
                    b ^= mask;
                }
            } else {
                a |= mask;
                b |= mask;
            }
        }
        a = a % mod;
        b = b % mod;
        return (int) ((1L * a * b) % mod);
    }

}


or


public class Solution {
    public int maximumXorProduct(long a, long b, int n) {
        long ans = 0;
        int big = 0;
        boolean found = false;

        // Iterate through the bits from MSB to LSB (from 50 to 0)
        for (int i = 50; i >= 0; i--) {
            long curr = 1L << i;

            // Check if both bits at 'i' in 'a' and 'b' are 0
            if (((a & curr) == 0) && ((b & curr) == 0)) {
                if (i < n) ans += curr; // If bit index 'i' is less than 'n', add 'curr' to 'ans'
            }
            // Check if bit at 'i' is set in 'a' and not in 'b'
            else if (((a & curr)) != 0 && ((b & curr) == 0)) {
                if (big == 0) big = -1;
                else if (big == -1 && i < n) ans += curr; // XOR 'curr' if conditions met and 'i' < 'n'
            }
            // Check if bit at 'i' is set in 'b' and not in 'a'
            else if (((a & curr) == 0) && ((b & curr) != 0)) {
                if (big == 0) big = 1;
                else if (big == 1 && i < n) ans += curr; // XOR 'curr' if conditions met and 'i' < 'n'
            }
        }

        long mod = 1000000007;
        // Perform XOR between 'a' and 'b' with 'ans' and take modulo
        a ^= ans;
        b ^= ans;
        a %= mod;
        b %= mod;
        ans = (a * b) % mod; // Calculate product modulo 10^9 + 7

        return (int) ans; // Return the resultant maximum XOR product as integer
    }
}



or



