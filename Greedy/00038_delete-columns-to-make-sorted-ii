https://leetcode.com/problems/delete-columns-to-make-sorted-ii/description/


955. Delete Columns to Make Sorted II
Medium
Topics
Companies
You are given an array of n strings strs, all of the same length.

We may choose any deletion indices, and we delete all the characters in those indices for each string.

For example, if we have strs = ["abcdef","uvwxyz"] and deletion indices {0, 2, 3}, then the final array after deletions is ["bef", "vyz"].

Suppose we chose a set of deletion indices answer such that after deletions, the final array has its elements in lexicographic order (i.e., strs[0] <= strs[1] <= strs[2] <= ... <= strs[n - 1]). Return the minimum possible value of answer.length.

 

Example 1:

Input: strs = ["ca","bb","ac"]
Output: 1
Explanation: 
After deleting the first column, strs = ["a", "b", "c"].
Now strs is in lexicographic order (ie. strs[0] <= strs[1] <= strs[2]).
We require at least 1 deletion since initially strs was not in lexicographic order, so the answer is 1.
Example 2:

Input: strs = ["xc","yb","za"]
Output: 0
Explanation: 
strs is already in lexicographic order, so we do not need to delete anything.
Note that the rows of strs are not necessarily in lexicographic order:
i.e., it is NOT necessarily true that (strs[0][0] <= strs[0][1] <= ...)
Example 3:

Input: strs = ["zyx","wvu","tsr"]
Output: 3
Explanation: We have to delete every column.
 

Constraints:

n == strs.length
1 <= n <= 100
1 <= strs[i].length <= 100
strs[i] consists of lowercase English letters.


# java



class Solution {
    public int minDeletionSize(String[] A) {
        if (A == null || A.length <= 1) {
            return 0;
        }
        int len = A.length, wordLen = A[0].length(), res = 0;
        boolean[] cut = new boolean[len];
    search:
        for (int j = 0; j < wordLen; j++) {
            // 判断第 j 列是否应当保留
            for (int i = 0; i < len - 1; i++) {
                if (!cut[i] && A[i].charAt(j) > A[i + 1].charAt(j)) {
                    res += 1;
                    continue search;
                }
            }
            // 更新 cut 的信息
            for (int i = 0; i < len - 1; i++) {
                if (A[i].charAt(j) < A[i + 1].charAt(j)) {
                    cut[i] = true;
                }
            }
        }
        return res;
    }
}


or


class Solution {
    public int minDeletionSize(String[] A) {
        int N = A.length;
        int W = A[0].length();
        int ans = 0;

        // cur : all rows we have written
        // For example, with A = ["abc","def","ghi"] we might have
        // cur = ["ab", "de", "gh"].
        String[] cur = new String[N];
        for (int j = 0; j < W; ++j) {
            // cur2 : What we potentially can write, including the
            //        newest column col = [A[i][j] for i]
            // Eg. if cur = ["ab","de","gh"] and col = ("c","f","i"),
            // then cur2 = ["abc","def","ghi"].
            String[] cur2 = Arrays.copyOf(cur, N);
            for (int i = 0; i < N; ++i)
                cur2[i] += A[i].charAt(j);

            if (isSorted(cur2))
                cur = cur2;
            else
                ans++;
        }

        return ans;
    }

    public boolean isSorted(String[] A) {
        for (int i = 0; i < A.length - 1; ++i)
            if (A[i].compareTo(A[i+1]) > 0)
                return false;

        return true;
    }
}


or


class Solution {
    public int minDeletionSize(String[] A) {
        int N = A.length;
        int W = A[0].length();
        // cuts[j] is true : we don't need to check any new A[i][j] <= A[i][j+1]
        boolean[] cuts = new boolean[N-1];

        int ans = 0;
        search: for (int j = 0; j < W; ++j) {
            // Evaluate whether we can keep this column
            for (int i = 0; i < N-1; ++i)
                if (!cuts[i] && A[i].charAt(j) > A[i+1].charAt(j)) {
                    // Can't keep the column - delete and continue
                    ans++;
                    continue search;
                }

            // Update 'cuts' information
            for (int i = 0; i < N-1; ++i)
                if (A[i].charAt(j) < A[i+1].charAt(j))
                    cuts[i] = true;
        }

        return ans;
    }
}


or


class Solution {
    public int minDeletionSize(String[] strs) {
        int cnt=0,j=0;
        boolean compared[]=new boolean[strs.length];
        for(int i=0;i<strs[0].length();i++){
            boolean currCompared[]=new boolean[strs.length];
            for(j=0;j<strs.length-1;j++){
                if(!compared[j]){ 
                    if(strs[j].charAt(i)>strs[j+1].charAt(i)){
                        cnt++;
                        break;
                    }
                    else if(strs[j].charAt(i)<strs[j+1].charAt(i))
                        currCompared[j]=true;
                }
            }
            if(j==strs.length-1)
                for(;j>0;j--) compared[j-1]|=currCompared[j-1];
        }
        return cnt;
    }
}


or



class Solution {
        public int minDeletionSize(String[] strs) {
        int n = strs.length, m = strs[0].length(), i, j;
        int res = 0;
        //for every col, need to check whether it will increase the deletion.
        //need to go through very column, as it's possible that prior has == thus still need compare.
        boolean[] sorted = new boolean[n];
        for (j = 0; j < m; j++) {
            for (i = 0; i < n - 1; i++) {
                if (!sorted[i] && (strs[i].charAt(j) > strs[i + 1].charAt(j))) {
                    res++;
                    //find one inordered, then need delete the whole col.
                    break;
                }
            }
            //the whole colum is sorted, need keep so later cols can refer i.e., x=x<y.
            if (i == n - 1) {
                for (int k = 0; k < n - 1; k++) {
                    //it's important to combine previous col's result, as FFT | FTF = FTT. F means == here.
                    sorted[k] |= strs[k].charAt(j) < strs[k + 1].charAt(j);
                }
            }
        }
        return res;
    }
}



