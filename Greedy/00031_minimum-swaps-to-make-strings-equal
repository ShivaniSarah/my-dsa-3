https://leetcode.com/problems/minimum-swaps-to-make-strings-equal/description/


1247. Minimum Swaps to Make Strings Equal
Medium
Topics
Companies
Hint
You are given two strings s1 and s2 of equal length consisting of letters "x" and "y" only. Your task is to make these two strings equal to each other. You can swap any two characters that belong to different strings, which means: swap s1[i] and s2[j].

Return the minimum number of swaps required to make s1 and s2 equal, or return -1 if it is impossible to do so.

 

Example 1:

Input: s1 = "xx", s2 = "yy"
Output: 1
Explanation: Swap s1[0] and s2[1], s1 = "yx", s2 = "yx".
Example 2:

Input: s1 = "xy", s2 = "yx"
Output: 2
Explanation: Swap s1[0] and s2[0], s1 = "yy", s2 = "xx".
Swap s1[0] and s2[1], s1 = "xy", s2 = "xy".
Note that you cannot swap s1[0] and s1[1] to make s1 equal to "yx", cause we can only swap chars in different strings.
Example 3:

Input: s1 = "xx", s2 = "xy"
Output: -1
 

Constraints:

1 <= s1.length, s2.length <= 1000
s1.length == s2.length
s1, s2 only contain 'x' or 'y'.



# jva


class Solution {
  public int minimumSwap(String s1, String s2) {
    // ("xx", "yy") = (2 "xy"s) -> 1 swap
    // ("yy", "xx") = (2 "yx"s) -> 1 swap
    // ("xy", "yx") = (1 "xy" and 1 "yx") -> 2 swaps
    int xy = 0; // the number of indices i's s.t. s1[i] = 'x' and s2[i] 'y'
    int yx = 0; // the number of indices i's s.t. s1[i] = 'y' and s2[i] 'x'

    for (int i = 0; i < s1.length(); ++i) {
      if (s1.charAt(i) == s2.charAt(i))
        continue;
      if (s1.charAt(i) == 'x')
        ++xy;
      else
        ++yx;
    }

    if ((xy + yx) % 2 == 1)
      return -1;
    return xy / 2 + yx / 2 + (xy % 2 == 0 ? 0 : 2);
  }
}



or


class Solution {
    public int minimumSwap(String s1, String s2) {
        int xy = 0, yx = 0;
        for (int i = 0; i < s1.length(); ++i) {
            char a = s1.charAt(i), b = s2.charAt(i);
            if (a < b) {
                ++xy;
            }
            if (a > b) {
                ++yx;
            }
        }
        if ((xy + yx) % 2 == 1) {
            return -1;
        }
        return xy / 2 + yx / 2 + xy % 2 + yx % 2;
    }
}



or



class Solution {
    public int minimumSwap(String s1, String s2) {
        if(s1.length() != s2.length()) return -1;
		int n = s1.length();
        int x = 0 , y = 0;
        
        for(int i = 0 ; i < n ; i ++){
            char c1 = s1.charAt(i) , c2 = s2.charAt(i);
            if(c1 == 'x' && c2 == 'y') x++;
            else if(c1 == 'y' && c2 == 'x') y++;
        }
        
        if(x % 2 == 0 && y % 2 == 0) return x/2 + y/2;
        else if(x % 2 == 1 && y % 2 == 1) return x/2 + y/2 + 2;
        return -1;
    }
}


or


class Solution {
    public int minimumSwap(String s1, String s2) {
        int n = s1.length();
        int m = s2.length();
        
		// validate the input
        if (n != m) {
            return -1;
        }
        
        int xmis = 0;  // mismatch where s1[i] has 'x'
        int ymis = 0;  // mismatch where s1[i] has 'y'
        
		// count mismatches
        for (int i = n-1; i >= 0; i--) {
            if (s1.charAt(i) == 'x' && s2.charAt(i) == 'y') {
                xmis++;
            } else if (s1.charAt(i) == 'y' && s2.charAt(i) == 'x') {
                ymis++;
            }
        }
        
		// impossible
		// (1) there should be even numbers of those types of exchanges, in which the first strategy suffices. OR
		// (2) there should be odd numbers of those types of exchanges, in which we apply the fisrt strategy
		// then we apply the second strategy to finish things off
        if (xmis % 2 != ymis % 2) {
            return -1;
        }
        
        int ans = xmis / 2 + ymis / 2; // apply the first strategy
        if (xmis % 2 == 1) {
            ans += 2; // if a mismatch remains, we apply the second strategy
        }
        
        return ans;
    }
}



