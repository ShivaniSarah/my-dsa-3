https://leetcode.com/problems/maximum-value-after-insertion/description/


1881. Maximum Value after Insertion
Medium
Topics
Companies
Hint
You are given a very large integer n, represented as a string,​​​​​​ and an integer digit x. The digits in n and the digit x are in the inclusive range [1, 9], and n may represent a negative number.

You want to maximize n's numerical value by inserting x anywhere in the decimal representation of n​​​​​​. You cannot insert x to the left of the negative sign.

For example, if n = 73 and x = 6, it would be best to insert it between 7 and 3, making n = 763.
If n = -55 and x = 2, it would be best to insert it before the first 5, making n = -255.
Return a string representing the maximum value of n​​​​​​ after the insertion.

 

Example 1:

Input: n = "99", x = 9
Output: "999"
Explanation: The result is the same regardless of where you insert 9.
Example 2:

Input: n = "-13", x = 2
Output: "-123"
Explanation: You can make n one of {-213, -123, -132}, and the largest of those three is -123.
 

Constraints:

1 <= n.length <= 105
1 <= x <= 9
The digits in n​​​ are in the range [1, 9].
n is a valid representation of an integer.
In the case of a negative n,​​​​​​ it will begin with '-'.


# jva


class Solution {
  public String maxValue(String n, int x) {
    boolean isNegative = n.charAt(0) == '-';

    for (int i = 0; i < n.length(); ++i)
      if (!isNegative && n.charAt(i) - '0' < x || isNegative && n.charAt(i) - '0' > x)
        return n.substring(0, i) + x + n.substring(i);

    return n + x;
  }
}

or

class Solution {
    public String maxValue(String n, int x) {
        int i = 0;
        if (n.charAt(0) != '-') {
            for (; i < n.length() && n.charAt(i) - '0' >= x; ++i)
                ;
        } else {
            for (i = 1; i < n.length() && n.charAt(i) - '0' <= x; ++i)
                ;
        }
        return n.substring(0, i) + x + n.substring(i);
    }
}


or


class Solution {
   public String maxValue(String n, int x) {
        char c=n.charAt(0);
        if(c!='-'){
            for(int i=0;i<n.length();i++){
                c=n.charAt(i);
                int num=c-48;
                if(num<x)
                    return n.substring(0,i) + x + n.substring(i);
            }
        }else{
            for(int i=0;i<n.length();i++){
                c=n.charAt(i);
                int num=c-48;
                if(num>x)
                    return n.substring(0,i) + x + n.substring(i);
            }
        }
        return n+x;
    }
}


or


class Solution {
  public String maxValue(String n, int x) {
        StringBuilder sb=new StringBuilder(n);
        int index=n.indexOf("-");        //to check if a number is positive or not
        if(index==-1){                      //if index=-1 then number is positive
            int i=0;
            while(i<n.length()){
                char ch=n.charAt(i);
                int num=ch-'0';
                if(num<x){
                    break;
                }
                i++;
            }
            sb.insert(i,x);
        }else if(index==0){             //number is negative
            int i=1;
            while(i<n.length()){
                char ch=n.charAt(i);
                int num=ch-'0';
                if(num>x){
                    break;
                }
                i++;
            }
            sb.insert(i,x);
        }
        return sb.toString();
    }
}


or


