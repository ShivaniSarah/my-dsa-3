https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-binary-string-alternating/description/

1864. Minimum Number of Swaps to Make the Binary String Alternating
Medium
Topics
Companies
Hint
Given a binary string s, return the minimum number of character swaps to make it alternating, or -1 if it is impossible.

The string is called alternating if no two adjacent characters are equal. For example, the strings "010" and "1010" are alternating, while the string "0100" is not.

Any two characters may be swapped, even if they are not adjacent.

 

Example 1:

Input: s = "111000"
Output: 1
Explanation: Swap positions 1 and 4: "111000" -> "101010"
The string is now alternating.
Example 2:

Input: s = "010"
Output: 0
Explanation: The string is already alternating, no swaps are needed.
Example 3:

Input: s = "1110"
Output: -1
 

Constraints:

1 <= s.length <= 1000
s[i] is either '0' or '1'.


# java


class Solution {
  public int minSwaps(String s) {
    final int ones = (int) s.chars().filter(c -> c == '1').count();
    final int zeros = s.length() - ones;
    if (Math.abs(ones - zeros) > 1)
      return -1;
    if (ones > zeros)
      return countSwaps(s, '1');
    if (zeros > ones)
      return countSwaps(s, '0');
    return Math.min(countSwaps(s, '1'), countSwaps(s, '0'));
  }

  private int countSwaps(final String s, char curr) {
    int swaps = 0;
    for (final char c : s.toCharArray()) {
      if (c != curr)
        ++swaps;
      curr ^= 1;
    }
    return swaps / 2;
  }
}


or


class Solution {
    public int minSwaps(String s) {
        int s0n0 = 0, s0n1 = 0;
        int s1n0 = 0, s1n1 = 0;
        for (int i = 0; i < s.length(); ++i) {
            if ((i & 1) == 0) {
                if (s.charAt(i) != '0') {
                    s0n0 += 1;
                } else {
                    s1n1 += 1;
                }
            } else {
                if (s.charAt(i) != '0') {
                    s1n0 += 1;
                } else {
                    s0n1 += 1;
                }
            }
        }
        if (s0n0 != s0n1 && s1n0 != s1n1) {
            return -1;
        }
        if (s0n0 != s0n1) {
            return s1n0;
        }
        if (s1n0 != s1n1) {
            return s0n0;
        }
        return Math.min(s0n0, s1n0);
    }
}


or

// ebst


class Solution {
    public int minSwaps(String s) {
        int cntZero=0 , cntOne=0;
        for(char ch:s.toCharArray()){
            if(ch=='0') cntZero++;
            else cntOne++;
        }
        
        //Invalid
        if(Math.abs(cntOne-cntZero)>1) return -1;
        
        
        if(cntOne>cntZero){  //one must be at even posotion
            return countSwaps(s,'1');    
        }else if(cntOne<cntZero){
            return countSwaps(s,'0'); //zero must be at even position
        }
        
        return Math.min(countSwaps(s,'0'),countSwaps(s,'1'));    
    }
    
    //wrong count 
    private int countSwaps(String s,char start){
        int wrongPosition=0;
        for(int i=0;i<s.length();i+=2){
            if(s.charAt(i)!=start) wrongPosition++;
        }
        return wrongPosition;
    }
} 


