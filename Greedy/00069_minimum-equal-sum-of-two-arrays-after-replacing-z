https://leetcode.com/problems/minimum-equal-sum-of-two-arrays-after-replacing-zeros/description/

2918. Minimum Equal Sum of Two Arrays After Replacing Zeros
Medium
Topics
Companies
Hint
You are given two arrays nums1 and nums2 consisting of positive integers.

You have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal.

Return the minimum equal sum you can obtain, or -1 if it is impossible.

 

Example 1:

Input: nums1 = [3,2,0,1,0], nums2 = [6,5,0]
Output: 12
Explanation: We can replace 0's in the following way:
- Replace the two 0's in nums1 with the values 2 and 4. The resulting array is nums1 = [3,2,2,1,4].
- Replace the 0 in nums2 with the value 1. The resulting array is nums2 = [6,5,1].
Both arrays have an equal sum of 12. It can be shown that it is the minimum sum we can obtain.
Example 2:

Input: nums1 = [2,0,2,0], nums2 = [1,4]
Output: -1
Explanation: It is impossible to make the sum of both arrays equal.
 

Constraints:

1 <= nums1.length, nums2.length <= 105
0 <= nums1[i], nums2[i] <= 106


 #java


class Solution {
    public long minSum(int[] nums1, int[] nums2) {
        long s1 = 0, s2 = 0;
        boolean hasZero = false;
        for (int x : nums1) {
            hasZero |= x == 0;
            s1 += Math.max(x, 1);
        }
        for (int x : nums2) {
            s2 += Math.max(x, 1);
        }
        if (s1 > s2) {
            return minSum(nums2, nums1);
        }
        if (s1 == s2) {
            return s1;
        }
        return hasZero ? s2 : -1;
    }
}


or


class Solution {
  public long minSum(int[] nums1, int[] nums2) {
    final long sum1 = Arrays.stream(nums1).asLongStream().sum();
    final long sum2 = Arrays.stream(nums2).asLongStream().sum();
    final long zero1 = Arrays.stream(nums1).filter(num -> num == 0).count();
    final long zero2 = Arrays.stream(nums2).filter(num -> num == 0).count();
    if (zero1 == 0 && sum1 < sum2 + zero2)
      return -1;
    if (zero2 == 0 && sum2 < sum1 + zero1)
      return -1;
    return Math.max(sum1 + zero1, sum2 + zero2);
  }
}


or


class Solution {

    public long minSum(int[] nums1, int[] nums2) {
        long sum1 = 0, sum2 = 0;
        long zero1 = 0, zero2 = 0;

        for (int i : nums1) {
            sum1 += i;
            if (i == 0) {
                sum1++;
                zero1++;
            }
        }

        for (int i : nums2) {
            sum2 += i;
            if (i == 0) {
                sum2++;
                zero2++;
            }
        }

        if ((zero1 == 0 && sum2 > sum1) || (zero2 == 0 && sum1 > sum2)) {
            return -1;
        }

        return Math.max(sum1, sum2);
    }
}


or


class Solution {
       public long minSum(int[] A, int[] B) {
        long sa = 0, sb = 0, a0 = 0, b0 = 0;
        for (int a: A) {
            a0 += a > 0 ? 0: 1;
            sa += Math.max(a, 1);
        }
        for (int b: B) {
            b0 += b > 0 ? 0: 1;
            sb += Math.max(b, 1);
        }
        if (sa < sb && a0 == 0) return -1;
        if (sa > sb && b0 == 0) return -1;
        return Math.max(sa, sb);
    }
}


or



import java.util.ArrayList;

public class Solution {
    public long minSum(ArrayList<Integer> nums1, ArrayList<Integer> nums2) {
        long sum1 = 0, cnt1 = 0;
        long sum2 = 0, cnt2 = 0;

        for (int ele : nums1) {
            if (ele != 0) {
                sum1 += ele;
            } else {
                sum1++;
                cnt1++;
            }
        }

        for (int ele : nums2) {
            if (ele != 0) {
                sum2 += ele;
            } else {
                sum2++;
                cnt2++;
            }
        }

        if (sum1 == sum2)
            return sum1;
        else if (sum1 > sum2) {
            if (cnt2 == 0)
                return -1;
            return sum1;
        }

        if (cnt1 == 0)
            return -1;
        return sum2;
    }
}




or


