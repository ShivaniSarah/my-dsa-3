https://leetcode.com/problems/minimum-number-of-groups-to-create-a-valid-assignment/

2910. Minimum Number of Groups to Create a Valid Assignment
Medium
Topics
Companies
Hint
You are given a collection of numbered balls and instructed to sort them into boxes for a nearly balanced distribution. There are two rules you must follow:

Balls with the same box must have the same value. But, if you have more than one ball with the same number, you can put them in different boxes.
The biggest box can only have one more ball than the smallest box.
â€‹Return the fewest number of boxes to sort these balls following these rules.

 

Example 1:

Input: balls = [3,2,3,2,3]

Output: 2

Explanation:

We can sort balls into boxes as follows:

[3,3,3]
[2,2]
The size difference between the two boxes doesn't exceed one.

Example 2:

Input: balls = [10,10,10,3,1,1]

Output: 4

Explanation:

We can sort balls into boxes as follows:

[10]
[10,10]
[3]
[1,1]
You can't use fewer than four boxes while still following the rules. For example, putting all three balls numbered 10 in one box would break the rule about the maximum size difference between boxes.

 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109



# java



class Solution {
  public int minGroupsForValidAssignment(int[] nums) {
    Map<Integer, Integer> count = new HashMap<>();
    int minFreq = nums.length;

    for (final int num : nums)
      count.merge(num, 1, Integer::sum);

    for (final int freq : count.values())
      minFreq = Math.min(minFreq, freq);

    for (int groupSize = minFreq; groupSize >= 1; --groupSize) {
      final int numGroups = getNumGroups(count, groupSize);
      if (numGroups > 0)
        return numGroups;
    }

    throw new IllegalArgumentException();
  }

  // Returns the number of groups if each group's size is `groupSize` or
  // `groupSize + 1`.
  private int getNumGroups(Map<Integer, Integer> count, int groupSize) {
    int numGroups = 0;
    for (final int freq : count.values()) {
      final int a = freq / (groupSize + 1);
      final int b = freq % (groupSize + 1);
      if (b == 0) {
        numGroups += a;
      } else if (groupSize - b <= a) {
        // Assign 1 number from `groupSize - b` out of `a` groups to this group,
        // so we'll have `a - (groupSize - b)` groups of size `groupSize + 1`
        // and `groupSize - b + 1` groups of size `groupSize`. In total, we have
        // `a + 1` groups.
        numGroups += a + 1;
      } else {
        return 0;
      }
    }
    return numGroups;
  }
}





or


class Solution {
    public int minGroupsForValidAssignment(int[] nums) {
        Map<Integer, Integer> cnt = new HashMap<>();
        for (int x : nums) {
            cnt.merge(x, 1, Integer::sum);
        }
        int k = nums.length;
        for (int v : cnt.values()) {
            k = Math.min(k, v);
        }
        for (;; --k) {
            int ans = 0;
            for (int v : cnt.values()) {
                if (v / k < v % k) {
                    ans = 0;
                    break;
                }
                ans += (v + k) / (k + 1);
            }
            if (ans > 0) {
                return ans;
            }
        }
    }
}


or


class Solution {
    public int minGroupsForValidAssignment(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for(int n : nums) {
            map.put(n, map.getOrDefault(n, 0) + 1);
        }
        
        int min = nums.length;
        for(int v : map.values()) {
            min = Math.min(min, v);
        }

        for(int size = min; size >= 1; --size) {
            int numGroups = groupify(map, size); 
            if(numGroups > 0) return numGroups;
        }
        
        return nums.length;
    }
    
    private int groupify(Map<Integer, Integer> map, int size) {
        int groups = 0;
        int next = size + 1;
        
        for(int value : map.values()) {
            int numGroups = value / next;
            int remaining = value % next;

            if(remaining == 0) {
                groups += numGroups;
            }
            // So far we have divided things into numGroups + 1 groups
            // where the first numGroups have size + 1 elements
            // and the last group has has remaining = {1 ... size} elements.
            //
            // In order to make this grouping valid, each group out of numGroups
            // can potentially give 1 element to the last group.
            //
            // The idea is that a subset of those groups should be able to give 1 element 
            // each to the last group so that the last group also has size elements. 
            //
            // In other words, in order for the last group to have size elements, 
            // size - remaining groups have to contribute 1 element each.
            // 
            // So there must be at least size - remaining groups of size + 1 elements.
            else if(numGroups >= size - remaining) {
                groups += numGroups + 1;
            } 
            else {
                return 0;
            }
        }
        return groups;
    }
}



or


class Solution {
       public int minGroupsForValidAssignment(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int i = 0; i < nums.length; i++) map.put(nums[i], map.getOrDefault(nums[i], 0)+1);

        int minFreq = Integer.MAX_VALUE;
        for (int val : map.values()) minFreq = Math.min(val, minFreq);

        int minGroups = Integer.MAX_VALUE;
        for (int g = 1; g <= minFreq; g++){
            int groups = 0;
            for (int frequency : map.values()){
                groups += getMinimumGroupsToSplit(frequency, g);
            }
            minGroups = Math.min(groups, minGroups);
        }
        return minGroups;
    }

    private static int MAX_GROUPS = 1000_000;
    private int getMinimumGroupsToSplit(int target, int g){
        int tarDiv = target/(g+1);
        int k = target%(g+1) == 0 ? tarDiv : tarDiv+1;
        double upper = (double)target/g;
        if (k > upper) return MAX_GROUPS;
        return k;
    }
    
}


or


import java.util.*;

class Solution {
    private int ans;

    public void solve(Map<Integer, Integer> m, int k) {
        int c = 0;
        int a = k, b = k + 1;
        int f = 0;
        for (Map.Entry<Integer, Integer> entry : m.entrySet()) {
            int s = entry.getValue();
            if (s == a || s == b) {
                c++;
                continue;
            }
            int x = s / b;
            s = s % b;
            if (s == 0) {
                c = c + x;
                continue;
            }
            int y = a - s;
            if (x >= y) {
                c = c + x + 1;
            } else {
                f = 1;
                break;
            }
        }
        if (f == 0) {
            ans = Math.min(ans, c);
        }
    }

    public int minGroupsForValidAssignment(int[] v) {
        int n = v.length;
        Map<Integer, Integer> m = new HashMap<>();
        for (int i : v) {
            m.put(i, m.getOrDefault(i, 0) + 1);
        }
        int l = 1, h = Integer.MAX_VALUE;
        for (int value : m.values()) {
            h = Math.min(h, value);
        }
        ans = Integer.MAX_VALUE;
        while (l <= h) {
            solve(m, l);
            l++;
        }
        return ans;
    }
}


or

class Solution {
    Map<Integer, Integer> resource = new HashMap<>();
    public int minGroupsForValidAssignment(int[] nums) {
        int len = nums.length;
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        
        List<Integer> values = new ArrayList<>(map.values()); 
    
        // Just linear traversal to try each different group size, I started with applying binary search and found out it's wrong to use binary search for this question.
        // Start trying from the largest group size then expecting minimal group numbers.
        for (int i = len; i >= 0; i--) {
            int tmp = allCanDivide(values, i);
            if (tmp != -1) return tmp;
        }
        return -1;
    }
    
    private int allCanDivide(List<Integer> values, int i) {
        // Simply ensure all frequency can divide.
        int sum = 0;
        for (int n : values) {
            int tmp = canDivide(n, i);
            if (tmp == -1) {
                return -1;
            }
            sum += tmp;
        }
        return sum;
    }
    
    
    private int canDivide(int n, int i) {
        // For each frequency, can divide int i and i + 1, which is prioritized.
        int j = i + 1;
        for (int x = 0; x * i <= n; x++) {
            if ((n - x * i) % j == 0) {
                return x + (n - x * i) / j;
            }
        }
        
        // Can divide just by i.
        if (n % i == 0) return n / i;

        return -1;
    }
}

