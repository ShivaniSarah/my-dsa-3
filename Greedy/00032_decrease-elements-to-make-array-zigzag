https://leetcode.com/problems/decrease-elements-to-make-array-zigzag/description/

1144. Decrease Elements To Make Array Zigzag
Medium
Topics
Companies
Hint
Given an array nums of integers, a move consists of choosing any element and decreasing it by 1.

An array A is a zigzag array if either:

Every even-indexed element is greater than adjacent elements, ie. A[0] > A[1] < A[2] > A[3] < A[4] > ...
OR, every odd-indexed element is greater than adjacent elements, ie. A[0] < A[1] > A[2] < A[3] > A[4] < ...
Return the minimum number of moves to transform the given array nums into a zigzag array.

 

Example 1:

Input: nums = [1,2,3]
Output: 2
Explanation: We can decrease 2 to 0 or 3 to 1.
Example 2:

Input: nums = [9,6,1,6,2]
Output: 4
 

Constraints:

1 <= nums.length <= 1000
1 <= nums[i] <= 1000



# java


class Solution {
  public int movesToMakeZigzag(int[] nums) {
    int[] decreasing = new int[2];

    for (int i = 0; i < nums.length; ++i) {
      int l = i > 0 ? nums[i - 1] : 1001;
      int r = i + 1 < nums.length ? nums[i + 1] : 1001;
      decreasing[i % 2] += Math.max(0, nums[i] - Math.min(l, r) + 1);
    }

    return Math.min(decreasing[0], decreasing[1]);
  }
}


or


class Solution {
    public int movesToMakeZigzag(int[] nums) {
        int[] ans = new int[2];
        int n = nums.length;
        for (int i = 0; i < 2; ++i) {
            for (int j = i; j < n; j += 2) {
                int d = 0;
                if (j > 0) {
                    d = Math.max(d, nums[j] - nums[j - 1] + 1);
                }
                if (j < n - 1) {
                    d = Math.max(d, nums[j] - nums[j + 1] + 1);
                }
                ans[i] += d;
            }
        }
        return Math.min(ans[0], ans[1]);
    }
}


or


class Solution {

//Basic idea is to minimize each index with respect to its neighbours
public int movesToMakeZigzag(int[] nums) {
    int n = nums.length, 
		oddCost = 0,  //cost to make odd indices lower than their neighbours cost to make even indices lower than their neighbours
		evenCost = 0; //cost to make odd indices lower than their neighbours cost to make even indices lower than their neighbours
   
   for(int i = 0; i < nums.length; i++){
        
        if((i - 1 >= 0 && nums[i - 1] <= nums[i]) || (i + 1 < n && nums[i + 1] <= nums[i])){ //if any of the neighbour is less than the curr index then reduce it 
            int min = Integer.MAX_VALUE; //find neigbour with minimum value
            
            if(i - 1 >= 0)
                min = Math.min(min, nums[i - 1]);
            if(i + 1 < n)
                min = Math.min(min, nums[i + 1]);
            
            int cost = nums[i] - min + 1; //caluclate cost to make the value of current index lower than its neighbours
            
			//add cost to corresponding index cost variable
            if(i % 2 == 0)
                evenCost += cost;
            else
                oddCost += cost;
            
        }
    }
    
    return Math.min(oddCost, evenCost);
}
}


or


class Solution {

public int movesToMakeZigzag(int[] nums) {
        int N = nums.length;
        int res1 = 0, res2 = 0;
        int before, after;

        for (int i = 0; i < N; i++) {
            //calculate adjacent neighbours - one before and one after
            before = (i - 1) >= 0 ? nums[i - 1] : Integer.MAX_VALUE;
            after = (i + 1) < N ? nums[i + 1] : Integer.MAX_VALUE;
            //calculate running count of steps for each option
            int steps = Math.max(0, nums[i] - Math.min(before, after) + 1);
            if (i % 2 == 0) res1 += steps;
            else res2 += steps;
        }
        //return min of two options
        return Math.min(res1, res2);
}
}



or



