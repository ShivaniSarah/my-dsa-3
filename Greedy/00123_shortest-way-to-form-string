https://leetcode.com/problems/shortest-way-to-form-string/description/


1055. Shortest Way to Form String
Description
A subsequence of a string is a new string that is formed from the original string by deleting some (can be none) of the characters without disturbing the relative positions of the remaining characters. (i.e., "ace" is a subsequence of "abcde" while "aec" is not).

Given two strings source and target, return the minimum number of subsequences of source such that their concatenation equals target. If the task is impossible, return -1.

 

Example 1:

Input: source = "abc", target = "abcbc"
Output: 2
Explanation: The target "abcbc" can be formed by "abc" and "bc", which are subsequences of source "abc".
Example 2:

Input: source = "abc", target = "acdbc"
Output: -1
Explanation: The target string cannot be constructed from the subsequences of source string due to the character "d" in target string.
Example 3:

Input: source = "xyz", target = "xzyxz"
Output: 3
Explanation: The target string can be constructed as follows "xz" + "y" + "xz".
 

Constraints:

1 <= source.length, target.length <= 1000
source and target consist of lowercase English letters.



# ajav



class Solution {
  public int shortestWay(String source, String target) {
    int ans = 0;

    for (int i = 0; i < target.length();) {
      final int prevIndex = i;
      for (int j = 0; j < source.length(); ++j)
        if (i < target.length() && source.charAt(j) == target.charAt(i))
          ++i;
      // All chars in source didn't match target[i].
      if (i == prevIndex)
        return -1;
      ++ans;
    }

    return ans;
  }
}


or


class Solution {
  public int shortestWay(String source, String target) {
    final int m = source.length();
    final int n = target.length();
    // dp[i][c] := the earliest index >= i s.t. source[index] = c
    // dp[i][c] := -1 if c isn't in the source
    int[][] dp = new int[m][26];

    Arrays.stream(dp).forEach(A -> Arrays.fill(A, -1));

    dp[m - 1][source.charAt(m - 1) - 'a'] = m - 1;
    for (int i = m - 2; i >= 0; --i) {
      dp[i] = dp[i + 1].clone();
      dp[i][source.charAt(i) - 'a'] = i;
    }

    int ans = 0;
    int i = 0; // source's index

    for (final char c : target.toCharArray()) {
      if (dp[0][c - 'a'] == -1)
        return -1;
      // If there are no c's left in source that occur more than i times but
      // there are c's from earlier in the subsequence, add 1 to subsequence
      // count and reset source's index to 0.
      if (dp[i][c - 'a'] == -1) {
        ++ans;
        i = 0;
      }
      // Continue taking letters from the subsequence.
      i = dp[i][c - 'a'] + 1;
      if (i == m) {
        ++ans;
        i = 0;
      }
    }

    return ans + (i == 0 ? 0 : 1);
  }
}



or




class Solution {
    public int shortestWay(String source, String target) {
        int m = source.length(), n = target.length();
        int ans = 0, j = 0;
        while (j < n) {
            int i = 0;
            boolean ok = false;
            while (i < m && j < n) {
                if (source.charAt(i) == target.charAt(j)) {
                    ok = true;
                    ++j;
                }
                ++i;
            }
            if (!ok) {
                return -1;
            }
            ++ans;
        }
        return ans;
    }
}



