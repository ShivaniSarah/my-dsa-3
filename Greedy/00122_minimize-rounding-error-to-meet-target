https://leetcode.com/problems/minimize-rounding-error-to-meet-target/description/



1058. Minimize Rounding Error to Meet Target
Description
Given an array of prices [p1,p2...,pn] and a target, round each price pi to Roundi(pi) so that the rounded array [Round1(p1),Round2(p2)...,Roundn(pn)] sums to the given target. Each operation Roundi(pi) could be either Floor(pi) or Ceil(pi).

Return the string "-1" if the rounded array is impossible to sum to target. Otherwise, return the smallest rounding error, which is defined as Î£ |Roundi(pi) - (pi)| for i from 1 to n, as a string with three places after the decimal.

 

Example 1:

Input: prices = ["0.700","2.800","4.900"], target = 8
Output: "1.000"
Explanation:
Use Floor, Ceil and Ceil operations to get (0.7 - 0) + (3 - 2.8) + (5 - 4.9) = 0.7 + 0.2 + 0.1 = 1.0 .
Example 2:

Input: prices = ["1.500","2.500","3.500"], target = 10
Output: "-1"
Explanation: It is impossible to meet the target.
Example 3:

Input: prices = ["1.500","2.500","3.500"], target = 9
Output: "1.500"
 

Constraints:

1 <= prices.length <= 500
Each string prices[i] represents a real number in the range [0.0, 1000.0] and has exactly 3 decimal places.
0 <= target <= 106



# java




class Solution {
  public String minimizeError(String[] prices, int target) {
    // A[i] := (costCeil - costFloor, costCeil, costFloor)
    // The lower the costCeil - costFloor is, the cheaper to ceil it.
    List<double[]> A = new ArrayList<>();
    int sumFloored = 0;
    int sumCeiled = 0;

    for (final String p : prices) {
      final double price = Double.parseDouble(p);
      final int floored = (int) Math.floor(price);
      final int ceiled = (int) Math.ceil(price);
      sumFloored += floored;
      sumCeiled += ceiled;
      final double costFloor = price - (double) floored;
      final double costCeil = (double) ceiled - price;
      A.add(new double[] {costCeil - costFloor, costCeil, costFloor});
    }

    if (sumFloored > target || sumCeiled < target)
      return "-1";

    Collections.sort(A, new Comparator<double[]>() {
      @Override
      public int compare(double[] a, double[] b) {
        return Double.compare(a[0], b[0]);
      }
    });

    double sumError = 0.0;
    final int nCeiled = target - sumFloored;
    for (int i = 0; i < nCeiled; ++i)
      sumError += A.get(i)[1];
    for (int i = nCeiled; i < A.size(); ++i)
      sumError += A.get(i)[2];

    return String.format("%.3f", sumError);
  }
}



or




class Solution {
    public String minimizeError(String[] prices, int target) {
        int mi = 0;
        List<Double> arr = new ArrayList<>();
        for (String p : prices) {
            double price = Double.valueOf(p);
            mi += (int) price;
            double d = price - (int) price;
            if (d > 0) {
                arr.add(d);
            }
        }
        if (target < mi || target > mi + arr.size()) {
            return "-1";
        }
        int d = target - mi;
        arr.sort(Collections.reverseOrder());
        double ans = d;
        for (int i = 0; i < d; ++i) {
            ans -= arr.get(i);
        }
        for (int i = d; i < arr.size(); ++i) {
            ans += arr.get(i);
        }
        DecimalFormat df = new DecimalFormat("#0.000");
        return df.format(ans);
    }
}

