https://leetcode.com/problems/minimum-number-of-people-to-teach/description/

1733. Minimum Number of People to Teach
Medium
Topics
Companies
Hint
On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.

You are given an integer n, an array languages, and an array friendships where:

There are n languages numbered 1 through n,
languages[i] is the set of languages the i​​​​​​th​​​​ user knows, and
friendships[i] = [u​​​​​​i​​​, v​​​​​​i] denotes a friendship between the users u​​​​​​​​​​​i​​​​​ and vi.
You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.

Note that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.
 

Example 1:

Input: n = 2, languages = [[1],[2],[1,2]], friendships = [[1,2],[1,3],[2,3]]
Output: 1
Explanation: You can either teach user 1 the second language or user 2 the first language.
Example 2:

Input: n = 3, languages = [[2],[1,3],[1,2],[3]], friendships = [[1,4],[1,2],[3,4],[2,3]]
Output: 2
Explanation: Teach the third language to users 1 and 3, yielding two users to teach.
 

Constraints:

2 <= n <= 500
languages.length == m
1 <= m <= 500
1 <= languages[i].length <= n
1 <= languages[i][j] <= n
1 <= u​​​​​​i < v​​​​​​i <= languages.length
1 <= friendships.length <= 500
All tuples (u​​​​​i, v​​​​​​i) are unique
languages[i] contains only unique values


# java


class Solution {
  public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
    List<Set<Integer>> languageSets = new ArrayList<>();
    Set<Integer> needTeach = new HashSet<>();
    Map<Integer, Integer> languageCount = new HashMap<>();

    for (int[] language : languages)
      languageSets.add(new HashSet<>(Arrays.stream(language).boxed().toList()));

    // Find friends that can't communicate.
    for (int[] friendship : friendships) {
      final int u = friendship[0] - 1;
      final int v = friendship[1] - 1;
      if (cantTalk(languageSets, u, v)) {
        needTeach.add(u);
        needTeach.add(v);
      }
    }

    // Find the most popular language.
    for (int u : needTeach)
      for (final int language : languageSets.get(u))
        languageCount.merge(language, 1, Integer::sum);

    // Teach the most popular language to people who don't understand.
    int maxCount = 0;
    for (int freq : languageCount.values())
      maxCount = Math.max(maxCount, freq);

    return needTeach.size() - maxCount;
  }

  // Returns true if u can't talk with v.
  private boolean cantTalk(List<Set<Integer>> languageSets, int u, int v) {
    for (int language : languageSets.get(u))
      if (languageSets.get(v).contains(language))
        return false;
    return true;
  }
}


or


class Solution {
    public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
        Set<Integer> s = new HashSet<>();
        for (var e : friendships) {
            int u = e[0], v = e[1];
            if (!check(u, v, languages)) {
                s.add(u);
                s.add(v);
            }
        }
        if (s.isEmpty()) {
            return 0;
        }
        int[] cnt = new int[n + 1];
        for (int u : s) {
            for (int l : languages[u - 1]) {
                ++cnt[l];
            }
        }
        int mx = 0;
        for (int v : cnt) {
            mx = Math.max(mx, v);
        }
        return s.size() - mx;
    }

    private boolean check(int u, int v, int[][] languages) {
        for (int x : languages[u - 1]) {
            for (int y : languages[v - 1]) {
                if (x == y) {
                    return true;
                }
            }
        }
        return false;
    }
}



or


class Solution {
    public int minimumTeachings(int n, int[][] languages, int[][] friendships) {
        //This is the language map . Key is the person , The hashSet is the languages he can speak. We use a hashset to optimize the searching
        HashMap<Integer,HashSet<Integer>> languageMap = new HashMap<>();
        
        //We put the languages known to a map
        for(int i=0;i<languages.length;i++){
            
            languageMap.put(i+1,new HashSet<>());
            
            for(int l : languages[i])
                languageMap.get(i+1).add(l);
            
        }
        
        //THis is the length of languages matrix
        int ans = languages.length;
        
        //For each language we count the minimum no of people whom we need to teach a particular language i
        for(int i=1;i<=n;i++){
            ans = Math.min(ans,num_of_users_to_teach(i,friendships,languageMap));
        }
        
        //The minimum no of people is returned
        return ans;
        
        
        
    }
    //This method counts the minimum no of people to teach a given language lang so that all of them can communicate.
    private int num_of_users_to_teach(int lang,int[][] friendships,  HashMap<Integer,HashSet<Integer>> languageMap){
        
        //We put the unique no of people whom we need to teach languages
        HashSet<Integer> temp = new HashSet<>();
        
        for(int i=0;i<friendships.length;i++){
            //first and second refers to two persons forming a friendship
            int first = friendships[i][0];
            int second = friendships[i][1];
            //languages spoken by the first user
            HashSet<Integer> lang_first = languageMap.get(first);
            //Languages spoken by the second user
            HashSet<Integer> lang_second = languageMap.get(second);
            
            //We first check whether they can communicate which adding this language lang.
            if(!isCommon(lang_first,lang_second)){
                //If the language lang is not present in the first persons vocabulary we add it.
                if(!lang_first.contains(lang))
                    temp.add(first);
                //If the language lang is not present in the second  persons vocabulary we add it.
                if(!lang_second.contains(lang))
                    temp.add(second);
                
            }
            
            
            
        }
        
        return temp.size();
        
        
    }
    
    //This method checks whether the communication between two person is possible or not .
    private boolean isCommon(HashSet<Integer> first,HashSet<Integer> second){
        
        for(int k : first){
            if(second.contains(k))
                return true;
        }
        return false;
        
        
    }
    
    
}


or


class Solution {
    public int minimumTeachings(int n, int[][] L, int[][] F) {
        BitSet[] bit = new BitSet[L.length];
        Arrays.setAll(bit, o -> new BitSet(n + 1));
        for (int i = 0; i < L.length; i++){
            for (int l : L[i]){
                bit[i].set(l);
            }
        }
        Set<Integer> teach = new HashSet<>();
        for (int[] f : F){
            BitSet t = (BitSet)bit[f[0] - 1].clone();
            t.and(bit[f[1] - 1]);
            if (t.isEmpty()){
                teach.add(f[0] - 1);
                teach.add(f[1] - 1);
            }
        }
        int[] count = new int[n + 1];
        for (int person : teach){
            for (int l : L[person]){
                count[l]++;
            }
        }

        return teach.size() - Arrays.stream(count).max().getAsInt();
    }
}



