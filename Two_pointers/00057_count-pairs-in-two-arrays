https://leetcode.com/problems/count-pairs-in-two-arrays/description/

1885. Count Pairs in Two Arrays
Description
Given two integer arrays nums1 and nums2 of length n, count the pairs of indices (i, j) such that i < j and nums1[i] + nums1[j] > nums2[i] + nums2[j].

Return the number of pairs satisfying the condition.

 

Example 1:

Input: nums1 = [2,1,2,1], nums2 = [1,2,1,2]
Output: 1
Explanation: The pairs satisfying the condition are:
- (0, 2) where 2 + 2 > 1 + 1.
Example 2:

Input: nums1 = [1,10,6,2], nums2 = [1,4,1,5]
Output: 5
Explanation: The pairs satisfying the condition are:
- (0, 1) where 1 + 10 > 1 + 4.
- (0, 2) where 1 + 6 > 1 + 1.
- (1, 2) where 10 + 6 > 4 + 1.
- (1, 3) where 10 + 2 > 4 + 5.
- (2, 3) where 6 + 2 > 1 + 5.
 

Constraints:

n == nums1.length == nums2.length
1 <= n <= 105
1 <= nums1[i], nums2[i] <= 105


# java



class Solution {
  public long countPairs(int[] nums1, int[] nums2) {
    long ans = 0;
    int[] arr = new int[nums1.length]; // arr[i] = nums1[i] - nums2[i]

    for (int i = 0; i < arr.length; ++i)
      arr[i] = nums1[i] - nums2[i];

    Arrays.sort(arr);

    for (int i = 0; i < arr.length; ++i) {
      final int index = firstGreater(arr, -arr[i]);
      ans += arr.length - Math.max(i + 1, index);
    }

    return ans;
  }

  private int firstGreater(int[] arr, int target) {
    int l = 0;
    int r = arr.length;
    while (l < r) {
      final int m = (l + r) / 2;
      if (arr[m] > target)
        r = m;
      else
        l = m + 1;
    }
    return l;
  }
}





or




class Solution {
    public long countPairs(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int[] d = new int[n];
        for (int i = 0; i < n; ++i) {
            d[i] = nums1[i] - nums2[i];
        }
        Arrays.sort(d);
        long ans = 0;
        for (int i = 0; i < n; ++i) {
            int left = i + 1, right = n;
            while (left < right) {
                int mid = (left + right) >> 1;
                if (d[mid] > -d[i]) {
                    right = mid;
                } else {
                    left = mid + 1;
                }
            }
            ans += n - left;
        }
        return ans;
    }
}



