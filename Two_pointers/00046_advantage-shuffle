https://leetcode.com/problems/advantage-shuffle/description/


870. Advantage Shuffle
Medium
Topics
Companies
You are given two integer arrays nums1 and nums2 both of the same length. The advantage of nums1 with respect to nums2 is the number of indices i for which nums1[i] > nums2[i].

Return any permutation of nums1 that maximizes its advantage with respect to nums2.

 

Example 1:

Input: nums1 = [2,7,11,15], nums2 = [1,10,4,11]
Output: [2,11,7,15]
Example 2:

Input: nums1 = [12,24,8,32], nums2 = [13,25,32,11]
Output: [24,32,8,12]
 

Constraints:

1 <= nums1.length <= 105
nums2.length == nums1.length
0 <= nums1[i], nums2[i] <= 109


# java


class Solution {
  public int[] advantageCount(int[] nums1, int[] nums2) {
    TreeMap<Integer, Integer> map = new TreeMap<>();

    for (final int num : nums1)
      map.merge(num, 1, Integer::sum);

    for (int i = 0; i < nums2.length; i++) {
      Integer key = map.higherKey(nums2[i]);
      if (key == null)
        key = map.firstKey();
      if (map.merge(key, -1, Integer::sum) == 0)
        map.remove(key);
      nums1[i] = key;
    }

    return nums1;
  }
}


or


class Solution {
    public int[] advantageCount(int[] nums1, int[] nums2) {
        int n = nums1.length;
        int[][] t = new int[n][2];
        for (int i = 0; i < n; ++i) {
            t[i] = new int[] {nums2[i], i};
        }
        Arrays.sort(t, (a, b) -> a[0] - b[0]);
        Arrays.sort(nums1);
        int[] ans = new int[n];
        int i = 0, j = n - 1;
        for (int v : nums1) {
            if (v <= t[i][0]) {
                ans[t[j--][1]] = v;
            } else {
                ans[t[i++][1]] = v;
            }
        }
        return ans;
    }
}



or



class Solution {
    public int[] advantageCount(int[] A, int[] B) {
        int[] sortedA = A.clone();
        Arrays.sort(sortedA);
        int[] sortedB = B.clone();
        Arrays.sort(sortedB);

        // assigned[b] = list of a that are assigned to beat b
        Map<Integer, Deque<Integer>> assigned = new HashMap();
        for (int b: B) assigned.put(b, new LinkedList());

        // remaining = list of a that are not assigned to any b
        Deque<Integer> remaining = new LinkedList();

        // populate (assigned, remaining) appropriately
        // sortedB[j] is always the smallest unassigned element in B
        int j = 0;
        for (int a: sortedA) {
            if (a > sortedB[j]) {
                assigned.get(sortedB[j++]).add(a);
            } else {
                remaining.add(a);
            }
        }

        // Reconstruct the answer from annotations (assigned, remaining)
        int[] ans = new int[B.length];
        for (int i = 0; i < B.length; ++i) {
            // if there is some a assigned to b...
            if (assigned.get(B[i]).size() > 0)
                ans[i] = assigned.get(B[i]).pop();
            else
                ans[i] = remaining.pop();
        }
        return ans;
    }
}


or




class Solution {
    public int[] advantageCount(int[] A, int[] B) {
        Integer[] ord = new Integer[B.length];
        int[] ans = new int[A.length];
        for (int i = 0; i < B.length; i++) ord[i] = i;
        Arrays.sort(ord, (a,b) -> Integer.compare(B[b], B[a]));
        Arrays.sort(A);
        int i = 0, j = B.length - 1;
        for (int ix : ord)
            ans[ix] = A[j] > B[ix] ? A[j--] : A[i++];
        return ans;
    }
}



or



class Solution {
    public int[] advantageCount(int[] nums1, int[] nums2) {
        Arrays.sort(nums1);
        int[][] nums2Clone = new int[nums1.length][2];
        for (int i = 0; i < nums1.length; i++) {
            nums2Clone[i][0] = i;
            nums2Clone[i][1] = nums2[i];
        }
        Arrays.sort(nums2Clone, Comparator.comparingInt(a -> a[1]));
        return swapNums(nums1, nums2Clone);
    }

    private int[] swapNums(int[] nums1, int[][] nums2Clone) {
        int[] target = new int[nums1.length];
        Arrays.fill(target, -1);
        ArrayList<Integer> unused = new ArrayList<>();
        for (int i = 0, j = 0; i < nums1.length && j < nums2Clone.length; i++) {
            if (nums1[i] <= nums2Clone[j][1]) {
                unused.add(nums1[i]);
            } else {
                target[nums2Clone[j][0]] = nums1[i];
                j++;
            }
        }
        for (int i = 0, j = 0; i < nums1.length && j < unused.size(); i++) {
            if (target[i] == -1) {
                target[i] = unused.get(j++);
            }
        }
        return target;
    }
}


or



class Solution {
    public int[] advantageCount(int[] nums1, int[] nums2) {
        int n = nums1.length;
        // sort nums2 in descending order
        PriorityQueue<int[]> maxpq = new PriorityQueue<>(
            (int[] pair1, int[] pair2) -> {
                return pair2[1] - pair1[1];
            }
        );
        for (int i = 0; i < n; i++) {
            maxpq.offer(new int[]{i, nums2[i]});
        }
        // sort nums1 in ascending order
        Arrays.sort(nums1);

        // nums1[left] is the minimum, nums1[right] is the maximum
        int left = 0, right = n - 1;
        int[] res = new int[n];

        while (!maxpq.isEmpty()) {
            int[] pair = maxpq.poll();
            int i = pair[0];
            int maxval = pair[1];
            if (nums1[right] > maxval) {
                res[i] = nums1[right];
                right--;
            } else {
                res[i] = nums1[left];
                left++;
            }
        }
        return res;
    }
}



or



class Solution {
    public int[] advantageCount(int[] nums1, int[] nums2) {

        int n = nums1.length;
        // 给 nums2 降序排序
        PriorityQueue<int[]> maxHeap = new PriorityQueue<int[]>((o1, o2)->o2[1]-o1[1]);

        for(int i = 0; i < n; i++) {
            maxHeap.add(new int[]{i ,nums2[i]});
        }
        // 给 nums1 升序排序
        Arrays.sort(nums1);

        // nums1[left] 是最小值，nums1[right] 是最大值
        int left = 0, right = n-1;
        int[] res = new int[n];

        while(!maxHeap.isEmpty()) {
            int[] pair = maxHeap.poll();
            // maxVal 是 nums2 中的最大值，i 是对应索引
            int index = pair[0], maxVal = pair[1];
            if(maxVal < nums1[right]) {
                // 如果 nums1[right] 能胜过 maxval，那就自己上
                res[index] = nums1[right];
                right--;
            } else {
                // 否则用最小值混一下，养精蓄锐
                res[index] = nums1[left];
                left++;
            }
        }


        return res;
    }
}


