https://leetcode.com/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-i/description/


3239. Minimum Number of Flips to Make Binary Grid Palindromic I
Medium
Topics
Companies
Hint
You are given an m x n binary matrix grid.

A row or column is considered palindromic if its values read the same forward and backward.

You can flip any number of cells in grid from 0 to 1, or from 1 to 0.

Return the minimum number of cells that need to be flipped to make either all rows palindromic or all columns palindromic.

 

Example 1:

Input: grid = [[1,0,0],[0,0,0],[0,0,1]]

Output: 2

Explanation:



Flipping the highlighted cells makes all the rows palindromic.

Example 2:

Input: grid = [[0,1],[0,1],[0,0]]

Output: 1

Explanation:



Flipping the highlighted cell makes all the columns palindromic.

Example 3:

Input: grid = [[1],[0]]

Output: 0

Explanation:

All rows are already palindromic.

 

Constraints:

m == grid.length
n == grid[i].length
1 <= m * n <= 2 * 105
0 <= grid[i][j] <= 1


# java


class Solution {
  public int minFlips(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    int rowFlips = 0;
    int colFlips = 0;

    for (int[] row : grid)
      for (int i = 0; i < n / 2; ++i)
        if (row[i] != row[n - 1 - i])
          ++rowFlips;

    for (int j = 0; j < n; ++j)
      for (int i = 0; i < m / 2; ++i)
        if (grid[i][j] != grid[m - 1 - i][j])
          ++colFlips;

    return Math.min(rowFlips, colFlips);
  }
}


or


class Solution {
    public int minFlips(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int cnt1 = 0, cnt2 = 0;
        for (var row : grid) {
            for (int j = 0; j < n / 2; ++j) {
                if (row[j] != row[n - j - 1]) {
                    ++cnt1;
                }
            }
        }
        for (int j = 0; j < n; ++j) {
            for (int i = 0; i < m / 2; ++i) {
                if (grid[i][j] != grid[m - i - 1][j]) {
                    ++cnt2;
                }
            }
        }
        return Math.min(cnt1, cnt2);
    }
}



or


class Solution {
    public int minFlips(int[][] grid) {
        int ans=0; int n=grid.length; int m= grid[0].length;
        for(int i=0; i<n; i++){
            int subans=0;
            for(int j=0; j<m/2; j++){
                if(grid[i][j]!=grid[i][m-j-1]){
                    subans++;
                }
            }
            ans+=subans;
        }
        int ans2=0;
        for(int j=0; j<m; j++){
            int subans=0;
            for(int i=0; i<n/2; i++){
                if(grid[i][j]!=grid[n-i-1][j]){
                    subans++;
                }
            }
            ans2+=subans;
        }
        return Math.min(ans, ans2);
    }
}



or



class Solution {
    public int minFlips(int[][] grid) {
        // traverse all rows
        int rowFlips = 0;
        for(int i=0; i<grid.length; i++){
            rowFlips += flipsForPalindromeRow(grid, i);
        }

        // traverse all columns
        int colFlips = 0;
        for(int j=0; j<grid[0].length; j++){
            colFlips += flipsForPalindromeCol(grid, j);
        }

        return Math.min(rowFlips, colFlips);
    }

    private int flipsForPalindromeRow(int[][] grid, int i){
        int p = 0;
        int q = grid[0].length-1;
        int flips = 0;

        while(p<q){
            if(grid[i][p] != grid[i][q]){
                flips++;
            }
            p++;
            q--;
        }

        return flips;
    }

    private int flipsForPalindromeCol(int[][] grid, int j){
        int p = 0;
        int q = grid.length-1;
        int flips = 0;

        while(p<q){
            if(grid[p][j] != grid[q][j]){
                flips++;
            }
            p++;
            q--;
        }

        return flips;
    }
}

or


class Solution {
    public int minFlips(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int c = 0;
        for(int i=0;i<m;i++){
            int l=0;
            int h=n-1;
            while(l<h){
                if(grid[i][l]!=grid[i][h]){
                    c+=1;
                }
                l++;
                h--;
            }
        }
        int ans = 0;
        for(int i=0;i<n;i++){
            int l=0;
            int h=m-1;
            while(l<h){
                if(grid[l][i]!=grid[h][i]){
                    ans+=1;
                }
                l++;
                h--;
            }
        }
        return Math.min(c,ans);
    }
}


or


class Solution {
    public int minFlips(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int rowChanges = 0,columnChanges = 0;
        
        for(int i=0;i<m;i++){
            StringBuilder sb = new StringBuilder();
            for(int j=0;j<n;j++){
                sb.append(grid[i][j]);
            }
            rowChanges += helper(sb.toString());
        }
                   
        for(int i=0;i<n;i++){
            StringBuilder sb = new StringBuilder();
            for(int j=0;j<m;j++){
                sb.append(grid[j][i]);
            }
            columnChanges += helper(sb.toString());
        }
        return Math.min(rowChanges,columnChanges);
    
    }
    
    private int helper(String str){
        StringBuilder sb = new StringBuilder(str);
        int start=0,end = str.length()-1;
        int ans = 0;
        while(start<end){
            if(sb.charAt(start)!=sb.charAt(end)){
                ans++;
            }
            start++;
            end--;
        }
        
        return ans;
    }
}


or


class Solution {
    public int minFlips(int[][] grid) {
        return Math.min(row(grid), col(grid));
    }

    public int row(int[][]grid) {
        int s = 0;
        int e = 0;
        int l = grid[0].length;
        int count = 0;
        for (int i=0; i<grid.length; i++) {
            s = 0;
            e = l-1;
            while (s<e) {
                if (grid[i][s] != grid[i][e]) {
                    count++;
                }
                s++;
                e--;
            }
        }
        return count;
        
    }

    public int col(int[][]grid) {
        int s = 0;
        int e = 0;
        int l = grid.length;
        int count = 0;
        for (int i=0; i<grid[0].length; i++) {
            s = 0;
            e = l-1;
            while (s<e) {
                if (grid[s][i] != grid[e][i]) {
                    count++;
                }
                s++;
                e--;
            }
        }
        return count;
    }
}


or


// best


class Solution {
    public int minFlips(int[][] grid) {
        int ans=0; int n=grid.length; int m= grid[0].length;
        for(int i=0; i<n; i++){
            int subans=0;
            for(int j=0; j<m/2; j++){
                if(grid[i][j]!=grid[i][m-j-1]){
                    subans++;
                }
            }
            ans+=subans;
        }
        int ans2=0;
        for(int j=0; j<m; j++){
            int subans=0;
            for(int i=0; i<n/2; i++){
                if(grid[i][j]!=grid[n-i-1][j]){
                    subans++;
                }
            }
            ans2+=subans;
        }
        return Math.min(ans, ans2);
    }
}


or


class Solution {
    public int minFlips(int[][] grid) {
        int rowcount = 0;
        for(int i = 0; i < grid.length; i++) {
            int start = 0, end = grid[i].length - 1;

            while(start < end) {
                if(grid[i][start] != grid[i][end]) rowcount++;
                start++; end--;
            }
        }

        int columncount = 0;
        for(int i = 0; i < grid[0].length; i++) {
            int start = 0, end = grid.length - 1;

            while(start < end) {
                if(grid[start][i] != grid[end][i]) columncount++;
                start++; end--;
            }
        }

        if(rowcount > columncount) return columncount;
        else return rowcount;
    }
}


or


class Solution {
    public int row(int[][] grid) {
        int count = 0;
        for (int i = 0; i < grid.length; i++) {
            int j = 0;
            int k = grid[0].length - 1;
            while (j <= k) {
                if (grid[i][j] != grid[i][k]) {
                    count++;
                }
                    j++;
                    k--;
            }

        }
        return count;
    }

    public int column(int[][] arr) {
        int count = 0;
        for (int i = 0; i < arr[0].length; i++) {
            int j = 0;
            int k = arr.length - 1;
            while (j <= k) {
                if (arr[j][i] != arr[k][i]) {
                    count++;
                }
                    j++;
                    k--;
            }
        }
        return count;
    }

    public int minFlips(int[][] grid) {
        int[][] arr = new int[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                arr[i][j] = grid[i][j];
            }
        }
        return Math.min(row(arr), column(grid));
    }
}
