https://leetcode.com/problems/find-indices-with-index-and-value-difference-ii/description/

2905. Find Indices With Index and Value Difference II
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums having length n, an integer indexDifference, and an integer valueDifference.

Your task is to find two indices i and j, both in the range [0, n - 1], that satisfy the following conditions:

abs(i - j) >= indexDifference, and
abs(nums[i] - nums[j]) >= valueDifference
Return an integer array answer, where answer = [i, j] if there are two such indices, and answer = [-1, -1] otherwise. If there are multiple choices for the two indices, return any of them.

Note: i and j may be equal.

 

Example 1:

Input: nums = [5,1,4,1], indexDifference = 2, valueDifference = 4
Output: [0,3]
Explanation: In this example, i = 0 and j = 3 can be selected.
abs(0 - 3) >= 2 and abs(nums[0] - nums[3]) >= 4.
Hence, a valid answer is [0,3].
[3,0] is also a valid answer.
Example 2:

Input: nums = [2,1], indexDifference = 0, valueDifference = 0
Output: [0,0]
Explanation: In this example, i = 0 and j = 0 can be selected.
abs(0 - 0) >= 0 and abs(nums[0] - nums[0]) >= 0.
Hence, a valid answer is [0,0].
Other valid answers are [0,1], [1,0], and [1,1].
Example 3:

Input: nums = [1,2,3], indexDifference = 2, valueDifference = 4
Output: [-1,-1]
Explanation: In this example, it can be shown that it is impossible to find two indices that satisfy both conditions.
Hence, [-1,-1] is returned.
 

Constraints:

1 <= n == nums.length <= 105
0 <= nums[i] <= 109
0 <= indexDifference <= 105
0 <= valueDifference <= 109


# java


class Solution {
    public int[] findIndices(int[] nums, int indexDifference, int valueDifference) {
        int mi = 0;
        int mx = 0;
        for (int i = indexDifference; i < nums.length; ++i) {
            int j = i - indexDifference;
            if (nums[j] < nums[mi]) {
                mi = j;
            }
            if (nums[j] > nums[mx]) {
                mx = j;
            }
            if (nums[i] - nums[mi] >= valueDifference) {
                return new int[] {mi, i};
            }
            if (nums[mx] - nums[i] >= valueDifference) {
                return new int[] {mx, i};
            }
        }
        return new int[] {-1, -1};
    }
}



or


class Solution {
  public int[] findIndices(int[] nums, int indexDifference, int valueDifference) {
    // nums[minIndex] := the minimum number with enough index different from the current number
    int minIndex = 0;
    // nums[maxIndex] := the maximum number with enough index different from the current number
    int maxIndex = 0;

    for (int i = indexDifference; i < nums.length; ++i) {
      if (nums[i - indexDifference] < nums[minIndex])
        minIndex = i - indexDifference;
      if (nums[i - indexDifference] > nums[maxIndex])
        maxIndex = i - indexDifference;
      if (nums[i] - nums[minIndex] >= valueDifference)
        return new int[] {i, minIndex};
      if (nums[maxIndex] - nums[i] >= valueDifference)
        return new int[] {i, maxIndex};
    }

    return new int[] {-1, -1};
  }
}


or


class Solution {
    public int[] findIndices(int[] nums, int indexDifference,
            int valueDifference) {
        int min = 0; // index for first suitable value(min)
        int max = 0; // index for second suitable value(max)
        for (int i = 0, j = indexDifference; j < nums.length; i++, j++) {
            if (nums[min] > nums[i]) {
                min = i;
            } else if (nums[max] < nums[i]) {
                max = i;
            }

            // if current "min" and "j" is valid then return it
            if (Math.abs(nums[min] - nums[j]) >= valueDifference) {
                return new int[] { min, j };
            }
            // if current "max" and "j" is valid then return it
            else if (Math.abs(nums[max] - nums[j]) >= valueDifference) {
                return new int[] { max, j };
            }
        }
        return new int[] { -1, -1 }; // no any possibility
    }
}


or

class Solution {
    public int[] findIndices(int[] nums, int indexDifference, int valueDifference) {
        if (indexDifference >= nums.length) {
            return new int[]{-1,-1};
        }
        int minValue = Integer.MAX_VALUE, minIndex = 0;
        int maxValue = Integer.MIN_VALUE, maxIndex = 0;
        for (int i = nums.length - indexDifference - 1, j = nums.length -1; i >= 0; i--, j--) {
            if (nums[j] < minValue) {
                minValue = nums[j];
                minIndex = j;
            }
            if (nums[j] > maxValue) {
                maxValue = nums[j];
                maxIndex = j;
            }
            if (Math.abs(nums[i] - minValue) >= valueDifference) {
                return new int[]{i, minIndex};
            }
            if (Math.abs(nums[i] - maxValue) >= valueDifference) {
                return new int[]{i, maxIndex};
            }
        }
        return new int[]{-1, -1};
    }
}



or


class Solution {
    public int[] findIndices(int[] nums, int indexDifference, int valueDifference) {
       // Idea is to maintain the j at indexDifference and i at 0 so that the dfference between them is always >= indexDifference. 
        int min = 0; // Index for first suitable value(min)
        int max = 0; // Index for the second suitable value(max)
        // We are creating a sliding window of length indexDifference. If one number lies in the sliding window, then other number must lie outside the window . Ex. if one number 'j' is indexDifference + x then the other number can be between [0,x]
        // And we will get the answer of max value difference in only two scenarios i.e. Math.abs(nums[indexDifference+x]-nums[x]) or at Math.abs(nums[indexDifference]-nums[0])
        for(int i=0,j=indexDifference;j<nums.length;i++,j++) {
            if(nums[min] > nums[i])min = i;
            else if(nums[max] < nums[i])max=i;

            // If the current 'min' and 'j' are the correct indexes, return them
            if (Math.abs(nums[min]-nums[j]) >= valueDifference)return new int[]{min,j};
            else if (Math.abs(nums[max]-nums[j]) >= valueDifference)return new int[]{max,j};
        } 
        return new int[] {-1,-1};
    }
}


or


class Solution {
    public int[] findIndices(int[] nums, int id, int vd) {
        int n = nums.length;
        int[] ans = new int[2];
        for(int i = 0; i<n - id; i++)
        {
            int j = i + id;
            int min = ans[0];
            int max = ans[1];
            if(nums[i] < nums[min])
            {
                ans[0] = i;
                min = i;
            }
            if(nums[i] > nums[max])
            {
                ans[1] = i;
                max = i;
            }

            if(Math.abs(nums[j] - nums[min]) >= vd)
            {
                ans[1] = j;
                return ans;
            }
            if(Math.abs(nums[j] - nums[max]) >= vd)
            {
                ans[0] = j;
                return ans;
            }
        }
        ans = new int[]{-1, -1};
        return ans;
    }
}



or



