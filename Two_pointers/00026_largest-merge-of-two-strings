https://leetcode.com/problems/largest-merge-of-two-strings/description/


1754. Largest Merge Of Two Strings
Medium
Topics
Companies
Hint
You are given two strings word1 and word2. You want to construct a string merge in the following way: while either word1 or word2 are non-empty, choose one of the following options:

If word1 is non-empty, append the first character in word1 to merge and delete it from word1.
For example, if word1 = "abc" and merge = "dv", then after choosing this operation, word1 = "bc" and merge = "dva".
If word2 is non-empty, append the first character in word2 to merge and delete it from word2.
For example, if word2 = "abc" and merge = "", then after choosing this operation, word2 = "bc" and merge = "a".
Return the lexicographically largest merge you can construct.

A string a is lexicographically larger than a string b (of the same length) if in the first position where a and b differ, a has a character strictly larger than the corresponding character in b. For example, "abcd" is lexicographically larger than "abcc" because the first position they differ is at the fourth character, and d is greater than c.

 

Example 1:

Input: word1 = "cabaa", word2 = "bcaaa"
Output: "cbcabaaaaa"
Explanation: One way to get the lexicographically largest merge is:
- Take from word1: merge = "c", word1 = "abaa", word2 = "bcaaa"
- Take from word2: merge = "cb", word1 = "abaa", word2 = "caaa"
- Take from word2: merge = "cbc", word1 = "abaa", word2 = "aaa"
- Take from word1: merge = "cbca", word1 = "baa", word2 = "aaa"
- Take from word1: merge = "cbcab", word1 = "aa", word2 = "aaa"
- Append the remaining 5 a's from word1 and word2 at the end of merge.
Example 2:

Input: word1 = "abcabc", word2 = "abdcaba"
Output: "abdcabcabcaba"
 

Constraints:

1 <= word1.length, word2.length <= 3000
word1 and word2 consist only of lowercase English letters.



# java


class Solution {
  public String largestMerge(String word1, String word2) {
    if (word1.isEmpty())
      return word2;
    if (word2.isEmpty())
      return word1;
    return word1.compareTo(word2) > 0 ? word1.charAt(0) + largestMerge(word1.substring(1), word2)
                                      : word2.charAt(0) + largestMerge(word1, word2.substring(1));
  }
}


or


class Solution {
    public String largestMerge(String word1, String word2) {
        int m = word1.length(), n = word2.length();
        int i = 0, j = 0;
        StringBuilder ans = new StringBuilder();
        while (i < m && j < n) {
            boolean gt = word1.substring(i).compareTo(word2.substring(j)) > 0;
            ans.append(gt ? word1.charAt(i++) : word2.charAt(j++));
        }
        ans.append(word1.substring(i));
        ans.append(word2.substring(j));
        return ans.toString();
    }
}



or


class Solution {
    public String largestMerge(String word1, String word2) {
        StringBuilder sb = new StringBuilder();
        int i=0;
        int j=0;
        char[] w1 = word1.toCharArray();
        char[] w2 = word2.toCharArray();
        
        int n1=w1.length;
        int n2=w2.length;
        
        // we loop until we exhaust any one of the 2 words completely
        while(i<n1 && j<n2){
            
            // if both the characters are equal we choose the one where the next largest occurs earlier
            if(w1[i]==w2[j]){
                if(check(w1,i,w2,j)){
                    sb.append(w1[i++]);
                }else{
                    sb.append(w2[j++]);
                }
            }
            
            // else we greedily choose the largest of the two characters
            else if(w1[i]>w2[j]){
                sb.append(w1[i++]);
            }else{
                sb.append(w2[j++]);
            }
        }
        
        // at the end of the loop we append any remaining word
        sb.append(word1.substring(i));
        sb.append(word2.substring(j));
		
        return sb.toString();
    }
    
    private boolean check(char[] w1, int i, char[] w2, int j){
        // will return true if we need to extract from word1 and false if we need to extract from word2
        
        while(i<w1.length && j<w2.length){
            if(w1[i]==w2[j]){
                i++;
                j++;
            }
            else if(w1[i]>w2[j]){
                return true;
            }else{
                return false;
            }
        }
        
        // if we are unable to find any exhaustable character till the end of the loop we use the one having larger length
        if(i<w1.length){
            return true;
        }
        return false;
    }
}



or


class Solution {
     public String largestMerge(String word1, String word2) {
        
        int i = 0, j = 0;
        StringBuilder sb = new StringBuilder();
        
        while(i < word1.length() && j < word2.length()) {
            
            if(word1.charAt(i) > word2.charAt(j)) {
                sb.append(word1.charAt(i++));
            } else if (word1.charAt(i) < word2.charAt(j)) {
                 sb.append(word2.charAt(j++));
            } else {
                if(word1.substring(i, word1.length()).compareTo(word2.substring(j, word2.length())) > 0) {
					sb.append(word1.charAt(i++));
				} else  {
					sb.append(word2.charAt(j++));
				} 
            }
        }
        
         while(i < word1.length()) {
             sb.append(word1.charAt(i++));
        }
        
        while(j < word2.length()) {
             sb.append(word2.charAt(j++));
        }
        
        return sb.toString();
        
    }
	
}


or


class Solution {
    public String largestMerge(String word1, String word2) {
        StringBuilder sb = new StringBuilder();
        int i=0;
        int j=0;
        char[] w1 = word1.toCharArray();
        char[] w2 = word2.toCharArray();
        
        int n1=w1.length;
        int n2=w2.length;
        
        while(i<n1 && j<n2){
            
            if(w1[i]==w2[j]){
                if(check(w1,i,w2,j)){
                    sb.append(w1[i++]);
                }else{
                    sb.append(w2[j++]);
                }
            }
            
            else if(w1[i]>w2[j]){
                sb.append(w1[i++]);
            }else{
                sb.append(w2[j++]);
            }
        }
        
        sb.append(word1.substring(i));
        sb.append(word2.substring(j));
		
        return sb.toString();
    }
    
    private boolean check(char[] w1, int i, char[] w2, int j){
        
        while(i<w1.length && j<w2.length){
            if(w1[i]==w2[j]){
                i++;
                j++;
            }
            else if(w1[i]>w2[j]){
                return true;
            }else{
                return false;
            }
        }
        
        if(i<w1.length){
            return true;
        }
        return false;
    }
}



or



class Solution {
    public String largestMerge(String word1, String word2) {
        char[] a = word1.toCharArray();
        char[] b = word2.toCharArray();
        StringBuilder sb = new StringBuilder();
        int i = 0, j = 0;
        for(; i < a.length && j < b.length;){
            if(a[i] == b[j]){
               boolean first = go(a,i,b,j); 
               if(first){
                   sb.append(String.valueOf(a[i]));
                   i++;
               }
               else{
                   sb.append(String.valueOf(b[j]));
                   j++;
               }
            }
            else{
               if(a[i] > b[j]){
                  sb.append(String.valueOf(a[i]));
                  i++;
               } 
               else{
                   sb.append(String.valueOf(b[j]));
                  j++;
               }
            }
        }
        
        while( i < a.length) sb.append(String.valueOf(a[i++]));
        while( j < b.length) sb.append(String.valueOf(b[j++]));
        
        return sb.toString();
        
    }
    
    private boolean go(char[] a, int i,char[] b, int j){
        while(i < a.length && j < b.length && a[i] == b[j]){
            i++;
            j++;
        }
        if(i == a.length) return false;
        if(j == b.length) return true;
        return a[i] > b[j] ? true : false;
    }
    
}


or


