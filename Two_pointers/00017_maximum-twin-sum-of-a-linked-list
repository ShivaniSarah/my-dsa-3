https://leetcode.com/problems/maximum-twin-sum-of-a-linked-list/description/


2130. Maximum Twin Sum of a Linked List
Medium
Topics
Companies
Hint
In a linked list of size n, where n is even, the ith node (0-indexed) of the linked list is known as the twin of the (n-1-i)th node, if 0 <= i <= (n / 2) - 1.

For example, if n = 4, then node 0 is the twin of node 3, and node 1 is the twin of node 2. These are the only nodes with twins for n = 4.
The twin sum is defined as the sum of a node and its twin.

Given the head of a linked list with even length, return the maximum twin sum of the linked list.

 

Example 1:


Input: head = [5,4,2,1]
Output: 6
Explanation:
Nodes 0 and 1 are the twins of nodes 3 and 2, respectively. All have twin sum = 6.
There are no other nodes with twins in the linked list.
Thus, the maximum twin sum of the linked list is 6. 
Example 2:


Input: head = [4,2,2,3]
Output: 7
Explanation:
The nodes with twins present in this linked list are:
- Node 0 is the twin of node 3 having a twin sum of 4 + 3 = 7.
- Node 1 is the twin of node 2 having a twin sum of 2 + 2 = 4.
Thus, the maximum twin sum of the linked list is max(7, 4) = 7. 
Example 3:


Input: head = [1,100000]
Output: 100001
Explanation:
There is only one node with a twin in the linked list having twin sum of 1 + 100000 = 100001.
 

Constraints:

The number of nodes in the list is an even integer in the range [2, 105].
1 <= Node.val <= 105


# java


class Solution {
  public int pairSum(ListNode head) {
    int ans = 0;
    ListNode slow = head;
    ListNode fast = head;

    // `slow` points to the start of the second half.
    while (fast != null && fast.next != null) {
      slow = slow.next;
      fast = fast.next.next;
    }

    // `tail` points to the end of the reversed second half.
    ListNode tail = reverseList(slow);

    while (tail != null) {
      ans = Math.max(ans, head.val + tail.val);
      head = head.next;
      tail = tail.next;
    }

    return ans;
  }

  private ListNode reverseList(ListNode head) {
    ListNode prev = null;
    while (head != null) {
      ListNode next = head.next;
      head.next = prev;
      prev = head;
      head = next;
    }
    return prev;
  }
}


or


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        List<Integer> s = new ArrayList<>();
        for (; head != null; head = head.next) {
            s.add(head.val);
        }
        int ans = 0, n = s.size();
        for (int i = 0; i < (n >> 1); ++i) {
            ans = Math.max(ans, s.get(i) + s.get(n - 1 - i));
        }
        return ans;
    }
}


or


class Solution {
    public int pairSum(ListNode head) {

        if (head == null) { // if there is no Node in the LinkedList , return null
            return 0;
        }
        if (head.next == null) { // if there is only one node in the LinkedList return the value of that node
            return head.val;
        }

        ListNode prev = null; // Creating a Node prev
        ListNode curr = findMid(head); // Creating a Node curr which will carry the middle Node
        ListNode next; // Creating a Node next

        while (curr != null) { // reversing the second part of the Linked List

            next = curr.next;
            curr.next = prev;
            prev = curr;
            curr = next;
        }

        ListNode right = prev; // Creating a Node right and assigning prev, it will point to first node of
                               // second half
        ListNode left = head; // Creating a Node left and assigning head

        int max = Integer.MIN_VALUE; // creating a int variable max and storing minimum value defined in java

        while (right != null) { // while loop for checking the sum of each twinSum and storing the value in max

            max = Math.max(left.val + right.val, max);
            right = right.next;
            left = left.next;
        }

        return max;

    }

    public ListNode findMid(ListNode head) { // creating a function to Find Middle Node of the Linked List
        ListNode slow = head; // Creating a Node slow pointing to head
        ListNode fast = head; // Creating a Node fast pointing to head

        while (fast != null && fast.next != null) { // while loop till fast not equal nulls and next node of fast not
                                                    // equal null
            slow = slow.next; // slow will move one node to the right
            fast = fast.next.next; // fast will move two nodes to the right
        }
        return slow;
    }

}


or

// best

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public int pairSum(ListNode head) {
        ListNode slow = head;
        ListNode fast = head;
        ListNode prev = null;
        ListNode next;
        while(fast != null && fast.next != null) {
            fast = fast.next.next;
            next = slow.next;
            slow.next = prev;
            prev = slow;
            slow = next;
        }
        ListNode start = prev;
        ListNode mid = slow;
        int max = 0;
        while(mid != null) {
            max = Math.max(max, start.val + mid.val);
            start = start.next;
            mid = mid.next;
        }
        return max;
    }
}


or


