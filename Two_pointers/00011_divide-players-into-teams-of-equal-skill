https://leetcode.com/problems/divide-players-into-teams-of-equal-skill/description/


2491. Divide Players Into Teams of Equal Skill
Medium
Topics
Companies
Hint
You are given a positive integer array skill of even length n where skill[i] denotes the skill of the ith player. Divide the players into n / 2 teams of size 2 such that the total skill of each team is equal.

The chemistry of a team is equal to the product of the skills of the players on that team.

Return the sum of the chemistry of all the teams, or return -1 if there is no way to divide the players into teams such that the total skill of each team is equal.

 

Example 1:

Input: skill = [3,2,5,1,3,4]
Output: 22
Explanation: 
Divide the players into the following teams: (1, 5), (2, 4), (3, 3), where each team has a total skill of 6.
The sum of the chemistry of all the teams is: 1 * 5 + 2 * 4 + 3 * 3 = 5 + 8 + 9 = 22.
Example 2:

Input: skill = [3,4]
Output: 12
Explanation: 
The two players form a team with a total skill of 7.
The chemistry of the team is 3 * 4 = 12.
Example 3:

Input: skill = [1,1,2,3]
Output: -1
Explanation: 
There is no way to divide the players into teams such that the total skill of each team is equal.
 

Constraints:

2 <= skill.length <= 105
skill.length is even.
1 <= skill[i] <= 1000


# java

class Solution {
  public long dividePlayers(int[] skill) {
    final int n = skill.length;
    final int teamSkill = Arrays.stream(skill).sum() / (n / 2);
    long ans = 0;
    Map<Integer, Integer> count = new HashMap<>();

    for (final int s : skill)
      count.merge(s, 1, Integer::sum);

    for (Map.Entry<Integer, Integer> entry : count.entrySet()) {
      final int s = entry.getKey();
      final int freq = entry.getValue();
      final int requiredSkill = teamSkill - s;
      if (count.getOrDefault(requiredSkill, 0) != freq)
        return -1;
      ans += (long) s * requiredSkill * freq;
    }

    return ans / 2;
  }
}


or


class Solution {
    public long dividePlayers(int[] skill) {
        Arrays.sort(skill);
        int n = skill.length;
        int t = skill[0] + skill[n - 1];
        long ans = 0;
        for (int i = 0, j = n - 1; i < j; ++i, --j) {
            if (skill[i] + skill[j] != t) {
                return -1;
            }
            ans += (long) skill[i] * skill[j];
        }
        return ans;
    }
}


or



class Solution {

    public long dividePlayers(int[] skill) {
        Arrays.sort(skill);

        int n = skill.length;
        long totalChemistry = 0;

        // Calculate the target sum
        int targetTeamSkill = skill[0] + skill[n - 1];

        // Iterate through half of the array, pairing players from both ends
        for (int i = 0; i < n / 2; i++) {
            int currentTeamSkill = skill[i] + skill[n - i - 1];

            // If any team's skill doesn't match the target, return -1
            if (currentTeamSkill != targetTeamSkill) {
                return -1;
            }

            // Calculate and add the chemistry of the current team
            totalChemistry += (long) skill[i] * (long) skill[n - i - 1];
        }

        return totalChemistry;
    }
}


or


class Solution {

    public long dividePlayers(int[] skill) {
        int n = skill.length;
        int totalSkill = 0;
        int[] skillFrequency = new int[2001];

        // Calculate total skill and skill frequency
        for (int playerSkill : skill) {
            totalSkill += playerSkill;
            skillFrequency[playerSkill]++;
        }

        // Check if total skill can be evenly distributed among teams
        if (totalSkill % (n / 2) != 0) {
            return -1;
        }

        int targetTeamSkill = totalSkill / (n / 2);
        long totalChemistry = 0;

        // Calculate total chemistry while verifying valid team formations
        for (int playerSkill : skill) {
            int partnerSkill = targetTeamSkill - playerSkill;

            // Check if a valid partner exists
            if (skillFrequency[partnerSkill] == 0) {
                return -1;
            }

            totalChemistry += (long) playerSkill * (long) partnerSkill;
            skillFrequency[partnerSkill]--;
        }

        // Return half of totalChemistry as each pair is counted twice
        return totalChemistry / 2;
    }
}


or



class Solution {

    public long dividePlayers(int[] skill) {
        int n = skill.length;
        int totalSkill = 0;
        Map<Integer, Integer> skillMap = new HashMap<>();

        // Calculate total skill and build frequency map
        for (int s : skill) {
            totalSkill += s;
            skillMap.put(s, skillMap.getOrDefault(s, 0) + 1);
        }

        // Check if total skill can be evenly distributed among teams
        if (totalSkill % (n / 2) != 0) {
            return -1;
        }

        int targetSkill = totalSkill / (n / 2);
        long totalChemistry = 0;

        // Iterate through unique skill values
        for (int currSkill : skillMap.keySet()) {
            int currFreq = skillMap.get(currSkill);
            int partnerSkill = targetSkill - currSkill;

            // Check if valid partner skill exists with matching frequency
            if (
                !skillMap.containsKey(partnerSkill) ||
                currFreq != skillMap.get(partnerSkill)
            ) {
                return -1;
            }

            // Calculate chemistry for all pairs with this skill
            totalChemistry +=
            (long) currSkill * (long) partnerSkill * (long) currFreq;
        }

        // Return half of total chemistry (as each pair is counted twice)
        return totalChemistry / 2;
    }
}


or


import java.util.Arrays;

class Solution {
    public long dividePlayers(int[] skill) {
        // Step 1: Sort the skill array
        Arrays.sort(skill);
        
        int n = skill.length;
        int totalSkill = skill[0] + skill[n - 1]; // Required sum for each pair
        long chemistrySum = 0;

        // Step 2: Pair players using two pointers
        for (int i = 0; i < n / 2; i++) {
            // Check if the sum of current pair matches the required totalSkill
            if (skill[i] + skill[n - i - 1] != totalSkill) {
                return -1; // Invalid configuration, return -1
            }
            // Calculate the chemistry (product of pair) and add it to the sum
            chemistrySum += (long) skill[i] * skill[n - i - 1];
        }

        return chemistrySum; // Return total chemistry
    }
}


or


class Solution {
    public long dividePlayers(int[] skill) {
        Arrays.sort(skill);
        int l = 0, r = skill.length - 1;
        long ans = 0;
        long set = skill[l] + skill[r];
        while ( l < r ){
            long diff = skill[l] + skill[r];
            ans += skill[l] * skill[r];
            l++; r--;
            if ( set != diff ) return -1;
        }
        return ans;
    }
}



or



class Solution {
    public long dividePlayers(int[] skill) {
        Arrays.sort(skill);
        int lo = 0, hi = skill.length-1;
        
        int sum = skill[lo] + skill[hi];
        long prod = (long) skill[lo]*skill[hi];
        
        lo++;
        hi--;
        
        while(lo<hi){
            if(skill[hi] + skill[lo] != sum)
                return -1;
            else{
                prod +=(long) skill[lo] * skill[hi];
                lo++;
                hi--;
             }
        }
        return prod;
    }
}


or


class Solution {
    public long dividePlayers(int[] skill) {
        Map<Integer,Integer> map = new HashMap();
        int sum = 0;
        int n = skill.length;
        
        for(int num : skill){
            sum += num;
            map.put(num, (map.getOrDefault(num,0)+1));
        }
			
        //checking whether we can divide sum into n/2 pairs,
		
        if(sum%(n/2) != 0)
            return -1;
        
        int div = sum/(n/2);            // 6 for [3,2,5,1,3,4]
        
        long prod = 0;
        for(int i=0; i<n; i++){
            int num = skill[i];
            
			// div-num i.e. our target for each num, 
			//either is not present in map, or has been used in previous iterations
			
            if(!map.containsKey(div - num) || map.get(div-num)<=0)
                return -1;
            
            map.put(div-num, map.get(div-num) - 1);
            
            prod += (long)(num*(div-num));
            
        }
        return prod/2;
    }
}


or

// bets

import java.util.Arrays;

class Solution {
    public long dividePlayers(int[] skill) {
        // Step 1: Sort the skill array
        Arrays.sort(skill);
        
        int n = skill.length;
        int totalSkill = skill[0] + skill[n - 1]; // Required sum for each pair
        long chemistrySum = 0;

        // Step 2: Pair players using two pointers
        for (int i = 0; i < n / 2; i++) {
            // Check if the sum of current pair matches the required totalSkill
            if (skill[i] + skill[n - i - 1] != totalSkill) {
                return -1; // Invalid configuration, return -1
            }
            // Calculate the chemistry (product of pair) and add it to the sum
            chemistrySum += (long) skill[i] * skill[n - i - 1];
        }

        return chemistrySum; // Return total chemistry
    }
}


