https://leetcode.com/problems/one-edit-distance/description/

https://leetcode.ca/2016-05-09-161-One-Edit-Distance/

161

Given two strings s and t, return true if they are both one edit distance apart, otherwise return false.

A string s is said to be one distance apart from a string t if you can:

Insert exactly one character into s to get t.
Delete exactly one character from s to get t.
Replace exactly one character of s with a different character to get t.
 

Example 1:

Input: s = "ab", t = "acb"
Output: true
Explanation: We can insert 'c' into s to get t.
Example 2:

Input: s = "", t = ""
Output: false
Explanation: We cannot get t from s by only one step.
 

Constraints:

0 <= s.length, t.length <= 104
s and t consist of lowercase letters, uppercase letters, and digits.


# java



import java.util.Objects;

public class Solution {

    // best solution ha!
    public boolean isOneEditDistance(String s, String t) {
        for (int i = 0; i < Math.min(s.length(), t.length()); ++i) {
            if (s.charAt(i) != t.charAt(i)) {
                if (s.length() == t.length()) {
                    return Objects.equals(s.substring(i + 1), t.substring(i + 1));
                }
                if (s.length() < t.length()) {
                    return Objects.equals(s.substring(i), t.substring(i + 1));
                } else {
                    return Objects.equals(s.substring(i + 1), t.substring(i));
                }
            }
        }

        // case: abc, abcdefg
        return Math.abs((int)s.length() - (int)t.length()) == 1;

    }
}

or


    class Solution {
        public boolean isOneEditDistance(String s, String t) {
            int m = s.length(), n = t.length(), i, j;
            int[][] dp = new int[m + 1][n + 1];
            for (i = 0; i <= m; i++)
                dp[i][0] = i;
            for (j = 0; j <= n; j++)
                dp[0][j] = j;
            for (i = 0; i < m; i++) {
                for (j = 0; j < n; j++) {
                    if (s.charAt(i) == t.charAt(j))
                        dp[i + 1][j + 1] = dp[i][j];
                    else {
                        dp[i + 1][j + 1] = Math.min(dp[i + 1][j], Math.min(dp[i][j + 1], dp[i][j])) + 1;
                    }
                }
            }
            return dp[m][n] == 1;
        }
    }


or



    public class Solution {
        public boolean isOneEditDistance(String s, String t) {
            if (s.length() < t.length()) return isOneEditDistance(t, s); // so 't' is always the shorter one in below logic
            int m = s.length(), n = t.length(), diff = m - n;
            if (diff >= 2) return false;
            else if (diff == 1) {
                for (int i = 0; i < n; ++i) {
                    if (s.charAt(i) != t.charAt(i)) {
                        return s.substring(i + 1).equals(t.substring(i));
                    }
                }
                return true; // meaning, diff is happening at the final char
            } else {
                int cnt = 0;
                for (int i = 0; i < m; ++i) {
                    if (s.charAt(i) != t.charAt(i)) ++cnt;
                }
                return cnt == 1;
            }
        }

or



class Solution {
    public boolean isOneEditDistance(String s, String t) {
        int m = s.length(), n = t.length();
        if (m < n) {
            return isOneEditDistance(t, s);
        }
        if (m - n > 1) {
            return false;
        }
        for (int i = 0; i < n; ++i) {
            if (s.charAt(i) != t.charAt(i)) {
                if (m == n) {
                    return s.substring(i + 1).equals(t.substring(i + 1));
                }
                return s.substring(i + 1).equals(t.substring(i));
            }
        }
        return m == n + 1;
    }
}
