https://leetcode.com/problems/make-string-a-subsequence-using-cyclic-increments/description/


2825. Make String a Subsequence Using Cyclic Increments
Medium
Topics
Companies
Hint
You are given two 0-indexed strings str1 and str2.

In an operation, you select a set of indices in str1, and for each index i in the set, increment str1[i] to the next character cyclically. That is 'a' becomes 'b', 'b' becomes 'c', and so on, and 'z' becomes 'a'.

Return true if it is possible to make str2 a subsequence of str1 by performing the operation at most once, and false otherwise.

Note: A subsequence of a string is a new string that is formed from the original string by deleting some (possibly none) of the characters without disturbing the relative positions of the remaining characters.

 

Example 1:

Input: str1 = "abc", str2 = "ad"
Output: true
Explanation: Select index 2 in str1.
Increment str1[2] to become 'd'. 
Hence, str1 becomes "abd" and str2 is now a subsequence. Therefore, true is returned.
Example 2:

Input: str1 = "zc", str2 = "ad"
Output: true
Explanation: Select indices 0 and 1 in str1. 
Increment str1[0] to become 'a'. 
Increment str1[1] to become 'd'. 
Hence, str1 becomes "ad" and str2 is now a subsequence. Therefore, true is returned.
Example 3:

Input: str1 = "ab", str2 = "d"
Output: false
Explanation: In this example, it can be shown that it is impossible to make str2 a subsequence of str1 using the operation at most once. 
Therefore, false is returned.
 

Constraints:

1 <= str1.length <= 105
1 <= str2.length <= 105
str1 and str2 consist of only lowercase English letters.


# java



class Solution {
  public boolean canMakeSubsequence(String str1, String str2) {
    int i = 0; // str2's index

    for (final char c : str1.toCharArray())
      if (c == str2.charAt(i) || ('a' + ((c - 'a' + 1) % 26)) == str2.charAt(i))
        if (++i == str2.length())
          return true;

    return false;
  }
}


or


class Solution {
    public boolean canMakeSubsequence(String str1, String str2) {
        int i = 0, n = str2.length();
        for (char c : str1.toCharArray()) {
            char d = c == 'z' ? 'a' : (char) (c + 1);
            if (i < n && (str2.charAt(i) == c || str2.charAt(i) == d)) {
                ++i;
            }
        }
        return i == n;
    }
}


or


class Solution {

    public boolean canMakeSubsequence(String str1, String str2) {
        int lengthStr1 = str1.length();

        // Try all possible combinations of character increments
        for (int mask = 0; mask < (1 << lengthStr1); mask++) {
            StringBuilder temp = new StringBuilder(str1);

            // Apply increments based on current mask
            for (int str1Index = 0; str1Index < lengthStr1; str1Index++) {
                if ((mask & (1 << str1Index)) != 0) {
                    temp.setCharAt(
                        str1Index,
                        getNextChar(temp.charAt(str1Index))
                    );
                }
            }

            // Check if str2 is a subsequence of the modified string
            if (isSubsequence(temp.toString(), str2)) {
                return true;
            }
        }

        return false;
    }

    // Helper function to get the next character cyclically
    private char getNextChar(char str1Char) {
        return str1Char == 'z' ? 'a' : (char) (str1Char + 1);
    }

    // Helper function to check if str2 is a subsequence of str1
    private boolean isSubsequence(String str1, String str2) {
        int str1Index = 0, str2Index = 0;
        int lengthStr1 = str1.length(), lengthStr2 = str2.length();

        // Traverse through both strings using a while loop
        while (str1Index < lengthStr1 && str2Index < lengthStr2) {
            if (str1.charAt(str1Index) == str2.charAt(str2Index)) {
                str2Index++;
            }
            str1Index++;
        }
        // Check if all characters in str2 were matched
        return str2Index == lengthStr2;
    }
}


or


class Solution {

    public boolean canMakeSubsequence(String str1, String str2) {
        int str2Index = 0;
        int lengthStr1 = str1.length(), lengthStr2 = str2.length();

        // Traverse through both strings using a for loop
        for (
            int str1Index = 0;
            str1Index < lengthStr1 && str2Index < lengthStr2;
            ++str1Index
        ) {
            // Check if characters match, or if str1[str1Index] can be incremented to str2[str2Index]
            if (
                str1.charAt(str1Index) == str2.charAt(str2Index) ||
                (str1.charAt(str1Index) + 1 == str2.charAt(str2Index)) ||
                (str1.charAt(str1Index) - 25 == str2.charAt(str2Index))
            ) {
                // If match found, move to next character in str2
                str2Index++;
            }
        }
        // Check if all characters in str2 were matched
        return str2Index == lengthStr2;
    }
}


or


class Solution {
    public boolean canMakeSubsequence(String source, String target) {
        int targetIdx = 0, targetLen = target.length();
        
        for (char currChar : source.toCharArray()) {
            if (targetIdx < targetLen && (target.charAt(targetIdx) - currChar + 26) % 26 <= 1) {
                targetIdx++;
            }
        }
        return targetIdx == targetLen;
    }
}


or


class Solution {
        public boolean canMakeSubsequence(String s1, String s2) {
        int j = 0, n = s1.length(), m = s2.length();
        for (int i = 0; i < n && j < m; ++i) {
            int a = s1.charAt(i), b = s2.charAt(j);
            if (a == b || a + 1 == b || a - 25 == b)
                ++j;
        }
        return j == m;
    }
}


or


class Solution {
    public boolean canMakeSubsequence(String str1, String str2) {
        int i=0, j=0; //Two Pointers

        while(i<str1.length() && j<str2.length()){
            if(str1.charAt(i)-'a'==str2.charAt(j)-'a' || (str1.charAt(i)-'a'+1)%26==str2.charAt(j)-'a'){
                j++;
            }
            if(j==str2.length()){
                return true;
            }
            i++;
        }

        return false;
    }
}


or

class Solution {
    public boolean canMakeSubsequence(String str1, String str2) {
        int i=0, j=0; //Two Pointers
        int n1=str1.length();
        int n2=str2.length();

        while(i<n1 && j<n2){
            if((str2.charAt(j)-str1.charAt(i)+26)%26<=1){
                j++;
            }
            i++;
        }

        return j==n2;
    }
}



