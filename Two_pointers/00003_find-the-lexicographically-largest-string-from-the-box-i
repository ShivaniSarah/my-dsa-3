https://leetcode.com/problems/find-the-lexicographically-largest-string-from-the-box-i/description/


3403. Find the Lexicographically Largest String From the Box I
Medium
Topics
Companies
Hint
You are given a string word, and an integer numFriends.

Alice is organizing a game for her numFriends friends. There are multiple rounds in the game, where in each round:

word is split into numFriends non-empty strings, such that no previous round has had the exact same split.
All the split words are put into a box.
Find the lexicographically largest string from the box after all the rounds are finished.

 

Example 1:

Input: word = "dbca", numFriends = 2

Output: "dbc"

Explanation: 

All possible splits are:

"d" and "bca".
"db" and "ca".
"dbc" and "a".
Example 2:

Input: word = "gggg", numFriends = 4

Output: "g"

Explanation: 

The only possible split is: "g", "g", "g", and "g".

 

Constraints:

1 <= word.length <= 5 * 103
word consists only of lowercase English letters.
1 <= numFriends <= word.length



# java


class Solution {
  public String answerString(String word, int numFriends) {
    if (numFriends == 1)
      return word;
    final String s = lastSubstring(word);
    final int sz = word.length() - numFriends + 1;
    return s.substring(0, Math.min(s.length(), sz));
  }

  // Same as 1163. Last Substring in Lexicographical Order
  private String lastSubstring(String s) {
    int i = 0;
    int j = 1;
    int k = 0; // the number of the same letters of s[i..n) and s[j..n)

    while (j + k < s.length())
      if (s.charAt(i + k) == s.charAt(j + k)) {
        ++k;
      } else if (s.charAt(i + k) > s.charAt(j + k)) {
        // Skip s[j..j + k) and advance to s[j + k + 1] to find a possible
        // lexicographically larger substring since s[i..i + k) == s[j..j + k)
        // and s[i + k] > s[j + k).
        j = j + k + 1;
        k = 0;
      } else {
        // Skip s[i..i + k) and advance to s[i + k + 1] or s[j] to find a
        // possible lexicographically larger substring since
        // s[i..i + k) == s[j..j + k) and s[i + k] < s[j + k).
        // Note that it's unnecessary to explore s[i + k + 1..j) if
        // i + k + 1 < j since they are already explored by j.
        i = Math.max(i + k + 1, j);
        j = i + 1;
        k = 0;
      }

    return s.substring(i);
  }
}


or


class Solution {
    public String answerString(String word, int numFriends) {
        if (numFriends == 1) {
            return word;
        }
        int n = word.length();
        String ans = "";
        for (int i = 0; i < n; ++i) {
            int k = Math.min(n - i, n - numFriends + 1);
            String t = word.substring(i, i + k);
            if (ans.compareTo(t) < 0) {
                ans = t;
            }
        }
        return ans;
    }
}



or


class Solution {
    public String answerString(String word, int numFriends) {
        if (numFriends == 1)
            return word;
        int n = word.length();
        int maxlen = (n - numFriends + 1);
        char maxchar = word.charAt(0);
        String res = "";
        for (int i = 0; i < n; i++) {
            if (word.charAt(i) >= maxchar) {
                String curr = word.substring(i, Math.min(i + maxlen, n));
                if (curr.compareTo(res) > 0)
                    res = curr;
                maxchar = word.charAt(i);
            }
        }
        return res;
    }
}



or

// best

class Solution {
   String answerString(String word, int numFriends) {
    if(numFriends == 1) return word;
    String ans = "";
    for(int i = 0, len = word.length() - (numFriends - 1); i < word.length(); ++i){
        String t = word.substring(i, i + ((word.length() - i) < len?word.length() - i: len));
        if(ans.compareTo(t) < 0) ans = t;
    }
    return ans;
  }
}


or


class Solution
{
    public String answerString(String word, int numFriends)
    {
        int N = word.length();

        // Step 1: Handle base case where all friends can split the string
        if (numFriends == 1)
        {
            return word;
        }

        // Step 2: Find the lexicographically largest character in the string
        char c = 'a'; // Default character to find the largest
        for (char ch : word.toCharArray())
        {
            if (ch > c)
            {
                c = ch;
            }
        }

        String maxString = ""; 

        // Step 3: Iterate through the positions of the largest character
        for (int pos = 0; pos < N; pos++)
        {
            if (word.charAt(pos) == c)
            {
                // Step 4: Compute the maximum allowable substring length from this position
                int lAllowed = Math.min(N - pos, N - numFriends + 1);

                if (lAllowed <= 0)
                {
                    continue;
                }

                // Step 5: Extract the substring and compare with the current maximum
                String s = word.substring(pos, pos + lAllowed);
                if (s.compareTo(maxString) > 0)
                {
                    maxString = s; // Update the maximum string
                }
            }
        }

        // Step 6: Return the result
        return maxString;
    }
}




