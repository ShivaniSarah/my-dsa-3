https://leetcode.com/problems/the-k-strongest-values-in-an-array/description/


1471. The k Strongest Values in an Array
Medium
Topics
Companies
Hint
Given an array of integers arr and an integer k.

A value arr[i] is said to be stronger than a value arr[j] if |arr[i] - m| > |arr[j] - m| where m is the centre of the array.
If |arr[i] - m| == |arr[j] - m|, then arr[i] is said to be stronger than arr[j] if arr[i] > arr[j].

Return a list of the strongest k values in the array. return the answer in any arbitrary order.

The centre is the middle value in an ordered integer list. More formally, if the length of the list is n, the centre is the element in position ((n - 1) / 2) in the sorted list (0-indexed).

For arr = [6, -3, 7, 2, 11], n = 5 and the centre is obtained by sorting the array arr = [-3, 2, 6, 7, 11] and the centre is arr[m] where m = ((5 - 1) / 2) = 2. The centre is 6.
For arr = [-7, 22, 17,â€‰3], n = 4 and the centre is obtained by sorting the array arr = [-7, 3, 17, 22] and the centre is arr[m] where m = ((4 - 1) / 2) = 1. The centre is 3.


Example 1:

Input: arr = [1,2,3,4,5], k = 2
Output: [5,1]
Explanation: Centre is 3, the elements of the array sorted by the strongest are [5,1,4,2,3]. The strongest 2 elements are [5, 1]. [1, 5] is also accepted answer.
Please note that although |5 - 3| == |1 - 3| but 5 is stronger than 1 because 5 > 1.
Example 2:

Input: arr = [1,1,3,5,5], k = 2
Output: [5,5]
Explanation: Centre is 3, the elements of the array sorted by the strongest are [5,5,1,1,3]. The strongest 2 elements are [5, 5].
Example 3:

Input: arr = [6,7,11,7,6,8], k = 5
Output: [11,8,6,6,7]
Explanation: Centre is 7, the elements of the array sorted by the strongest are [11,8,6,6,7,7].
Any permutation of [11,8,6,6,7] is accepted.
 

Constraints:

1 <= arr.length <= 105
-105 <= arr[i] <= 105
1 <= k <= arr.length


# java


class Solution {
  public int[] getStrongest(int[] arr, int k) {
    Arrays.sort(arr);

    final int n = arr.length;
    final int median = arr[(n - 1) / 2];
    int[] ans = new int[k];

    for (int i = 0, l = 0, r = n - 1; i < k; ++i)
      if (median - arr[l] > arr[r] - median)
        ans[i] = arr[l++];
      else
        ans[i] = arr[r--];

    return ans;
  }
}


or


class Solution {
    public int[] getStrongest(int[] arr, int k) {
        Arrays.sort(arr);
        int m = arr[(arr.length - 1) >> 1];
        List<Integer> nums = new ArrayList<>();
        for (int v : arr) {
            nums.add(v);
        }
        nums.sort((a, b) -> {
            int x = Math.abs(a - m);
            int y = Math.abs(b - m);
            return x == y ? b - a : y - x;
        });
        int[] ans = new int[k];
        for (int i = 0; i < k; ++i) {
            ans[i] = nums.get(i);
        }
        return ans;
    }
}


or



class Solution {
    public int[] getStrongest(int[] arr, int k) {
        Arrays.sort(arr);  
        int median=arr[(arr.length-1)/2];
        int i=0;
        int j=arr.length-1;
        int res=0;
        int[] result=new int[k];
        while(res<k)
        {
		//while loop will stop after we hace chosen the k greatest elements.
            if(Math.abs(arr[i]-median)>Math.abs(arr[j]-median))
            {
                result[res]=arr[i];
                i++;
                res++;
            }
            else{
                result[res]=arr[j];
                j--;
                res++;
            }
        }
        return result;
        
    }
}


or



class Solution {
      public static int[] getStrongest(int[] arr, int k) {
    Arrays.sort(arr);
    int med = arr[((arr.length - 1) / 2)];
    int[] kStrongest = new int[k];
    ArrayList<Integer> ns = new ArrayList<>();
    for (int f : arr) ns.add(f);// please comment if any better way to do this [copying int[] into ArrayList]
    ns.sort((i1, i2) -> {
      int diff = Math.abs(i2 - med) - Math.abs(i1 - med);
      if (diff == 0) {
        return i2 - i1;
      }
      return diff;
    });
    for (int i = 0; i < k; i++) {
      kStrongest[i] = ns.get(i);
    }
    return kStrongest;
  }
}



or




class Solution {
    public int[] getStrongest(int[] arr, int k) {
        Arrays.sort(arr);
        int m = arr[(arr.length - 1) / 2];
        int[] ans = new int[k];
        int left = 0, right = arr.length - 1;
        int index = 0;

        while (index < k) {
            if (m - arr[left] > arr[right] - m) {
                ans[index++] = arr[left++];
            } else {
                ans[index++] = arr[right--];
            }
        }

        return ans;
    }
}

// TC: O(n * logn) + O(k) => O(n * logn)
// SC: O(k)



or



class Solution {
    public int[] getStrongest(int[] arr, int k) {
        Arrays.sort(arr);
        int m = arr[(arr.length - 1) / 2];
        PriorityQueue<Integer> pq = new PriorityQueue<>(
                (a, b) -> Math.abs(a - m) == Math.abs(b - m) ? b - a : Math.abs(b - m) - Math.abs(a - m)
        );

        for (int num : arr) {
            pq.offer(num);
        }

        int[] ans = new int[k];
        for (int i = 0; i < k; i++) {
            ans[i] = pq.poll();
        }

        return ans;
    }
}

// TC: O(n * logn) + O(n) => O(n * logn)
// SC: O(n + k)



or



class Solution {
    public int[] getStrongest(int[] arr, int k) {
        Arrays.parallelSort(arr);
        int median = arr[(arr.length-1)/2];
        int left = 0;
        int right = arr.length-1;
        int[] ans = new int[k];
        int i = 0;

        while(right>=left){
            int a = Math.abs(arr[left]-median);
            int b = Math.abs(arr[right]-median);
            if(a>b){
                ans[i]=arr[left];
                left++;
                i++;
            }
            else if(a==b){
                if(arr[left]>arr[right]){
                    ans[i]=arr[left];
                    left++;
                }else{
                    ans[i]=arr[right];
                    right--;
                }
                i++;
            }
            else{
                ans[i]=arr[right];
                right--;
                i++;
            }
            if(i==k) break;
        }

        return ans;
    }
}



or



class Solution {
    public int[] getStrongest(int[] arr, int k) {
        int[] strongest = new int[k];
        Arrays.sort(arr);
        int left = 0, right = arr.length -1;
        int median = arr[(arr.length - 1) / 2], insertIndex = 0;
        while (insertIndex < k) {
            if (arr[right] - median >= median - arr[left]) {
                strongest[insertIndex++] = arr[right--];
            } else {
                strongest[insertIndex++] = arr[left++];
            }
        }
        return strongest;
    }
}


or



class Solution {
    public int[] getStrongest(int[] arr, int k) {
        int n = arr.length, x = 0;
        Arrays.sort(arr);
        int m = arr[((n - 1) / 2)];
        int[] ans = new int[k];
        int left = 0, right = n-1;

        while(left < right) {
            int lft = m - arr[left];
            int rht = arr[right] - m;

            if(lft == rht) {
                if(arr[left] > arr[right]) {
                    ans[x] = arr[left];
                    left++;
                } else {
                    ans[x] = arr[right];
                    right--;
                }
            } else if (lft > rht) {
                ans[x] = arr[left];
                left++;
            } else {
                ans[x] = arr[right];
                right--;
            }
            x++;
            if(x == k) {
                return ans;
            }
        }
        ans[x] = arr[left];
        return ans;
    }
}




