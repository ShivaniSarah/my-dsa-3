https://leetcode.com/problems/separate-black-and-white-balls/description/

2938. Separate Black and White Balls
Medium
Topics
Companies
Hint
There are n balls on a table, each ball has a color black or white.

You are given a 0-indexed binary string s of length n, where 1 and 0 represent black and white balls, respectively.

In each step, you can choose two adjacent balls and swap them.

Return the minimum number of steps to group all the black balls to the right and all the white balls to the left.

 

Example 1:

Input: s = "101"
Output: 1
Explanation: We can group all the black balls to the right in the following way:
- Swap s[0] and s[1], s = "011".
Initially, 1s are not grouped together, requiring at least 1 step to group them to the right.
Example 2:

Input: s = "100"
Output: 2
Explanation: We can group all the black balls to the right in the following way:
- Swap s[0] and s[1], s = "010".
- Swap s[1] and s[2], s = "001".
It can be proven that the minimum number of steps needed is 2.
Example 3:

Input: s = "0111"
Output: 0
Explanation: All the black balls are already grouped to the right.
 

Constraints:

1 <= n == s.length <= 105
s[i] is either '0' or '1'.


# java

class Solution {
  public long minimumSteps(String s) {
    long ans = 0;
    int ones = 0;

    for (final char c : s.toCharArray())
      if (c == '1')
        ++ones;
      else // Move 1s to the front of the current '0'.
        ans += ones;

    return ans;
  }
}



or




class Solution {
    public long minimumSteps(String s) {
        long ans = 0;
        int cnt = 0;
        int n = s.length();
        for (int i = n - 1; i >= 0; --i) {
            if (s.charAt(i) == '1') {
                ++cnt;
                ans += n - i - cnt;
            }
        }
        return ans;
    }
}



or



class Solution {

    public long minimumSteps(String s) {
        int whitePosition = 0;
        long totalSwaps = 0;

        // Iterate through each ball (character) in the string
        for (int currentPos = 0; currentPos < s.length(); currentPos++) {
            if (s.charAt(currentPos) == '0') {
                // Calculate the number of swaps needed
                // to move it to leftmost available position
                totalSwaps += currentPos - whitePosition;

                // Move the next available position for a white ball one step to the right
                whitePosition++;
            }
        }

        return totalSwaps;
    }
}


or


class Solution {

    public long minimumSteps(String s) {
        long totalSwaps = 0;
        int blackBallCount = 0;

        // Iterate through each ball (character) in the string
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '0') {
                // Swap with all black balls to its left
                totalSwaps += (long) blackBallCount;
            } else {
                // Increment the count
                blackBallCount++;
            }
        }

        return totalSwaps;
    }
}



or



class Solution {
    public long minimumSteps(String s) {
        long ans = 0;
        int blackCount = 0; // Tracks the number of black balls (1s)

        // Traverse through the string
        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == '0') {
                // White ball encountered, add the number of black balls on its left
                ans += blackCount;
            } else {
                // Black ball encountered, increment the black ball count
                blackCount++;
            }
        }
        return ans;
    }
}


or


import java.util.ArrayList;

class Solution {
    public long minimumSteps(String s) {
        int n = s.length();
        ArrayList<Integer> r = new ArrayList<>();
        ArrayList<Integer> l = new ArrayList<>();
        
        for (int i = 0; i < n; i++) {
            if (s.charAt(i) == '0') {
                r.add(i);
            } else {
                l.add(i);
            }
        }

        int a = r.size();
        int b = l.size();
        int i = 0, j = a - 1;
        long ans = 0;

        while (i < b && j >= 0) {
            if (l.get(i) > r.get(j)) {
                break;
            }
            ans = ans + Math.abs(l.get(i) - r.get(j));
            i++;
            j--;
        }

        return ans;
    }
}


or


class Solution {
    public long minimumSteps(String s) {
        long ans = 0, countZero = 0;
        for (int i = s.length() - 1; i >= 0; i--) {
            if (s.charAt(i) == '0') {
                countZero++;
            } else {
                ans += countZero;
            }
        }
        return ans;
    }
}


or



class Solution {
    public long minimumSteps(String s) {
        int n = s.length();
        long res = 0;
        int l = n - 1, r = n - 1;

        while (l >= 0) {
            if (s.charAt(l) == '1') {
                res += r - l;
                r--;
            }
            l--;
        }

        return res;
    }
}


