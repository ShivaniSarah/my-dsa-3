https://leetcode.com/problems/longest-common-prefix-after-at-most-one-removal/description/


3460. Longest Common Prefix After at Most One Removal ðŸ”’
Description
You are given two strings s and t.

Return the length of the longest common prefix between s and t after removing at most one character from s.

Note: s can be left without any removal.

 

Example 1:

Input: s = "madxa", t = "madam"

Output: 4

Explanation:

Removing s[3] from s results in "mada", which has a longest common prefix of length 4 with t.

Example 2:

Input: s = "leetcode", t = "eetcode"

Output: 7

Explanation:

Removing s[0] from s results in "eetcode", which matches t.

Example 3:

Input: s = "one", t = "one"

Output: 3

Explanation:

No removal is needed.

Example 4:

Input: s = "a", t = "b"

Output: 0

Explanation:

s and t cannot have a common prefix.

 

Constraints:

1 <= s.length <= 105
1 <= t.length <= 105
s and t contain only lowercase English letters.


# jaav





class Solution {
  public int longestCommonPrefix(String s, String t) {
    int i = 0; // s's index
    int j = 0; // t's index
    boolean canSkip = true;

    while (i < s.length() && j < t.length())
      if (s.charAt(i) == t.charAt(j)) {
        ++i;
        ++j;
      } else if (canSkip) {
        ++i;
        canSkip = false;
      } else {
        return j;
      }

    return j;
  }
}



or


class Solution {
    public int longestCommonPrefix(String s, String t) {
        int n = s.length(), m = t.length();
        int i = 0, j = 0;
        boolean rem = false;
        while (i < n && j < m) {
            if (s.charAt(i) != t.charAt(j)) {
                if (rem) {
                    break;
                }
                rem = true;
            } else {
                ++j;
            }
            ++i;
        }
        return j;
    }
}


