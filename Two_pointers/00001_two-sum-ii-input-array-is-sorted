https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/description/

167. Two Sum II - Input Array Is Sorted
Medium
Topics
Companies
Given a 1-indexed array of integers numbers that is already sorted in non-decreasing order, find two numbers such that they add up to a specific target number. Let these two numbers be numbers[index1] and numbers[index2] where 1 <= index1 < index2 <= numbers.length.

Return the indices of the two numbers, index1 and index2, added by one as an integer array [index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use the same element twice.

Your solution must use only constant extra space.

 

Example 1:

Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore, index1 = 1, index2 = 2. We return [1, 2].
Example 2:

Input: numbers = [2,3,4], target = 6
Output: [1,3]
Explanation: The sum of 2 and 4 is 6. Therefore index1 = 1, index2 = 3. We return [1, 3].
Example 3:

Input: numbers = [-1,0], target = -1
Output: [1,2]
Explanation: The sum of -1 and 0 is -1. Therefore index1 = 1, index2 = 2. We return [1, 2].
 

Constraints:

2 <= numbers.length <= 3 * 104
-1000 <= numbers[i] <= 1000
numbers is sorted in non-decreasing order.
-1000 <= target <= 1000
The tests are generated such that there is exactly one solution.


# jva

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int low = 0 , high = numbers.length-1;

            while (low < high)
            {
                int complement = numbers[low] + numbers[high];
                if (complement == target)
                {
                    return new int[]{low+1 , high+1};
                }else if (complement > target){
                    high--;
                }else {
                    low++;
                }
            }
            
        return new int[] {-1 , -1};
    }
}


or

// byhashmap

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        HashMap<Integer , Integer> hashMap = new HashMap<>();

        for (int i = 0; i < numbers.length ; i++)
        {
            int complement = target - numbers[i];
            if (hashMap.containsKey(complement))
            {
                return new int[]{ hashMap.get(complement)+1 , i+1};
            }

            hashMap.put(numbers[i] , i);
        }
        
        return new int[]{-1 , -1};
    }
}


or


// by hasheset


class Solution {
    public int[] twoSum(int[] numbers, int target) {
        int [] res = {-1 , -1};

        HashSet<Integer> set = new HashSet<>();
        for (int n : numbers) {
            set.add(n);
        }

           StringBuilder str = new StringBuilder();
           int i = 1 ;
        for (int num : numbers)
        {
            if ( res[0] == -1 && set.contains(target - num))
            {
                res[0] = i;
                str.append(target - num);
            }else if (res[0] != -1 && Integer.parseInt(str.toString()) == num ){
                res[1] = i;
                return res;
            }
            i++;
        }
        return res;
    }
}

or


// by two pointers

class Solution {
    public int[] twoSum(int[] numbers, int target) {
        for (int i = 0, j = numbers.length - 1;;) {
            int x = numbers[i] + numbers[j];
            if (x == target) {
                return new int[] {i + 1, j + 1};
            }
            if (x < target) {
                ++i;
            } else {
                --j;
            }
        }
    }
}

or


class Solution {
  public int[] twoSum(int[] numbers, int target) {
    int l = 0;
    int r = numbers.length - 1;

    while (numbers[l] + numbers[r] != target)
      if (numbers[l] + numbers[r] < target)
        ++l;
      else
        --r;

    return new int[] {l + 1, r + 1};
  }
}


or


