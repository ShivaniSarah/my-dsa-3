https://leetcode.com/problems/number-of-subarrays-with-bounded-maximum/description/

795. Number of Subarrays with Bounded Maximum
Medium
Topics
Companies
Given an integer array nums and two integers left and right, return the number of contiguous non-empty subarrays such that the value of the maximum array element in that subarray is in the range [left, right].

The test cases are generated so that the answer will fit in a 32-bit integer.

 

Example 1:

Input: nums = [2,1,4,3], left = 2, right = 3
Output: 3
Explanation: There are three subarrays that meet the requirements: [2], [2, 1], [3].
Example 2:

Input: nums = [2,9,2,5,6], left = 2, right = 8
Output: 7
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
0 <= left <= right <= 109



# java



class Solution {
  public int numSubarrayBoundedMax(int[] nums, int left, int right) {
    int ans = 0;
    int l = -1;
    int r = -1;

    for (int i = 0; i < nums.length; ++i) {
      if (nums[i] > right) // Handle the reset value.
        l = i;
      if (nums[i] >= left) // Handle the reset and the needed value.
        r = i;
      ans += r - l;
    }

    return ans;
  }
}


or



class Solution {
    public int numSubarrayBoundedMax(int[] nums, int left, int right) {
        return f(nums, right) - f(nums, left - 1);
    }

    private int f(int[] nums, int x) {
        int cnt = 0, t = 0;
        for (int v : nums) {
            t = v > x ? 0 : t + 1;
            cnt += t;
        }
        return cnt;
    }
}


or



class Solution {
    public int numSubarrayBoundedMax(int[] nums, int left, int right) {
        int ans = 0, low = 0, mid = 0;
        for (int num : nums) {
            if (num > right) mid = 0;
            else ans += ++mid;
            if (num >= left) low = 0;
            else ans -= ++low;
        }
        return ans;
    }
}


or


class Solution {
    public int numSubarrayBoundedMax(int[] A, int L, int R) {
        int i=0;
        int j=0;
        int ans=0;
        int smaller=0;
        
        while(i!=A.length){
            
            if(A[i]>=L && A[i]<=R){
                smaller=i-j+1;
                ans+=smaller;
            }else if(A[i]<L){
                ans+=smaller;
            }else{
                j=i+1;
                smaller=0;
            }
            i++;
        }
        return ans;
    }
}
