https://leetcode.com/problems/minimum-number-of-flips-to-make-binary-grid-palindromic-ii/description/

3240. Minimum Number of Flips to Make Binary Grid Palindromic II
Medium
Topics
Companies
Hint
You are given an m x n binary matrix grid.

A row or column is considered palindromic if its values read the same forward and backward.

You can flip any number of cells in grid from 0 to 1, or from 1 to 0.

Return the minimum number of cells that need to be flipped to make all rows and columns palindromic, and the total number of 1's in grid divisible by 4.

 

Example 1:

Input: grid = [[1,0,0],[0,1,0],[0,0,1]]

Output: 3

Explanation:



Example 2:

Input: grid = [[0,1],[0,1],[0,0]]

Output: 2

Explanation:



Example 3:

Input: grid = [[1],[1]]

Output: 2

Explanation:



 

Constraints:

m == grid.length
n == grid[i].length
1 <= m * n <= 2 * 105
0 <= grid[i][j] <= 1


# java


class Solution {
  public int minFlips(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    int ans = 0;
    int middleOnes = 0;
    int mismatchedPairs = 0;

    // Handle top-left, top-right, bottom-left, bottom-right cells.
    for (int i = 0; i < m / 2; ++i) {
      for (int j = 0; j < n / 2; ++j) {
        final int ones =
            grid[i][j] + grid[i][n - 1 - j] + grid[m - 1 - i][j] + grid[m - 1 - i][n - 1 - j];
        ans += Math.min(ones, 4 - ones);
      }
    }

    // Handle the middle row if the number of m is odd.
    if (m % 2 == 1)
      for (int j = 0; j < n / 2; ++j) {
        final int leftCell = grid[m / 2][j];
        final int rightCell = grid[m / 2][n - 1 - j];
        mismatchedPairs += leftCell ^ rightCell;
        middleOnes += leftCell + rightCell;
      }

    // Handle the middle column if the number of columns is odd.
    if (n % 2 == 1)
      for (int i = 0; i < m / 2; ++i) {
        final int topCell = grid[i][n / 2];
        final int bottomCell = grid[m - 1 - i][n / 2];
        mismatchedPairs += topCell ^ bottomCell;
        middleOnes += topCell + bottomCell;
      }

    if (mismatchedPairs == 0) {
      // Since there's no mismatched pairs, middleOnes % 4 must be 0 or 2.
      if (middleOnes % 4 == 2)
        ans += 2; // Flip two 1s to 0s.
    } else {
      // Flip every mismatched pair 01 to 00 or 11. It doesn't matter.
      ans += mismatchedPairs;
    }

    // Handle the center cell if both dimensions are odd.
    if (m % 2 == 1 && n % 2 == 1)
      ans += grid[m / 2][n / 2];

    return ans;
  }
}


or


class Solution {
    public int minFlips(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int ans = 0;
        for (int i = 0; i < m / 2; ++i) {
            for (int j = 0; j < n / 2; ++j) {
                int x = m - i - 1, y = n - j - 1;
                int cnt1 = grid[i][j] + grid[x][j] + grid[i][y] + grid[x][y];
                ans += Math.min(cnt1, 4 - cnt1);
            }
        }
        if (m % 2 == 1 && n % 2 == 1) {
            ans += grid[m / 2][n / 2];
        }

        int diff = 0, cnt1 = 0;
        if (m % 2 == 1) {
            for (int j = 0; j < n / 2; ++j) {
                if (grid[m / 2][j] == grid[m / 2][n - j - 1]) {
                    cnt1 += grid[m / 2][j] * 2;
                } else {
                    diff += 1;
                }
            }
        }
        if (n % 2 == 1) {
            for (int i = 0; i < m / 2; ++i) {
                if (grid[i][n / 2] == grid[m - i - 1][n / 2]) {
                    cnt1 += grid[i][n / 2] * 2;
                } else {
                    diff += 1;
                }
            }
        }
        ans += cnt1 % 4 == 0 || diff > 0 ? diff : 2;
        return ans;
    }
}



or


class Solution {
        public int minFlips(int[][] A) {
        int res = 0, one = 0, diff = 0, m = A.length, n = A[0].length;
        // Handle quadrants
        for (int i = 0; i < m / 2; ++i) {
            for (int j = 0; j < n / 2; ++j) {
                int v = A[i][j] + A[i][n - 1 - j] + A[m - 1 - i][j] + A[m - 1 - i][n - 1 - j];
                res += Math.min(v, 4 - v);
            }
        }
        // Handle middle column
        if (n % 2 > 0) {
            for (int i = 0; i < m / 2; ++i) {
                diff += A[i][n / 2] ^ A[m - 1 - i][n / 2];
                one += A[i][n / 2] + A[m - 1 - i][n / 2];
            }
        }
        // Handle middle row
        if (m % 2 > 0) {
            for (int j = 0; j < n / 2; ++j) {
                diff += A[m / 2][j] ^ A[m / 2][n - 1 - j];
                one += A[m / 2][j] + A[m / 2][n - 1 - j];
            }
        }
        // Handle center point
        if (n % 2 > 0 && m % 2 > 0) {
            res += A[m / 2][n / 2];
        }
        // Divisible by 4
        if (diff == 0 && one % 4 > 0) {
            res += 2;
        }
        return res + diff;
    }
}


or


class Solution {
    public int minFlips(int[][] grid) {
        int ans = 0;
        int m = grid.length;
        int n = grid[0].length;
        // Process each 2x2 block of the grid
        for(int i = 0; i < m/2; i++) {
            for(int j = 0; j < n/2; j++) {
                int cnt = 0;
                // Count the number of 1s in the current 2x2 block
                cnt += grid[i][j];
                cnt += grid[m-1-i][j];
                cnt += grid[i][n-1-j];
                cnt += grid[m-1-i][n-1-j];

                // Calculate flips needed to make all cells the same
                ans += Math.min(cnt, 4-cnt);
            }
        }

         // Handle center row if the number of rows is odd
        int diff = 0;
        int p0 = 0;
        int p1 = 0;
        if(m%2==1) {
            for(int j = 0; j < n/2; j++) {
                if(grid[m/2][j] != grid[m/2][n-j-1]) diff++;
                else {
                    if(grid[m/2][j] == 0) p0++;
                    else p1++;
                }
            }
        }
        if(n%2==1) {
            for(int i = 0; i < m/2; i++) {
                if(grid[i][n/2] != grid[m-i-1][n/2]) diff++;
                else {
                    if(grid[i][n/2] == 0) p0++;
                    else p1++;
                }
            }
        }

         // Adjust for the center cell if both dimensions are odd
        if(n%2==1 && m%2==1) {
            if(grid[m/2][n/2]==1) ans++;
        }

        // Calculate the minimum number of additional flips needed for center row and column
        int ans1 = Integer.MAX_VALUE;
        if(diff%2 == p1%2) {
            ans1 = diff;
        } else {
            if(diff%2==0) {
                if(diff==0) {
                    ans1 = 2;
                } else {
                    ans1 = diff;
                }
            } else {
                ans1 = diff;
            }
        }

        return ans + ans1;
    }
}


or



class Solution {
    public int minFlips(int[][] grid) {
        int flips = 0, totalOnes = 0, diff = 0;
        int rows = grid.length, cols = grid[0].length;
        
        // Handle quadrants
        for (int i = 0; i < rows / 2; ++i) {
            for (int j = 0; j < cols / 2; ++j) {
                int onesCount = grid[i][j] + grid[i][cols - 1 - j] + grid[rows - 1 - i][j] + grid[rows - 1 - i][cols - 1 - j];
                flips += Math.min(onesCount, 4 - onesCount);
            }
        }
        
        // Handle middle column
        if (cols % 2 > 0) {
            for (int i = 0; i < rows / 2; ++i) {
                // Check if the cells are different
                if (grid[i][cols / 2] != grid[rows - 1 - i][cols / 2]) {
                    diff++;
                }
                totalOnes += grid[i][cols / 2] + grid[rows - 1 - i][cols / 2];
            }
        }
        
        // Handle middle row
        if (rows % 2 > 0) {
            for (int j = 0; j < cols / 2; ++j) {
                // Check if the cells are different
                if (grid[rows / 2][j] != grid[rows / 2][cols - 1 - j]) {
                    diff++;
                }
                totalOnes += grid[rows / 2][j] + grid[rows / 2][cols - 1 - j];
            }
        }
        
        // Handle center point
        if (cols % 2 > 0 && rows % 2 > 0) {
            flips += grid[rows / 2][cols / 2];
        }
        
        // Ensure total number of 1's is divisible by 4
        if (diff == 0 && totalOnes % 4 > 0) {
            flips += 2;
        }
        
        return (flips + diff);
    }
}



or


class Solution {
    public int minFlips(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        int ans = 0;
        for(int i = 0; i < n / 2; i++){
            for(int j = 0; j < m / 2; j++){
                int count = 0;
                if(grid[i][j] == 1) count++;
                if(grid[i][m - j - 1] == 1) count++;
                if(grid[n - i - 1][j] == 1) count++;
                if(grid[n - i - 1][m - j - 1] == 1) count++;
                ans += Math.min(count, 4 - count);
            }
        }
        if(n % 2 != 0 && m % 2 != 0){
            if(grid[n / 2][m / 2] == 1) ans++;
            int count = 0;
            int count2 = 0;
            for(int i = 0; i < m / 2; i++){
                int l = grid[n / 2][i];
                int r = grid[n / 2][m - i - 1];
                if(l != r) {
                    count++;
                }else if(l == 1){
                    count2++;
                }
            }
            for(int i = 0; i < n / 2; i++){
                int l = grid[i][m / 2];
                int r = grid[n - i - 1][m / 2];
                if(l != r) {
                    count++;
                }else if(l == 1){
                    count2++;
                }
            }
            if(count2 % 2 != 0 && count == 0){
                ans += 2;
            }else{
                ans += count;
            }
        }else if(n % 2 != 0){
            int count = 0;
            int count2 = 0;
            for(int i = 0; i < m / 2; i++){
                int l = grid[n / 2][i];
                int r = grid[n / 2][m - i - 1];
                if(l != r) {
                    count++;
                }else if(l == 1){
                    count2++;
                }
            }
            if(count2 % 2 != 0 && count == 0){
                ans += 2;
            }else{
                ans += count;
            }
        }else if(m % 2 != 0){
            int count = 0;
            int count2 = 0;
            for(int i = 0; i < n / 2; i++){
                int l = grid[i][m / 2];
                int r = grid[n - i - 1][m / 2];
                if(l != r) {
                    count++;
                }else if(l == 1){
                    count2++;
                }
            }
            if(count2 % 2 != 0 && count == 0){
                ans += 2;
            }else{
                ans += count;
            }
        }
        return ans;
    }
}


or

// tp best


class Solution {
    public int minFlips(int[][] grid) {
        int ans=0;
        int m=grid.length;
        int n=grid[0].length;
        for(int i=0;i<m/2;i++){
            for(int j=0;j<n/2;j++){
                int ones=0;
                if(grid[i][j]==1) ones++;
                if(grid[i][n-1-j]==1) ones++;
                if(grid[m-1-i][j]==1) ones++;
                if(grid[m-1-i][n-1-j]==1) ones++;
                if(ones==4 || ones==0){  // all same, no need to convert
                    continue;
                }
                else if(ones>2){ // convert to all 1's.
                    ans+=(4-ones);
                }
                else{  // convert to all 0's.
                    ans+=ones;
                }
            }
        }


        int onesPair=0;
        int flipped=0;

        if(m%2!=0){ // for odd rows
            int row=m/2;
            
            for(int j=0;j<n/2;j++){
                if(grid[row][j]==1 && grid[row][n-1-j]==1){
                    onesPair++;
                }
                else if(grid[row][j]!=grid[row][n-1-j]){
                    ans++;
                    flipped++;
                }
            }
            
        }
        if(n%2!=0){ // for odd col
            int col=n/2;
            for(int i=0;i<m/2;i++){
                if(grid[i][col]==1 && grid[m-1-i][col]==1){
                    onesPair++;
                }
                else if(grid[i][col]!=grid[m-1-i][col]){
                    ans++;
                    flipped++;
                }
            }
        }
         if(onesPair%2==1){  // 2 more ones needed to be divisible by 4
            if(flipped==0){  // check if we can get those 2 by already conssdered flipping
                ans+=2;
            }
        }

        // odd rows and odd columns -> special handling for middle cell
        // if middle cell == 1, need to convert to
        if(m%2!=0 && n%2!=0){
            if(grid[m/2][n/2]==1){
                ans++;
            }
        }
        return ans;
    }
}






