https://leetcode.com/problems/adding-spaces-to-a-string/description/


2109. Adding Spaces to a String
Medium
Topics
Companies
Hint
You are given a 0-indexed string s and a 0-indexed integer array spaces that describes the indices in the original string where spaces will be added. Each space should be inserted before the character at the given index.

For example, given s = "EnjoyYourCoffee" and spaces = [5, 9], we place spaces before 'Y' and 'C', which are at indices 5 and 9 respectively. Thus, we obtain "Enjoy Your Coffee".
Return the modified string after the spaces have been added.

 

Example 1:

Input: s = "LeetcodeHelpsMeLearn", spaces = [8,13,15]
Output: "Leetcode Helps Me Learn"
Explanation: 
The indices 8, 13, and 15 correspond to the underlined characters in "LeetcodeHelpsMeLearn".
We then place spaces before those characters.
Example 2:

Input: s = "icodeinpython", spaces = [1,5,7,9]
Output: "i code in py thon"
Explanation:
The indices 1, 5, 7, and 9 correspond to the underlined characters in "icodeinpython".
We then place spaces before those characters.
Example 3:

Input: s = "spacing", spaces = [0,1,2,3,4,5,6]
Output: " s p a c i n g"
Explanation:
We are also able to place spaces before the first character of the string.
 

Constraints:

1 <= s.length <= 3 * 105
s consists only of lowercase and uppercase English letters.
1 <= spaces.length <= 3 * 105
0 <= spaces[i] <= s.length - 1
All the values of spaces are strictly increasing.


# java


class Solution {
  public String addSpaces(String s, int[] spaces) {
    StringBuilder sb = new StringBuilder();
    int j = 0; // spaces' index

    for (int i = 0; i < s.length(); ++i) {
      if (j < spaces.length && i == spaces[j]) {
        sb.append(' ');
        ++j;
      }
      sb.append(s.charAt(i));
    }

    return sb.toString();
  }
}


or


class Solution {
    public String addSpaces(String s, int[] spaces) {
        StringBuilder ans = new StringBuilder();
        for (int i = 0, j = 0; i < s.length(); ++i) {
            if (j < spaces.length && i == spaces[j]) {
                ans.append(' ');
                ++j;
            }
            ans.append(s.charAt(i));
        }
        return ans.toString();
    }
}


or


class Solution {

    public String addSpaces(String s, int[] spaces) {
        // StringBuilder for efficient string construction
        StringBuilder result = new StringBuilder();
        int spaceIndex = 0;

        for (int stringIndex = 0; stringIndex < s.length(); stringIndex++) {
            if (
                spaceIndex < spaces.length && stringIndex == spaces[spaceIndex]
            ) {
                // Insert space at the correct position
                result.append(' ');
                spaceIndex++;
            }
            // Append the current character
            result.append(s.charAt(stringIndex));
        }
        return result.toString();
    }
}


or


class Solution {

    public String addSpaces(String s, int[] spaces) {
        StringBuilder result = new StringBuilder();
        // Pre-allocate space for efficiency
        result.ensureCapacity(s.length() + spaces.length);

        int spaceIndex = 0;
        for (int stringIndex = 0; stringIndex < s.length(); ++stringIndex) {
            if (
                spaceIndex < spaces.length && stringIndex == spaces[spaceIndex]
            ) {
                // Insert space at the correct position
                result.append(' ');
                ++spaceIndex;
            }
            // Append the current character
            result.append(s.charAt(stringIndex));
        }

        return result.toString();
    }
}



or



class Solution {
    public String addSpaces(String s, int[] spaces) {
        int n=s.length();
        int m=spaces.length;
        char[] newChrs=new char[n+m];
        char[] sChr=s.toCharArray();

        int i=0;
        int idx=0;
        for(int spc:spaces){
            while(i<spc){                
                newChrs[idx++]=sChr[i];
                i++;                
            }   
            newChrs[idx++]=' ';
        }
        
        //For last finishing
        while(i<n){                
            newChrs[idx++]=sChr[i];
            i++;                
        }   

        return new String(newChrs);
    }
}


or


class Solution {
    public String addSpaces(String s, int[] spaces) {
        int n=s.length();
        int m=spaces.length;
        char[] chrs=new char[n+m];

        int i=0,j=0;
        for(char chr:s.toCharArray()){
            if(j<m && i==spaces[j]){
                chrs[i+j]=' ';
                j++;
            }
            chrs[i+j]=chr;
            i++;
        }

        return new String(chrs);
    }
}


or


class Solution {
    public String addSpaces(String s, int[] spaces) {
        int n=s.length();
        int m=spaces.length;
        char[] chrs=new char[n+m];

        int j=0;
        for(int i=0; i<n; i++){
            if(j<m && i+j==spaces[j]+j){
                chrs[i+j]=' ';
                j++;
            }
            chrs[i+j]=s.charAt(i);
        }

        return new String(chrs);
    }
}


or



class Solution {
    public String addSpaces(String s, int[] spaces) {
        StringBuilder sb=new StringBuilder();

        sb.append(s.substring(0,spaces[0]));
        int i=1;
        for(; i<spaces.length; i++){
            sb.append(" ");
            sb.append(s.substring(spaces[i-1],spaces[i]));            
        }
        sb.append(" ");
        sb.append(s.substring(spaces[i-1])); 

        return sb.toString();
    }
}


or


//// best
public class Solution {
    public static String addSpaces(String s, int[] spaces) {
        StringBuilder result = new StringBuilder();
        int start = 0;
        for (int space : spaces) {
            result.append(s, start, space).append(" ");
            start = space;
        }
        result.append(s.substring(start));
        return result.toString();
    }
}

