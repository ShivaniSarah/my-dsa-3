https://leetcode.com/problems/minimum-number-of-swaps-to-make-the-string-balanced/description/


1963. Minimum Number of Swaps to Make the String Balanced
Medium
Topics
Companies
Hint
You are given a 0-indexed string s of even length n. The string consists of exactly n / 2 opening brackets '[' and n / 2 closing brackets ']'.

A string is called balanced if and only if:

It is the empty string, or
It can be written as AB, where both A and B are balanced strings, or
It can be written as [C], where C is a balanced string.
You may swap the brackets at any two indices any number of times.

Return the minimum number of swaps to make s balanced.

 

Example 1:

Input: s = "][]["
Output: 1
Explanation: You can make the string balanced by swapping index 0 with index 3.
The resulting string is "[[]]".
Example 2:

Input: s = "]]][[["
Output: 2
Explanation: You can do the following to make the string balanced:
- Swap index 0 with index 4. s = "[]][][".
- Swap index 1 with index 5. s = "[[][]]".
The resulting string is "[[][]]".
Example 3:

Input: s = "[]"
Output: 0
Explanation: The string is already balanced.
 

Constraints:

n == s.length
2 <= n <= 106
n is even.
s[i] is either '[' or ']'.
The number of opening brackets '[' equals n / 2, and the number of closing brackets ']' equals n / 2.



# java


class Solution {
  public int minSwaps(String s) {
    // Cancel out all the matched pairs, then we'll be left with "]]]..[[[".
    // The answer is ceil(the number of unmatched pairs / 2).
    int unmatched = 0;

    for (final char c : s.toCharArray())
      if (c == '[')
        ++unmatched;
      else if (unmatched > 0) // c == ']' and there's a match.
        --unmatched;

    return (unmatched + 1) / 2;
  }
}


or


class Solution {
    public int minSwaps(String s) {
        int x = 0;
        for (int i = 0; i < s.length(); ++i) {
            char c = s.charAt(i);
            if (c == '[') {
                ++x;
            } else if (x > 0) {
                --x;
            }
        }
        return (x + 1) / 2;
    }
}

or


class Solution {

    public int minSwaps(String s) {
        Stack<Character> stack = new Stack();
        int unbalanced = 0;
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            // If an opening bracket is encountered, push it in the stack.
            if (ch == '[') stack.push(ch);
            else {
                // If the stack is not empty, pop it.
                if (!stack.isEmpty()) stack.pop();
                // Otherwise increase the count of unbalanced brackets.
                else unbalanced++;
            }
        }
        return (unbalanced + 1) / 2;
    }
}



or



class Solution {

    public int minSwaps(String s) {
        int stackSize = 0;
        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);
            // If character is opening bracket, increment the stack size.
            if (ch == '[') stackSize++;
            else {
                // If the character is closing bracket, and we have an opening bracket, decrease
                // the stack size.
                if (stackSize > 0) stackSize--;
            }
        }
        return (stackSize + 1) / 2;
    }
}



or



// Approach - 02 [ Math - derived from above ]
class Solution {
    public int minSwaps(String s) {
        int girl = 0, boys = 0;

        for (int i = 0; i < s.length(); i++) {
            if (boys > 0 && s.charAt(i) == ']') {
                boys--;
            } 
            else {
                if (s.charAt(i) == '[') {
                    boys++;
                } 
                else {
                    girl++;
                }
            }
        }

        int single = boys;
        if (single == 1) {
            return 1;
        }

        return (int)Math.ceil((double)single / 2);
    }
}



or


// Approach - 01 [ Stack ]
class Solution {
    public int minSwaps(String s) {
        Stack<Character> stack = new Stack<>();

        for (char val : s.toCharArray()) { // for(int i=0; i<s.length(); i++)
            if (stack.isEmpty()) {
                stack.push(val); // val = s.charAt(i)
            } 
            else if (stack.peek() == '[' && val == ']') {
                stack.pop();
            } 
            else {
                stack.push(val); // val = s.charAt(i)
            }
        }

        // when you have single pair
        if (stack.size() == 2) {
            return 1;
        }

        // stack does have both girl and boy count
        // half of them would be the total swap amount
        int single = stack.size() / 2;

        // a. Math.ceil is used to handle odd case
        // b. for two-pair we need to do one swap
        //    so, total swap = single / 2
        return (int)Math.ceil((double)single / 2);
    }
}



or




class Solution {
    public int minSwaps(String s) {
        int swpCnt = 0;
        int closeCnt = 0;
        int size = s.length(), left = 0, right = size-1;
        while(right > -1 && s.charAt(right) != '[')right--;
        while(left < right){
           if(s.charAt(left) == ']'){
             closeCnt++;
           }else{
            closeCnt--;
           }
           if(closeCnt > 0){
            //   System.out.println(left + " " + right + " " + closeCnt);
              closeCnt-=2;
              right--;
              swpCnt++;
              while(right > left && s.charAt(right) != '[' )right--;
           }
           left++;
        }
        return swpCnt;
    }
}



or



class Solution {
    public int minSwaps(String s) {
        int openCounter = 0;
        int unbalanced = 0;

        for(char ch : s.toCharArray())
        {
            if(ch == '[')
            {
                openCounter++;
            }
            else
            {
                if(openCounter > 0)
                {
                    openCounter--;
                }
                else
                {
                    unbalanced++;
                }
            }
        }

        return unbalanced / 2 + unbalanced % 2;
    }
}



or


class Solution {
    public int minSwaps(String s) {
       int swap=0;
       //to count of unbalanced open brackets
       int open=0;
       for(char c:s.toCharArray()){
           if(c=='['){
               open++;
           }
           else if(c==']'){
               if(open>0){
                   open--;
               }
               else{
                   //found close bracket without matching open bracket
                   swap++;
                   //add open bracket to balance
                   open++;
               }
           }
        }
        return swap;
    }
}
//time complexity:O(n)
//space complexity:O(1)
//Approach--Greedy Algorithm



or


