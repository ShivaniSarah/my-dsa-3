https://leetcode.com/problems/magical-string/description/

481. Magical String
Medium
Topics
Companies
A magical string s consists of only '1' and '2' and obeys the following rules:

The string s is magical because concatenating the number of contiguous occurrences of characters '1' and '2' generates the string s itself.
The first few elements of s is s = "1221121221221121122……". If we group the consecutive 1's and 2's in s, it will be "1 22 11 2 1 22 1 22 11 2 11 22 ......" and the occurrences of 1's or 2's in each group are "1 2 2 1 1 2 1 2 2 1 2 2 ......". You can see that the occurrence sequence is s itself.

Given an integer n, return the number of 1's in the first n number in the magical string s.

 

Example 1:

Input: n = 6
Output: 3
Explanation: The first 6 elements of magical string s is "122112" and it contains three 1's, so return 3.
Example 2:

Input: n = 1
Output: 1
 

Constraints:

1 <= n <= 105


# java


class Solution {
    public int magicalString(int n) {
        int ans = 1, index = 1;
        String str = "1";

        while (str.length() < n) {
            if (index % 2 == 1) {
                if (index == 1) {
                    str = str + "22";
                } else {
                    if (str.charAt(index) == '2') {
                        str = str + "22";
                    } else {
                        str = str + "2";
                    }
                }
            } else {
                if (str.charAt(index) == '2') {
                    str = str + "11";
                    ans = ans + 2;
                } else {
                    str = str + "1";
                    ans = ans + 1;
                }

            }
            index++;
        }

        if (str.length() > n && str.charAt(str.length() - 1) == '1') {
            ans--;
        }

        return ans;
    }
}


or


class Solution {
    public int magicalString(int n) {
        ArrayList<Integer> list = new ArrayList<>();
        list.add(1);
        list.add(2);
        list.add(2);

        int pointer = 2; 
        int nextEle = 1;
        int countOnes = 1;

        while(list.size() < n){
            int freq = list.get(pointer); // kitne baat repeat hoga
            for(int i=0; i<freq && list.size() < n; i++){
                list.add(nextEle);
                if(nextEle == 1){
                    countOnes++;
                }
            }
            nextEle = 3-nextEle;
            pointer++;
        }
        return countOnes;
    }
}



or

class Solution {
    public int magicalString(int n) {
        List<Integer> s = new ArrayList<>(Arrays.asList(1, 2, 2));
        for (int i = 2; s.size() < n; ++i) {
            int pre = s.get(s.size() - 1);
            int cur = 3 - pre;
            for (int j = 0; j < s.get(i); ++j) {
                s.add(cur);
            }
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            if (s.get(i) == 1) {
                ++ans;
            }
        }
        return ans;
    }
}


or



class Solution {
  public int magicalString(int n) {
    StringBuilder sb = new StringBuilder(" 122");
    int ans = 0;

    for (int i = 3; i <= n; ++i)
      if (i % 2 == 1)
        sb.append(String.valueOf('1').repeat(sb.charAt(i) - '0'));
      else
        sb.append(String.valueOf('2').repeat(sb.charAt(i) - '0'));

    for (int i = 0; i <= n; ++i)
      if (sb.charAt(i) == '1')
        ++ans;

    return ans;
  }
}



