https://leetcode.com/problems/find-the-longest-substring-containing-vowels-in-even-counts/


1371. Find the Longest Substring Containing Vowels in Even Counts
Medium
Topics
Companies
Hint
Given the string s, return the size of the longest substring containing each vowel an even number of times. That is, 'a', 'e', 'i', 'o', and 'u' must appear an even number of times.

 

Example 1:

Input: s = "eleetminicoworoep"
Output: 13
Explanation: The longest substring is "leetminicowor" which contains two each of the vowels: e, i and o and zero of the vowels: a and u.
Example 2:

Input: s = "leetcodeisgreat"
Output: 5
Explanation: The longest substring is "leetc" which contains two e's.
Example 3:

Input: s = "bcbcbc"
Output: 6
Explanation: In this case, the given string "bcbcbc" is the longest because all vowels: a, e, i, o and u appear zero times.
 

Constraints:

1 <= s.length <= 5 x 10^5
s contains only lowercase English letters.



# java



class Solution {
  public int findTheLongestSubstring(String s) {
    final String VOWELS = "aeiou";
    int ans = 0;
    int prefix = 0; // the binary prefix
    Map<Integer, Integer> prefixToIndex = new HashMap<>();
    prefixToIndex.put(0, -1);

    for (int i = 0; i < s.length(); ++i) {
      final int index = VOWELS.indexOf(s.charAt(i));
      if (index != -1)
        prefix ^= 1 << index;
      prefixToIndex.putIfAbsent(prefix, i);
      ans = Math.max(ans, i - prefixToIndex.get(prefix));
    }

    return ans;
  }
}



or



class Solution {

    public int findTheLongestSubstring(String s) {
        int[] pos = new int[32];
        Arrays.fill(pos, Integer.MAX_VALUE);
        pos[0] = -1;
        String vowels = "aeiou";
        int state = 0;
        int ans = 0;
        for (int i = 0; i < s.length(); ++i) {
            char c = s.charAt(i);
            for (int j = 0; j < 5; ++j) {
                if (c == vowels.charAt(j)) {
                    state ^= (1 << j);
                }
            }
            ans = Math.max(ans, i - pos[state]);
            pos[state] = Math.min(pos[state], i);
        }
        return ans;
    }
}




or



class Solution {

    public int findTheLongestSubstring(String s) {
        int prefixXOR = 0;
        int[] characterMap = new int[26];
        characterMap['a' - 'a'] = 1;
        characterMap['e' - 'a'] = 2;
        characterMap['i' - 'a'] = 4;
        characterMap['o' - 'a'] = 8;
        characterMap['u' - 'a'] = 16;
        int[] mp = new int[32];
        for (int i = 0; i < 32; i++) mp[i] = -1;
        int longestSubstring = 0;
        for (int i = 0; i < s.length(); i++) {
            prefixXOR ^= characterMap[s.charAt(i) - 'a'];
            if (mp[prefixXOR] == -1 && prefixXOR != 0) mp[prefixXOR] = i;
            longestSubstring = Math.max(longestSubstring, i - mp[prefixXOR]);
        }
        return longestSubstring;
    }
}



or



class Solution {

    public int findTheLongestSubstring(String s) {
        int prefixXOR = 0;
        int[] characterMap = new int[26];
        characterMap['a' - 'a'] = 1;
        characterMap['e' - 'a'] = 2;
        characterMap['i' - 'a'] = 4;
        characterMap['o' - 'a'] = 8;
        characterMap['u' - 'a'] = 16;
        int[] mp = new int[32];
        for (int i = 0; i < 32; i++) mp[i] = -1;
        int longestSubstring = 0;
        for (int i = 0; i < s.length(); i++) {
            prefixXOR ^= characterMap[s.charAt(i) - 'a'];
            if (mp[prefixXOR] == -1 && prefixXOR != 0) mp[prefixXOR] = i;
            longestSubstring = Math.max(longestSubstring, i - mp[prefixXOR]);
        }
        return longestSubstring;
    }
}



or



class Solution {
    public int findTheLongestSubstring(String s) {
        int[] mapy = new int[32];
        Arrays.fill(mapy, -2);
        mapy[0] = -1;

        int maxLen = 0;
        int mask = 0;

        for (int i = 0; i < s.length(); i++) {
            char ch = s.charAt(i);

            switch (ch) {
                case 'a':
                    mask ^= 1;
                    break;
                case 'e':
                    mask ^= 2;
                    break;
                case 'i':
                    mask ^= 4;
                    break;
                case 'o':
                    mask ^= 8;
                    break;
                case 'u':
                    mask ^= 16;
                    break;
            }

            int prev = mapy[mask];
            if (prev == -2) {
                mapy[mask] = i;
            } else {
                maxLen = Math.max(maxLen, i - prev);
            }
        }

        return maxLen;
    }
}



or



class Solution {
    private boolean isVowel(char ch) {
        return ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u';
    }

    public int findTheLongestSubstring(String s) {
        // Map vowels to their respective positions in the bitmask
        HashMap<Character, Integer> vowelPosition = new HashMap<>();
        vowelPosition.put('a', 0);
        vowelPosition.put('e', 1);
        vowelPosition.put('i', 2);
        vowelPosition.put('o', 3);
        vowelPosition.put('u', 4);

        // HashMap to store the first occurrence of each state
        HashMap<Integer, Integer> lastOccurred = new HashMap<>();
        lastOccurred.put(0, -1); // Initial state with no vowels seen
        
        int cur = 0; // Bitmask to track the parity of vowel counts
        int maxLen = 0; // Result variable to store the maximum length
        
        for (int r = 0; r < s.length(); r++) {
            char currentChar = s.charAt(r);

            if (isVowel(currentChar)) {
                // Toggle the bit for the current vowel
                cur ^= (1 << vowelPosition.get(currentChar));
            }

            // If the current state has been seen before, calculate the length
            if (lastOccurred.containsKey(cur)) {
                maxLen = Math.max(maxLen, r - lastOccurred.get(cur));
            } else {
                // Store the first occurrence of this state
                lastOccurred.put(cur, r);
            }
        }

        return maxLen;
    }
}



or



import java.util.HashMap;

class Solution {
    public int findTheLongestSubstring(String s) {
        int n = s.length();
        int mask = 0;
        int maxLength = 0;
        HashMap<Integer, Integer> m = new HashMap<>();
        m.put(0, -1);
        
        for (int i = 0; i < n; i++) {
            char c = s.charAt(i);
            if (c == 'a') mask ^= (1 << 0);
            else if (c == 'e') mask ^= (1 << 1);
            else if (c == 'i') mask ^= (1 << 2);
            else if (c == 'o') mask ^= (1 << 3);
            else if (c == 'u') mask ^= (1 << 4);
            
            if (m.containsKey(mask)) {
                maxLength = Math.max(maxLength, i - m.get(mask));
            } else {
                m.put(mask, i);
            }
        }
        return maxLength;
    }
}



or




import java.util.HashMap;
import java.util.Map;

class Solution {
    public int findTheLongestSubstring(String s) {
        // Vowels with their respective bitmask values
        Map<Character, Integer> vowels = new HashMap<>();
        vowels.put('a', 1);
        vowels.put('e', 2);
        vowels.put('i', 4);
        vowels.put('o', 8);
        vowels.put('u', 16);
        
        // Map to store the first occurrence of each bitmask
        // Start with bitmask 0 at index -1, for cases where the entire string is valid
        Map<Integer, Integer> firstOccurrence = new HashMap<>();
        firstOccurrence.put(0, -1);
        
        int mask = 0; // Current bitmask
        int maxLength = 0; // Result variable to store the maximum length
        
        // Traverse the string
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            
            // If the character is a vowel, update the bitmask
            if (vowels.containsKey(c)) {
                mask ^= vowels.get(c);
            }
            
            // If the bitmask has been seen before, calculate the length of the substring
            if (firstOccurrence.containsKey(mask)) {
                maxLength = Math.max(maxLength, i - firstOccurrence.get(mask));
            } else {
                // If this is the first time we've seen this bitmask, store the index
                firstOccurrence.put(mask, i);
            }
        }
        
        return maxLength;
    }
}



or


class Solution {
    public int findTheLongestSubstring(String s) {
        // Define the vowels we are interested in
        String vowels = "aeiou";
        // Variable to keep track of the maximum length of substring found
        int res = 0;
        // Bitmask to keep track of the parity (even/odd count) of vowels
        int mask = 0;
        // Map to store the first occurrence index of each bitmask
        Map<Integer, Integer> maskToIdx = new HashMap<>();
        // Initialize the map with the base case where mask 0 is at index -1
        maskToIdx.put(0, -1);

        // Iterate over each character in the string
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            // If the character is a vowel, toggle its corresponding bit in the bitmask
            if (vowels.indexOf(c) != -1) {
                // Toggle the bit for the vowel using bitwise XOR
                mask ^= (1 << (c - 'a'));
            }
            // Check if this bitmask has been seen before
            if (maskToIdx.containsKey(mask)) {
                // Calculate the length of the substring with even counts of all vowels
                int length = i - maskToIdx.get(mask);
                // Update the maximum length if the current substring is longer
                res = Math.max(res, length);
            } else {
                // If this bitmask has not been seen before, store the current index
                maskToIdx.put(mask, i);
            }
        }

        // Return the maximum length found
        return res;
    }
}


or



class Solution {
    public int findTheLongestSubstring(String s) {
        String vowels = "aeiou";
        int res = 0;
        int mask = 0;
        Map<Integer, Integer> maskToIdx = new HashMap<>();
        maskToIdx.put(0, -1);

        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            if (vowels.indexOf(c) != -1) {
                mask ^= (1 << (c - 'a'));
            }
            if (maskToIdx.containsKey(mask)) {
                int length = i - maskToIdx.get(mask);
                res = Math.max(res, length);
            } else {
                maskToIdx.put(mask, i);
            }
        }

        return res;
    }
}



or


class Solution {
    public int findTheLongestSubstring(String s) {
        HashMap<Integer, Integer> mp = new HashMap<>();
        mp.put(0,-1);
        int cnt = 0, ans = 0;

        for (int i = 0; i < s.length(); i++) {
            if (s.charAt(i) == 'a' || s.charAt(i) == 'e' || s.charAt(i) == 'i' || s.charAt(i) == 'o' || s.charAt(i) == 'u') {
                cnt ^= (1 << ((int)(s.charAt(i) - 'a')));
            }
            if (mp.containsKey(cnt)) {
                ans = Math.max(ans, i - mp.get(cnt));
            } else {
                mp.put(cnt, i);
            }
        }
        return ans;
    }
}


or


class Solution {
    public int findTheLongestSubstring(String s) {
        // storing the vowels for checking
		HashSet<Character> set= new HashSet<>();
        set.add('a');
        set.add('e');
        set.add('i');
        set.add('o');
        set.add('u');
		
		// hash map to maintain the xor and their respective first occurence index
        HashMap<Integer, Integer> map= new HashMap<>();
		
		// for the substrings for which it starts from 0
        map.put(0, -1);
		
		// initially all the vowels are 0count which is even
        int xor=0;
		
        // longest substring initailly is 0
		int maxLen=0;
        
		// traversing the array
		for(int i=0; i<s.length(); i++){
		
		    // checking if the character is vowel or not
            if(set.contains(s.charAt(i))){
				// if it is vowel then we xor(trigger) the respective bit of the vowel and we ignore for the consonent as xor=xor^0=xor
                xor^=(s.charAt(i)-'a'+1);   
            }
			
			// if we didnt come across the same xor that means there are no even valued vowels as of now
            if(!map.containsKey(xor)){
				// we encounter the xor first time so we put their first index of occurence
                map.put(xor, i);
            }
			
			// NOTE: we could have put this in else part but if we have no even valued vowels so the maxlength will be i-i=0
			// here we update if we had any xor value that we encountered before then 
			// we check the longest substring which have even counts of vowels.
            maxLen=Math.max(maxLen, i-map.get(xor));
        }
        
        return maxLen;
    }
}



