https://leetcode.com/problems/find-the-n-th-value-after-k-seconds/description/


3179. Find the N-th Value After K Seconds
Medium
Topics
Companies
Hint
You are given two integers n and k.

Initially, you start with an array a of n integers where a[i] = 1 for all 0 <= i <= n - 1. After each second, you simultaneously update each element to be the sum of all its preceding elements plus the element itself. For example, after one second, a[0] remains the same, a[1] becomes a[0] + a[1], a[2] becomes a[0] + a[1] + a[2], and so on.

Return the value of a[n - 1] after k seconds.

Since the answer may be very large, return it modulo 109 + 7.

 

Example 1:

Input: n = 4, k = 5

Output: 56

Explanation:

Second	State After
0	[1,1,1,1]
1	[1,2,3,4]
2	[1,3,6,10]
3	[1,4,10,20]
4	[1,5,15,35]
5	[1,6,21,56]
Example 2:

Input: n = 5, k = 3

Output: 35

Explanation:

Second	State After
0	[1,1,1,1,1]
1	[1,2,3,4,5]
2	[1,3,6,10,15]
3	[1,4,10,20,35]
 

Constraints:

1 <= n, k <= 1000



# java


class Solution {
  public int valueAfterKSeconds(int n, int k) {
    final long[][] factAndInvFact = getFactAndInvFact(n + k - 1);
    final long[] fact = factAndInvFact[0];
    final long[] invFact = factAndInvFact[1];
    return nCk(n + k - 1, n - 1, fact, invFact);
  }

  private static final int MOD = 1_000_000_007;

  private long[][] getFactAndInvFact(int n) {
    long[] fact = new long[n + 1];
    long[] invFact = new long[n + 1];
    long[] inv = new long[n + 1];
    fact[0] = invFact[0] = 1;
    inv[0] = inv[1] = 1;
    for (int i = 1; i <= n; ++i) {
      if (i >= 2)
        inv[i] = MOD - MOD / i * inv[MOD % i] % MOD;
      fact[i] = fact[i - 1] * i % MOD;
      invFact[i] = invFact[i - 1] * inv[i] % MOD;
    }
    return new long[][] {fact, invFact};
  }

  private int nCk(int n, int k, long[] fact, long[] invFact) {
    return (int) (fact[n] * invFact[k] % MOD * invFact[n - k] % MOD);
  }
}



or



class Solution {
    public int valueAfterKSeconds(int n, int k) {
        final int mod = (int) 1e9 + 7;
        int[] a = new int[n];
        Arrays.fill(a, 1);
        while (k-- > 0) {
            for (int i = 1; i < n; ++i) {
                a[i] = (a[i] + a[i - 1]) % mod;
            }
        }
        return a[n - 1];
    }
}



or



class Solution {
    public int valueAfterKSeconds(int n, int k) {
        int[][] dp = new int[k + 1][n];
        for (int i = 0; i < n; i++) {
            dp[0][i] = 1;
        }
        int mod = 1000000007;
        for (int i = 1; i <= k; i++) {
            dp[i][0] = 1;
            for (int j = 1; j < n; j++) {
                dp[i][j] = (dp[i][j - 1] % mod + dp[i - 1][j] % mod) % mod;
            }
        }
        return dp[k][n - 1] % mod;
    }
}


or


class Solution {
    public int valueAfterKSeconds(int n, int k) {
        int[] dp = new int[n];
        for (int i = 0; i < n; i++) {
            dp[i] = 1;
        }
        int mod = 1000000007;
        for (int i = 1; i <= k; i++) {
            for (int j = 1; j < n; j++) {
                dp[j] = (dp[j - 1] % mod + dp[j] % mod) % mod;
            }
        }
        return dp[n - 1] % mod;
    }
}




or



public class Solution {
    public int valueAfterKSeconds(int n, int k) {
        int[] sum = new int[n];
        Arrays.fill(sum, 1);
        while(k-- > 0)
            for(int i = 1 ; i < n ; i++)
                sum[i] = (sum[i] + sum[i - 1]) % 1000000007;
        return sum[n - 1];
    }
}


or


class Solution {
    public int valueAfterKSeconds(int n, int k) {
        int nums [] = new int[n];
        Arrays.fill(nums,1);
        int i=0;
        while (i<k){
            int sum =0;
            for (int j = 0; j < nums.length; j++) {
                sum=(sum+nums[j]) %(int)(Math.pow(10,9)+7);
                nums[j]=sum;
            }
            i++;
        }
        return nums[nums.length-1];
    }
}


or


class Solution {
    public int valueAfterKSeconds(int n, int k) {
         int[] a = new int[n];
         int mod = (int)1e9+7;
        for (int i = 0; i < n; i++) {
            a[i] = 1;
        }

        // Perform the updates for k seconds
        for (int second = 0; second < k; second++) {
            int[] prefixSum = new int[n];
            prefixSum[0] = a[0];
            for (int i = 1; i < n; i++) {
                prefixSum[i] = (prefixSum[i - 1] + a[i]) % mod;
            }
            for (int i = 1; i < n; i++) {
                a[i] = prefixSum[i];
            }
        }

        return a[n - 1];
    }
}


or


class Solution {
   public static int valueAfterKSeconds(int n, int k) {
        long[] arr = new long[n];
        Arrays.fill(arr, 1);
        
        for (int i = 0; i < k; i++) {
            long sum = 0;
            for (int j = 0; j < n; j++) {
                sum += arr[j];
                arr[j] = sum % 1000000007;
            }
        }
        
        return (int) arr[n - 1];
    }
}



or



class Solution {
    public int valueAfterKSeconds(int n, int k) {
        int[] arr=new int[n];
        for(int i=0;i<n;i++){
            arr[i]=1;
        }
        for(int i=0;i<k;i++){
            for(int j=1;j<n;j++){
                arr[j]=(arr[j]+arr[j-1])%1000000007;
            }
        }
        return arr[n-1]%1000000007;        
    }
}


