https://leetcode.com/problems/count-beautiful-substrings-i/description/

2947. Count Beautiful Substrings I
Medium
Topics
Companies
Hint
You are given a string s and a positive integer k.

Let vowels and consonants be the number of vowels and consonants in a string.

A string is beautiful if:

vowels == consonants.
(vowels * consonants) % k == 0, in other terms the multiplication of vowels and consonants is divisible by k.
Return the number of non-empty beautiful substrings in the given string s.

A substring is a contiguous sequence of characters in a string.

Vowel letters in English are 'a', 'e', 'i', 'o', and 'u'.

Consonant letters in English are every letter except vowels.

 

Example 1:

Input: s = "baeyh", k = 2
Output: 2
Explanation: There are 2 beautiful substrings in the given string.
- Substring "baeyh", vowels = 2 (["a",e"]), consonants = 2 (["y","h"]).
You can see that string "aeyh" is beautiful as vowels == consonants and vowels * consonants % k == 0.
- Substring "baeyh", vowels = 2 (["a",e"]), consonants = 2 (["b","y"]). 
You can see that string "baey" is beautiful as vowels == consonants and vowels * consonants % k == 0.
It can be shown that there are only 2 beautiful substrings in the given string.
Example 2:

Input: s = "abba", k = 1
Output: 3
Explanation: There are 3 beautiful substrings in the given string.
- Substring "abba", vowels = 1 (["a"]), consonants = 1 (["b"]). 
- Substring "abba", vowels = 1 (["a"]), consonants = 1 (["b"]).
- Substring "abba", vowels = 2 (["a","a"]), consonants = 2 (["b","b"]).
It can be shown that there are only 3 beautiful substrings in the given string.
Example 3:

Input: s = "bcdf", k = 1
Output: 0
Explanation: There are no beautiful substrings in the given string.
 

Constraints:

1 <= s.length <= 1000
1 <= k <= 1000
s consists of only English lowercase letters.



# java



class Solution {
  public int beautifulSubstrings(String s, int k) {
    final int root = getRoot(k);
    int ans = 0;
    int vowels = 0;
    int vowelsMinusConsonants = 0;
    // {(vowels, vowelsMinusConsonants): count}
    Map<Pair<Integer, Integer>, Integer> prefixCount = new HashMap<>();
    prefixCount.put(new Pair<>(0, 0), 1);

    for (final char c : s.toCharArray()) {
      if (isVowel(c)) {
        vowels = (vowels + 1) % root;
        ++vowelsMinusConsonants;
      } else {
        --vowelsMinusConsonants;
      }
      Pair<Integer, Integer> prefix = new Pair<>(vowels, vowelsMinusConsonants);
      ans += prefixCount.getOrDefault(prefix, 0);
      prefixCount.merge(prefix, 1, Integer::sum);
    }

    return ans;
  }

  private boolean isVowel(char c) {
    return "aeiou".indexOf(c) != -1;
  }

  private int getRoot(int k) {
    for (int i = 1; i <= k; ++i)
      if (i * i % k == 0)
        return i;
    throw new IllegalArgumentException();
  }
}



or




class Solution {
    public int beautifulSubstrings(String s, int k) {
        int n = s.length();
        int[] vs = new int[26];
        for (char c : "aeiou".toCharArray()) {
            vs[c - 'a'] = 1;
        }
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int vowels = 0;
            for (int j = i; j < n; ++j) {
                vowels += vs[s.charAt(j) - 'a'];
                int consonants = j - i + 1 - vowels;
                if (vowels == consonants && vowels * consonants % k == 0) {
                    ++ans;
                }
            }
        }
        return ans;
    }
}



or



class Solution {
    public int beautifulSubstrings(String s, int k) {
        int n = s.length();
        int res = 0;
        char[] cc = {'a', 'e', 'i', 'o', 'u'};
        Set<Character> vowelSet = new HashSet<>();
        for (char c : cc)
            vowelSet.add(c);

        for (int j = 0; j < n; ++j) {
            int c = 0, v = 0;
            for (int i = j; i < n; ++i) {
                if (vowelSet.contains(s.charAt(i)))
                    v += 1;
                else
                    c += 1;

                if (c == v && (c * v) % k == 0)
                    res += 1;
            }
        }
        return res;
    }
}


or



class Solution {
    public int beautifulSubstrings(String s, int k) {
        int len=s.length();
        int ans=0;
        for(int i=0;i<len;i++)
        {
            int count=0,count1=0;
            for(int j=i;j<len;j++)
            {
                char c=s.charAt(j);
                if(c=='a' || c=='e' || c=='o' || c=='i' || c=='u')
                {
                    count++;
                }
                else
                {
                    count1++;
                }
                if(count==count1 && (count*count1)%k == 0)
                {
                    ans++;
                }
            }
        }
        return ans;
    }
}


or



class Solution {
    public int beautifulSubstrings(String s, int k) {
        int counte = 0;
        int len = s.length();
        
        for (int i = 0; i < len; i++) {
            int vow = 0;
            int con = 0;
            
            for (int j = i; j < len; j++) {
                char c = s.charAt(j);
                
                if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {
                    vow++;
                }
                
                int df = j - i + 1;
                con = df - vow;
                
                if (vow == con && (vow * con) % k == 0) {
                    counte++;
                }
            }
        }
        
        return counte;
    }
}




or




class Solution {
    public boolean isVowel(char c) {
        return (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');
    }

    public int beautifulSubstrings(String s, int k) {
        int ans = 0;
        int n = s.length();

        for(int i = 0;i<n;i++){

            int vowel = 0;
            int consonant =0;

            for(int j = i; j<n;j++){

                if(isVowel(s.charAt(j))) 
                vowel++;
                else
                consonant++;
                

                if(vowel == consonant &&  (vowel*consonant) % k == 0) ans++;
            }
        }
        return ans;
    }
}


or

class Solution {
    private static final int[] vowels = new int[26];
    static {
        vowels[0] = vowels['e' - 'a'] = vowels['i' - 'a'] = vowels['o' - 'a'] = vowels['u' - 'a'] = 1;
    }

    public int beautifulSubstrings(String s, int k) {
        int[] vowelCount = getVowelCount(s);
        int vowelsOnLeft = 0, intervalVowels = 0;
        int count = 0;
        for (int i = 0; i < vowelCount.length - 1; i++) {
            vowelsOnLeft = i == 0 ? 0 : vowelCount[i-1];
            for (int j = i + 1; j < vowelCount.length; j += 2) {
                intervalVowels = vowelCount[j] - vowelsOnLeft;
                if (intervalVowels == (1 + j - i) / 2 && intervalVowels * intervalVowels % k == 0) {
                    count++;
                }
            }
        }
        return count;
    }

    private int[] getVowelCount(String s) {
        int[] vowelCount = new int[s.length()];
        vowelCount[0] = vowels[s.charAt(0) - 'a'];
        for (int i = 1; i < s.length(); i++) {
            vowelCount[i] = vowelCount[i - 1] + vowels[s.charAt(i) - 'a'];
        }
        return vowelCount;
    }
}



or


class Solution {

    private static final int[] PRIMES_UP_TO_SQRT_1000 = new int[] {
        2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31
    };

    public int beautifulSubstrings(String s, int k) {
        final int[] vowelsAfter = new int[1 + s.length()];
        for (int i = 0; i < s.length(); ++i) {
            final char ch = s.charAt(i);
            final boolean vowel;
            if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u') {
                vowelsAfter[i + 1] = vowelsAfter[i] + 1;
            } else {
                vowelsAfter[i + 1] = vowelsAfter[i];
            }
        }
        final int multiples = computeMultiples(k); // sqrt(m)
        final int step = (multiples << 1);
        int answer = 0;
        for (int i = 0; i < s.length(); ++i) {
            for (int j = (i + step); j <= s.length(); j += step) {
                final int length = j - i;
                final int vowels = vowelsAfter[j] - vowelsAfter[i];
                final int consonants = length - vowels;
                if (vowels == consonants) {
                    answer++;
                }
            }
        }
        return answer;
    }

    private int computeMultiples(int k) {
        int squared = 1;
        int remainder = k;
        int i = 0;
        while (remainder > 1 && i < PRIMES_UP_TO_SQRT_1000.length && remainder >= PRIMES_UP_TO_SQRT_1000[i]) {
            final int factor = PRIMES_UP_TO_SQRT_1000[i++];
            boolean changed = false;
            while ((remainder % factor) == 0) {
                squared *= factor;
                remainder /= factor;
                changed = true;
            }
            if (changed && !isSquare(squared)) {
                squared *= factor; // each prime factor must have even power
            }
        }
        // remainder effectively squared as well to have even power
        return remainder * (int) Math.sqrt(squared);
    }

    private boolean isSquare(int value) {
        final int a = (int) Math.sqrt(value);
        return ((a * a) == value);
    }

}



or


class Solution {
    
    public boolean isvowel(char c)   {
        if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u' )   return true;
        return false;
    }
    
    public int beautifulSubstrings(String s, int k) {
        int ans = 0;
        int len = s.length();
        int a[] = new int[len];

        for(int i = 0; i < s.length(); i++) {
            if(i == 0 &&  !isvowel(s.charAt(i)))    {
                a[i] = 0;
                continue;
            }
            if(i == 0 && isvowel(s.charAt(i)))    a[i] = 1;
            else if(isvowel(s.charAt(i)))    a[i] = a[i-1] + 1;
            else a[i] = a[i-1];
        }

        for(int i = 0; i < len - 1; i++)    {
            for(int j = i + 1 ; j < len; j++)   {
                //String temp = s.substring(i, j);
                int vowel = 0, consonent = 0;
                if(isvowel(s.charAt(i)) && isvowel(s.charAt(j)))    {
                    vowel = a[j] - a[i] + 1;
                }
                else if(isvowel(s.charAt(i)))   vowel = a[j] - a[i] + 1;
                else  vowel = a[j] - a[i];

                consonent = (j - i + 1) - vowel;

                if(vowel == consonent && (vowel * consonent) % k == 0)    ans ++;
            }
        }
        return ans;
    }
}
