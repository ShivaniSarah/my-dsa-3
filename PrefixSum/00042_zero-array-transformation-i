https://leetcode.com/problems/zero-array-transformation-i/description/

3355. Zero Array Transformation I
Solved
Medium
Topics
Companies
Hint
You are given an integer array nums of length n and a 2D array queries, where queries[i] = [li, ri].

For each queries[i]:

Select a subset of indices within the range [li, ri] in nums.
Decrement the values at the selected indices by 1.
A Zero Array is an array where all elements are equal to 0.

Return true if it is possible to transform nums into a Zero Array after processing all the queries sequentially, otherwise return false.

 

Example 1:

Input: nums = [1,0,1], queries = [[0,2]]

Output: true

Explanation:

For i = 0:
Select the subset of indices as [0, 2] and decrement the values at these indices by 1.
The array will become [0, 0, 0], which is a Zero Array.
Example 2:

Input: nums = [4,3,2,1], queries = [[1,3],[0,2]]

Output: false

Explanation:

For i = 0:
Select the subset of indices as [1, 2, 3] and decrement the values at these indices by 1.
The array will become [4, 2, 1, 0].
For i = 1:
Select the subset of indices as [0, 1, 2] and decrement the values at these indices by 1.
The array will become [3, 1, 0, 0], which is not a Zero Array.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 105
1 <= queries.length <= 105
queries[i].length == 2
0 <= li <= ri < nums.length


# java



class Solution {
  public boolean isZeroArray(int[] nums, int[][] queries) {
    int[] line = new int[nums.length + 1];
    int decrement = 0;

    for (int[] query : queries) {
      final int l = query[0];
      final int r = query[1];
      ++line[l];
      --line[r + 1];
    }

    for (int i = 0; i < nums.length; ++i) {
      decrement += line[i];
      if (decrement < nums[i])
        return false;
    }

    return true;
  }
}



or


class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] d = new int[n + 1];
        for (var q : queries) {
            int l = q[0], r = q[1];
            ++d[l];
            --d[r + 1];
        }
        for (int i = 0, s = 0; i < n; ++i) {
            s += d[i];
            if (nums[i] > s) {
                return false;
            }
        }
        return true;
    }
}



or



class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] freq = new int[n];
        
        for(int[] q : queries) {
            freq[q[0]]++;
            if(q[1] + 1 < n) {
                freq[q[1] + 1]--;
            }
        }
        
        int curFreq = 0;
        for(int i = 0; i < n; i++) {
            curFreq += freq[i];
            if(curFreq < nums[i]) {
                return false;
            }
        }
        return true;
    }
}



or



class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1]; // Difference array for efficient range updates
        
        // Process each query using difference array
        for (int[] q : queries) {
            int li = q[0], ri = q[1];
            diff[li]--; 
            diff[ri + 1]++;
        }

        int currentDecrement = 0; // Tracks how many times an index is decremented

        // Apply the decrements and check if nums can become zero
        for (int i = 0; i < n; i++) {
            currentDecrement += diff[i]; // Apply prefix sum
            if (nums[i] + currentDecrement > 0) {
                return false; // If nums[i] can't be reduced to 0, return false
            }
        }
        return true; // If all elements are 0, return true
    }
}


or



class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] sweep = new int[n+1];
        for(int[] query :queries)
        {
            int l = query[0];
            int r = query[1];
            sweep[l] +=  1;
            sweep[r+1] -= 1;
        }
        for(int i=1;i<=n;i++)
        {
            sweep[i]+=sweep[i-1];
        }
        for(int i=0;i<n;i++)
        {
            if(sweep[i]<nums[i]) return false;
        }
        return true;


    }
}



or


class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1]; // Difference array for efficient range updates
        
        // Process each query using difference array
        for (int[] q : queries) {
            int li = q[0], ri = q[1];
            diff[li]--; 
            diff[ri + 1]++;
        }

        int currentDecrement = 0; // Tracks how many times an index is decremented

        // Apply the decrements and check if nums can become zero
        for (int i = 0; i < n; i++) {
            currentDecrement += diff[i]; // Apply prefix sum
            if (nums[i] + currentDecrement > 0) {
                return false; // If nums[i] can't be reduced to 0, return false
            }
        }
        return true; // If all elements are 0, return true
    }
}



or



class Solution {
    public boolean isZeroArray(int[] nums, int[][] queries) {
        int n = nums.length;
        int[] diff = new int[n + 1];
        for (int[] q : queries) {
            int l = q[0], r = q[1];
            diff[l]++;
            diff[r + 1]--;
        }
        int[] maxDec = new int[n];
        int curr = 0;
        for (int i = 0; i < n; i++) {
            curr += diff[i];
            maxDec[i] = curr;
        }
        for (int i = 0; i < n; i++) {
            if (nums[i] > maxDec[i]) {
                return false;
            }
        }
        return true;
    }
}




