https://leetcode.com/problems/find-the-score-of-all-prefixes-of-an-array/description/


2640. Find the Score of All Prefixes of an Array
Medium
Topics
Companies
Hint
We define the conversion array conver of an array arr as follows:

conver[i] = arr[i] + max(arr[0..i]) where max(arr[0..i]) is the maximum value of arr[j] over 0 <= j <= i.
We also define the score of an array arr as the sum of the values of the conversion array of arr.

Given a 0-indexed integer array nums of length n, return an array ans of length n where ans[i] is the score of the prefix nums[0..i].

 

Example 1:

Input: nums = [2,3,7,5,10]
Output: [4,10,24,36,56]
Explanation: 
For the prefix [2], the conversion array is [4] hence the score is 4
For the prefix [2, 3], the conversion array is [4, 6] hence the score is 10
For the prefix [2, 3, 7], the conversion array is [4, 6, 14] hence the score is 24
For the prefix [2, 3, 7, 5], the conversion array is [4, 6, 14, 12] hence the score is 36
For the prefix [2, 3, 7, 5, 10], the conversion array is [4, 6, 14, 12, 20] hence the score is 56
Example 2:

Input: nums = [1,1,2,4,8,16]
Output: [2,4,8,16,32,64]
Explanation: 
For the prefix [1], the conversion array is [2] hence the score is 2
For the prefix [1, 1], the conversion array is [2, 2] hence the score is 4
For the prefix [1, 1, 2], the conversion array is [2, 2, 4] hence the score is 8
For the prefix [1, 1, 2, 4], the conversion array is [2, 2, 4, 8] hence the score is 16
For the prefix [1, 1, 2, 4, 8], the conversion array is [2, 2, 4, 8, 16] hence the score is 32
For the prefix [1, 1, 2, 4, 8, 16], the conversion array is [2, 2, 4, 8, 16, 32] hence the score is 64
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 109


# java



class Solution {
  public long[] findPrefixScore(int[] nums) {
    long[] ans = new long[nums.length];
    long prefix = 0;
    int mx = 0;

    for (int i = 0; i < nums.length; i++) {
      mx = Math.max(mx, nums[i]);
      prefix += nums[i] + mx;
      ans[i] = prefix;
    }

    return ans;
  }
}


or



class Solution {
    public long[] findPrefixScore(int[] nums) {
        int n = nums.length;
        long[] ans = new long[n];
        int mx = 0;
        for (int i = 0; i < n; ++i) {
            mx = Math.max(mx, nums[i]);
            ans[i] = nums[i] + mx + (i == 0 ? 0 : ans[i - 1]);
        }
        return ans;
    }
}


or

// b est
class Solution {
    public long[] findPrefixScore(int[] nums) {
        int n = nums.length, maximum = nums[0];
        long[] result = new long[n];
        result[0] = 2 * nums[0];
        for (int i = 1; i < n; i++) {
            maximum = Math.max(maximum, nums[i]);
            result[i] = result[i - 1] + nums[i] + maximum;
        }
        return result;
    }
}

or



class Solution {
    public long[] findPrefixScore(int[] nums) {
        int n = nums.length;

        long[] ans = new long[n];
        long sum = 0;
        int maxi = nums[0];
        
        for (int i = 0; i < n; i++) {
            maxi = Math.max(nums[i], maxi);
            sum += maxi + nums[i];
            ans[i] = sum;
        }

        return ans;
    }
}


or


class Solution {
    public long[] findPrefixScore(int[] nums) {
        int n = nums.length;

        long[] conver = new long[n];
        conver[0] = 2 * nums[0];
        int maxi = nums[0];

        for (int i = 1; i < n; i++) {
            maxi = Math.max(nums[i], maxi);
            conver[i] = nums[i] + maxi;
        }

        long[] score = new long[n];
        score[0] = conver[0];
        for (int i = 1; i < n; i++) {
            score[i] += score[i - 1] + conver[i];
        }

        return score;
    }
}


or


class Solution {
    public long[] findPrefixScore(int[] nums) {
        long[] arr= new long[nums.length];
        long max=nums[0];
        long sum=0;
        for(int i=0;i<nums.length;i++){
            max=max<=nums[i]?nums[i]:max;
            sum=sum+nums[i]+max;
            arr[i]=sum;
        }
        return arr;
    }
}


or



class Solution {
    public long[] findPrefixScore(int[] nums) {
        int n = nums.length, max = -1;
        long[] conv = new long[n];
        
        for(int i=0;i<n;i++){
          max = Math.max(max, nums[i]);
          conv[i] = nums[i] + max;
        }
        
        for(int i=1;i<n;i++){
            conv[i] = conv[i-1] + conv[i];
        }
        
        return conv;
    }
}




