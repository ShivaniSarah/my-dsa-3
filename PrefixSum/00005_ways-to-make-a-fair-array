https://leetcode.com/problems/ways-to-make-a-fair-array/description/


1664. Ways to Make a Fair Array
Medium
Topics
Companies
Hint
You are given an integer array nums. You can choose exactly one index (0-indexed) and remove the element. Notice that the index of the elements may change after the removal.

For example, if nums = [6,1,7,4,1]:

Choosing to remove index 1 results in nums = [6,7,4,1].
Choosing to remove index 2 results in nums = [6,1,4,1].
Choosing to remove index 4 results in nums = [6,1,7,4].
An array is fair if the sum of the odd-indexed values equals the sum of the even-indexed values.

Return the number of indices that you could choose such that after the removal, nums is fair.

 

Example 1:

Input: nums = [2,1,6,4]
Output: 1
Explanation:
Remove index 0: [1,6,4] -> Even sum: 1 + 4 = 5. Odd sum: 6. Not fair.
Remove index 1: [2,6,4] -> Even sum: 2 + 4 = 6. Odd sum: 6. Fair.
Remove index 2: [2,1,4] -> Even sum: 2 + 4 = 6. Odd sum: 1. Not fair.
Remove index 3: [2,1,6] -> Even sum: 2 + 6 = 8. Odd sum: 1. Not fair.
There is 1 index that you can remove to make nums fair.
Example 2:

Input: nums = [1,1,1]
Output: 3
Explanation: You can remove any index and the remaining array is fair.
Example 3:

Input: nums = [1,2,3]
Output: 0
Explanation: You cannot make a fair array after removing any index.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 104




# java


class Solution {
  public int waysToMakeFair(int[] nums) {
    final int n = nums.length;
    int ans = 0;
    int[] even = new int[n + 1]; // the sum of even-indexed nums[0..i)
    int[] odd = new int[n + 1];  // the sum of odd-indexed nums[0..i)

    for (int i = 1; i <= n; ++i) {
      odd[i] = odd[i - 1];
      even[i] = even[i - 1];
      if (i % 2 == 0)
        even[i] += nums[i - 1];
      else
        odd[i] += nums[i - 1];
    }

    final int sum = even[n] + odd[n];

    for (int i = 0; i < n; ++i) {
      final int evenSum = even[i] + odd[n] - odd[i + 1];
      final int oddSum = sum - nums[i] - evenSum;
      if (evenSum == oddSum)
        ++ans;
    }

    return ans;
  }
}



or


class Solution {
  public int waysToMakeFair(int[] nums) {
    final int n = nums.length;
    int ans = 0;
    // l[0] := the sum of even-indexed nums[0..i)
    // l[1] := the sum of odd-indexed nums[0..i)
    // r[0] := the sum of even-indexed nums[i + 1..n)
    // r[1] := the sum of odd-indexed nums[i + 1..n)
    int[] l = new int[2];
    int[] r = new int[2];

    for (int i = 0; i < n; ++i)
      r[i % 2] += nums[i];

    for (int i = 0; i < n; ++i) {
      r[i % 2] -= nums[i];
      if (l[0] + r[1] == l[1] + r[0])
        ++ans;
      l[i % 2] += nums[i];
    }

    return ans;
  }
}





or



class Solution {
    public int waysToMakeFair(int[] nums) {
        int s1 = 0, s2 = 0;
        int n = nums.length;
        for (int i = 0; i < n; ++i) {
            s1 += i % 2 == 0 ? nums[i] : 0;
            s2 += i % 2 == 1 ? nums[i] : 0;
        }
        int t1 = 0, t2 = 0;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int v = nums[i];
            ans += i % 2 == 0 && t2 + s1 - t1 - v == t1 + s2 - t2 ? 1 : 0;
            ans += i % 2 == 1 && t2 + s1 - t1 == t1 + s2 - t2 - v ? 1 : 0;
            t1 += i % 2 == 0 ? v : 0;
            t2 += i % 2 == 1 ? v : 0;
        }
        return ans;
    }
}




or



class Solution {
    public int waysToMakeFair(int[] nums) {
        int esum = 0;  // Sum of even-indexed elements
        int osum = 0;  // Sum of odd-indexed elements
        int n=nums.length;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                osum += nums[i];
            } else {
                esum += nums[i];
            }
        }
        int count = 0;
        int prev = 0;
        for (int i = 0; i < n; i++) {
            if (i % 2 == 0) {
                osum = osum - nums[i] + prev;
            } else {
                esum = esum - nums[i] + prev;
            }
            if (esum == osum) {
                count++;
            }
            prev = nums[i];
        }
        return count;
    }
}



or



class Solution {
    public int waysToMakeFair(int[] nums) {
        
        /*
        Idea - 
        
        have left (odd & even) & right (odd & even) odd & even sums separately
        
        as we move each element subtract & add appropriately
        */
        int count = 0;
        
        int evenLeft = 0;
        int oddLeft = 0;
        
        int evenRight = 0;
        int oddRight = 0;
            
        // calculate the right odd & even initially since we move from 0->n
        for(int i=0;i<nums.length;i++)
        {
            if(i%2 == 0)
            {
                evenRight+=nums[i];
            } else{
                oddRight+= nums[i];
            }
        }
        
        // move from 0 -> n
        for(int i=0;i<nums.length;i++)
        {
            
            // start from 1 since left at 0 index is 0 anyways & array bounds checked
            if(i>0)
            {
                // add previous element to left count
                if(i%2 == 0)
                {
                     oddLeft +=nums[i-1];
                } else{
                     evenLeft+=nums[i-1];
                }
            }
            
            // subtract current element value from right counts so we get right count excluding the current element
            if(i%2 == 0)
            {
                evenRight-=nums[i];
            } else{
                oddRight-=nums[i];
            }
            
            // if at any point we have below condition true increment count
            // notice here we are adding even & odd of opposite sides here since on excluding the current element the right counterpart sum switches
            // i.e if it was odd before it becomes even, else if it was even becomes odd
             if(evenLeft+oddRight == oddLeft+evenRight)
                {
                    count++;
                }
        }
        return count;
    }
}



or


class Solution {
    public int waysToMakeFair(int[] nums) {
        
        int n=nums.length;
        int []even=new int[n];
        int []odd=new int[n];
        
        int evensum=0;
        int oddsum=0;
        
        for(int i=0;i<n;i++){
            if(i%2==0){
                evensum+=nums[i];
            }else{
                oddsum+=nums[i];
            }
            
            even[i]=evensum;
            odd[i]=oddsum;
        }
        
        int ans=0;
        
        for(int i=0;i<n;i++){
            int neven=0;
            int nodd=0;
            
            if(i==0){
                nodd=even[n-1]-even[0];
                neven=odd[n-1];
            }else{
                nodd=odd[i-1]+even[n-1]-even[i];
                neven=even[i-1]+odd[n-1]-odd[i];
            }
            
            if(neven==nodd){
                ans++;
            }
        }
        
        return ans;
    }
}


or


class Solution 
{
    public int waysToMakeFair(int[] nums) 
    {
        int righte=0, righto=0;
        int lefto = 0,  lefte=0;
        //pre-calculate sum of even/odd indexes towards right
        for(int i=0;i<nums.length;i++)
        {
            if(i%2==0)
                righte+=nums[i];
            else
                righto+=nums[i];
        }
        
            int ans =0;
        
            for(int i=0;i<nums.length;i++)
            {
                //simulate removal of the current index by  subtracting  its value form righte/righto
				
             if(i%2==0)
                 righte-= nums[i];
                else 
                 righto-=nums[i];
                
                //check if after removal our condition stands or not 
                if(lefte+righto == righte+lefto)
                    ans++;
					
                //depending on the index  , add its value to lefte/lefto
                if(i%2==0)
                    lefte+=nums[i];
                else
                    lefto+=nums[i];
            }
        return ans;

    }
}



or


class Solution 
{
        public int waysToMakeFair(int[] nums) {
        int[] diff = new int[nums.length];
        int oddSum = 0;
        int evenSum = 0;
        for(int i = nums.length-1;i>=0;i--){
            if(i%2==0){
                evenSum += nums[i];
                diff[i] = oddSum-evenSum;
            }else{
                oddSum += nums[i];
                diff[i] = evenSum-oddSum;
            }
        }
        int a = 0;
        int total = evenSum+oddSum;
        int e = 0,o = 0;
        for(int i = 0;i<nums.length;i++){
            if(i%2==0){
                e = evenSum+diff[i];
                int t = total-nums[i];
                o = t-e;
            }else{
                o = oddSum+diff[i];
                int t = total-nums[i];
                e = t-o;
            }
            if(e==o)
                a++;
        }
        return a;
    }
}




