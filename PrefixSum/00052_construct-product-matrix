https://leetcode.com/problems/construct-product-matrix/description/


2906. Construct Product Matrix
Medium
Topics
Companies
Hint
Given a 0-indexed 2D integer matrix grid of size n * m, we define a 0-indexed 2D matrix p of size n * m as the product matrix of grid if the following condition is met:

Each element p[i][j] is calculated as the product of all elements in grid except for the element grid[i][j]. This product is then taken modulo 12345.
Return the product matrix of grid.

 

Example 1:

Input: grid = [[1,2],[3,4]]
Output: [[24,12],[8,6]]
Explanation: p[0][0] = grid[0][1] * grid[1][0] * grid[1][1] = 2 * 3 * 4 = 24
p[0][1] = grid[0][0] * grid[1][0] * grid[1][1] = 1 * 3 * 4 = 12
p[1][0] = grid[0][0] * grid[0][1] * grid[1][1] = 1 * 2 * 4 = 8
p[1][1] = grid[0][0] * grid[0][1] * grid[1][0] = 1 * 2 * 3 = 6
So the answer is [[24,12],[8,6]].
Example 2:

Input: grid = [[12345],[2],[1]]
Output: [[2],[0],[0]]
Explanation: p[0][0] = grid[0][1] * grid[0][2] = 2 * 1 = 2.
p[0][1] = grid[0][0] * grid[0][2] = 12345 * 1 = 12345. 12345 % 12345 = 0. So p[0][1] = 0.
p[0][2] = grid[0][0] * grid[0][1] = 12345 * 2 = 24690. 24690 % 12345 = 0. So p[0][2] = 0.
So the answer is [[2],[0],[0]].
 

Constraints:

1 <= n == grid.length <= 105
1 <= m == grid[i].length <= 105
2 <= n * m <= 105
1 <= grid[i][j] <= 109


# java


class Solution {
  public int[][] constructProductMatrix(int[][] grid) {
    final int MOD = 12345;
    final int m = grid.length;
    final int n = grid[0].length;
    int[][] ans = new int[m][n];
    List<Integer> prefix = new ArrayList<>(List.of(1));
    int suffix = 1;

    for (int[] row : grid)
      for (int num : row)
        prefix.add((int) ((long) prefix.get(prefix.size() - 1) * num % MOD));

    for (int i = m - 1; i >= 0; i--)
      for (int j = n - 1; j >= 0; j--) {
        ans[i][j] = (int) ((long) prefix.get(i * n + j) * suffix % MOD);
        suffix = (int) ((long) suffix * grid[i][j] % MOD);
      }

    return ans;
  }
}



or



class Solution {
    public int[][] constructProductMatrix(int[][] grid) {
        final int mod = 12345;
        int n = grid.length, m = grid[0].length;
        int[][] p = new int[n][m];
        long suf = 1;
        for (int i = n - 1; i >= 0; --i) {
            for (int j = m - 1; j >= 0; --j) {
                p[i][j] = (int) suf;
                suf = suf * grid[i][j] % mod;
            }
        }
        long pre = 1;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                p[i][j] = (int) (p[i][j] * pre % mod);
                pre = pre * grid[i][j] % mod;
            }
        }
        return p;
    }
}



or



class Solution {
        public int[][] constructProductMatrix(int[][] grid) {
        int n = grid.length, m = grid[0].length, A[][] = new int[n][m];
        long pre = 1, suf = 1, mod = 12345;
        for (int i = 0; i < n; i++) {
            if (i <= n - i - 1) {
                Arrays.fill(A[i], 1);
                Arrays.fill(A[n - i - 1], 1);
            }
            for (int j = 0; j < m; j++) {
                A[i][j] = (int)(pre * A[i][j] % mod);
                A[n - i - 1][m - j - 1] = (int)(suf * A[n - i - 1][m - j - 1] % mod);
                pre = pre * grid[i][j] % mod;
                suf = suf * grid[n - i - 1][m - j - 1] % mod;
            }
        }
        return A;
    }
}


or



class Solution {
    public int[][] constructProductMatrix(int[][] grid) {
        //the concept here used is as same as the product of the array except self
        int n = grid.length;
        int m = grid[0].length;
        int[][] productES = new int[n][m];
        long prefixProduct = 1;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                productES[i][j] = (int) (prefixProduct % (long) 12345);
                prefixProduct = (prefixProduct * grid[i][j]) % (long) 12345;
            }
        }
        long suffixProduct = 1;
        for (int i = n - 1; i >= 0; i--) {
            for (int j = m - 1; j >= 0; j--) {
                productES[i][j] = (int) ((productES[i][j] * suffixProduct) % (long) 12345);
                suffixProduct = (suffixProduct * grid[i][j]) % (long) 12345;
            }
        }
        return productES;
    }
}



or


class Solution {
    public int[][] constructProductMatrix(int[][] grid) {
        long product = 1;
        int n = grid.length;
        int m = grid[0].length;
        int[][] prefixProd = new int[n][m];
        int[][] suffixProd = new int[n][m];

        int last = 1;
        for(int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                prefixProd[i][j] = (last * (grid[i][j] % 12345)) % 12345;
                last = prefixProd[i][j];
            }
        }

        last = 1;
        for(int i = n - 1; i >= 0; --i) {
            for (int j = m - 1; j >= 0; --j) {
                suffixProd[i][j] = (last * (grid[i][j] % 12345)) % 12345;
                last = suffixProd[i][j];
            }
        }

        int prefix;
        int suffix;
        for(int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (i == 0 && j == 0) {
                    prefix = 1;
                }
                else if (j != 0) {
                    prefix = prefixProd[i][j - 1];
                }
                else {
                    prefix = prefixProd[i - 1][m - 1];
                }

                if (i == n - 1 && j == m -1) {
                    suffix = 1;
                }
                else if (j + 1 < m) {
                    suffix = suffixProd[i][j + 1];
                }
                else {
                    suffix = suffixProd[i + 1][0];
                }

                grid[i][j] = (prefix * suffix) % 12345;
            }
        }
        
        return grid;
    }
}

