https://leetcode.com/problems/corporate-flight-bookings/description/


1109. Corporate Flight Bookings
Medium
Topics
Companies
There are n flights that are labeled from 1 to n.

You are given an array of flight bookings bookings, where bookings[i] = [firsti, lasti, seatsi] represents a booking for flights firsti through lasti (inclusive) with seatsi seats reserved for each flight in the range.

Return an array answer of length n, where answer[i] is the total number of seats reserved for flight i.

 

Example 1:

Input: bookings = [[1,2,10],[2,3,20],[2,5,25]], n = 5
Output: [10,55,45,25,25]
Explanation:
Flight labels:        1   2   3   4   5
Booking 1 reserved:  10  10
Booking 2 reserved:      20  20
Booking 3 reserved:      25  25  25  25
Total seats:         10  55  45  25  25
Hence, answer = [10,55,45,25,25]
Example 2:

Input: bookings = [[1,2,10],[2,2,15]], n = 2
Output: [10,25]
Explanation:
Flight labels:        1   2
Booking 1 reserved:  10  10
Booking 2 reserved:      15
Total seats:         10  25
Hence, answer = [10,25]

 

Constraints:

1 <= n <= 2 * 104
1 <= bookings.length <= 2 * 104
bookings[i].length == 3
1 <= firsti <= lasti <= n
1 <= seatsi <= 104



# java


class Solution {
  public int[] corpFlightBookings(int[][] bookings, int n) {
    int[] ans = new int[n];

    for (int[] booking : bookings) {
      ans[booking[0] - 1] += booking[2];
      if (booking[1] < n)
        ans[booking[1]] -= booking[2];
    }

    for (int i = 1; i < n; ++i)
      ans[i] += ans[i - 1];

    return ans;
  }
}


or



class Solution {
    public int[] corpFlightBookings(int[][] bookings, int n) {
        int[] ans = new int[n];
        for (var e : bookings) {
            int first = e[0], last = e[1], seats = e[2];
            ans[first - 1] += seats;
            if (last < n) {
                ans[last] -= seats;
            }
        }
        for (int i = 1; i < n; ++i) {
            ans[i] += ans[i - 1];
        }
        return ans;
    }
}




or



class Solution {
    public int[] corpFlightBookings(int[][] bookings, int n) {
        int[] ans = new int[n];
        for (int[] booking : bookings) {
            int i = booking[0]-1;
            int j = booking[1];
            int seats = booking[2];
            ans[i] += seats;
            if (j != n)
                ans[j] -= seats;
        }
        
        int count = 0;
        for (int i = 0; i < ans.length; i++) {
            ans[i] += count;
            count = ans[i];
        }
        return ans;
    }
}



or



class Solution {
    public int[] corpFlightBookings(int[][] bookings, int n) {
        
        int[] res = new int[n];
        for(int[] curr : bookings){
            int start = curr[0]-1;
            int end = curr[1];
            int val = curr[2];
            
            for(int i = start ; i < end ; i++){
                res[i] += val;
            }
        }
        return res;
    }
}



or



class Solution {
    public int[] corpFlightBookings(int[][] bookings, int n) {
        
        int[] res = new int[n];
        for(int[] curr : bookings){
            int start = curr[0]-1;
            int end = curr[1];
            int val = curr[2];
            res[start] += val;
            if(end < n){
                res[end] -= val;
            }
        }
        for(int i = 1 ; i < n ; i++){
            res[i] += res[i-1];
        }
        return res;
        
    }
}



or



class Solution {
    public int[] corpFlightBookings(int[][] bookings, int n) {
        int[] diff = new int[n + 1];
        for (int i = 0; i < bookings.length; i++) {
            int start = bookings[i][0];
            int end = bookings[i][1];
            int val = bookings[i][2];
            diff[start] += val;
            if (end + 1 <= n) {
                diff[end + 1] -= val;
            }
        }
        int[] res = new int[n];
        res[0] = diff[1];
        for (int i = 1; i < n; i++) {
            res[i] = res[i - 1] + diff[i + 1];
        }
        return res;
    }
}



or


class Solution {
    public int[] corpFlightBookings(int[][] b, int n) {
        int[] ans = new int[n];
        for(int i=0;i<b.length;i++){
            // ans[b[i][0]-1] += b[i][2];
            // ans[b[i][1]-1] += b[i][2];
            for(int j=b[i][0];j<=b[i][1];j++){
                ans[j-1] += b[i][2];
            }
        }
        return ans;
    }
}



or


class Solution {
        public int[] corpFlightBookings(int[][] bookings, int n) {
        int[] res = new int[n];
        //fill the array with initial values for prices
        for (int[] b : bookings) {
            res[b[0] - 1] += b[2];
            //mark the next element after series end with -(price) value
            if (b[1] < n) {
                res[b[1]]-=b[2];
            }
        }
        //calculate final result based on sum of previously calculated values
        for (int i=1; i<n; i++) {
            res[i]+=res[i-1];
        }
        return res;
    }
}



or




