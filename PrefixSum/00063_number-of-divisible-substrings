https://leetcode.com/problems/number-of-divisible-substrings/description/


2950. Number of Divisible Substrings
Description
Each character of the English alphabet has been mapped to a digit as shown below.



A string is divisible if the sum of the mapped values of its characters is divisible by its length.

Given a string s, return the number of divisible substrings of s.

A substring is a contiguous non-empty sequence of characters within a string.

 

Example 1:

Substring	Mapped	Sum	Length	Divisible?
a	1	1	1	Yes
s	7	7	1	Yes
d	2	2	1	Yes
f	3	3	1	Yes
as	1, 7	8	2	Yes
sd	7, 2	9	2	No
df	2, 3	5	2	No
asd	1, 7, 2	10	3	No
sdf	7, 2, 3	12	3	Yes
asdf	1, 7, 2, 3	13	4	No
Input: word = "asdf"
Output: 6
Explanation: The table above contains the details about every substring of word, and we can see that 6 of them are divisible.
Example 2:

Input: word = "bdh"
Output: 4
Explanation: The 4 divisible substrings are: "b", "d", "h", "bdh".
It can be shown that there are no other substrings of word that are divisible.
Example 3:

Input: word = "abcd"
Output: 6
Explanation: The 6 divisible substrings are: "a", "b", "c", "d", "ab", "cd".
It can be shown that there are no other substrings of word that are divisible.
 

Constraints:

1 <= word.length <= 2000
word consists only of lowercase English letters.



# java




class Solution {
  public int countDivisibleSubstrings(String word) {
    // Let f(c) = d, where d = 1, 2, ..., 9.
    // Rephrase the question to return the number of substrings that satisfy
    //    f(c1) + f(c2) + ... + f(ck) / k = avg
    // => f(c1) + f(c2) + ... + f(ck) - k * avg, where avg in [1, 9].
    int ans = 0;

    for (int avg = 1; avg <= 9; ++avg) {
      int prefix = 0;
      Map<Integer, Integer> prefixCount = new HashMap<>();
      prefixCount.put(0, 1);
      for (final char c : word.toCharArray()) {
        prefix += f(c) - avg;
        ans += prefixCount.getOrDefault(prefix, 0);
        prefixCount.merge(prefix, 1, Integer::sum);
      }
    }

    return ans;
  }

  private int f(char c) {
    return 9 - ('z' - c) / 3;
  }
}



or


class Solution {
    public int countDivisibleSubstrings(String word) {
        String[] d = {"ab", "cde", "fgh", "ijk", "lmn", "opq", "rst", "uvw", "xyz"};
        int[] mp = new int[26];
        for (int i = 0; i < d.length; ++i) {
            for (char c : d[i].toCharArray()) {
                mp[c - 'a'] = i + 1;
            }
        }
        int ans = 0;
        int n = word.length();
        for (int i = 0; i < n; ++i) {
            int s = 0;
            for (int j = i; j < n; ++j) {
                s += mp[word.charAt(j) - 'a'];
                ans += s % (j - i + 1) == 0 ? 1 : 0;
            }
        }
        return ans;
    }
}




