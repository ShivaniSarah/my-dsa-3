https://leetcode.com/problems/maximum-sum-of-an-hourglass/


2428. Maximum Sum of an Hourglass
Medium
Topics
Companies
Hint
You are given an m x n integer matrix grid.

We define an hourglass as a part of the matrix with the following form:


Return the maximum sum of the elements of an hourglass.

Note that an hourglass cannot be rotated and must be entirely contained within the matrix.

 

Example 1:


Input: grid = [[6,2,1,3],[4,2,1,5],[9,2,8,7],[4,1,2,9]]
Output: 30
Explanation: The cells shown above represent the hourglass with the maximum sum: 6 + 2 + 1 + 2 + 9 + 2 + 8 = 30.
Example 2:


Input: grid = [[1,2,3],[4,5,6],[7,8,9]]
Output: 35
Explanation: There is only one hourglass in the matrix, with the sum: 1 + 2 + 3 + 5 + 7 + 8 + 9 = 35.
 

Constraints:

m == grid.length
n == grid[i].length
3 <= m, n <= 150
0 <= grid[i][j] <= 106



# java


class Solution {
  public int maxSum(int[][] grid) {
    int ans = 0;

    for (int i = 1; i + 1 < grid.length; ++i)
      for (int j = 1; j + 1 < grid[0].length; ++j)
        ans = Math.max(ans, grid[i - 1][j - 1] + grid[i - 1][j] + grid[i - 1][j + 1] + grid[i][j] +
                                grid[i + 1][j - 1] + grid[i + 1][j] + grid[i + 1][j + 1]);

    return ans;
  }
}


or


class Solution {
    public int maxSum(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int ans = 0;
        for (int i = 1; i < m - 1; ++i) {
            for (int j = 1; j < n - 1; ++j) {
                int s = -grid[i][j - 1] - grid[i][j + 1];
                for (int x = i - 1; x <= i + 1; ++x) {
                    for (int y = j - 1; y <= j + 1; ++y) {
                        s += grid[x][y];
                    }
                }
                ans = Math.max(ans, s);
            }
        }
        return ans;
    }
}



or




class Solution {
    public int maxSum(int[][] grid) {
        int ans=0;
        for(int i=0;i<grid.length-2;i++){
            //Running the for loop for the row-2  times
            for(int j=0;j<grid[0].length-2;j++){
                //Running the inner for loop for the col-2  times
                int sum=grid[i][j]+grid[i][j+1]+grid[i][j+2]+grid[i+1][j+1]+grid[i+2][j]+grid[i+2][j+1]+grid[i+2][j+2];
                ans=Math.max(ans,sum);
            }
        }
        return ans;
    }
}


or


class Solution {
    public int maxSum(int[][] grid) {
        
        int max = 0;
        int m = grid.length;
        int n = grid[0].length;
        for (int i=0;i<m-2;i++){
            res = 0;
            for (int j=0;j<n-2;j++){
                
                                                      
                res = grid[i][j] + grid[i][j+1] + grid[i][j+2];             //  upper part
                res += grid[i+1][j+1];                                      // mid part
                res += grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];      // lower part
                
                if (res > max) max = res;
            }
            
        }
       
        return max;
    }
}



or


class Solution {
    public int maxSum(int[][] grid) {
        int max = 0;
        int m = grid.length;
        int n = grid[0].length;

        for (int i = 0; i < m - 2; i++) {
            for (int j = 0; j < n - 2; j++) {
                int res = grid[i][j] + grid[i][j + 1] + grid[i][j + 2];      // top row
                res += grid[i + 1][j + 1];                                   // middle
                res += grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2]; // bottom row

                if (res > max) {
                    max = res;
                }
            }
        }

        return max;
    }
}




or


class Solution {
    public int maxSum(int[][] grid) {
        int sum = 0, max = 0;
        for(int i=0; i<grid.length-2; i++){
            for(int j = 0; j<grid[0].length-2; j++){
                sum = grid[i][j] + grid[i][j+1] + grid[i][j+2] + grid[i+1][j+1] + grid[i+2][j] + grid[i+2][j+1] + grid[i+2][j+2];
                max = Math.max(max, sum);
            }
        }
        return max;
    }
}


