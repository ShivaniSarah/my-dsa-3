https://leetcode.com/problems/maximum-good-subarray-sum/description/


3026. Maximum Good Subarray Sum
Medium
Topics
Companies
Hint
You are given an array nums of length n and a positive integer k.

A subarray of nums is called good if the absolute difference between its first and last element is exactly k, in other words, the subarray nums[i..j] is good if |nums[i] - nums[j]| == k.

Return the maximum sum of a good subarray of nums. If there are no good subarrays, return 0.

 

Example 1:

Input: nums = [1,2,3,4,5,6], k = 1
Output: 11
Explanation: The absolute difference between the first and last element must be 1 for a good subarray. All the good subarrays are: [1,2], [2,3], [3,4], [4,5], and [5,6]. The maximum subarray sum is 11 for the subarray [5,6].
Example 2:

Input: nums = [-1,3,2,4,5], k = 3
Output: 11
Explanation: The absolute difference between the first and last element must be 3 for a good subarray. All the good subarrays are: [-1,3,2], and [2,4,5]. The maximum subarray sum is 11 for the subarray [2,4,5].
Example 3:

Input: nums = [-1,-2,-3,-4], k = 2
Output: -6
Explanation: The absolute difference between the first and last element must be 2 for a good subarray. All the good subarrays are: [-1,-2,-3], and [-2,-3,-4]. The maximum subarray sum is -6 for the subarray [-1,-2,-3].
 

Constraints:

2 <= nums.length <= 105
-109 <= nums[i] <= 109
1 <= k <= 109



# java


class Solution {
  public long maximumSubarraySum(int[] nums, int k) {
    long ans = Long.MIN_VALUE;
    long prefix = 0;
    Map<Integer, Long> numToMinPrefix = new HashMap<>();

    for (final int num : nums) {
      if (!numToMinPrefix.containsKey(num) || numToMinPrefix.get(num) > prefix)
        numToMinPrefix.put(num, prefix);
      prefix += num;
      if (numToMinPrefix.containsKey(num + k))
        ans = Math.max(ans, prefix - numToMinPrefix.get(num + k));
      if (numToMinPrefix.containsKey(num - k))
        ans = Math.max(ans, prefix - numToMinPrefix.get(num - k));
    }

    return ans == Long.MIN_VALUE ? 0 : ans;
  }
}


or


class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        Map<Integer, Long> p = new HashMap<>();
        p.put(nums[0], 0L);
        long s = 0;
        int n = nums.length;
        long ans = Long.MIN_VALUE;
        for (int i = 0; i < n; ++i) {
            s += nums[i];
            if (p.containsKey(nums[i] - k)) {
                ans = Math.max(ans, s - p.get(nums[i] - k));
            }
            if (p.containsKey(nums[i] + k)) {
                ans = Math.max(ans, s - p.get(nums[i] + k));
            }
            if (i + 1 < n && (!p.containsKey(nums[i + 1]) || p.get(nums[i + 1]) > s)) {
                p.put(nums[i + 1], s);
            }
        }
        return ans == Long.MIN_VALUE ? 0 : ans;
    }
}


or


class Solution {
    public long maximumSubarraySum(int[] nums, int k) {
        Map<Integer, Long> valToMinPrefixSum = new HashMap<>();
        long maxSum = Long.MIN_VALUE, prefixSum = 0;
        for (int i = 0; i < nums.length; ++i) {
            if (valToMinPrefixSum.getOrDefault(nums[i], Long.MAX_VALUE) > prefixSum) {
                valToMinPrefixSum.put(nums[i], prefixSum);
            }
            prefixSum += nums[i];
            if (valToMinPrefixSum.containsKey(nums[i] + k)) {
                maxSum = Math.max(maxSum, prefixSum - valToMinPrefixSum.get(nums[i] + k));
            }
            if (valToMinPrefixSum.containsKey(nums[i] - k)) {
                maxSum = Math.max(maxSum, prefixSum - valToMinPrefixSum.get(nums[i] - k));
            }
        } 
        return maxSum == Long.MIN_VALUE ? 0 : maxSum;        
    }
}



or


class Solution {
   public long maximumSubarraySum(int[] nums, int k) {
        Map<Integer, Long> cumulativeSums = new HashMap<>();
        long currentSum = 0;
        long maxSum = Long.MIN_VALUE;

        for (int value : nums) {
            if (cumulativeSums.containsKey(value - k)) {
                long minValue = cumulativeSums.get(value - k);
                maxSum = Math.max(maxSum, currentSum + value - minValue);
            }
            if (cumulativeSums.containsKey(value + k)) {
                long minValue = cumulativeSums.get(value + k);
                maxSum = Math.max(maxSum, currentSum + value - minValue);
            }

            cumulativeSums.put(value, Math.min(cumulativeSums.getOrDefault(value, Long.MAX_VALUE), currentSum));
            currentSum += value;
        }

        return maxSum == Long.MIN_VALUE ? 0 : maxSum;
    }
}


or



