https://leetcode.com/problems/minimum-levels-to-gain-more-points/description/

3096. Minimum Levels to Gain More Points
Medium
Topics
Companies
Hint
You are given a binary array possible of length n.

Alice and Bob are playing a game that consists of n levels. Some of the levels in the game are impossible to clear while others can always be cleared. In particular, if possible[i] == 0, then the ith level is impossible to clear for both the players. A player gains 1 point on clearing a level and loses 1 point if the player fails to clear it.

At the start of the game, Alice will play some levels in the given order starting from the 0th level, after which Bob will play for the rest of the levels.

Alice wants to know the minimum number of levels she should play to gain more points than Bob, if both players play optimally to maximize their points.

Return the minimum number of levels Alice should play to gain more points. If this is not possible, return -1.

Note that each player must play at least 1 level.

 

Example 1:

Input: possible = [1,0,1,0]

Output: 1

Explanation:

Let's look at all the levels that Alice can play up to:

If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has -1 + 1 - 1 = -1 point.
If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 1 - 1 = 0 points, while Bob has 1 - 1 = 0 points.
If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 1 - 1 + 1 = 1 point, while Bob has -1 point.
Alice must play a minimum of 1 level to gain more points.

Example 2:

Input: possible = [1,1,1,1,1]

Output: 3

Explanation:

Let's look at all the levels that Alice can play up to:

If Alice plays only level 0 and Bob plays the rest of the levels, Alice has 1 point, while Bob has 4 points.
If Alice plays till level 1 and Bob plays the rest of the levels, Alice has 2 points, while Bob has 3 points.
If Alice plays till level 2 and Bob plays the rest of the levels, Alice has 3 points, while Bob has 2 points.
If Alice plays till level 3 and Bob plays the rest of the levels, Alice has 4 points, while Bob has 1 point.
Alice must play a minimum of 3 levels to gain more points.

Example 3:

Input: possible = [0,0]

Output: -1

Explanation:

The only possible way is for both players to play 1 level each. Alice plays level 0 and loses 1 point. Bob plays level 1 and loses 1 point. As both players have equal points, Alice can't gain more points than Bob.

 

Constraints:

2 <= n == possible.length <= 105
possible[i] is either 0 or 1.



# java



class Solution {
  public int minimumLevels(int[] possible) {
    final int n = possible.length;
    final int[] nums = getNums(possible);
    int[] prefix = new int[n + 1];

    for (int i = 0; i < n; ++i)
      prefix[i + 1] = prefix[i] + nums[i];

    for (int i = 1; i < n; ++i)
      if (prefix[i] > prefix[n] - prefix[i])
        return i;

    return -1;
  }

  private int[] getNums(int[] possible) {
    int[] nums = new int[possible.length];
    for (int i = 0; i < possible.length; ++i)
      nums[i] = possible[i] == 0 ? -1 : 1;
    return nums;
  }
}


or


class Solution {
    public int minimumLevels(int[] possible) {
        int s = 0;
        for (int x : possible) {
            s += x == 0 ? -1 : 1;
        }
        int t = 0;
        for (int i = 1; i < possible.length; ++i) {
            t += possible[i - 1] == 0 ? -1 : 1;
            if (t > s - t) {
                return i;
            }
        }
        return -1;
    }
}



or



class Solution {
    public int minimumLevels(int[] possible) {
        int val=0;
        for(int i:possible)
        {
            val += i == 1 ? 1 : -1;
        }
        if(val<0)
        {
            if(possible.length==2)
            {
                return -1;
            }
            else if(Math.abs(val) == possible.length)
            {
                return 1;
            }
        }
        int first=0;
        for(int i=0;i<possible.length;i++)
        {
            if(possible[i] == 1)
            {
                first++;
                val--;
            }
            else
            {
                first--;
                val++;
            }
            if(first>val)
            {
                if(i == possible.length-1)
                {
                    return -1;
                }
                return i+1;
            }
        }
        return -1;
    }
}



or


class Solution {
    public int minimumLevels(int[] possible) {
        int n = possible.length;
        
        int[] prefix = new int[n];
        int sum = 0;
        for (int i = 0; i < n; i++){
            if (possible[i] == 0) sum = sum - 1;
            else sum = sum + 1;
            
            prefix[i] = sum;
        }
        for (int i = 0; i < n-1; i++){
            if (prefix[i] > sum - prefix[i]) return i+1;
        }
        
        return -1;
        
    }
}



or



class Solution {
    public int minimumLevels(int[] possible) {
        int n = possible.length;
        
        int totalSum = 0;
        for(int i = 0; i < n; i++) {
            if(possible[i] == 0) possible[i] = -1;
            totalSum += possible[i];
        }
        
        int currScore = 0;
        for(int i = 0; i < n - 1; i++) {
            currScore += possible[i];
            if(totalSum - currScore < currScore) return i + 1;
        }
        
        return -1;
    }
}


