https://leetcode.com/problems/grid-game/description/

2017. Grid Game
Medium
Topics
Companies
Hint
You are given a 0-indexed 2D array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. Two robots are playing a game on this matrix.

Both robots initially start at (0, 0) and want to reach (1, n-1). Each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)).

At the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. For all cells (r, c) traversed on the path, grid[r][c] is set to 0. Then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. Note that their paths may intersect with one another.

The first robot wants to minimize the number of points collected by the second robot. In contrast, the second robot wants to maximize the number of points it collects. If both robots play optimally, return the number of points collected by the second robot.

 

Example 1:


Input: grid = [[2,5,4],[1,5,1]]
Output: 4
Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.
The cells visited by the first robot are set to 0.
The second robot will collect 0 + 0 + 4 + 0 = 4 points.
Example 2:


Input: grid = [[3,3,1],[8,5,2]]
Output: 4
Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.
The cells visited by the first robot are set to 0.
The second robot will collect 0 + 3 + 1 + 0 = 4 points.
Example 3:


Input: grid = [[1,3,1,15],[1,3,3,1]]
Output: 7
Explanation: The optimal path taken by the first robot is shown in red, and the optimal path taken by the second robot is shown in blue.
The cells visited by the first robot are set to 0.
The second robot will collect 0 + 1 + 3 + 3 + 0 = 7 points.
 

Constraints:

grid.length == 2
n == grid[r].length
1 <= n <= 5 * 104
1 <= grid[r][c] <= 105



# java


class Solution {
  public long gridGame(int[][] grid) {
    final int n = grid[0].length;
    long ans = Long.MAX_VALUE;
    long sumRow0 = Arrays.stream(grid[0]).asLongStream().sum();
    long sumRow1 = 0;

    for (int i = 0; i < n; ++i) {
      sumRow0 -= grid[0][i];
      ans = Math.min(ans, Math.max(sumRow0, sumRow1));
      sumRow1 += grid[1][i];
    }

    return ans;
  }
}


or

class Solution {
    public long gridGame(int[][] grid) {
        long ans = Long.MAX_VALUE;
        long s1 = 0, s2 = 0;
        for (int v : grid[0]) {
            s1 += v;
        }
        int n = grid[0].length;
        for (int j = 0; j < n; ++j) {
            s1 -= grid[0][j];
            ans = Math.min(ans, Math.max(s1, s2));
            s2 += grid[1][j];
        }
        return ans;
    }
}



or



class Solution {

    public long gridGame(int[][] grid) {
        // Calculate the sum of all the elements for the first row
        long firstRowSum = 0;
        for (int num : grid[0]) {
            firstRowSum += num;
        }
        long secondRowSum = 0;
        long minimumSum = Long.MAX_VALUE;
        for (int turnIndex = 0; turnIndex < grid[0].length; ++turnIndex) {
            firstRowSum -= grid[0][turnIndex];
            // Find the minimum maximum value out of firstRowSum and
            // secondRowSum.
            minimumSum = Math.min(
                minimumSum,
                Math.max(firstRowSum, secondRowSum)
            );
            secondRowSum += grid[1][turnIndex];
        }
        return minimumSum;
    }
}



or



class Solution {
    public long gridGame(int[][] grid) {
        long minResult = Long.MAX_VALUE;
        long row1Sum = 0;
        for (int i = 0; i < grid[0].length; ++i) {
            row1Sum += grid[0][i];
        }
        long row2Sum = 0;

        for (int i = 0; i < grid[0].length; ++i) {
            row1Sum -= grid[0][i];
            minResult = Math.min(minResult, Math.max(row1Sum, row2Sum));
            row2Sum += grid[1][i];
        }

        return minResult;
    }
}



or



class Solution {
   public long gridGame(int[][] g) {
    long top = Arrays.stream(g[0]).asLongStream().sum(), bottom = 0, res = Long.MAX_VALUE;
    for(int i = 0; i < g[0].length; ++i) {
        top -= g[0][i];
        res = Math.min(res, Math.max(top, bottom));
        bottom += g[1][i];
    }
    return res;        
}
}


or



class Solution {
    public long gridGame(int[][] grid) {
        long top = 0;
        for (int i = 0; i < grid[0].length; i++) {
            top += grid[0][i];
        }
        
        long bottom = 0, res = Long.MAX_VALUE;
        for (int i = 0; i < grid[0].length; i++) {
            top -= grid[0][i];
            res = Math.min(res, Math.max(top, bottom));
            bottom += grid[1][i];
        }
        
        return res;
    }
}



or


class Solution {
    public long gridGame(int[][] grid) {
        long ans = Long.MAX_VALUE, lowerLeft = 0, upperRight = IntStream.of(grid[0]).mapToLong(i -> i).sum();
        for (int i = 0; i < grid[0].length; ++i) {
            upperRight -= grid[0][i];
            ans = Math.min(ans, Math.max(upperRight, lowerLeft));
            lowerLeft += grid[1][i];
        }
        return ans;
    }
}


or


class Solution {
    public long gridGame(int[][] grid) {
        long topSum = 0, botSum = 0, min2 = Long.MAX_VALUE;
        for (int num : grid[0]) topSum += num;
        for (int col = 0; col < grid[0].length; col++) {
            topSum -= grid[0][col];
            min2 = Math.min(min2, Math.max(topSum, botSum));
            botSum += grid[1][col];
        }
        return min2;
    }
}


