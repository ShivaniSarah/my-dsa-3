https://leetcode.com/problems/minimum-moves-to-make-array-complementary/description/


1674. Minimum Moves to Make Array Complementary
Medium
Topics
Companies
Hint
You are given an integer array nums of even length n and an integer limit. In one move, you can replace any integer from nums with another integer between 1 and limit, inclusive.

The array nums is complementary if for all indices i (0-indexed), nums[i] + nums[n - 1 - i] equals the same number. For example, the array [1,2,3,4] is complementary because for all indices i, nums[i] + nums[n - 1 - i] = 5.

Return the minimum number of moves required to make nums complementary.

 

Example 1:

Input: nums = [1,2,4,3], limit = 4
Output: 1
Explanation: In 1 move, you can change nums to [1,2,2,3] (underlined elements are changed).
nums[0] + nums[3] = 1 + 3 = 4.
nums[1] + nums[2] = 2 + 2 = 4.
nums[2] + nums[1] = 2 + 2 = 4.
nums[3] + nums[0] = 3 + 1 = 4.
Therefore, nums[i] + nums[n-1-i] = 4 for every i, so nums is complementary.
Example 2:

Input: nums = [1,2,2,1], limit = 2
Output: 2
Explanation: In 2 moves, you can change nums to [2,2,2,2]. You cannot change any number to 3 since 3 > limit.
Example 3:

Input: nums = [1,2,1,2], limit = 2
Output: 0
Explanation: nums is already complementary.
 

Constraints:

n == nums.length
2 <= n <= 105
1 <= nums[i] <= limit <= 105
n is even.



# java



class Solution {
  public int minMoves(int[] nums, int limit) {
    final int n = nums.length;
    int ans = n;
    // delta[i] := the number of moves needed when target goes from i - 1 to i
    int[] delta = new int[limit * 2 + 2];

    for (int i = 0; i < n / 2; ++i) {
      final int a = nums[i];
      final int b = nums[n - 1 - i];
      --delta[Math.min(a, b) + 1];
      --delta[a + b];
      ++delta[a + b + 1];
      ++delta[Math.max(a, b) + limit + 1];
    }

    // Initially, we need `moves` when the target is 2.
    for (int i = 2, moves = n; i <= limit * 2; ++i) {
      moves += delta[i];
      ans = Math.min(ans, moves);
    }

    return ans;
  }
}


or


class Solution {
    public int minMoves(int[] nums, int limit) {
        int n = nums.length;
        int[] d = new int[limit * 2 + 2];
        for (int i = 0; i < n >> 1; ++i) {
            int a = Math.min(nums[i], nums[n - i - 1]);
            int b = Math.max(nums[i], nums[n - i - 1]);

            d[2] += 2;
            d[limit * 2 + 1] -= 2;

            d[a + 1] -= 1;
            d[b + limit + 1] += 1;

            d[a + b] -= 1;
            d[a + b + 1] += 1;
        }
        int ans = n, s = 0;
        for (int i = 2; i <= limit * 2; ++i) {
            s += d[i];
            if (ans > s) {
                ans = s;
            }
        }
        return ans;
    }
}



or


class Solution {
    public int minMoves(int[] nums, int limit) {
        int[] oneMove = new int[2 * limit + 2];
        Map<Integer, Integer> noMove = new HashMap<>();

        for (int i = 0; i < nums.length / 2; i++){
            int j = nums.length - 1 - i;
            noMove.merge(nums[i] + nums[j], 1, Integer::sum);
            oneMove[Math.min(nums[i], nums[j]) + 1]++;
            oneMove[Math.max(nums[i], nums[j]) + limit + 1]--;
        }

        int ans = nums.length, one = 0;
        for (int i = 2; i <= 2 * limit; i++){
            one += oneMove[i];
            ans = Math.min(ans, one + 2 * (nums.length / 2 - one) - noMove.getOrDefault(i, 0));
        }

        return ans;
    }
}



or



class Solution {
    public int minMoves(int[] nums, int limit) {        
        
        int length = nums.length;
        int[] segments = new int[limit*2+2]; // record the start and end of the segment, green and red dots
        Map<Integer, Integer> sums = new HashMap<>(); // record the sum frequence, they do not need any move
        
        for( int i = 0; i< nums.length/2; i++) {
            if(sums.keySet().contains(nums[i] + nums[length-1-i])){
                sums.put(nums[i] + nums[length-1-i], sums.get(nums[i] + nums[length-1-i]) + 1);
            } else {
                sums.put(nums[i] + nums[length-1-i], 1);
            }
            int a = Math.min(nums[i], nums[length-1-i]);
            int b = Math.max(nums[i], nums[length-1-i]);
            segments[a+1]--;
            segments[b+limit+1]++;
        }
        
        if(sums.keySet().size() == 1) {
            return 0;
        }        
       
        int change = length;
        int res = change;
        
        for(int i=2; i<segments.length; i++) {
            change = change + segments[i] - sums.getOrDefault(i, 0) + sums.getOrDefault(i-1, 0);
            res = Math.min(res, change);
        }           
        
        return res;
        
    }    
}



or



class Solution {
    public int minMoves(int[] nums, int limit) {
        int n = nums.length;
        int t = n >> 1;
        int m = 2*limit+2  ;
        int[] diff = new int[m];
        for (int l = 0; l < t; ++l) {
            int r = n - l - 1;
            int a = Math.min(nums[l], nums[r]) + 1;
            int b = Math.max(nums[l], nums[r]) + limit;
            int curr = nums[l] + nums[r];
            diff[a]--;
            diff[curr]--;
            diff[curr+1]++;
            diff[b+1]++;
        }
        int count = n ; 
        int rs = n;
        for(int i = 2; i <m-1; ++i) {
            count += diff[i] ;
            if( count < rs) rs = count ; 
        }
        return rs;
    }
}


or


class Solution {
    public int minMoves(int[] nums, int limit) {
        int[] steps = new int[2 * limit + 2];
        int result = Integer.MAX_VALUE;
        for (int index = 0; index < nums.length / 2; index++) {
            int first = nums[index];
            int second = nums[nums.length - 1 - index];
            steps[2] += 2;
            steps[Math.min(first + 1, second + 1)] -= 1;
            steps[first + second] -= 1;
            steps[first + second + 1] += 1;
            steps[Math.max(first + limit, second + limit) + 1] += 1;
            steps[limit + limit + 1] -= 2;
        }

        int sum = 0;
        for (int index = 2; index <= limit + limit; index++) {
            sum += steps[index];
            result = Math.min(result, sum );
        }
        return result;
    }
}



or


