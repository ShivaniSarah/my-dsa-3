https://leetcode.com/problems/can-you-eat-your-favorite-candy-on-your-favorite-day/description/


1744. Can You Eat Your Favorite Candy on Your Favorite Day?
Medium
Topics
Companies
Hint
You are given a (0-indexed) array of positive integers candiesCount where candiesCount[i] represents the number of candies of the ith type you have. You are also given a 2D array queries where queries[i] = [favoriteTypei, favoriteDayi, dailyCapi].

You play a game with the following rules:

You start eating candies on day 0.
You cannot eat any candy of type i unless you have eaten all candies of type i - 1.
You must eat at least one candy per day until you have eaten all the candies.
Construct a boolean array answer such that answer.length == queries.length and answer[i] is true if you can eat a candy of type favoriteTypei on day favoriteDayi without eating more than dailyCapi candies on any day, and false otherwise. Note that you can eat different types of candy on the same day, provided that you follow rule 2.

Return the constructed array answer.

 

Example 1:

Input: candiesCount = [7,4,5,3,8], queries = [[0,2,2],[4,2,4],[2,13,1000000000]]
Output: [true,false,true]
Explanation:
1- If you eat 2 candies (type 0) on day 0 and 2 candies (type 0) on day 1, you will eat a candy of type 0 on day 2.
2- You can eat at most 4 candies each day.
   If you eat 4 candies every day, you will eat 4 candies (type 0) on day 0 and 4 candies (type 0 and type 1) on day 1.
   On day 2, you can only eat 4 candies (type 1 and type 2), so you cannot eat a candy of type 4 on day 2.
3- If you eat 1 candy each day, you will eat a candy of type 2 on day 13.
Example 2:

Input: candiesCount = [5,2,6,4,1], queries = [[3,1,2],[4,10,3],[3,10,100],[4,100,30],[1,3,1]]
Output: [false,true,true,false,false]
 

Constraints:

1 <= candiesCount.length <= 105
1 <= candiesCount[i] <= 105
1 <= queries.length <= 105
queries[i].length == 3
0 <= favoriteTypei < candiesCount.length
0 <= favoriteDayi <= 109
1 <= dailyCapi <= 109



# java



class Solution {
  public boolean[] canEat(int[] candiesCount, int[][] queries) {
    final int n = candiesCount.length;
    boolean[] ans = new boolean[queries.length];
    long[] prefix = new long[n + 1];

    for (int i = 0; i < n; ++i)
      prefix[i + 1] = prefix[i] + candiesCount[i];

    for (int i = 0; i < queries.length; ++i) {
      final int type = queries[i][0];
      final long day = (long) queries[i][1];
      final long cap = (long) queries[i][2];
      // the minimum day required to eat
      final long minDay = prefix[type] / cap;
      // the maximum day required to eat
      final long maxDay = prefix[type + 1] - 1;
      ans[i] = minDay <= day && day <= maxDay;
    }

    return ans;
  }
}



or



class Solution {
    public boolean[] canEat(int[] candiesCount, int[][] queries) {
        int n = candiesCount.length;
        long[] s = new long[n + 1];
        for (int i = 0; i < n; ++i) {
            s[i + 1] = s[i] + candiesCount[i];
        }
        int m = queries.length;
        boolean[] ans = new boolean[m];
        for (int i = 0; i < m; ++i) {
            int t = queries[i][0], day = queries[i][1], mx = queries[i][2];
            long least = day, most = (long) (day + 1) * mx;
            ans[i] = least < s[t + 1] && most > s[t];
        }
        return ans;
    }
}


or


class Solution {
    // T = O(n) S=O(n)
    public boolean[] canEat(int[] candiesCount, int[][] queries) {
        // calculate prefix sum
        long[] prefix = new long[candiesCount.length+1];
        boolean[] res = new boolean[queries.length];
        prefix[0] = 0;
        
        for(int i=1; i< prefix.length; i++)
            prefix[i] = prefix[i-1]+candiesCount[i-1];
        
        for(int i=0; i< res.length; i++) {
            int type = queries[i][0];
            int day  = queries[i][1];
            int cap  = queries[i][2];
            
            // max and min day required to eat
            // if we eat one candy per day including type candy (prefix[type+1]). we decrement by 1 since we need atleast one candy of type
            long maxDay = prefix[type+1]-1; 
            // if we eat upto capacity each day upto previous candy
            long minDay = prefix[type]/cap; 
        
            // check if query day is within the limits (minDay and maxDay inclusive)
            res[i] = (minDay <= day && day <= maxDay);            
        }
        
        return res;
    }
}


or


class Solution {
    public boolean[] canEat(int[] candiesCount, int[][] queries) {
        //strategy: Prefix Sum
        boolean[] answer = new boolean[queries.length];
        long[] count = new long[candiesCount.length];
        count[0] = candiesCount[0];
        //find the total amt needed to be eaten at day i
        for (int i = 1; i < candiesCount.length; i++) {
            count[i] += (candiesCount[i] + count[i - 1]);
        }
        for (int i = 0; i < queries.length; i++) {
            int type = queries[i][0], day = queries[i][1];
            long cap = queries[i][2];
            //since days are 0-indexed add 1 to day
            //find max amt that can be eaten if we greedily eat the cap every day
            long max = (day + 1) * cap;
            //2 Conditions: We have enough to reach ith day or there are enough days to be eating 1 candy at a time
            answer[i] = (max > ((type == 0) ? 0 : count[type - 1]) && day + 1 <= count[type]);
        }
        return answer;
    }
}


or


class Solution {
    public boolean[] canEat(int[] candiesCount, int[][] queries) {
        boolean[] result = new boolean[queries.length];
        long[] candiesComm = new long[candiesCount.length + 1];
        for (int i = 1; i <= candiesCount.length; i++) {
            candiesComm[i] = candiesComm[i - 1] + candiesCount[i - 1];
        }
        for (int i = 0; i < queries.length; i++) {
            int type = queries[i][0];
            long day = queries[i][1];
            long cap = queries[i][2];
            result[i] = ((day + 1) * cap > candiesComm[type]) && day < candiesComm[type + 1];
        }

        return result;
    }
}


or


class Solution {
    public boolean[] canEat(int[] candiesCount, int[][] queries) {
        //strategy: Prefix Sum
        boolean[] answer = new boolean[queries.length];
        long[] count = new long[candiesCount.length];
        count[0] = candiesCount[0];
        //find the total amt needed to be eaten at day i
        for (int i = 1; i < candiesCount.length; i++) {
            count[i] += (candiesCount[i] + count[i - 1]);
        }
        for (int i = 0; i < queries.length; i++) {
            int type = queries[i][0], day = queries[i][1];
            long cap = queries[i][2];
            //since days are 0-indexed add 1 to day
            //find max amt that can be eaten if we greedily eat the cap every day
            long max = (day + 1) * cap;
            //2 Conditions: We have enough to reach ith day or there are enough days to be eating 1 candy at a time
            answer[i] = (max > ((type == 0) ? 0 : count[type - 1]) && day + 1 <= count[type]);
        }
        return answer;
    }
}




or



class Solution {
       long[] preCan;

    public boolean canEatCandies(int[] q, int[] candiesCount) {
        int canType = q[0];
        int day = q[1];
        int capacity = q[2];
        if (preCan[canType] >= (long)(day + 1) * capacity) {
            return false;
        }

        if ((long)(day + 1) > preCan[canType] + candiesCount[canType]) {
            return false;
        }

        return true;  
    }

    public boolean[] canEat(int[] candiesCount, int[][] queries) {
        boolean[] res = new boolean[queries.length];
        int tCanType = candiesCount.length;
        preCan = new long[tCanType];
        preCan[0] = 0;
        for (int i = 1; i < tCanType; i++) {
            preCan[i] = preCan[i - 1] + candiesCount[i - 1];
        }

        for (int q = 0; q < queries.length; q++) {
            res[q] = canEatCandies(queries[q], candiesCount);
        }

        return res;
    }
}



or


