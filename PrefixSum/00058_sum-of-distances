https://leetcode.com/problems/sum-of-distances/description/

2615. Sum of Distances
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums. There exists an array arr of length nums.length, where arr[i] is the sum of |i - j| over all j such that nums[j] == nums[i] and j != i. If there is no such j, set arr[i] to be 0.

Return the array arr.

 

Example 1:

Input: nums = [1,3,1,1,2]
Output: [5,0,3,4,0]
Explanation: 
When i = 0, nums[0] == nums[2] and nums[0] == nums[3]. Therefore, arr[0] = |0 - 2| + |0 - 3| = 5. 
When i = 1, arr[1] = 0 because there is no other index with value 3.
When i = 2, nums[2] == nums[0] and nums[2] == nums[3]. Therefore, arr[2] = |2 - 0| + |2 - 3| = 3. 
When i = 3, nums[3] == nums[0] and nums[3] == nums[2]. Therefore, arr[3] = |3 - 0| + |3 - 2| = 4. 
When i = 4, arr[4] = 0 because there is no other index with value 2. 

Example 2:

Input: nums = [0,5,3]
Output: [0,0,0]
Explanation: Since each element in nums is distinct, arr[i] = 0 for all i.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 109
 

Note: This question is the same as 2121: Intervals Between Identical Elements.


# java


class Solution {
  public long[] distance(int[] nums) {
    long[] ans = new long[nums.length];
    Map<Integer, List<Integer>> numToIndices = new HashMap<>();

    for (int i = 0; i < nums.length; ++i) {
      numToIndices.putIfAbsent(nums[i], new ArrayList<>());
      numToIndices.get(nums[i]).add(i);
    }

    for (List<Integer> indices : numToIndices.values()) {
      final int n = indices.size();
      if (n == 1) {
        continue;
      }
      long sumSoFar = indices.stream().mapToLong(Integer::intValue).sum();
      int prevIndex = 0;
      for (int i = 0; i < n; ++i) {
        sumSoFar += (i - 1) * (indices.get(i) - prevIndex);
        sumSoFar -= (n - 1 - i) * (indices.get(i) - prevIndex);
        ans[indices.get(i)] = sumSoFar;
        prevIndex = indices.get(i);
      }
    }

    return ans;
  }
}



or



class Solution {
    public long[] distance(int[] nums) {
        int n = nums.length;
        long[] ans = new long[n];
        Map<Integer, List<Integer>> d = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            d.computeIfAbsent(nums[i], k -> new ArrayList<>()).add(i);
        }
        for (var idx : d.values()) {
            int m = idx.size();
            long left = 0;
            long right = -1L * m * idx.get(0);
            for (int i : idx) {
                right += i;
            }
            for (int i = 0; i < m; ++i) {
                ans[idx.get(i)] = left + right;
                if (i + 1 < m) {
                    left += (idx.get(i + 1) - idx.get(i)) * (i + 1L);
                    right -= (idx.get(i + 1) - idx.get(i)) * (m - i - 1L);
                }
            }
        }
        return ans;
    }
}



or




// HashMap Beats 100%

class Solution {
    public long[] distance(int[] arr) {
        Map<Long,long[]> map = new HashMap<>(); 
        // [0] -> sum of indices at left of i
        // [1] -> sum of indices at right of i
        // [2] -> left freq
        // [3] -> right freq
        int i=0;
        for(int e:arr)
        {
            long x = e;
            if(map.get(x)==null){
                map.put(x,new long[4]);
            }
            map.get(x)[1]+=i++; // total sum of indices with value x
            map.get(x)[3]++;    // no. of occurences of x in arr
        }
        
        long[] res = new long[arr.length];
        i=0;
        for(int e:arr)
        {
            long x = e;
            long[] temp = map.get(x);
            temp[1]-=i;  // sum of indices at right
            temp[3]--;   // right freq
            res[i]=Math.abs(temp[0]-i*temp[2])+Math.abs(temp[1]-i*temp[3]);
            temp[0]+=i++;  // sum of indices at left
            temp[2]++;   // left freq
        }
        return res;
    }
}



or




// HashMap + Prefix Sum + Binary Search

class Solution {
    public long[] distance(int[] nums) {
        // val -> list of prefix sum of Indices 
        Map<Integer,ArrayList<Long>> map = new HashMap<>();
        // val -> list of Indices
        Map<Integer,ArrayList<Integer>> map2 = new HashMap<>();

        for(int i=0;i<nums.length;i++){
            if(map.get(nums[i])==null){
               map.put(nums[i], new ArrayList<>());
               map2.put(nums[i], new ArrayList<>());
            }
            map2.get(nums[i]).add(i);
            ArrayList<Long> list = map.get(nums[i]);
            if(list.isEmpty())
               list.add((long)i);
            else
               list.add(list.get(list.size()-1)+i);
        }

        long[] res = new long[nums.length];
        for(int i=0;i<nums.length;i++){
            ArrayList<Long> list = map.get(nums[i]);
            int n = list.size();

            if(n>1){
                int idx = Collections.binarySearch(map2.get(nums[i]), i);
                long postSum = list.get(n - 1) - list.get(idx);
                long postLen = n - 1 - idx;
                long preSum = (idx == 0 ? 0 : list.get(idx - 1));
                long preLen = idx;
                res[i] = postSum - (postLen * i) + (preLen * i) - preSum;
            }
        }
        return res;
    }
}



or



class Solution {
    public long[] distance(int[] nums) {
        int n = nums.length;
        long[] res = new long[n];
        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();
        for(int i=0;i<n;i++){
            hm.putIfAbsent(nums[i],new ArrayList<>());
            hm.get(nums[i]).add(i);
        }
      for(int i=0;i<n;i++){
        int val = nums[i];
        ArrayList<Integer> al = hm.get(val);
        long ans=0;
        for(int k :al){
            ans += Math.abs(i-k);
        }
        res[i]=ans;
      }  
        return res;
    }
}


or


import java.util.*;

class Solution {
    public long[] distance(int[] nums) {
        int n = nums.length;
        long[] res = new long[n];
        HashMap<Integer, ArrayList<Integer>> hm = new HashMap<>();

        for (int i = 0; i < n; i++) {
            hm.putIfAbsent(nums[i], new ArrayList<>());
            hm.get(nums[i]).add(i);
        }

        for (ArrayList<Integer> al : hm.values()) {
            int size = al.size();
            if (size == 1) continue;

            long totalSum = 0;
            for (int i : al) totalSum += i;

            long prefixSum = 0;
            for (int i = 0; i < size; i++) {
                int index = al.get(i);
                long left = i;
                long right = size - i - 1;

                long leftSum = prefixSum;
                long rightSum = totalSum - prefixSum - index;

                res[index] = (index * left - leftSum) + (rightSum - index * right);
                prefixSum += index;
            }
        }

        return res;
    }
}



or



