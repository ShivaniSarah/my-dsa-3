https://leetcode.com/problems/count-the-hidden-sequences/description/


2145. Count the Hidden Sequences
Medium
Topics
Companies
Hint
You are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). More formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i].

You are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain.

For example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive).
[3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences.
[5, 6, 3, 7] is not possible since it contains an element greater than 6.
[1, 2, 3, 4] is not possible since the differences are not correct.
Return the number of possible hidden sequences there are. If there are no possible sequences, return 0.

 

Example 1:

Input: differences = [1,-3,4], lower = 1, upper = 6
Output: 2
Explanation: The possible hidden sequences are:
- [3, 4, 1, 5]
- [4, 5, 2, 6]
Thus, we return 2.
Example 2:

Input: differences = [3,-4,5,1,-2], lower = -4, upper = 5
Output: 4
Explanation: The possible hidden sequences are:
- [-3, 0, -4, 1, 2, 0]
- [-2, 1, -3, 2, 3, 1]
- [-1, 2, -2, 3, 4, 2]
- [0, 3, -1, 4, 5, 3]
Thus, we return 4.
Example 3:

Input: differences = [4,-7,2], lower = 3, upper = 6
Output: 0
Explanation: There are no possible hidden sequences. Thus, we return 0.
 

Constraints:

n == differences.length
1 <= n <= 105
-105 <= differences[i] <= 105
-105 <= lower <= upper <= 105



# java



class Solution {
  public int numberOfArrays(int[] differences, int lower, int upper) {
    // Starts from 0, so prefix[0] = 0.
    // Changing prefix[0] to any other number doesn't affect the answer.
    long[] prefix = new long[differences.length + 1];

    for (int i = 0; i < differences.length; ++i)
      prefix[i + 1] += prefix[i] + differences[i];

    final long mx = Arrays.stream(prefix).max().getAsLong();
    final long mn = Arrays.stream(prefix).min().getAsLong();
    return (int) Math.max(0L, (upper - lower) - (mx - mn) + 1);
  }
}


or



class Solution {
  public int numberOfArrays(int[] differences, int lower, int upper) {
    long prefix = 0;
    long mn = 0; // Starts from 0.
    long mx = 0; // Starts from 0.

    for (final int d : differences) {
      prefix += d;
      mn = Math.min(mn, prefix);
      mx = Math.max(mx, prefix);
    }

    return (int) Math.max(0L, (upper - lower) - (mx - mn) + 1);
  }
}



or



class Solution {
    public int numberOfArrays(int[] differences, int lower, int upper) {
        long num = 0, mi = 0, mx = 0;
        for (int d : differences) {
            num += d;
            mi = Math.min(mi, num);
            mx = Math.max(mx, num);
        }
        return Math.max(0, (int) (upper - lower - (mx - mi) + 1));
    }
}




or



class Solution {

    public int numberOfArrays(int[] differences, int lower, int upper) {
        int x = 0, y = 0, cur = 0;
        for (int d : differences) {
            cur += d;
            x = Math.min(x, cur);
            y = Math.max(y, cur);
            if (y - x > upper - lower) {
                return 0;
            }
        }
        return (upper - lower) - (y - x) + 1;
    }
}



or


class Solution {
    public int numberOfArrays(int[] differences, int lower, int upper) {
        long sum = 0, maxi = 0, mini = 0;
        for (int x : differences) {
            sum += x;
            maxi = Math.max(maxi, sum);
            mini = Math.min(mini, sum);
        }
        return (int)Math.max(0, upper - lower - maxi + mini + 1);
    }
}



or



class Solution {
public int numberOfArrays(int[] diff, int lower, int upper) {
    long a = 0, maxima = 0, minima = 0;
    for (int i = 0; i < diff.length; i++) {
        a += diff[i];
        maxima = Math.max(maxima, a);
        minima = Math.min(minima, a);
    }
    return (int) Math.max(0, (upper - lower) - (maxima - minima) + 1);
}
}

or


class Solution {
public int numberOfArrays(int[] ar, int l, int u) {
	int n = ar.length;
	long min = ar[0], max = ar[0], sum = 0;
	
	for (int i = 0; i < n; i++) {
		sum+=ar[i];
		min=Math.min(min,sum);
		max=Math.max(max,sum);
	}
	
	// if we have a negative min it is possible we can go below [lower]
	long lo = min < 0 ? l - min : l;
	
	// if we have a positive max it is possible we can go above [higher]
	long hi = max > 0 ? u - max : u;
	
	if (hi < lo) return 0;
	
	return (int)(hi - lo) + 1;
}
}


or


class Solution {
public int numberOfArrays(int[] diff, int lower, int upper) {
    long a = 0, maxima = 0, minima = 0;
    for (int i = 0; i < diff.length; i++) {
        a += diff[i];
        maxima = Math.max(maxima, a);
        minima = Math.min(minima, a);
    }
    return (int) Math.max(0, (upper - lower) - (maxima - minima) + 1);
}
}

or


class Solution {
public int numberOfArrays(int[] ar, int l, int u) {
	int n = ar.length;
	long min = ar[0], max = ar[0], sum = 0;
	
	for (int i = 0; i < n; i++) {
		sum+=ar[i];
		min=Math.min(min,sum);
		max=Math.max(max,sum);
	}
	
	// if we have a negative min it is possible we can go below [lower]
	long lo = min < 0 ? l - min : l;
	
	// if we have a positive max it is possible we can go above [higher]
	long hi = max > 0 ? u - max : u;
	
	if (hi < lo) return 0;
	
	return (int)(hi - lo) + 1;
}
}


or


class Solution {
    public int numberOfArrays(int[] differences, int lower, int upper) {
        long sum = 0;
        long mini = 0, maxi = 0;

        for (int diff : differences) {
            sum += diff;
            mini = Math.min(mini, sum);
            maxi = Math.max(maxi, sum);
        }

        long validLow = lower - mini;
        long validHigh = upper - maxi;

        return (int)Math.max(0, validHigh - validLow + 1);
    }
}


or


class Solution {
    public int numberOfArrays(int[] differences, int lower, int upper) {
        int n = differences.length;
        int prefix = 0;
        int min = 0;
        int max = 0;
        int diff = upper-lower;
        for(int i = 0;i<n;i++){
            prefix = prefix + differences[i];
            min = Math.min(min,prefix);
            max = Math.max(max,prefix);
            if(max-min > diff) return 0;
        }
        return (diff) - (max -min) +1;
    }
}


or

