https://leetcode.com/problems/taking-maximum-energy-from-the-mystic-dungeon/description/

3147. Taking Maximum Energy From the Mystic Dungeon
Medium
Topics
Companies
Hint
In a mystic dungeon, n magicians are standing in a line. Each magician has an attribute that gives you energy. Some magicians can give you negative energy, which means taking energy from you.

You have been cursed in such a way that after absorbing energy from magician i, you will be instantly transported to magician (i + k). This process will be repeated until you reach the magician where (i + k) does not exist.

In other words, you will choose a starting point and then teleport with k jumps until you reach the end of the magicians' sequence, absorbing all the energy during the journey.

You are given an array energy and an integer k. Return the maximum possible energy you can gain.

Note that when you are reach a magician, you must take energy from them, whether it is negative or positive energy.

 

Example 1:

Input: energy = [5,2,-10,-5,1], k = 3

Output: 3

Explanation: We can gain a total energy of 3 by starting from magician 1 absorbing 2 + 1 = 3.

Example 2:

Input: energy = [-2,-3,-1], k = 2

Output: -1

Explanation: We can gain a total energy of -1 by starting from magician 2.

 

Constraints:

1 <= energy.length <= 105
-1000 <= energy[i] <= 1000
1 <= k <= energy.length - 1



# java



class Solution {
  public int maximumEnergy(int[] energy, int k) {
    int[] dp = energy.clone();
    for (int i = energy.length - 1 - k; i >= 0; --i)
      dp[i] += dp[i + k];
    return Arrays.stream(dp).max().getAsInt();
  }
}


or


class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int ans = -(1 << 30);
        int n = energy.length;
        for (int i = n - k; i < n; ++i) {
            for (int j = i, s = 0; j >= 0; j -= k) {
                s += energy[j];
                ans = Math.max(ans, s);
            }
        }
        return ans;
    }
}


or



class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int n = energy.length;
        int[] dp = new int[n];
        
        int res = Integer.MIN_VALUE;
        for (int i = n - 1; i >= 0; i--) {
            dp[i] = energy[i] + (i + k < n ? dp[i + k] : 0);
            res = Math.max(res, dp[i]);
        }
        
        return res;
    }
}


or



class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int n = energy.length;
        // Merge energy of every kth magician with its predecessor,
        // starting from the end of the line and moving backwards.
        for (int j = n - k - 1; j >= 0; j--) {
            energy[j] += energy[j + k];
        }
        // Find the maximum energy accumulated after merging energies
        // and traversing through the line of magicians.
        int ans = Integer.MIN_VALUE;
        for (int i = 0; i < n; i++) {
            ans = Math.max(ans, energy[i]);
        }
        return ans;
    }
}


or



class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int len=energy.length;
        int arr[]=new int[len];
        for(int i=len-1; i>=0; i--)
        {
            if(i+k<len)
            {
                arr[i]=energy[i]+arr[i+k];
            }
            else
            {
                arr[i]=energy[i];
            }
        }
        Arrays.sort(arr);
        return arr[len-1];
    }
}



or


class Solution {
    public int maximumEnergy(int[] A, int k) {
        for (int i = A.length - k - 1; i >= 0; i--)
            A[i] += A[i + k];
        return Arrays.stream(A).max().getAsInt();
    }
}



or



class Solution {
    public int maximumEnergy(int[] energy, int k) { // Function to find the maximum energy gain
        int n = energy.length; // Get the size of the energy array
        int ans = Integer.MIN_VALUE; // Initialize a variable to store the maximum energy gain
        int[] dp = new int[n]; // Initialize a dynamic programming array to store maximum energy gain
        dp[n - 1] = energy[n - 1]; // Set the last element of dp as the energy of the last magician
        ans = Math.max(ans, dp[n - 1]); // Update the maximum energy gained so far
        for (int i = n - 2; i >= 0; i--) { // Iterate through magicians from second last to the first
            if (i + k < n) { // Check if magician reachable after k jumps exists
                dp[i] = energy[i] + dp[i + k]; // Calculate maximum energy gain from magician i
            } else { // If magician reachable after k jumps doesn't exist
                dp[i] = energy[i]; // Set maximum energy gain from magician i as its own energy
            }
            ans = Math.max(ans, dp[i]); // Update the maximum energy gained so far
        }
        return ans; // Return the maximum energy gained
    }
}


or


class Solution {
    public int maximumEnergy(int[] energy, int k) {
        List<Integer> memo = new ArrayList<>(Collections.nCopies(k, 0));
        for (int x : energy) {
            memo.add(Math.max(x + memo.get(memo.size() - k), x));
        }
        return Collections.max(memo.subList(memo.size() - k, memo.size()));
    }
}



or



class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int maxer = Integer.MIN_VALUE;
        int[] dp = new int[energy.length];
        Arrays.fill(dp,Integer.MIN_VALUE);
        for(int i = 0;i<energy.length;i++){
            int currMax = energy[i];
            int j = i;
            if(i-k >0 ){
                currMax = dp[i-k]-energy[i-k];
            }
            else{
            while(j+k<energy.length){
                currMax += energy[j+k];
                j += k;
                
            }}
            dp[i] = Math.max(dp[i],currMax);
            maxer = Math.max(dp[i],maxer);
        }
        return maxer;

    }

}



or



class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int length = energy.length;
        int[] maxPosTable = new int[length];
        int maxVal = Integer.MIN_VALUE;

        for (int i = length - 1; i >= 0; i--) {
            int nextJump = 0;
            if (i < length - k) {
                nextJump = maxPosTable[i + k];
            }
            maxPosTable[i] = nextJump + energy[i];
            maxVal = Math.max(maxVal, maxPosTable[i]);
        }

        return maxVal;
    }
}



or



class Solution {
    public int maximumEnergy(int[] energy, int k) {
        int maxEnergy = Integer.MIN_VALUE;
        int totalMagicians = energy.length;
        // I will start from the end, because at the end, I have the liberty to start from here
        // but if I start from first, I will have to move to the kth magician anyhow.
        for (int i = totalMagicians - 1; i > totalMagicians - 1 - k; i--) {
            int currentEnergy = 0;      // the currentEnergy for this hop
            for (int j = i; j >= 0; j -= k) {
                currentEnergy += energy[j];     // I increment the energy for the current magician
                // I check for the max energy
                // since this checks for the possibility that I start from
                // position j.
                maxEnergy = Math.max(maxEnergy, currentEnergy);
            }
        }
        // I return max energy.
        return maxEnergy;
    }
}



or



