https://leetcode.com/problems/largest-magic-square/description/


1895. Largest Magic Square
Medium
Topics
Companies
Hint
A k x k magic square is a k x k grid filled with integers such that every row sum,
every column sum, and both diagonal sums are all equal. The integers in the magic
square do not have to be distinct. Every 1 x 1 grid is trivially a magic square.

Given an m x n integer grid, return the size (i.e., the side length k) of the largest
magic square that can be found within this grid.

 

Example 1:


Input: grid = [[7,1,4,5,6],[2,5,1,6,4],[1,5,4,3,2],[1,2,7,3,4]]
Output: 3
Explanation: The largest magic square has a size of 3.
Every row sum, column sum, and diagonal sum of this magic square is equal to 12.
- Row sums: 5+1+6 = 5+4+3 = 2+7+3 = 12
- Column sums: 5+5+2 = 1+4+7 = 6+3+3 = 12
- Diagonal sums: 5+4+3 = 6+4+2 = 12
Example 2:


Input: grid = [[5,1,3,1],[9,3,3,1],[1,3,3,8]]
Output: 2
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 50
1 <= grid[i][j] <= 106



# java


class Solution {
  public int largestMagicSquare(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    // prefixRow[i][j] := the sum of the first j numbers in the i-th row
    int[][] prefixRow = new int[m][n + 1];
    // prefixCol[i][j] := the sum of the first j numbers in the i-th column
    int[][] prefixCol = new int[n][m + 1];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        prefixRow[i][j + 1] = prefixRow[i][j] + grid[i][j];
        prefixCol[j][i + 1] = prefixCol[j][i] + grid[i][j];
      }

    for (int k = Math.min(m, n); k >= 2; --k)
      if (containsMagicSquare(grid, prefixRow, prefixCol, k))
        return k;

    return 1;
  }

  // Returns true if the grid contains any magic square of size k x k.
  private boolean containsMagicSquare(int[][] grid, int[][] prefixRow, int[][] prefixCol, int k) {
    for (int i = 0; i + k - 1 < grid.length; ++i)
      for (int j = 0; j + k - 1 < grid[0].length; ++j)
        if (isMagicSquare(grid, prefixRow, prefixCol, i, j, k))
          return true;
    return false;
  }

  // Returns true if grid[i..i + k)[j..j + k) is a magic square.
  private boolean isMagicSquare(int[][] grid, int[][] prefixRow, int[][] prefixCol, int i, int j,
                                int k) {
    int diag = 0;
    int antiDiag = 0;
    for (int d = 0; d < k; ++d) {
      diag += grid[i + d][j + d];
      antiDiag += grid[i + d][j + k - 1 - d];
    }
    if (diag != antiDiag)
      return false;
    for (int d = 0; d < k; ++d) {
      if (getSum(prefixRow, i + d, j, j + k - 1) != diag)
        return false;
      if (getSum(prefixCol, j + d, i, i + k - 1) != diag)
        return false;
    }
    return true;
  }

  // Returns sum(grid[i][l..r]) or sum(grid[l..r][i]).
  private int getSum(int[][] prefix, int i, int l, int r) {
    return prefix[i][r + 1] - prefix[i][l];
  }
}


or


class Solution {
    private int[][] rowsum;
    private int[][] colsum;

    public int largestMagicSquare(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        rowsum = new int[m + 1][n + 1];
        colsum = new int[m + 1][n + 1];
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                rowsum[i][j] = rowsum[i][j - 1] + grid[i - 1][j - 1];
                colsum[i][j] = colsum[i - 1][j] + grid[i - 1][j - 1];
            }
        }
        for (int k = Math.min(m, n); k > 1; --k) {
            for (int i = 0; i + k - 1 < m; ++i) {
                for (int j = 0; j + k - 1 < n; ++j) {
                    int i2 = i + k - 1, j2 = j + k - 1;
                    if (check(grid, i, j, i2, j2)) {
                        return k;
                    }
                }
            }
        }
        return 1;
    }

    private boolean check(int[][] grid, int x1, int y1, int x2, int y2) {
        int val = rowsum[x1 + 1][y2 + 1] - rowsum[x1 + 1][y1];
        for (int i = x1 + 1; i <= x2; ++i) {
            if (rowsum[i + 1][y2 + 1] - rowsum[i + 1][y1] != val) {
                return false;
            }
        }
        for (int j = y1; j <= y2; ++j) {
            if (colsum[x2 + 1][j + 1] - colsum[x1][j + 1] != val) {
                return false;
            }
        }
        int s = 0;
        for (int i = x1, j = y1; i <= x2; ++i, ++j) {
            s += grid[i][j];
        }
        if (s != val) {
            return false;
        }
        s = 0;
        for (int i = x1, j = y2; i <= x2; ++i, --j) {
            s += grid[i][j];
        }
        if (s != val) {
            return false;
        }
        return true;
    }
}


or



class Solution {
    
    public int largestMagicSquare(int[][] matrix) {
        int M = matrix.length;
        int N = matrix[0].length;
        int[][] rowSums = new int[M + 1][N + 1];
        int[][] colSums = new int[M + 1][N + 1];
        int[][] diaSums = new int[M + 1][N + 1];
        int[][] antiDiaSums = new int[M + 1][N + 1];

        for (int i = 0; i < M; i++) {
            for (int j = 0; j < N; j++) {
                rowSums[i + 1][j + 1] = rowSums[i + 1][j] + matrix[i][j];
                colSums[i + 1][j + 1] = colSums[i][j + 1] + matrix[i][j];
                diaSums[i + 1][j + 1] = diaSums[i][j] + matrix[i][j];
                antiDiaSums[M - i - 1][N - j] = antiDiaSums[M - i][N - j - 1] + matrix[M - i - 1][N - j - 1];
            }
        }


        int max = 1;

        for (int size = 2; size <= Math.min(M, N); size++) {
            for (int i = size - 1; i < M; i++) {
                for (int j = size - 1; j < N; j++) {
                    boolean areRowsValid = true;
                    int effectiveRowSum = rowSums[i + 1][j + 1] - rowSums[i + 1][j + 1 - size];
                    for (int k = i - size + 1; k < i; k++) {
                        if (rowSums[k + 1][j + 1] - rowSums[k + 1][j + 1 - size] != effectiveRowSum) {
                            areRowsValid = false;
                            break;
                        }
                    }

                    if (!areRowsValid) continue;

                    boolean areColsValid = true;
                    int effectiveColSum = colSums[i + 1][j + 1] - colSums[i - size + 1][j + 1];
                    if (effectiveColSum != effectiveRowSum) continue;
                    for (int k = j - size + 1; k < j; k++) {
                        if (colSums[i + 1][k + 1] - colSums[i + 1 - size][k + 1] != effectiveColSum) {
                            areColsValid = false;
                            break;
                        }
                    }

                    if (!areColsValid) continue;

                    int diaSum = diaSums[i + 1][j + 1] - diaSums[i + 1 - size][j + 1 - size];
                    int antiDiaSum = antiDiaSums[i + 1 - size][j + 1] - antiDiaSums[i + 1][j + 1 - size];
                    if (diaSum == effectiveColSum && diaSum == antiDiaSum) max = Math.max(max, size);
                }
            }
        }
        return max;

    }
}


or



class Solution {
  public int largestMagicSquare(int[][] grid) {
    int m = grid.length;
    int n = grid[0].length;
    // every row prefix sum
    int[][] rowPrefix = new int[m][n];
    for (int i = 0; i < m; i++) {
      rowPrefix[i][0] = grid[i][0];
      for (int j = 1; j < n; j++) {
        rowPrefix[i][j] = rowPrefix[i][j - 1] + grid[i][j];
      }
    }

    // every column prefix sum
    int[][] columnPrefix = new int[m][n];
    for (int i = 0; i < n; i++) {
      columnPrefix[0][i] = grid[0][i];
      for (int j = 1; j < m; j++) {
        columnPrefix[j][i] = columnPrefix[j - 1][i] + grid[j][i];
      }
    }

    int result = 1;
    for (int i = 0; i < m; i++) {
      for (int j = 0; j < n; j++) {
        // length of square
        int l = Math.min(m - i, n - j);
        // only check square's length is better than previous result
        for (int k = l; k > result; k--) {
          if (magic(i, j, k, grid, rowPrefix, columnPrefix)) {
            result = k;
            break;
          }
        }
      }
    }
    return result;
  }

  private boolean magic(
      int i, int j, int l, int[][] grid, int[][] rowPrefix, int[][] columnPrefix) {
    // check every row
    int target = rowPrefix[i][j + l - 1] - rowPrefix[i][j] + grid[i][j];
    for (int k = 0; k < l; k++) {
      if (rowPrefix[i + k][j + l - 1] - rowPrefix[i + k][j] + grid[i + k][j] != target) {
        return false;
      }
    }

    // check every column
    for (int k = 0; k < l; k++) {
      if (columnPrefix[i + l - 1][j + k] - columnPrefix[i][j + k] + grid[i][j + k] != target) {
        return false;
      }
    }

    // check both diagonal
    int diagonal = 0;
    //  \
    //   \
    for (int k = 0; k < l; k++) {
      diagonal += grid[i + k][j + k];
    }

    if (diagonal != target) {
      return false;
    }

    //   /
    //  /
    for (int k = 0; k < l; k++) {
      diagonal -= grid[i + l - 1 - k][j + k];
    }

    return diagonal == 0;
  }
}


or




