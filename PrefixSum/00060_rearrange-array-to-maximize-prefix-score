https://leetcode.com/problems/rearrange-array-to-maximize-prefix-score/description/


2587. Rearrange Array to Maximize Prefix Score
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums. You can rearrange the elements of nums to any order (including the given order).

Let prefix be the array containing the prefix sums of nums after rearranging it. In other words, prefix[i] is the sum of the elements from 0 to i in nums after rearranging it. The score of nums is the number of positive integers in the array prefix.

Return the maximum score you can achieve.

 

Example 1:

Input: nums = [2,-1,0,1,-3,3,-3]
Output: 6
Explanation: We can rearrange the array into nums = [2,3,1,-1,-3,0,-3].
prefix = [2,5,6,5,2,2,-1], so the score is 6.
It can be shown that 6 is the maximum score we can obtain.
Example 2:

Input: nums = [-2,-3,0]
Output: 0
Explanation: Any rearrangement of the array will result in a score of 0.
 

Constraints:

1 <= nums.length <= 105
-106 <= nums[i] <= 106


# java

class Solution {
  public int maxScore(int[] nums) {
    long prefix = 0;

    nums = Arrays.stream(nums)
               .boxed()
               .sorted(Collections.reverseOrder())
               .mapToInt(Integer::intValue)
               .toArray();

    for (int i = 0; i < nums.length; ++i) {
      prefix += nums[i];
      if (prefix <= 0)
        return i;
    }

    return nums.length;
  }
}


or



class Solution {
    public int maxScore(int[] nums) {
        Arrays.sort(nums);
        int n = nums.length;
        long s = 0;
        for (int i = 0; i < n; ++i) {
            s += nums[n - i - 1];
            if (s <= 0) {
                return i;
            }
        }
        return n;
    }
}



or



class Solution {
    public int maxScore(int[] num) {
        Integer[] boxedArr = Arrays.stream(num).boxed().toArray(Integer[]::new);
        Arrays.sort(boxedArr, Comparator.reverseOrder());
        int[] nums = Arrays.stream(boxedArr).mapToInt(Integer::intValue).toArray();
        int sum=0;
        long p=0;
        for(int i:nums)
        {
            p+=(long)i;
            if(p>0)
            {
                sum++;
            }
            else
            {
                p=0;
            }
        }
        return sum;
    }
}



or



class Solution {
  public int maxScore(int[] nums) {
    var n = nums.length;
    Arrays.sort(nums);
    
    var sum = 0L;
    var i = n-1;
    for (; i >= 0; i--) {
      sum += nums[i];
      if (sum <= 0) break;
    }
    return n-1-i;
  }
}


or



class Solution {
    public int maxScore(int[] nums) {
        long sum = 0;
        int i=nums.length-1;
        Arrays.sort(nums);
        if(nums[nums.length-1] == 0)    return 0;
        while(i >= 0){
            sum += nums[i--];
            if(sum <= 0) return nums.length-i-2;
        }
        return nums.length;
    }
}


or



class Solution {
    public int maxScore(int[] nums) {
        
        Arrays.sort(nums);// 1. Sort array

        int n=nums.length;
        int lastindex=n-1;
        for(int i=0;i<n/2;i++)//2. Reverse array
        {
            int t= nums[i];
            nums[i]=nums[lastindex];
            nums[lastindex]=t;
            lastindex--;
        }
        
        long[] prefarray=new long[nums.length];// declaring with long datatype
        prefarray[0]=nums[0];
        
        for(int i=1;i<nums.length;i++)//3. performing prefix sum
        {
            prefarray[i]=prefarray[i-1]+nums[i];
        }
        int count=0;
        
        //System.out.println(Arrays.toString(prefarray));
        
        for(long i:prefarray)//4. counting no. of positives
            if(i>0)
                count++;

        return count;
        
    }
}


or

// bets
class Solution {
    public int maxScore(int[] nums) {

        Arrays.sort(nums);
        long sum=0;
        int ans=0;
        int n=nums.length-1;
        
        for(int i=n;i>=0;i--){
            sum+=nums[i];
            if(sum>0)ans++;
        }

        return ans;
    }
}


