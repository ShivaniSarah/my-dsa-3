https://leetcode.com/problems/maximum-subarray-sum-with-length-divisible-by-k/description/


3381. Maximum Subarray Sum With Length Divisible by K
Medium
Topics
Companies
Hint
You are given an array of integers nums and an integer k.

Return the maximum sum of a subarray of nums, such that the size of the subarray is divisible by k.

 

Example 1:

Input: nums = [1,2], k = 1

Output: 3

Explanation:

The subarray [1, 2] with sum 3 has length equal to 2 which is divisible by 1.

Example 2:

Input: nums = [-1,-2,-3,-4,-5], k = 4

Output: -10

Explanation:

The maximum sum subarray is [-1, -2, -3, -4] which has length equal to 4 which is divisible by 4.

Example 3:

Input: nums = [-5,1,2,-3,4], k = 2

Output: 4

Explanation:

The maximum sum subarray is [1, 2, -3, 4] which has length equal to 4 which is divisible by 2.

 

Constraints:

1 <= k <= nums.length <= 2 * 105
-109 <= nums[i] <= 109



# java



class Solution {
  public long maxSubarraySum(int[] nums, int k) {
    long ans = Long.MIN_VALUE;
    long prefix = 0;
    // minPrefix[i % k] := the minimum prefix sum of the first i numbers
    long[] minPrefix = new long[k];
    Arrays.fill(minPrefix, Long.MAX_VALUE / 2);
    minPrefix[k - 1] = 0;

    for (int i = 0; i < nums.length; ++i) {
      prefix += nums[i];
      ans = Math.max(ans, prefix - minPrefix[i % k]);
      minPrefix[i % k] = Math.min(minPrefix[i % k], prefix);
    }

    return ans;
  }
}



or



class Solution {
    public long maxSubarraySum(int[] nums, int k) {
        long[] f = new long[k];
        final long inf = 1L << 62;
        Arrays.fill(f, inf);
        f[k - 1] = 0;
        long s = 0;
        long ans = -inf;
        for (int i = 0; i < nums.length; ++i) {
            s += nums[i];
            ans = Math.max(ans, s - f[i % k]);
            f[i % k] = Math.min(f[i % k], s);
        }
        return ans;
    }
}


or



class Solution {
       public long maxSubarraySum(int[] A, int k) {
        long[] prefix = new long[k];
        Arrays.fill(prefix, (long)1e15);
        prefix[k - 1] = 0;
        long res = (long)-1e15, pre = 0;
        for (int i = 0; i < A.length; i++) {
            pre += A[i];
            res = Math.max(res, pre - prefix[i % k]);
            prefix[i % k] = Math.min(prefix[i % k], pre);
        }
        return res;
    }
}


or


class Solution
{
    public long maxSubarraySum(int[] nums, int k)
    {
        int n = nums.length;

        // Step 1: Create prefix sum array
        long[] prefixSum = new long[n + 1];
        for (int i = 0; i < n; i++)
        {
            prefixSum[i + 1] = prefixSum[i] + nums[i];
        }

        // Step 2: Initialize array to track minimum prefix sums for each remainder
        long[] minPrefixSum = new long[k];
        for (int i = 0; i < k; i++)
        {
            minPrefixSum[i] = Long.MAX_VALUE; // Initialize with maximum value
        }

        // Step 3: Initialize maxSum to track the result
        long maxSum = Long.MIN_VALUE; // Initialize result as the smallest value

        // Step 4: Iterate over the prefix sum array
        for (int i = 0; i <= n; i++)
        {
            int remainder = i % k;

            // Step 5: If i >= k, calculate the maximum subarray sum
            if (i >= k)
            {
                maxSum = Math.max(maxSum, prefixSum[i] - minPrefixSum[remainder]);
            }

            // Step 6: Update the minimum prefix sum for the current remainder
            minPrefixSum[remainder] = Math.min(minPrefixSum[remainder], prefixSum[i]);
        }

        // Step 7: Return the result (0 if no valid subarray is found)
        return maxSum == Long.MIN_VALUE ? 0 : maxSum;
    }
}


or



class Solution {
    public long maxSubarraySum(int[] nums, int k) {
        if (k == 1) {
            return kadane(nums);
        }
        long res = Long.MIN_VALUE;
        long[] prefix = new long[nums.length + 1];
        for (int i = 1; i <= nums.length; i++) {
            prefix[i] = prefix[i - 1] + nums[i - 1];
        }
        for (int i = 0; i < k; i++) {
            int len = (nums.length - i) / k;
            long[] tmp = new long[len];
            for (int j = 0; j < len; j++) {
                int start = i + j * k, end = start + k;
                tmp[j] = prefix[end] - prefix[start];
            }
            res = Math.max(res, kadane(tmp));
        }
        return res;
    }

    static long kadane(long[] nums) {
        long res = Long.MIN_VALUE;
        long curr = 0;

        for (int i = 0; i < nums.length; i++) {
            if (curr + nums[i] > nums[i]) {
                curr += nums[i];
            } else {
                curr = nums[i];
            }
            if (curr > res) {
                res = curr;
            }
        }
        return res;
    }

    static long kadane(int[] nums) {
        long res = Long.MIN_VALUE;
        long curr = 0;

        for (int i = 0; i < nums.length; i++) {
            if (curr + nums[i] > nums[i]) {
                curr += nums[i];
            } else {
                curr = nums[i];
            }
            if (curr > res) {
                res = curr;
            }
        }
        return res;
    }
}



or



class Solution {
    public long maxSubarraySum(int[] nums, int k) {
            long  ans=Long.MIN_VALUE; long sum=0;
            Map<Integer, Long>mp = new HashMap<>();
             mp.put(0, 0L);
        for(int i=0; i<nums.length; i++){
            sum +=nums[i];
            int rem = (i+1)%k;
            if(mp.containsKey(rem)){
                ans = Math.max(ans, sum-mp.get(rem));
                mp.put(rem, Math.min(mp.get(rem), sum));
            }
            else  mp.put(rem, sum);
        }
        return ans;
    }
}



or



class Solution {
    public long maxSubarraySum(int[] nums, int k) {
        int n = nums.length;
        long maxSum = Long.MIN_VALUE;
        long[] sum = new long[n];
        // calculate sum of first subarray of length k
        for (int i=0; i<k; i++) {
            sum[k-1] += nums[i];
        }
        // sum[i] will contain sum of subarray from i-k to i
        for (int i=k; i<n; i++) {
            sum[i] = nums[i] - nums[i-k] + sum[i-1];
        }
        // prefixSum - sum of last x subarrays of length k
        long[] prefixSum = new long[n];
        prefixSum[k-1] = sum[k-1];
        for (int i=k; i<n; i++) {
            // if last prefixSum is negative then don't add it 
            // because it will only decrease maximum sum
            if (prefixSum[i-k] < 0) {
                prefixSum[i] = sum[i]; 
            } else {
                prefixSum[i] = sum[i] + prefixSum[i-k]; 
            }
        } 
        // find maximum sum 
        for (int i=k-1; i<n; i++) {
            maxSum = Math.max(maxSum, prefixSum[i]);
        } 
        return maxSum;
    }
}


or


class Solution {
    public long maxSubarraySum(int[] nums, int k) {
        // 1. Prefix sum
        int n = nums.length;
        long[] pre = new long[n];

        long sum = 0;

        for(int i=0;i<n;i++){
            sum += nums[i];
            pre[i] = sum;
        }

        // 2. dp
        long[] minPre = new long[n];
        long res = Long.MIN_VALUE;

        long prevMinPre = Long.MAX_VALUE;
        
        for(int i=0;i<n;i++){
            int len = i + 1;
            prevMinPre = i-k < 0 ? 0 : minPre[i-k];
            minPre[i] = i+1 >= k ? Math.min(pre[i], prevMinPre) : pre[i];

            if(i+1 >= k){
                res = Math.max(res, pre[i] - prevMinPre);
            }
        }

        return res;
    }
}


