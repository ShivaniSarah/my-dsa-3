https://leetcode.com/problems/maximum-number-of-non-overlapping-subarrays-with-sum-equals-target/description/


1546. Maximum Number of Non-Overlapping Subarrays With Sum Equals Target
Medium
Topics
Companies
Hint
Given an array nums and an integer target, return the maximum number of non-empty non-overlapping subarrays such that the sum of values in each subarray is equal to target.

 

Example 1:

Input: nums = [1,1,1,1,1], target = 2
Output: 2
Explanation: There are 2 non-overlapping subarrays [1,1,1,1,1] with sum equals to target(2).
Example 2:

Input: nums = [-1,3,5,1,4,2,-9], target = 6
Output: 2
Explanation: There are 3 subarrays with sum equal to 6.
([5,1], [4,2], [3,5,1,4,2,-9]) but only the first 2 are non-overlapping.
 

Constraints:

1 <= nums.length <= 105
-104 <= nums[i] <= 104
0 <= target <= 106



 #java


class Solution {
    public int maxNonOverlapping(int[] nums, int target) {
        int res=0;
        HashSet<Integer> preSum = new HashSet<>();
        preSum.add(0);
        int prev = 0;
        for(int i=0;i<nums.length;i++){
            int val = prev + nums[i];
            if(preSum.contains(val - target)){
                res++;
                preSum = new HashSet<>();
            }
            preSum.add(val);
            prev = val;
        }       
        return res;
    }
}



or


class Solution {
  public static int maxNonOverlapping(int[] nums, int target) {
    // Ending the subarray ASAP always has a better result.
    int ans = 0;
    int prefix = 0;
    Set<Integer> prefixes = new HashSet<>(Arrays.asList(0));

    // Greedily find the subarrays that equal to the target.
    for (int num : nums) {
      prefix += num;
      // Check if there is a subarray ends in here and equals to the target.
      if (prefixes.contains(prefix - target)) {
        // Find one and discard all the prefixes that have been used.
        ans++;
        prefix = 0;
        prefixes = new HashSet<>(Arrays.asList(0));
      } else {
        prefixes.add(prefix);
      }
    }

    return ans;
  }
}



or



class Solution {
    public int maxNonOverlapping(int[] nums, int target) {
        int ans = 0, n = nums.length;
        for (int i = 0; i < n; ++i) {
            Set<Integer> vis = new HashSet<>();
            int s = 0;
            vis.add(0);
            while (i < n) {
                s += nums[i];
                if (vis.contains(s - target)) {
                    ++ans;
                    break;
                }
                ++i;
                vis.add(s);
            }
        }
        return ans;
    }
}



or




class Solution {
    public int maxNonOverlapping(int[] nums, int target) {
        int res=0;
        HashSet<Integer> preSum = new HashSet<>();
        preSum.add(0);
        int prev = 0;
        for(int i=0;i<nums.length;i++){
            int val = prev + nums[i];
            if(preSum.contains(val - target)){
                res++;
                preSum = new HashSet<>();
            }
            preSum.add(val);
            prev = val;
        }       
        return res;
    }
}


or

class Solution {
    public int maxNonOverlapping(int[] nums, int target) {
        HashSet<Integer>h=new HashSet<>();
        int c=0,s=0;
        h.add(0);
        for(int i=0;i<nums.length;i++)
        {
            s+=nums[i];
            if(h.contains(s-target)==true)
            {
                c+=1;
                s=0;
                h.removeAll(h);
                h.add(0);
            }
            else h.add(s);
        }
        return c;
    }
}



or


class Solution {
    public int maxNonOverlapping(int[] nums, int target) {
        if (nums == null || nums.length == 0) {
            return 0;
        }
        Set<Integer> set = new HashSet<>();
        set.add(0);
        int sum = 0;
        int count = 0;
        for (int num : nums) {
            sum += num;
            if (set.contains(sum - target)) {
                count++;
                sum = 0;
                set.clear();
                set.add(0);
            } else {
                set.add(sum);
            }
        }
        return count;
    }
}



or



class Solution {
    public int maxNonOverlapping(int[] nums, int target) {
        int n = nums.length;
        Map<Long, Integer> prefixSumIndex = new HashMap<>();
        prefixSumIndex.put(0L, -1);

        long prefixSum  = 0;
        int prevEnd = -1;
        int count = 0;

        for(int i = 0; i < n; i++){
            long val = nums[i];
            prefixSum += val;
            if(prefixSumIndex.containsKey(prefixSum - target)){
                int start = prefixSumIndex.get(prefixSum - target) + 1;
                int end = i;
                if(prevEnd < start) { 
                    count++;
                    prevEnd = end;
                }
            }
            prefixSumIndex.put(prefixSum, i);
        }

        return count;
    }
}


or



class Solution {
  public static int maxNonOverlapping(int[] nums, int target) {
    // Ending the subarray ASAP always has a better result.
    int ans = 0;
    int prefix = 0;
    Set<Integer> prefixes = new HashSet<>(Arrays.asList(0));

    // Greedily find the subarrays that equal to the target.
    for (int num : nums) {
      prefix += num;
      // Check if there is a subarray ends in here and equals to the target.
      if (prefixes.contains(prefix - target)) {
        // Find one and discard all the prefixes that have been used.
        ans++;
        prefix = 0;
        prefixes = new HashSet<>(Arrays.asList(0));
      } else {
        prefixes.add(prefix);
      }
    }

    return ans;
  }
}



or



class Solution {
    public int maxNonOverlapping(int[] nums, int target) {
        int ans = 0, n = nums.length;
        for (int i = 0; i < n; ++i) {
            Set<Integer> vis = new HashSet<>();
            int s = 0;
            vis.add(0);
            while (i < n) {
                s += nums[i];
                if (vis.contains(s - target)) {
                    ++ans;
                    break;
                }
                ++i;
                vis.add(s);
            }
        }
        return ans;
    }
}



or



class Solution {
    public int maxNonOverlapping(int[] nums, int target) {
        int n = nums.length;
        Map<Long, Integer> prefixSumIndex = new HashMap<>();
        prefixSumIndex.put(0L, -1);

        long prefixSum  = 0;
        int prevEnd = -1;
        int count = 0;

        for(int i = 0; i < n; i++){
            long val = nums[i];
            prefixSum += val;
            if(prefixSumIndex.containsKey(prefixSum - target)){
                int start = prefixSumIndex.get(prefixSum - target) + 1;
                int end = i;
                if(prevEnd < start) { 
                    count++;
                    prevEnd = end;
                }
            }
            prefixSumIndex.put(prefixSum, i);
        }

        return count;
    }
}


or


class Solution {
    class pair{
        int start;
        int end;
        public pair(int start,int end){
            this.start = start;
            this.end = end;
        }
    }
    public int maxNonOverlapping(int[] nums, int target) {
        //-1,3,5,1,4,2,-9 ->-1 2 7 8 12 14 5//
        //1 4 2 6 8-> 1 5 7 13 21//{1,0}{5,1}{7,2}{13,3}

        int ans =0;
        HashMap<Integer,Integer> map = new HashMap<>();
        List<pair> lst = new ArrayList<>();

        int csum =0;
        map.put(0,-1);
         for(int i=0;i < nums.length;i++){
            csum +=nums[i];
            if(map.containsKey(csum - target)){
             if(lst.isEmpty()|| lst.get(lst.size()-1).end <= map.get(csum - target)){
                lst.add(new pair(map.get(csum - target),i));
                ans++;
            }
            }
            map.put(csum,i);
        }
        return ans;
    }
}



