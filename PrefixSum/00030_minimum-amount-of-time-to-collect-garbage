https://leetcode.com/problems/minimum-amount-of-time-to-collect-garbage/description/


2391. Minimum Amount of Time to Collect Garbage
Medium
Topics
Companies
Hint
You are given a 0-indexed array of strings garbage where garbage[i] represents the assortment of garbage at the ith house. garbage[i] consists only of the characters 'M', 'P' and 'G' representing one unit of metal, paper and glass garbage respectively. Picking up one unit of any type of garbage takes 1 minute.

You are also given a 0-indexed integer array travel where travel[i] is the number of minutes needed to go from house i to house i + 1.

There are three garbage trucks in the city, each responsible for picking up one type of garbage. Each garbage truck starts at house 0 and must visit each house in order; however, they do not need to visit every house.

Only one garbage truck may be used at any given moment. While one truck is driving or picking up garbage, the other two trucks cannot do anything.

Return the minimum number of minutes needed to pick up all the garbage.

 

Example 1:

Input: garbage = ["G","P","GP","GG"], travel = [2,4,3]
Output: 21
Explanation:
The paper garbage truck:
1. Travels from house 0 to house 1
2. Collects the paper garbage at house 1
3. Travels from house 1 to house 2
4. Collects the paper garbage at house 2
Altogether, it takes 8 minutes to pick up all the paper garbage.
The glass garbage truck:
1. Collects the glass garbage at house 0
2. Travels from house 0 to house 1
3. Travels from house 1 to house 2
4. Collects the glass garbage at house 2
5. Travels from house 2 to house 3
6. Collects the glass garbage at house 3
Altogether, it takes 13 minutes to pick up all the glass garbage.
Since there is no metal garbage, we do not need to consider the metal garbage truck.
Therefore, it takes a total of 8 + 13 = 21 minutes to collect all the garbage.
Example 2:

Input: garbage = ["MMM","PGM","GP"], travel = [3,10]
Output: 37
Explanation:
The metal garbage truck takes 7 minutes to pick up all the metal garbage.
The paper garbage truck takes 15 minutes to pick up all the paper garbage.
The glass garbage truck takes 15 minutes to pick up all the glass garbage.
It takes a total of 7 + 15 + 15 = 37 minutes to collect all the garbage.
 

Constraints:

2 <= garbage.length <= 105
garbage[i] consists of only the letters 'M', 'P', and 'G'.
1 <= garbage[i].length <= 10
travel.length == garbage.length - 1
1 <= travel[i] <= 100




# java



class Solution {
  public int garbageCollection(String[] garbage, int[] travel) {
    int[] prefix = new int[travel.length];
    prefix[0] = travel[0];
    for (int i = 1; i < prefix.length; ++i)
      prefix[i] += prefix[i - 1] + travel[i];
    final int timeM = getTime(garbage, prefix, 'M');
    final int timeP = getTime(garbage, prefix, 'P');
    final int timeG = getTime(garbage, prefix, 'G');
    return timeM + timeP + timeG;
  }

  private int getTime(String[] garbage, int[] prefix, char c) {
    int characterCount = 0;
    int lastIndex = -1;
    for (int i = 0; i < garbage.length; ++i) {
      final String s = garbage[i];
      if (s.chars().anyMatch(g -> g == c))
        lastIndex = i;
      characterCount += (int) s.chars().filter(g -> g == c).count();
    }
    return characterCount + (lastIndex <= 0 ? 0 : prefix[lastIndex - 1]);
  }
}



or



class Solution {
    public int garbageCollection(String[] garbage, int[] travel) {
        int[] last = new int[26];
        int n = garbage.length;
        int ans = 0;
        for (int i = 0; i < n; ++i) {
            int k = garbage[i].length();
            ans += k;
            for (int j = 0; j < k; ++j) {
                last[garbage[i].charAt(j) - 'A'] = i;
            }
        }
        int m = travel.length;
        int[] s = new int[m + 1];
        for (int i = 0; i < m; ++i) {
            s[i + 1] = s[i] + travel[i];
        }
        for (int i : last) {
            ans += s[i];
        }
        return ans;
    }
}



or


class Solution {

    public int garbageCollection(String[] garbage, int[] travel) {
        // Array to store the prefix sum in travel.
        int[] prefixSum = new int[travel.length + 1];
        prefixSum[1] = travel[0];
        for (int i = 1; i < travel.length; i++) {
            prefixSum[i + 1] = prefixSum[i] + travel[i];
        }

        // Map to store garbage type to the last house index.
        Map<Character, Integer> garbageLastPos = new HashMap<
            Character,
            Integer
        >();

        // Map to store the total count of each type of garbage in all houses.
        Map<Character, Integer> garbageCount = new HashMap<
            Character,
            Integer
        >();
        for (int i = 0; i < garbage.length; i++) {
            for (char c : garbage[i].toCharArray()) {
                garbageLastPos.put(c, i);
                garbageCount.put(c, garbageCount.getOrDefault(c, 0) + 1);
            }
        }

        String garbageTypes = "MPG";
        int ans = 0;
        for (char c : garbageTypes.toCharArray()) {
            // Add only if there is at least one unit of this garbage.
            if (garbageCount.containsKey(c)) {
                ans += prefixSum[garbageLastPos.get(c)] + garbageCount.get(c);
            }
        }

        return ans;
    }
}


or



class Solution {

    public int garbageCollection(String[] garbage, int[] travel) {
        // Store the prefix sum in travel itself.
        for (int i = 1; i < travel.length; i++) {
            travel[i] = travel[i - 1] + travel[i];
        }

        // Map to store garbage type to the last house index.
        Map<Character, Integer> garbageLastPos = new HashMap<
            Character,
            Integer
        >();
        int ans = 0;
        for (int i = 0; i < garbage.length; i++) {
            for (char c : garbage[i].toCharArray()) {
                garbageLastPos.put(c, i);
            }
            ans += garbage[i].length();
        }

        String garbageTypes = "MPG";
        for (char c : garbageTypes.toCharArray()) {
            // No travel time is required if the last house is at index 0.
            ans +=
            (garbageLastPos.getOrDefault(c, 0) == 0
                    ? 0
                    : travel[garbageLastPos.get(c) - 1]);
        }

        return ans;
    }
}



or


class Solution {

    public int garbageCollection(String[] garbage, int[] travel) {
        Boolean M = false, P = false, G = false;
        int ans = garbage[0].length();

        for (int i = garbage.length - 1; i > 0; i--) {
            M |= garbage[i].contains("M");
            P |= garbage[i].contains("P");
            G |= garbage[i].contains("G");
            ans +=
            travel[i - 1] * ((M ? 1 : 0) + (P ? 1 : 0) + (G ? 1 : 0)) +
            garbage[i].length();
        }

        return ans;
    }
}



or


class Solution {
           public int garbageCollection(String[] garbage, int[] travel) {
        int last[] = new int[128], res = 0;
        for (int i = 0; i < garbage.length; ++i) {
            res += garbage[i].length();
            for (int j = 0; j < garbage[i].length(); ++j)
                last[garbage[i].charAt(j)] = i;
        }
        for (int j = 1; j < travel.length; ++j)
            travel[j] += travel[j - 1];
        for (int c : "PGM".toCharArray())
            if (last[c] > 0)
                res += travel[last[c] - 1];
        return res;
    }
}

or



class Solution {
    public int garbageCollection(String[] garbage, int[] travel) {
    int sum = 0, count = 0; 
    Map<Character, Integer> last= new HashMap<>();
    for(int i = 0; i < garbage.length; ++i){
        count += garbage[i].length();
        for(char c: garbage[i].toCharArray()) last.put(c, sum);
        if(i < travel.length) sum += travel[i];
    }
    return count + last.getOrDefault('M', 0) + last.getOrDefault('P', 0) + last.getOrDefault('G', 0);
}
}


or



class Solution {
    public int garbageCollection(String[] garbage, int[] travel) {
        int res = 0;

        for (String g : garbage) {
            res += g.length();
        }

        boolean m = false, p = false, g = false;

        for (int i = travel.length; i > 0; i--) {
            m = m || garbage[i].contains("M");
            p = p || garbage[i].contains("P");
            g = g || garbage[i].contains("G");

            res += travel[i-1] * ((m ? 1 : 0) + (p ? 1 : 0) + (g ? 1 : 0));
        }

        return res;      
    }
}


or


class Solution {
    public int garbageCollection(String[] gar, int[] travel) {
    int p=0, m=0, g=0, sum=0;

    for(int i=0; i<gar.length; i++){
        for(char ch : gar[i].toCharArray()){
            if(ch=='P') p = i;
            else if(ch=='M') m = i;
            else if(ch=='G') g = i;
            sum++;                         // add 1 min for every pick-up
        }
    }
    
    for(int i=1; i<travel.length; i++)
        travel[i] = travel[i]+travel[i-1];
    
	if(p!=0) sum+= travel[p-1];           // travel time till last P
    if(m!=0) sum += travel[m-1];          // travel time till last M
    if(g!=0) sum += travel[g-1];           // travel time till last G
    return sum;
}
}


