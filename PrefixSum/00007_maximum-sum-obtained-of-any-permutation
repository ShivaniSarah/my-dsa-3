https://leetcode.com/problems/maximum-sum-obtained-of-any-permutation/description/

1589. Maximum Sum Obtained of Any Permutation
Medium
Topics
Companies
Hint
We have an array of integers, nums, and an array of requests where requests[i] = [starti, endi]. The ith request asks for the sum of nums[starti] + nums[starti + 1] + ... + nums[endi - 1] + nums[endi]. Both starti and endi are 0-indexed.

Return the maximum total sum of all requests among all permutations of nums.

Since the answer may be too large, return it modulo 109 + 7.

 

Example 1:

Input: nums = [1,2,3,4,5], requests = [[1,3],[0,1]]
Output: 19
Explanation: One permutation of nums is [2,1,3,4,5] with the following result: 
requests[0] -> nums[1] + nums[2] + nums[3] = 1 + 3 + 4 = 8
requests[1] -> nums[0] + nums[1] = 2 + 1 = 3
Total sum: 8 + 3 = 11.
A permutation with a higher total sum is [3,5,4,2,1] with the following result:
requests[0] -> nums[1] + nums[2] + nums[3] = 5 + 4 + 2 = 11
requests[1] -> nums[0] + nums[1] = 3 + 5  = 8
Total sum: 11 + 8 = 19, which is the best that you can do.
Example 2:

Input: nums = [1,2,3,4,5,6], requests = [[0,1]]
Output: 11
Explanation: A permutation with the max total sum is [6,5,4,3,2,1] with request sums [11].
Example 3:

Input: nums = [1,2,3,4,5,10], requests = [[0,2],[1,3],[1,1]]
Output: 47
Explanation: A permutation with the max total sum is [4,10,5,3,2,1] with request sums [19,18,10].
 

Constraints:

n == nums.length
1 <= n <= 105
0 <= nums[i] <= 105
1 <= requests.length <= 105
requests[i].length == 2
0 <= starti <= endi < n



# java


class Solution {
  public int maxSumRangeQuery(int[] nums, int[][] requests) {
    final int MOD = 1_000_000_007;
    long ans = 0;
    // count[i] := the number of times nums[i] has been requested
    int[] count = new int[nums.length];

    for (int[] request : requests) {
      final int start = request[0];
      final int end = request[1];
      ++count[start];
      if (end + 1 < nums.length)
        --count[end + 1];
    }

    for (int i = 1; i < nums.length; ++i)
      count[i] += count[i - 1];

    Arrays.sort(count);
    Arrays.sort(nums);

    for (int i = 0; i < nums.length; ++i) {
      ans += (long) nums[i] * count[i];
      ans %= MOD;
    }

    return (int) ans;
  }
}


or



class Solution {
    public int maxSumRangeQuery(int[] nums, int[][] requests) {
        int n = nums.length;
        int[] d = new int[n];
        for (var req : requests) {
            int l = req[0], r = req[1];
            d[l]++;
            if (r + 1 < n) {
                d[r + 1]--;
            }
        }
        for (int i = 1; i < n; ++i) {
            d[i] += d[i - 1];
        }
        Arrays.sort(nums);
        Arrays.sort(d);
        final int mod = (int) 1e9 + 7;
        long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = (ans + 1L * nums[i] * d[i]) % mod;
        }
        return (int) ans;
    }
}



or



class Solution {
    private static final int MOD = 1000000007;

    public int maxSumRangeQuery(int[] nums, int[][] requests) {
        int n = nums.length;
        int[] frequency = new int[n];
        
        // Step 1: Use difference array to count frequencies
        for (int[] request : requests) {
            int start = request[0];
            int end = request[1];
            frequency[start]++;
            if (end + 1 < n) {
                frequency[end + 1]--;
            }
        }
        
        // Calculate prefix sum to get actual frequencies
        for (int i = 1; i < n; i++) {
            frequency[i] += frequency[i - 1];
        }

        // Step 2: Sort both arrays
        Arrays.sort(frequency);
        Arrays.sort(nums);

        // Step 3: Multiply and sum
        long totalSum = 0;
        for (int i = 0; i < n; i++) {
            totalSum += (long) frequency[i] * nums[i];
        }

        return (int) (totalSum % MOD);
    }
}


or



class Solution {
    private static final int MOD = 1000000007;

    public int maxSumRangeQuery(int[] nums, int[][] requests) {
        int n = nums.length;
        
        // Step 1: Count how many times each index is requested
        int[] frequency = new int[n];
        for (int[] request : requests) {
            int start = request[0];
            int end = request[1];
            for (int i = start; i <= end; i++) {
                frequency[i]++;
            }
        }

        // Step 2: Sort both arrays
        Arrays.sort(frequency);
        Arrays.sort(nums);

        // Step 3: Multiply and sum
        long totalSum = 0;
        for (int i = 0; i < n; i++) {
            totalSum += (long) frequency[i] * nums[i];
        }

        // Step 4: Return the result within the required range
        return (int) (totalSum % MOD);
    }
}



or



class Solution {
    public int maxSumRangeQuery(int[] nums, int[][] requests) {
        int N = nums.length;
        int[] hm = new int[N+1];
        long mod = 1_000_000_007;

        for(int[] req : requests) {
            int s = req[0];
            int e = req[1];

            hm[s]++;
            hm[e+1]--;
        }

        long[] arr = new long[N];
        long cur = 0;
        for(int i=0; i<N; i++) {
            cur += hm[i];
            arr[i] = cur;
        }

        Arrays.sort(arr);
        Arrays.sort(nums);

        long ans = 0;
        for(int i=N-1; i>=0; i--) {
            ans = (ans + arr[i]*(long)nums[i]) % mod;
        }
        return (int)ans;
    }
}



or


class Solution {
    public int maxSumRangeQuery(int[] arr, int[][] requests) {
        int n = arr.length;
        int pre[] = new int[n];
        for(var req : requests){
            int st = req[0];
            int end = req[1];
            pre[st]++;
            if(end+1<n) pre[end+1]--;
            
        }

        for(int i=1; i<n; i++){
            pre[i]+=pre[i-1];
        }
        
        Arrays.sort(pre);
        Arrays.sort(arr);
        
        long ans = 0;
        long mod = (long)1e9+7;
        for(int i=0; i<n; i++){
            ans = ans + (long)arr[i]*(long)pre[i];
            ans = ans%mod;
        }
        return (int)(ans%mod);
    }
}


or


class Solution {
    public int maxSumRangeQuery(int[] nums, int[][] requests) {
        //0, 1, 1,2,3
        long res = 0, mod = (long)1e9 + 7;
        int n = nums.length;
        int[] count = new int[n];
        
        for (int [] request : requests) {
            count[request[0]]++;
            if (request[1] + 1 < n) {
                count[request[1] + 1]--;
            }
        }
        
        for (int i = 1; i < n; i++) {
            count[i] += count[i - 1];
        }
        Arrays.sort(count);
        Arrays.sort(nums);
        
        for (int i = 0; i < n; i++) {
            res += (long)count[i] * nums[i];
        }
        
        return (int)(res % mod);
    }
}

//tc: O(nlogn)
//sc: O(nlogn)



or


