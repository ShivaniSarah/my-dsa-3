https://leetcode.com/problems/minimum-array-changes-to-make-differences-equal/description/

3224. Minimum Array Changes to Make Differences Equal
Medium
Topics
Companies
Hint
You are given an integer array nums of size n where n is even, and an integer k.

You can perform some changes on the array, where in one change you can replace any element in the array with any integer in the range from 0 to k.

You need to perform some changes (possibly none) such that the final array satisfies the following condition:

There exists an integer X such that abs(a[i] - a[n - i - 1]) = X for all (0 <= i < n).
Return the minimum number of changes required to satisfy the above condition.

 

Example 1:

Input: nums = [1,0,1,2,4,3], k = 4

Output: 2

Explanation:
We can perform the following changes:

Replace nums[1] by 2. The resulting array is nums = [1,2,1,2,4,3].
Replace nums[3] by 3. The resulting array is nums = [1,2,1,3,4,3].
The integer X will be 2.

Example 2:

Input: nums = [0,1,2,3,3,6,5,4], k = 6

Output: 2

Explanation:
We can perform the following operations:

Replace nums[3] by 0. The resulting array is nums = [0,1,2,0,3,6,5,4].
Replace nums[4] by 4. The resulting array is nums = [0,1,2,0,4,6,5,4].
The integer X will be 4.

 

Constraints:

2 <= n == nums.length <= 105
n is even.
0 <= nums[i] <= k <= 105



# java


class Solution {
    public int minChanges(int[] nums, int k) {
        int[] d = new int[k + 2];
        int n = nums.length;
        for (int i = 0; i < n / 2; ++i) {
            int x = Math.min(nums[i], nums[n - i - 1]);
            int y = Math.max(nums[i], nums[n - i - 1]);
            d[0] += 1;
            d[y - x] -= 1;
            d[y - x + 1] += 1;
            d[Math.max(y, k - x) + 1] -= 1;
            d[Math.max(y, k - x) + 1] += 2;
        }
        int ans = n, s = 0;
        for (int x : d) {
            s += x;
            ans = Math.min(ans, s);
        }
        return ans;
    }
}


or



class Solution {
    public int minChanges(int[] nums, int k) {
        int n = nums.length;
        Map<Integer, Integer> zeros = new HashMap<>();
        Map<Integer, Integer> twos = new HashMap<>();
        for (int i = 0; i < nums.length / 2; i++){
            zeros.put(Math.abs(nums[i] - nums[n-i-1]), zeros.getOrDefault(Math.abs(nums[i] - nums[n-i-1]), 0) + 1);
            int two = 0;
            if (nums[n-i-1] > nums[i]){
                int v = Math.max(nums[n-i-1] - 0, k - nums[i]);
                two = Math.max(two, v);
            } else {
                int v = Math.max(nums[i] - 0, k- nums[n-i-1]);
                two = Math.max(two, v);
            }
            twos.put(two, twos.getOrDefault(two, 0) + 1);
        }
        int ans = nums.length/2;

        //The accumulated variable that keeps track
        //number of pairs that require two operations
        int twoInterval = 0;
        for (int i = 0; i <= k; i++){
            if (twos.containsKey(i-1)){
                twoInterval += twos.get(i-1);
            }
            int total = nums.length/2;
            if (zeros.containsKey(i)){
                total -= zeros.get(i);
            }
            total += twoInterval;
            ans = Math.min(ans, total);
        }
        return ans;
    }
}



or


class Solution {
    public int minChanges(int[] nums, int k) {
        Map<Integer,Integer> s = new HashMap<>();
        int n=nums.length;
        int[] f = new int[k+1];
        for(int i=0;i<n/2;i++){
            s.put((int)Math.abs(nums[i]-nums[n-1-i]),s.getOrDefault(Math.abs(nums[i]-nums[n-1-i]),0)+1);
            int min = Math.min(nums[i],nums[n-i-1]);
            int max = Math.max(nums[i],nums[n-i-1]);
            f[Math.max(k-min,max)]++;
        }
        for(int i=k-1;i>=0;i--){
            f[i]+=f[i+1];
        }
        int ans=n;
        
        for(int x:s.keySet()){
            int one = f[x]-s.get(x);
            int two = n/2 - f[x];
            ans=Math.min(ans,one+two*2);
        }
        return ans;
    }
}


or


class Solution {
    public int minChanges(int[] nums, int k) {
        HashMap<Integer, Integer> hm = new HashMap<>();
        int[] differences = new int[nums.length / 2];
        int index = 0;

        // Calculating frequency differences
        for (int i = 0; i < nums.length / 2; i++) {
            int difference = Math.abs(nums[i] - nums[nums.length - i - 1]);
            hm.put(difference, hm.getOrDefault(difference, 0) + 1);
        }

        // Calculating the threshold values
        for (int i = 0; i < differences.length; i++) {
            int a = nums[i];
            int b = nums[nums.length - 1 - i];
            differences[i] = Math.max(Math.max(a, b), k - Math.min(a, b));
        }

        // Sorting the differences array
        Arrays.sort(differences);

        int ans = Integer.MAX_VALUE;

        // Iterating over the HashMap entries
        for (Map.Entry<Integer, Integer> entry : hm.entrySet()) {
            int key = entry.getKey();
            int value = differences.length - entry.getValue();

            int idx = lowerBound(differences, key);
            
            value += idx;
            ans = Math.min(ans, value);
        }
        return ans;
    }
    public int lowerBound(int[] sortedArray, int target) {
        int low = 0;
        int high = sortedArray.length;
        
        while (low < high) {
            int mid = low + (high - low) / 2;
            
            if (sortedArray[mid] < target) {
                low = mid + 1;
            } else {
                high = mid;
            }
        }
        
        return low;
    }
}



or



class Solution {

    private int[] cost;

    private void inc(int left, int right, int inc){
        if (left > right) return;
        cost[left] += inc;
        if (right+1 < cost.length) cost[right+1] -= inc;
    }
    private void complete(){
        for (int i = 1; i < cost.length; i++){
            cost[i] += cost[i-1];
        }

    }


    public int minChanges(int[] nums, int k) {
        cost = new int[k+1];
        int n = nums.length;
        for (int i = 0; i < n/2; i++){
            int min = Math.min(nums[i], nums[n-i-1]);
            int max = Math.max(nums[i], nums[n-i-1]);

            int oneCostX = Math.max(max, k-min);

            inc(0, oneCostX, 1);
            inc(oneCostX+1, k, 2);

            // we can obtain the max-min with only 0 operations, so decrement this range.
            inc(max-min, max-min, -1);
        }

        // compute prefix sums
        complete();


        // return the min value in the cost array.
        return Arrays.stream(cost).min().getAsInt();

    }
}



or


class Solution {
    public int minChanges(int[] nums, int k) {
        final int LEN = nums.length;
        int res = Integer.MAX_VALUE;
        
        int[] frequencyArray = new int[k + 1];
        int[] maxRange = new int[k + 1];

        for (int i = 0; i < LEN / 2; i++) {
            int min = Math.min(nums[i], nums[LEN - i - 1]);
            int max = Math.max(nums[i], nums[LEN - i - 1]);
            
            int diff = max - min;
            frequencyArray[diff]++;
            maxRange[Math.max(k - max, min) + diff]++;
        }

        for (int i = 1; i < k + 1; i++) {
            maxRange[i] += maxRange[i - 1];
        }

        for (int i = k; i >= 0; i--) {
            if(frequencyArray[i] == 0) continue;
            if (i != 0)
                res = Math.min(res, (2 * maxRange[i - 1]) + maxRange[k] - maxRange[i - 1] - frequencyArray[i]);
            else
                res = Math.min(res, maxRange[k] - frequencyArray[i]);
        }
        return res;
    }
}




or



class Solution {
    public int minChanges(int[] nums, int k) {
        Map<Integer,Integer> s = new HashMap<>();
        int n=nums.length;
        int[] f = new int[k+1];
        for(int i=0;i<n/2;i++){
            s.put((int)Math.abs(nums[i]-nums[n-1-i]),s.getOrDefault(Math.abs(nums[i]-nums[n-1-i]),0)+1);
            int min = Math.min(nums[i],nums[n-i-1]);
            int max = Math.max(nums[i],nums[n-i-1]);
            f[Math.max(k-min,max)]++;
        }
        for(int i=k-1;i>=0;i--){
            f[i]+=f[i+1];
        }
        int ans=n;
        
        for(int x:s.keySet()){
            int one = f[x]-s.get(x);
            int two = n/2 - f[x];
            ans=Math.min(ans,one+two*2);
        }
        return ans;
    }
}


