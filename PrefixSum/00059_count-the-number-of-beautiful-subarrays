https://leetcode.com/problems/count-the-number-of-beautiful-subarrays/description/


2588. Count the Number of Beautiful Subarrays
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums. In one operation, you can:

Choose two different indices i and j such that 0 <= i, j < nums.length.
Choose a non-negative integer k such that the kth bit (0-indexed) in the binary representation of nums[i] and nums[j] is 1.
Subtract 2k from nums[i] and nums[j].
A subarray is beautiful if it is possible to make all of its elements equal to 0 after applying the above operation any number of times.

Return the number of beautiful subarrays in the array nums.

A subarray is a contiguous non-empty sequence of elements within an array.

 

Example 1:

Input: nums = [4,3,1,2,4]
Output: 2
Explanation: There are 2 beautiful subarrays in nums: [4,3,1,2,4] and [4,3,1,2,4].
- We can make all elements in the subarray [3,1,2] equal to 0 in the following way:
  - Choose [3, 1, 2] and k = 1. Subtract 21 from both numbers. The subarray becomes [1, 1, 0].
  - Choose [1, 1, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 0, 0].
- We can make all elements in the subarray [4,3,1,2,4] equal to 0 in the following way:
  - Choose [4, 3, 1, 2, 4] and k = 2. Subtract 22 from both numbers. The subarray becomes [0, 3, 1, 2, 0].
  - Choose [0, 3, 1, 2, 0] and k = 0. Subtract 20 from both numbers. The subarray becomes [0, 2, 0, 2, 0].
  - Choose [0, 2, 0, 2, 0] and k = 1. Subtract 21 from both numbers. The subarray becomes [0, 0, 0, 0, 0].
Example 2:

Input: nums = [1,10,4]
Output: 0
Explanation: There are no beautiful subarrays in nums.
 

Constraints:

1 <= nums.length <= 105
0 <= nums[i] <= 106



# jav


class Solution {
  public long beautifulSubarrays(int[] nums) {
    // A subarray is beautiful if xor(subarray) = 0.
    long ans = 0;
    int prefix = 0;
    Map<Integer, Integer> prefixCount = new HashMap<>();
    prefixCount.put(0, 1);

    for (final int num : nums) {
      prefix ^= num;
      ans += prefixCount.getOrDefault(prefix, 0);
      prefixCount.merge(prefix, 1, Integer::sum);
    }

    return ans;
  }
}





or




class Solution {
    public long beautifulSubarrays(int[] nums) {
        Map<Integer, Integer> cnt = new HashMap<>();
        cnt.put(0, 1);
        long ans = 0;
        int mask = 0;
        for (int x : nums) {
            mask ^= x;
            ans += cnt.getOrDefault(mask, 0);
            cnt.merge(mask, 1, Integer::sum);
        }
        return ans;
    }
}



or



class Solution {
        public long beautifulSubarrays(int[] A) {
        HashMap<Integer, Integer> dp = new HashMap<>();
        dp.put(0, 1);
        int pre = 0;
        long res = 0;
        for (int a : A) {
            pre ^= a;
            int v = dp.getOrDefault(pre, 0);
            res += v;
            dp.put(pre, v + 1);
        }
        return res;
    }
}


or


class Solution {
    public long beautifulSubarrays(int[] nums) {
        int n=nums.length;
        long ans = 0;
        int b[] = new int[n];
        int m=0;
        HashMap<Integer,Integer> nm = new HashMap<>();
        b[0] = nums[0];
        for (int i = 1; i < n; i++)
        {
            b[i] = b[i - 1] ^ nums[i];
        }
        for(int i = 0; i < n; i++)
        {
            int xx = m^b[i];
            ans=ans+(!nm.containsKey(xx) ? 0 : ((long)nm.get(xx)));
            if(b[i] == m)
            {
                ans++;
            }
            if(nm.containsKey(b[i]))
            {
                nm.put(b[i], nm.get(b[i]) + 1);
            }
            else
            {
                nm.put(b[i], 1);
            }
        }
        return ans;

    }
}


or



class Solution {
    public long beautifulSubarrays(int[] nums) {
        int n = nums.length;
        int[] prefix = new int[n];
        prefix[0] = nums[0];
        for (int i = 1; i < n; i++) {
            prefix[i] = prefix[i - 1] ^ nums[i];
        }
        
        Map<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        
        long ret = 0;
        
        for (int i = 0; i < nums.length; i++) {
            int curr = prefix[i];
            ret += map.getOrDefault(curr, 0);
            map.put(curr, map.getOrDefault(curr, 0) + 1);
        }
        return ret;
    }   
}


or

// best

class Solution {
    public long beautifulSubarrays(int[] nums) {
        HashMap<Integer, Integer> map = new HashMap<>();
        map.put(0, 1);
        int xor = 0;
        long count = 0;
        for(int i = 0 ; i < nums.length ; i++) {
            xor ^= nums[i];
            if(map.containsKey(xor)) {
                count += map.get(xor);
            }
            map.put(xor, map.getOrDefault(xor, 0) + 1);
        }
        return count;
    }
}

