https://leetcode.com/problems/matrix-block-sum/description/


1314. Matrix Block Sum
Medium
Topics
Companies
Hint
Given a m x n matrix mat and an integer k, return a matrix answer where each answer[i][j] is the sum of all elements mat[r][c] for:

i - k <= r <= i + k,
j - k <= c <= j + k, and
(r, c) is a valid position in the matrix.
 

Example 1:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 1
Output: [[12,21,16],[27,45,33],[24,39,28]]
Example 2:

Input: mat = [[1,2,3],[4,5,6],[7,8,9]], k = 2
Output: [[45,45,45],[45,45,45],[45,45,45]]
 

Constraints:

m == mat.length
n == mat[i].length
1 <= m, n, k <= 100
1 <= mat[i][j] <= 100


# java



class Solution {
  public int[][] matrixBlockSum(int[][] mat, int k) {
    final int m = mat.length;
    final int n = mat[0].length;
    int[][] ans = new int[m][n];
    int[][] prefix = new int[m + 1][n + 1];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j)
        prefix[i + 1][j + 1] = mat[i][j] + prefix[i][j + 1] + prefix[i + 1][j] - prefix[i][j];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        final int r1 = Math.max(0, i - k) + 1;
        final int c1 = Math.max(0, j - k) + 1;
        final int r2 = Math.min(m - 1, i + k) + 1;
        final int c2 = Math.min(n - 1, j + k) + 1;
        ans[i][j] =
            prefix[r2][c2] - prefix[r2][c1 - 1] - prefix[r1 - 1][c2] + prefix[r1 - 1][c1 - 1];
      }

    return ans;
  }
}



or



class Solution {
    private int[][] pre;
    private int m;
    private int n;
    public int[][] matrixBlockSum(int[][] mat, int k) {
        int m = mat.length, n = mat[0].length;
        int[][] pre = new int[m + 1][n + 1];
        for (int i = 1; i < m + 1; ++i) {
            for (int j = 1; j < n + 1; ++j) {
                pre[i][j] = pre[i - 1][j] + pre[i][j - 1] + -pre[i - 1][j - 1] + mat[i - 1][j - 1];
            }
        }
        this.pre = pre;
        this.m = m;
        this.n = n;
        int[][] ans = new int[m][n];
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                ans[i][j] = get(i + k + 1, j + k + 1) - get(i + k + 1, j - k)
                    - get(i - k, j + k + 1) + get(i - k, j - k);
            }
        }
        return ans;
    }

    private int get(int i, int j) {
        i = Math.max(Math.min(m, i), 0);
        j = Math.max(Math.min(n, j), 0);
        return pre[i][j];
    }
}



or


class Solution {
    public int[][] matrixBlockSum(int[][] mat, int K) {
        int m = mat.length;
        int n = mat[0].length;
        
        int[][] ans = new int[m][n];
        
        int[][] t = new int[m + 1][n + 1];
        
        for (int i = 1; i < t.length; i++) {
            for (int j = 1; j < t[0].length; j++) {
                t[i][j] = t[i - 1][j] + t[i][j - 1] + mat[i - 1][j - 1] - t[i - 1][j - 1];
            }
        }
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int r1 = Math.max(0, i - K) + 1;
                int c1 = Math.max(0, j - K) + 1;
                int r2 = Math.min(m, i + K + 1);
                int c2 = Math.min(n, j + K + 1);
                ans[i][j] = t[r2][c2] - t[r1 - 1][c2] - t[r2][c1 - 1] + t[r1 - 1][c1 - 1];
            }
        }
        
        return ans;
    }
}



or



class Solution {
    public int[][] matrixBlockSum(int[][] mat, int K) {
        int m = mat.length, n = mat[0].length;
        int dp[][] = new int[m+1][n+1];
        int ans[][] = new int[m][n];
        computePrefix(dp,mat,m,n);
        
        for(int i=0;i<m;i++){
            for(int j=0;j<n;j++){
               int r1 = Math.max(0, i - K), c1 = Math.max(0, j - K);
               int r2 = Math.min(m - 1, i + K), c2 = Math.min(n - 1, j + K);   
               ans[i][j] = rangeSum(dp,r1,c1,r2,c2);
            }
        }
        return ans;
    }
    
    void computePrefix(int[][]dp,int[][]mat,int m, int n){
        for(int i=1;i<=m;i++)
            for(int j=1;j<=n;j++)
                dp[i][j] = dp[i-1][j] + dp[i][j-1] - dp[i-1][j-1] + mat[i-1][j-1];
    }
    
    int rangeSum(int[][]dp,int r1,int c1, int r2, int c2){
        r1++; c1++; r2++; c2++;
        return dp[r2][c2] - dp[r1-1][c2] - dp[r2][c1-1] + dp[r1-1][c1-1];
    }
}



or



class Solution {
    public int[][] matrixBlockSum(int[][] mat, int k) {
        int m = mat.length;
        int n = mat[0].length;
        int[][] sum = new int[m][n];
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(i == 0 && j == 0){
                    sum[i][j] = mat[i][j];
                }else if(i == 0){
                    sum[0][j] = sum[0][j - 1] + mat[i][j];
                }else if(j == 0){
                    sum[i][0] = sum[i - 1][j] + mat[i][j];
                }else{
                    sum[i][j] = mat[i][j] + sum[i][j - 1] + sum[i - 1][j] - sum[i - 1][j - 1];
                }
            }
        }
        int[][] result = new int[m][n];
        for(int i = 0; i < m; i++){
            int iLow = Math.max(i - k, 0);
            int iHigh = Math.min(i + k, m - 1);
            for(int j = 0; j < n; j++){
                int jLow = Math.max(j - k, 0);
                int jHigh = Math.min(j + k, n - 1);
                if(iLow == 0 && jLow == 0){
                    result[i][j] = sum[iHigh][jHigh];
                }
                else if(iLow == 0){
                    result[i][j] = sum[iHigh][jHigh] - sum[iHigh][jLow - 1];
                }
                else if(jLow == 0){
                    result[i][j] = sum[iHigh][jHigh] - sum[iLow - 1][jHigh];
                }else{
                    result[i][j] = sum[iHigh][jHigh] - sum[iHigh][jLow - 1] - sum[iLow - 1][jHigh] + sum[iLow - 1][jLow - 1];
                }
            }
        }
        return result;
    }
}



or



class Solution {
    public int[][] matrixBlockSum(int[][] mat, int k) {
        int n = mat.length, m = mat[0].length;
        int[][] pref = new int[n+1][m+1];
        
        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                pref[i+1][j+1] = mat[i][j] + pref[i][j+1] + pref[i+1][j] - pref[i][j];
            }
        }

        int[][] ans = new int[n][m];

        for(int i = 0;i < n;i++){
            for(int j = 0;j < m;j++){
                int x1 = Math.max(0, i-k), y1 = Math.max(0, j-k);
                int x2 = Math.min(mat.length-1, i+k), y2 = Math.min(mat[0].length-1, j+k);
                
                ans[i][j] = pref[x2+1][y2+1] - pref[x1][y2+1] - pref[x2+1][y1] + pref[x1][y1];
            }
        }

        return ans;
    }
}



or




class Solution {
    public int[][] matrixBlockSum(int[][] mat, int K) {
        int n = mat.length;
        int m = mat[0].length;
        
        int[][] ans = new int[n][m];
            
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                
                for(int x =-K; x<=K;x++){
                    int nr = i+x; //new row

                    if(nr>=0 && nr<n){ //if row + k is in bound 

                    //first  find range of col
                    int left = Math.max(j-K,0);//col can't be negative
                    int right = j+K+1;
                    ans[nr][left] += mat[i][j]; //left bound
                    if(right<m) ans[nr][right] -=mat[i][j]; // right bound
                    }
                }
            }
        }
        
            int sum=0;
            for(int i=0;i<n;i++){
                sum=0;
                for(int j=0; j<m;j++){
                    sum += ans[i][j];
                    ans[i][j]=sum;
                }
            }

        return ans;
    }
}


or



class Solution {
    public int[][] matrixBlockSum(int[][] mat, int k) {
        int n=mat.length;
        int m=mat[0].length;
        int ans[][]=new int[n][m];

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){

                int rowS=i-k;
                int rowE=i+k;
                int colS=j-k;
                int colE=j+k;

                if(rowS<0){
                    rowS=0;
                }
                if(rowE>=n){
                    rowE=n-1;
                }

                if(colS<0){
                    colS=0;
                }
                if(colE>=m){
                    colE=m-1;
                }

                ans[i][j]=sum(rowS,rowE,colS,colE,mat);
            }
        }
        return ans;
    }

    public int sum(int rowS,int rowE,int colS,int colE,int[][] mat){
        int sum=0;

        for(int i=rowS;i<=rowE;i++){
            for(int j=colS;j<=colE;j++){
                sum+=mat[i][j];
            }
        }
        return sum;
    }
}



or



class Solution {
    public int[][] matrixBlockSum(int[][] mat, int k) {
        int m = mat.length;
        int n = mat[0].length;
        int[][] res = new int[m][n];

        for (int i = 0; i < m; i++) {
            for(int j = 1; j < n; j++) {
                mat[i][j] += mat[i][j - 1];
            }
        }

        for (int j = 0; j < n; j++) {
            for(int i = 1; i < m; i++) {
                mat[i][j] += mat[i - 1][j];
            }
        }

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                res[i][j] = getSum(mat, i, j, k);
            }
        }

        return res;
    }
    private int getSum(int[][] mat, int i, int j, int k) {
        int m = mat.length;
        int n = mat[0].length;
        int endRow = Math.min(m - 1, i + k);
        int endCol = Math.min(n - 1, j + k);

        int sum = mat[endRow][endCol];
        int n1 = (j - k - 1 >= 0) ? mat[endRow][j - k - 1] : 0;
        int n2 = (i - k - 1 >= 0) ? mat[i - k - 1][endCol] : 0;
        int n3 = (j - k - 1 >= 0 && i - k - 1 >= 0) ? mat[i - k - 1][j - k - 1] : 0;

        return sum - n1 - n2 + n3;
    }
}



or


