https://leetcode.com/problems/maximum-subarray-min-product/description/


1856. Maximum Subarray Min-Product
Medium
Topics
Companies
Hint
The min-product of an array is equal to the minimum value in the array multiplied by the array's sum.

For example, the array [3,2,5] (minimum value is 2) has a min-product of 2 * (3+2+5) = 2 * 10 = 20.
Given an array of integers nums, return the maximum min-product of any non-empty subarray of nums. Since the answer may be large, return it modulo 109 + 7.

Note that the min-product should be maximized before performing the modulo operation. Testcases are generated such that the maximum min-product without modulo will fit in a 64-bit signed integer.

A subarray is a contiguous part of an array.

 

Example 1:

Input: nums = [1,2,3,2]
Output: 14
Explanation: The maximum min-product is achieved with the subarray [2,3,2] (minimum value is 2).
2 * (2+3+2) = 2 * 7 = 14.
Example 2:

Input: nums = [2,3,3,1,2]
Output: 18
Explanation: The maximum min-product is achieved with the subarray [3,3] (minimum value is 3).
3 * (3+3) = 3 * 6 = 18.
Example 3:

Input: nums = [3,1,5,6,4,2]
Output: 60
Explanation: The maximum min-product is achieved with the subarray [5,6,4] (minimum value is 4).
4 * (5+6+4) = 4 * 15 = 60.
 

Constraints:

1 <= nums.length <= 105
1 <= nums[i] <= 107

# java



class Solution {
  public int maxSumMinProduct(int[] nums) {
    final int MOD = 1_000_000_007;
    long ans = 0;
    Deque<Integer> stack = new ArrayDeque<>();
    long[] prefix = new long[nums.length + 1];

    for (int i = 0; i < nums.length; ++i)
      prefix[i + 1] = prefix[i] + nums[i];

    for (int i = 0; i <= nums.length; ++i) {
      while (!stack.isEmpty() && (i == nums.length || nums[stack.peek()] > nums[i])) {
        final int minVal = nums[stack.pop()];
        final long sum = stack.isEmpty() ? prefix[i] : prefix[i] - prefix[stack.peek() + 1];
        ans = Math.max(ans, minVal * sum);
      }
      stack.push(i);
    }

    return (int) (ans % MOD);
  }
}



or



class Solution {
    public int maxSumMinProduct(int[] nums) {
        int n = nums.length;
        int[] left = new int[n];
        int[] right = new int[n];
        Arrays.fill(left, -1);
        Arrays.fill(right, n);
        Deque<Integer> stk = new ArrayDeque<>();
        for (int i = 0; i < n; ++i) {
            while (!stk.isEmpty() && nums[stk.peek()] >= nums[i]) {
                stk.pop();
            }
            if (!stk.isEmpty()) {
                left[i] = stk.peek();
            }
            stk.push(i);
        }
        stk.clear();
        for (int i = n - 1; i >= 0; --i) {
            while (!stk.isEmpty() && nums[stk.peek()] > nums[i]) {
                stk.pop();
            }
            if (!stk.isEmpty()) {
                right[i] = stk.peek();
            }
            stk.push(i);
        }
        long[] s = new long[n + 1];
        for (int i = 0; i < n; ++i) {
            s[i + 1] = s[i] + nums[i];
        }
        long ans = 0;
        for (int i = 0; i < n; ++i) {
            ans = Math.max(ans, nums[i] * (s[right[i]] - s[left[i] + 1]));
        }
        final int mod = (int) 1e9 + 7;
        return (int) (ans % mod);
    }
}




or


class Solution {
    public int maxSumMinProduct(int[] n) {
    Stack<Integer> st = new Stack<>();
    long dp[] = new long[n.length + 1], res = 0;
    for (int i = 0; i < n.length; ++i)
       dp[i + 1] = dp[i] + n[i];
    for (int i = 0; i <= n.length; ++i) {
        while (!st.empty() && (i == n.length || n[st.peek()] > n[i])) {
            int j = st.pop();
            res = Math.max(res, (dp[i] - dp[st.empty() ? 0 : st.peek() + 1]) * n[j]);
        }
        st.push(i);
    }
    return (int)(res % 1000000007);
}
}



or



// prefix sum


class Solution {
    public int maxSumMinProduct(int[] a) {
        int n = a.length, M = 1_000_000_007;
        long res = 0L;

        //step 1; get prefixs um
        long [] psum = new long[n + 1];
        for(int i = 0; i < n; i++) psum[i+1] = psum[i] + a[i];

        //step 2: get the left and right bound of each sub-array using mono deceasing & increasing stack
        int[] s = new int[n];
        int top = -1; // mono-decreasing for right bound
        for (int i = 0; i <= n; s[++top] = i++)
            while (top >= 0 && (i == n || a[i] < a[s[top]])) {
                int min = a[s[top--]]; // get curMin value and poll current index out of stack, it's left and right bouldary is not determined
                int l = top == -1 ? 0 : s[top] + 1; // use the prev idx to get left bound, inclusive
                int r = i - 1; // right bound, inclusive
                res = Math.max(res, min * (psum[r+1] - psum[l]));
            }

        return (int) (res % M);
    }
}


or



