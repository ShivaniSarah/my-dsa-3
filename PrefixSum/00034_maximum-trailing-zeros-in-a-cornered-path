https://leetcode.com/problems/maximum-trailing-zeros-in-a-cornered-path/description/

2245. Maximum Trailing Zeros in a Cornered Path
Medium
Topics
Companies
Hint
You are given a 2D integer array grid of size m x n, where each cell contains a positive integer.

A cornered path is defined as a set of adjacent cells with at most one turn. More specifically, the path should exclusively move either horizontally or vertically up to the turn (if there is one), without returning to a previously visited cell. After the turn, the path will then move exclusively in the alternate direction: move vertically if it moved horizontally, and vice versa, also without returning to a previously visited cell.

The product of a path is defined as the product of all the values in the path.

Return the maximum number of trailing zeros in the product of a cornered path found in grid.

Note:

Horizontal movement means moving in either the left or right direction.
Vertical movement means moving in either the up or down direction.
 

Example 1:


Input: grid = [[23,17,15,3,20],[8,1,20,27,11],[9,4,6,2,21],[40,9,1,10,6],[22,7,4,5,3]]
Output: 3
Explanation: The grid on the left shows a valid cornered path.
It has a product of 15 * 20 * 6 * 1 * 10 = 18000 which has 3 trailing zeros.
It can be shown that this is the maximum trailing zeros in the product of a cornered path.

The grid in the middle is not a cornered path as it has more than one turn.
The grid on the right is not a cornered path as it requires a return to a previously visited cell.
Example 2:


Input: grid = [[4,3,2],[7,6,1],[8,8,8]]
Output: 0
Explanation: The grid is shown in the figure above.
There are no cornered paths in the grid that result in a product with a trailing zero.
 

Constraints:

m == grid.length
n == grid[i].length
1 <= m, n <= 105
1 <= m * n <= 105
1 <= grid[i][j] <= 1000



# java



class Solution {
  public int maxTrailingZeros(int[][] grid) {
    final int m = grid.length;
    final int n = grid[0].length;
    // leftPrefix2[i][j] := the number of 2 in grid[i][0..j]
    // leftPrefix5[i][j] := the number of 5 in grid[i][0..j]
    // topPrefix2[i][j] := the number of 2 in grid[0..i][j]
    // topPrefix5[i][j] := the number of 5 in grid[0..i][j]
    int[][] leftPrefix2 = new int[m][n];
    int[][] leftPrefix5 = new int[m][n];
    int[][] topPrefix2 = new int[m][n];
    int[][] topPrefix5 = new int[m][n];

    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        leftPrefix2[i][j] = getCount(grid[i][j], 2);
        leftPrefix5[i][j] = getCount(grid[i][j], 5);
        if (j > 0) {
          leftPrefix2[i][j] += leftPrefix2[i][j - 1];
          leftPrefix5[i][j] += leftPrefix5[i][j - 1];
        }
      }

    for (int j = 0; j < n; ++j)
      for (int i = 0; i < m; ++i) {
        topPrefix2[i][j] = getCount(grid[i][j], 2);
        topPrefix5[i][j] = getCount(grid[i][j], 5);
        if (i > 0) {
          topPrefix2[i][j] += topPrefix2[i - 1][j];
          topPrefix5[i][j] += topPrefix5[i - 1][j];
        }
      }

    int ans = 0;
    for (int i = 0; i < m; ++i)
      for (int j = 0; j < n; ++j) {
        final int curr2 = getCount(grid[i][j], 2);
        final int curr5 = getCount(grid[i][j], 5);
        final int l2 = leftPrefix2[i][j];
        final int l5 = leftPrefix5[i][j];
        final int r2 = leftPrefix2[i][n - 1] - (j > 0 ? leftPrefix2[i][j - 1] : 0);
        final int r5 = leftPrefix5[i][n - 1] - (j > 0 ? leftPrefix5[i][j - 1] : 0);
        final int t2 = topPrefix2[i][j];
        final int t5 = topPrefix5[i][j];
        final int d2 = topPrefix2[m - 1][j] - (i > 0 ? topPrefix2[i - 1][j] : 0);
        final int d5 = topPrefix5[m - 1][j] - (i > 0 ? topPrefix5[i - 1][j] : 0);
        ans = Math.max(ans, Math.max(Math.max(Math.min(l2 + t2 - curr2, l5 + t5 - curr5),
                                              Math.min(r2 + t2 - curr2, r5 + t5 - curr5)),
                                     Math.max(Math.min(l2 + d2 - curr2, l5 + d5 - curr5),
                                              Math.min(r2 + d2 - curr2, r5 + d5 - curr5))));
      }

    return ans;
  }

  private int getCount(int num, int factor) {
    int count = 0;
    while (num % factor == 0) {
      num /= factor;
      ++count;
    }
    return count;
  }
}


or



class Solution {
    public int maxTrailingZeros(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] r2 = new int[m + 1][n + 1];
        int[][] c2 = new int[m + 1][n + 1];
        int[][] r5 = new int[m + 1][n + 1];
        int[][] c5 = new int[m + 1][n + 1];
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                int x = grid[i - 1][j - 1];
                int s2 = 0, s5 = 0;
                for (; x % 2 == 0; x /= 2) {
                    ++s2;
                }
                for (; x % 5 == 0; x /= 5) {
                    ++s5;
                }
                r2[i][j] = r2[i][j - 1] + s2;
                c2[i][j] = c2[i - 1][j] + s2;
                r5[i][j] = r5[i][j - 1] + s5;
                c5[i][j] = c5[i - 1][j] + s5;
            }
        }
        int ans = 0;
        for (int i = 1; i <= m; ++i) {
            for (int j = 1; j <= n; ++j) {
                int a = Math.min(r2[i][j] + c2[i - 1][j], r5[i][j] + c5[i - 1][j]);
                int b = Math.min(r2[i][j] + c2[m][j] - c2[i][j], r5[i][j] + c5[m][j] - c5[i][j]);
                int c = Math.min(r2[i][n] - r2[i][j] + c2[i][j], r5[i][n] - r5[i][j] + c5[i][j]);
                int d = Math.min(r2[i][n] - r2[i][j - 1] + c2[m][j] - c2[i][j],
                    r5[i][n] - r5[i][j - 1] + c5[m][j] - c5[i][j]);
                ans = Math.max(ans, Math.max(a, Math.max(b, Math.max(c, d))));
            }
        }
        return ans;
    }
}



or



class Solution {
    public int maxTrailingZeros(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int[][][] dph = new int[m][n][3];
        int[][][] dpv = new int[m][n][3];
        int hmax0 = 0;
        int vmax0 = 0;
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int curr = grid[i][j];
                int two = 0;
                int five = 0;
                if (j >= 1) {
                    two = dph[i][j-1][1];
                    five = dph[i][j-1][2];
                }
                while (curr > 0 && curr % 2 == 0) {
                    two++;
                    curr /= 2;
                }
                while (curr > 0 && curr % 5 == 0) {
                    five++;
                    curr /= 5;
                }
                dph[i][j][1] = two;
                dph[i][j][2] = five;
                dph[i][j][0] = Math.min(dph[i][j][1], dph[i][j][2]);
            }
            hmax0 = Math.max(hmax0, dph[i][n-1][0]);
        }
        
        for (int j = 0; j < n; j++) {
            for (int i = 0; i < m; i++) {
                int curr = grid[i][j];
                int two = 0;
                int five = 0;
                if (i >= 1) {
                    two = dpv[i-1][j][1];
                    five = dpv[i-1][j][2];
                }
                while (curr > 0 && curr % 2 == 0) {
                    two++;
                    curr /= 2;
                }
                while (curr > 0 && curr % 5 == 0) {
                    five++;
                    curr /= 5;
                }
                dpv[i][j][1] = two;
                dpv[i][j][2] = five;
                dpv[i][j][0] = Math.min(dpv[i][j][1], dpv[i][j][2]);
            }
            vmax0 = Math.max(vmax0, dpv[m-1][j][0]);
        }
		
        int res = Math.max(vmax0, hmax0);

        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int otwo = dph[i][j][1];
                int ofive = dph[i][j][2];
                
                int res1 = 0;
                if (i >= 1) {
                    int ntwo = otwo + dpv[i-1][j][1];
                    int nfive = ofive + dpv[i-1][j][2];
                    res1 = Math.min(ntwo, nfive);
                }
                
                int res2 = 0;
                if (i < m - 1) {
                    int ntwo = otwo + dpv[m-1][j][1] - dpv[i][j][1];
                    int nfive = ofive + dpv[m-1][j][2] - dpv[i][j][2];
                    res2 = Math.min(ntwo, nfive);
                }
                res = Math.max(res, res1);
                res = Math.max(res, res2);
            }
			
			for (int j = n - 1; j >= 0; j--) {
                int otwo = 0;
                int ofive = 0;
                if (j >= 1) {
                    otwo = dph[i][n-1][1] - dph[i][j-1][1];
                    ofive = dph[i][n-1][2] - dph[i][j-1][2];
                } else {
                    otwo = dph[i][n-1][1];
                    ofive = dph[i][n-1][2];
                }
                
                int res1 = 0;
                if (i >= 1) {
                    int ntwo = otwo + dpv[i-1][j][1];
                    int nfive = ofive + dpv[i-1][j][2];
                    res1 = Math.min(ntwo, nfive);
                }
                
                int res2 = 0;
                if (i < m - 1) {
                    int ntwo = otwo + dpv[m-1][j][1] - dpv[i][j][1];
                    int nfive = ofive + dpv[m-1][j][2] - dpv[i][j][2];
                    res2 = Math.min(ntwo, nfive);
                }
                
                res = Math.max(res, res1);
                res = Math.max(res, res2);
            }
        }
		
        return res;
    }
}



or



class Solution {
    public int maxTrailingZeros(int[][] grid) {
    
        // calculate how many 5 and 2 grid[i][j] has
        int[][] five = new int[grid.length][grid[0].length];
        int[][] two = new int[grid.length][grid[0].length];
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                int origin = grid[i][j];
                while (origin % 5 == 0 && origin != 0) {
                    five[i][j] += 1;
                    origin = origin / 5;
                }
                origin = grid[i][j];
                while (origin % 2 == 0 && origin != 0) {
                    two[i][j] += 1;
                    origin = origin / 2;
                }
            }
        }
        // use four dp array to save the sum of 5 and 2 in two directions
        int[][] dp51 = new int[grid.length][grid[0].length];
        int[][] dp21 = new int[grid.length][grid[0].length];
        int[][] dp52 = new int[grid.length][grid[0].length];
        int[][] dp22 = new int[grid.length][grid[0].length];

        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                if (i == 0) {
                    dp51[i][j] = five[i][j];
                    dp21[i][j] = two[i][j];
                } else {
                    dp51[i][j] = dp51[i - 1][j] + five[i][j];
                    dp21[i][j] = dp21[i - 1][j] + two[i][j];
                }
                if (j == 0) {
                    dp52[i][j] = five[i][j];
                    dp22[i][j] = two[i][j];
                } else {
                    dp52[i][j] = dp52[i][j - 1] + five[i][j];
                    dp22[i][j] = dp22[i][j - 1] + two[i][j];
                }
            }
        }
        
        //we have 4 choices and combine any of 2
        int max = 0;
        for (int i = 0; i < grid.length; i++) {
            for (int j = 0; j < grid[0].length; j++) {
                int fiveNum = dp51[i][j];
                int twoNum = dp21[i][j];

                int fiveNum2 = dp52[i][j];
                int twoNum2 = dp22[i][j];

                int fiveNum1 = dp51[grid.length - 1][j] - dp51[i][j] + five[i][j];
                int twoNum1 = dp21[grid.length - 1][j] - dp21[i][j] + two[i][j];

                int fiveNum3 = dp52[i][grid[0].length - 1] - dp52[i][j] + five[i][j];
                int twoNum3 = dp22[i][grid[0].length - 1] - dp22[i][j] + two[i][j];


                max = Math.max(max, Math.min(fiveNum + fiveNum1 - five[i][j], twoNum + twoNum1 - two[i][j]));
                max = Math.max(max, Math.min(fiveNum + fiveNum2 - five[i][j], twoNum + twoNum2 - two[i][j]));
                max = Math.max(max, Math.min(fiveNum + fiveNum3 - five[i][j], twoNum + twoNum3 - two[i][j]));
                max = Math.max(max, Math.min(fiveNum2 + fiveNum1 - five[i][j], twoNum2 + twoNum1 - two[i][j]));
                max = Math.max(max, Math.min(fiveNum3 + fiveNum1 - five[i][j], twoNum3 + twoNum1 - two[i][j]));
                max = Math.max(max, Math.min(fiveNum2 + fiveNum3 - five[i][j], twoNum2 + twoNum3 - two[i][j]));
            }
        }
        return max;
    }

}


or



class Solution {
    public int maxTrailingZeros(int[][] grid) {
        // find path with most matching 5 & 2 divisor
        int m = grid.length;
        int n = grid[0].length;
        
        Node[][] rows = new Node[m][n];
        Node[][] cols = new Node[m][n];
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int five = getFive(grid[i][j]);
                int two = getTwo(grid[i][j]);
                Node nodeR = new Node(five, two);
                Node nodeC = new Node(five, two);
                
                if (i > 0) {
                    nodeC.five = nodeC.five + cols[i - 1][j].five;
                    nodeC.two = nodeC.two + cols[i - 1][j].two;
                }
                
                cols[i][j] = nodeC;
                
                if (j > 0) {
                    nodeR.five = nodeR.five + rows[i][j - 1].five;
                    nodeR.two = nodeR.two + rows[i][j - 1].two;
                }
                
                rows[i][j] = nodeR;
            }
        }
        
        int max = 0;
        
        for (int i = 0; i < m; i++) {
            for (int j = 0; j < n; j++) {
                int rowLeft5 = j - 1 < 0 ? 0 : rows[i][j - 1].five;
                int rowLeft2 = j - 1 < 0 ? 0 : rows[i][j - 1].two;
                int rowRight5 = rows[i][n - 1].five - rows[i][j].five;
                int rowRight2 = rows[i][n - 1].two - rows[i][j].two;
                
                int colUp5 = i - 1 < 0 ? 0 : cols[i - 1][j].five;
                int colUp2 = i - 1 < 0 ? 0 : cols[i - 1][j].two;
                int colDown5 = cols[m - 1][j].five - cols[i][j].five;
                int colDown2 = cols[m - 1][j].two - cols[i][j].two;
                
                int cur = grid[i][j];
                
                max = Math.max(max, Math.min(rowLeft5 + colUp5 + getFive(cur), rowLeft2 + colUp2 + getTwo(cur)));
                max = Math.max(max, Math.min(rowLeft5 + colDown5 + getFive(cur), rowLeft2 + colDown2 + getTwo(cur)));
                max = Math.max(max, Math.min(rowRight5 + colUp5 + getFive(cur), rowRight2 + colUp2 + getTwo(cur)));
                max = Math.max(max, Math.min(rowRight5 + colDown5 + getFive(cur), rowRight2 + colDown2 + getTwo(cur)));
            }
        }
        
        return max;
    }
    
    private int getTwo(int x) {
        int res = 0;
        
        while (x % 2 == 0) {
            res++;
            x /= 2;
        }
        return res;
    }
    
    private int getFive(int x) {
        int res = 0;
        
        while (x % 5 == 0) {
            res++;
            x /= 5;
        }
        return res;
    }
}

class Node {
    int five;
    int two;
    
    public Node(int five, int two) {
        this.five = five;
        this.two = two;
    }
}



or



class Solution {
    public int maxTrailingZeros(int[][] grid) {
        int ans = 0;
        for (int i = 0; i < 4; i++){
            ans = Math.max(ans, solve(grid));
            grid = rotate(grid);
        }
        return ans;
    }

    private int solve(int[][] grid){
        int n = grid[0].length, m = grid.length, ans = 0;
        int[][] fcol = new int[m + 1][n];
        int[][] tcol = new int[m + 1][n];
        int[][] frow = new int[n + 1][m];
        int[][] trow = new int[n + 1][m];
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                int t = count(grid[i][j], 2);
                int f = count(grid[i][j], 5);
                fcol[i + 1][j] += fcol[i][j] + f;
                tcol[i + 1][j] += tcol[i][j] + t;
                frow[j + 1][i] += frow[j][i] + f;
                trow[j + 1][i] += trow[j][i] + t;
            }
        }
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                int rowTwo = trow[j + 1][i];
                int rowFive= frow[j + 1][i];
                int colTwo = tcol[m][j] - tcol[i + 1][j];
                int colFive= fcol[m][j] - fcol[i + 1][j];
                ans = Math.max(ans, Math.min(rowTwo + colTwo, rowFive + colFive));
            }
        }

        return ans;
    }

    private int count(int n, int w){
        int count = 0;
        while(n % w == 0){
            count++;
            n /= w;
        }
        return count;
    }

    private int[][] rotate(int[][] grid){
        int n = grid[0].length, m = grid.length;
        int[][] next = new int[n][m];
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                next[j][m - 1 - i] = grid[i][j];
            }
        }
        return next;
    }
}



or


