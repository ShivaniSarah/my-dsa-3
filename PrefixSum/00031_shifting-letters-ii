https://leetcode.com/problems/shifting-letters-ii/description/


2381. Shifting Letters II
Medium
Topics
Companies
Hint
You are given a string s of lowercase English letters and a 2D integer array shifts where shifts[i] = [starti, endi, directioni]. For every i, shift the characters in s from the index starti to the index endi (inclusive) forward if directioni = 1, or shift the characters backward if directioni = 0.

Shifting a character forward means replacing it with the next letter in the alphabet (wrapping around so that 'z' becomes 'a'). Similarly, shifting a character backward means replacing it with the previous letter in the alphabet (wrapping around so that 'a' becomes 'z').

Return the final string after all such shifts to s are applied.

 

Example 1:

Input: s = "abc", shifts = [[0,1,0],[1,2,1],[0,2,1]]
Output: "ace"
Explanation: Firstly, shift the characters from index 0 to index 1 backward. Now s = "zac".
Secondly, shift the characters from index 1 to index 2 forward. Now s = "zbd".
Finally, shift the characters from index 0 to index 2 forward. Now s = "ace".
Example 2:

Input: s = "dztz", shifts = [[0,0,0],[1,1,1]]
Output: "catz"
Explanation: Firstly, shift the characters from index 0 to index 0 backward. Now s = "cztz".
Finally, shift the characters from index 1 to index 1 forward. Now s = "catz".
 

Constraints:

1 <= s.length, shifts.length <= 5 * 104
shifts[i].length == 3
0 <= starti <= endi < s.length
0 <= directioni <= 1
s consists of lowercase English letters.



# java


class Solution {
  public String shiftingLetters(String s, int[][] shifts) {
    StringBuilder sb = new StringBuilder();
    int currShift = 0;
    int[] line = new int[s.length() + 1];

    for (int[] shift : shifts) {
      final int start = shift[0];
      final int end = shift[1];
      final int direction = shift[2];
      final int diff = direction == 1 ? 1 : -1;
      line[start] += diff;
      line[end + 1] -= diff;
    }

    for (int i = 0; i < s.length(); ++i) {
      currShift = (currShift + line[i]) % 26;
      final int num = (s.charAt(i) - 'a' + currShift + 26) % 26;
      sb.append((char) ('a' + num));
    }

    return sb.toString();
  }
}



or



class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        int n = s.length();
        int[] d = new int[n + 1];
        for (int[] e : shifts) {
            if (e[2] == 0) {
                e[2]--;
            }
            d[e[0]] += e[2];
            d[e[1] + 1] -= e[2];
        }
        for (int i = 1; i <= n; ++i) {
            d[i] += d[i - 1];
        }
        StringBuilder ans = new StringBuilder();
        for (int i = 0; i < n; ++i) {
            int j = (s.charAt(i) - 'a' + d[i] % 26 + 26) % 26;
            ans.append((char) ('a' + j));
        }
        return ans.toString();
    }
}



or



class Solution {

    public String shiftingLetters(String s, int[][] shifts) {
        int n = s.length();
        int[] diffArray = new int[n]; // Initialize a difference array with all elements set to 0.

        // Process each shift operation
        for (int[] shift : shifts) {
            if (shift[2] == 1) { // If direction is forward (1)
                diffArray[shift[0]]++; // Increment at the start index
                if (shift[1] + 1 < n) {
                    diffArray[shift[1] + 1]--; // Decrement at the end+1 index
                }
            } else { // If direction is backward (0)
                diffArray[shift[0]]--; // Decrement at the start index
                if (shift[1] + 1 < n) {
                    diffArray[shift[1] + 1]++; // Increment at the end+1 index
                }
            }
        }

        StringBuilder result = new StringBuilder(s);
        int numberOfShifts = 0;

        // Apply the shifts to the string
        for (int i = 0; i < n; i++) {
            numberOfShifts = (numberOfShifts + diffArray[i]) % 26; // Update cumulative shifts, keeping within the alphabet range
            if (numberOfShifts < 0) numberOfShifts += 26; // Ensure non-negative shifts

            // Calculate the new character by shifting `s[i]`
            char shiftedChar = (char) ('a' +
                ((s.charAt(i) - 'a' + numberOfShifts) % 26));
            result.setCharAt(i, shiftedChar);
        }

        return result.toString();
    }
}



or



class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        int n = s.length();
        int[] shift = new int[n + 1];

        for (int[] shiftOp : shifts) {
            int start = shiftOp[0], end = shiftOp[1], direction = shiftOp[2];
            shift[start] += (direction == 1 ? 1 : -1);
            if (end + 1 < n) shift[end + 1] -= (direction == 1 ? 1 : -1);
        }

        int currentShift = 0;
        for (int i = 0; i < n; ++i) {
            currentShift += shift[i];
            shift[i] = currentShift;
        }

        StringBuilder result = new StringBuilder(s);
        for (int i = 0; i < n; ++i) {
            int netShift = (shift[i] % 26 + 26) % 26;
            result.setCharAt(i, (char) ('a' + (s.charAt(i) - 'a' + netShift) % 26));
        }

        return result.toString();
    }
}



or



class Solution {
      public String shiftingLetters(String s, int[][] shifts) {
        char[] ch = s.toCharArray();
        int[] count = new int[s.length()+1];
        
        for(int[] shift : shifts){
            int value = shift[2] == 1 ? 1 : -1;
            count[shift[0]] += value;
            count[shift[1] + 1] -= value;
        }
        
        int sum = 0;
        for(int i = 0; i < count.length - 1; i++){
            sum += count[i];
            int newChar = ((ch[i] - 'a') + sum) % 26;
            if(newChar < 0) newChar+= 26;
            ch[i] =  (char)('a' + newChar);
        }
        
        return String.valueOf(ch);
    }
}



or


class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        char[] stringToChar = s.toCharArray();
        int[] finalShift = new int[stringToChar.length+1];
        for(int i=0;i<shifts.length;i++){
            finalShift[shifts[i][0]] = shifts[i][2]==1?finalShift[shifts[i][0]]+1:finalShift[shifts[i][0]]-1;
            finalShift[shifts[i][1]+1] = shifts[i][2]==1?finalShift[shifts[i][1]+1]-1:finalShift[shifts[i][1]+1]+1;
        }
        int prefixSum=0;
        for(int i=0;i<stringToChar.length;i++){
            prefixSum+=finalShift[i];
            int offset = ((stringToChar[i]-'a')+prefixSum)%26;
            if(offset<0) stringToChar[i] = (char) (26+offset+'a');
            else stringToChar[i] = (char) (offset+'a');
        }
        return new String(stringToChar);
    }
}



or


class Solution {
    public String shiftingLetters(String s, int[][] Q) {
        int n = s.length();
        int[] A = new int[n];
        for (int[] it : Q) {
            int l = it[0];
            int r = it[1];
            int t = it[2];
            if (t == 1) {
                A[l] += 1;
                if (r + 1 < n) {
                    A[r + 1] -= 1;
                }
            } else {
                A[l] -= 1;
                if (r + 1 < n) {
                    A[r + 1] += 1;
                }
            }
        }
        for (int i = 1; i < n; ++i) {
            A[i] += A[i - 1];
        }
        char[] chars = s.toCharArray();
        for (int i = 0; i < n; ++i) {
            int shift = (A[i] % 26 + 26) % 26; 
            int ch = chars[i] - 'a';
            ch = (ch + shift) % 26;
            chars[i] = (char) ('a' + ch);
        }
        return new String(chars);
    }
}


or



class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        int n = s.length();
        int[] dp = new int[n + 1];

        for (int[] shift : shifts) {
            int start = shift[0];
            int end = shift[1];
            int direction = shift[2];

            if (direction == 1) {
                dp[start]++;
                dp[end + 1]--;
            } else {
                dp[start]--;
                dp[end + 1]++;
            }
        }

        int prefixSum = 0;
        char[] result = s.toCharArray();
        for (int i = 0; i < n; i++) {
            prefixSum += dp[i];
            int currentPos = result[i] - 'a';
            int newPos = (currentPos + prefixSum % 26 + 26) % 26;
            result[i] = (char) ('a' + newPos);
        }

        return new String(result);
    }
}



or



class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        int n = s.length();
        long[] prefixSum = new long[n + 1];
        
        for (int[] shift : shifts) {
            int start = shift[0];
            int end = shift[1];
            int direction = shift[2];
            
            int value = (direction == 1) ? 1 : -1;
            
            prefixSum[start] += value;
            prefixSum[end + 1] -= value;
        }
        
        for (int i = 1; i < n; i++) {
            prefixSum[i] += prefixSum[i-1];
        }
        
        char[] chars = s.toCharArray();
        for (int i = 0; i < n; i++) {
            long totalShifts = prefixSum[i];
            
            totalShifts = ((totalShifts % 26) + 26) % 26;
            
            int newChar = (chars[i] - 'a' + (int)totalShifts) % 26;
            chars[i] = (char)('a' + newChar);
        }
        
        return new String(chars);
    }
}


or



class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        int n=s.length();

        // Convert CHAR to INT values (0-25)
        int[] arr=new int[n];
        for(int i=0; i<n; i++){
            arr[i]=s.charAt(i)-'a';
        }

        // Create difference array for shifts
        int[] map=new int[n+1];
        for(int i=0; i<shifts.length; i++){
            int val=(shifts[i][2]==0)?-1:1;
            map[ shifts[i][0] ] +=val;  //Start
            map[ shifts[i][1]+1 ] +=-1*val;  //End + 1          
        }

        //Shift the INT value for the char 
        int prefixSum=0;
        for(int i=0; i<n; i++){
            prefixSum+=map[i];         
            int charAscii=(arr[i]+prefixSum)%26;
            charAscii=(charAscii+26)%26;
            
            arr[i]=charAscii;
        }


        //Convert INT to CHAR by adding a'Ascii
        StringBuilder sb=new StringBuilder();
        for(int i=0; i<n; i++){
            char ch = (char) (arr[i]+'a');
            sb.append(ch);
        }

        return sb.toString();  
    }
}


or



class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        int n=s.length();

        // Convert CHAR to INT values (0-25)
        int[] arr=new int[n];
        for(int i=0; i<n; i++){
            arr[i]=s.charAt(i)-'a';
        }


        //Store the shifs into Map
        Map<String, Integer> map=new HashMap<>();        
        for(int i=0; i<shifts.length; i++){
            String key= shifts[i][0]+"-"+shifts[i][1];
            int val=(shifts[i][2]==0)?-1:1;
            map.put(key, (map.getOrDefault(key,0)+val)%26);
        }


        //Shift the value in array "arr"
        for(Map.Entry<String, Integer> enty:map.entrySet()){
            String[] str=enty.getKey().split("-");
            int srtIdx=Integer.parseInt(str[0]);
            int endIdx=Integer.parseInt(str[1]);

            int val=enty.getValue();

            for(int j=srtIdx; j<=endIdx; j++){
                int charAscii=(arr[j]+val+26)%26;
                arr[j]=charAscii;
            }

        }


        //Convert ASCII to CHAR
        StringBuilder sb=new StringBuilder();
        for(int i=0; i<n; i++){
            char ch = (char) (arr[i]+'a');
            sb.append(ch);
        }


        return sb.toString();        
    }
}



or


class Solution {
    public String shiftingLetters(String s, int[][] shifts) {
        int n = s.length();
        int[] diff = new int[n + 1];

        // Apply shifts using the difference array
        for (int[] shift : shifts) {
            int start = shift[0], end = shift[1], direction = shift[2];
            diff[start] += direction == 1 ? 1 : -1;
            diff[end + 1] -= direction == 1 ? 1 : -1;
        }

        // Compute the prefix sum for the final shifts
        int currentShift = 0;
        StringBuilder result = new StringBuilder();
        for (int i = 0; i < n; i++) {
            currentShift += diff[i];
            int shifted = (s.charAt(i) - 'a' + currentShift) % 26;
            if (shifted < 0) shifted += 26; // Handle negative wraparound
            result.append((char) ('a' + shifted));
        }

        return result.toString();
    }
}


or


