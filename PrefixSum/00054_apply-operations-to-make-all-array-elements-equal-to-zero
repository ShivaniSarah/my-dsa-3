https://leetcode.com/problems/apply-operations-to-make-all-array-elements-equal-to-zero/


2772. Apply Operations to Make All Array Elements Equal to Zero
Medium
Topics
Companies
Hint
You are given a 0-indexed integer array nums and a positive integer k.

You can apply the following operation on the array any number of times:

Choose any subarray of size k from the array and decrease all its elements by 1.
Return true if you can make all the array elements equal to 0, or false otherwise.

A subarray is a contiguous non-empty part of an array.

 

Example 1:

Input: nums = [2,2,3,1,1,0], k = 3
Output: true
Explanation: We can do the following operations:
- Choose the subarray [2,2,3]. The resulting array will be nums = [1,1,2,1,1,0].
- Choose the subarray [2,1,1]. The resulting array will be nums = [1,1,1,0,0,0].
- Choose the subarray [1,1,1]. The resulting array will be nums = [0,0,0,0,0,0].
Example 2:

Input: nums = [1,3,1,1], k = 2
Output: false
Explanation: It is not possible to make all the array elements equal to 0.
 

Constraints:

1 <= k <= nums.length <= 105
0 <= nums[i] <= 106



# java



class Solution {
    public boolean checkArray(int[] nums, int k) {
        int n = nums.length;
        int[] d = new int[n + 1];
        int s = 0;
        for (int i = 0; i < n; ++i) {
            s += d[i];
            nums[i] += s;
            if (nums[i] == 0) {
                continue;
            }
            if (nums[i] < 0 || i + k > n) {
                return false;
            }
            s -= nums[i];
            d[i + k] += nums[i];
        }
        return true;
    }
}



or



class Solution {
  public boolean checkArray(int[] nums, int k) {
    if (k == 1)
      return true;

    int needDecrease = 0;
    // Store nums[i - k + 1..i] with decreasing nums[i - k + 1].
    Deque<Integer> dq = new ArrayDeque<>();

    for (int i = 0; i < nums.length; ++i) {
      if (i >= k)
        needDecrease -= dq.pollFirst();
      if (nums[i] < needDecrease)
        return false;
      final int decreasedNum = nums[i] - needDecrease;
      dq.offerLast(decreasedNum);
      needDecrease += decreasedNum;
    }

    return dq.getLast() == 0;
  }
}



or


class Solution {
        public boolean checkArray(int[] A, int k) {
        int cur = 0, n = A.length;
        for (int i = 0; i < n; ++i) {
            if (cur > A[i])
                return false;
            A[i] -= cur;
            cur += A[i];
            if (i >= k - 1)
                cur -= A[i - k + 1];
        }
        return cur == 0;
    }
}


or


class Solution {
    public boolean checkArray(int[] nums, int k) {
        int n = nums.length; //size of array
        int c = 0;
        for (int i = 0; i <= n-k; i++) { //iterating through array
            if(nums[i] == 0) continue; //no operation performed
            if(nums[i] < 0) return false; //negative value
            if(nums[i] > 0) c = nums[i]; //save the value for operation
            for(int j = i;j <i+k;j++) nums[j]-= c; //perfoming the operation
         }
        for (int i = n-k; i < n; i++) { //checking for values
            if (nums[i] != 0) {
                return false; //elements not zero after perfoming max operations
            }
        }
        return true;
    }
}


or


class Solution {
    public boolean checkArray(int[] nums, int k) {
        if (k == 1) return true;

        int curSum = 0;
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            nums[i] -= curSum; // get the latest value of the current element 
            if (nums[i] < 0) return false; // previous k - 1 elements decreased the current element more than they should
            // update the cursum by adding the current element, and deleting the k - 1 th element
            curSum += nums[i];
            if (i - (k - 1) >= 0) curSum -= nums[i - (k - 1)];
        }

        return nums[n - 1] == 0;
    }
}


or


class Solution {
    public boolean checkArray(int[] nums, int k) {
        if (k == 1) return true;

        int curSum = 0;
        int n = nums.length;

        for (int i = 0; i < n; i++) {
            nums[i] -= curSum; // get the latest value of the current element 
            if (nums[i] < 0) return false; // previous k - 1 elements decreased the current element more than they should
            // update the cursum by adding the current element, and deleting the k - 1 th element
            curSum += nums[i];
            if (i - (k - 1) >= 0) curSum -= nums[i - (k - 1)];
        }

        return nums[n - 1] == 0;
    }
}


or


