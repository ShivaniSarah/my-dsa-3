https://leetcode.com/problems/count-vowel-strings-in-ranges/description/

2559. Count Vowel Strings in Ranges
Medium
Topics
Companies
Hint
You are given a 0-indexed array of strings words and a 2D array of integers queries.

Each query queries[i] = [li, ri] asks us to find the number of strings present at the indices ranging from li to ri (both inclusive) of words that start and end with a vowel.

Return an array ans of size queries.length, where ans[i] is the answer to the ith query.

Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.

 

Example 1:

Input: words = ["aba","bcb","ece","aa","e"], queries = [[0,2],[1,4],[1,1]]
Output: [2,3,0]
Explanation: The strings starting and ending with a vowel are "aba", "ece", "aa" and "e".
The answer to the query [0,2] is 2 (strings "aba" and "ece").
to query [1,4] is 3 (strings "ece", "aa", "e").
to query [1,1] is 0.
We return [2,3,0].
Example 2:

Input: words = ["a","e","i"], queries = [[0,2],[0,1],[2,2]]
Output: [3,2,1]
Explanation: Every string satisfies the conditions, so we return [3,2,1].
 

Constraints:

1 <= words.length <= 105
1 <= words[i].length <= 40
words[i] consists only of lowercase English letters.
sum(words[i].length) <= 3 * 105
1 <= queries.length <= 105
0 <= li <= ri < words.length



# java



class Solution {

    public int[] vowelStrings(String[] words, int[][] queries) {
        int[] ans = new int[queries.length];
        HashSet<Character> vowels = new HashSet<>(
            Arrays.asList('a', 'e', 'i', 'o', 'u')
        );
        int[] prefixSum = new int[words.length];
        int sum = 0;
        for (int i = 0; i < words.length; i++) {
            String currentWord = words[i];
            if (
                vowels.contains(currentWord.charAt(0)) &&
                vowels.contains(currentWord.charAt(currentWord.length() - 1))
            ) {
                sum++;
            }
            prefixSum[i] = sum;
        }

        for (int i = 0; i < queries.length; i++) {
            int[] currentQuery = queries[i];
            ans[i] =
                prefixSum[currentQuery[1]] -
                (currentQuery[0] == 0 ? 0 : prefixSum[currentQuery[0] - 1]);
        }

        return ans;
    }
}


or



class Solution {
  public int[] vowelStrings(String[] words, int[][] queries) {
    int[] ans = new int[queries.length];
    // prefix[i] := the number of the first i words that start with and end in a vowel
    int[] prefix = new int[words.length + 1];

    for (int i = 0; i < words.length; ++i)
      prefix[i + 1] += prefix[i] + (startsAndEndsWithVowel(words[i]) ? 1 : 0);

    for (int i = 0; i < queries.length; ++i) {
      final int l = queries[i][0];
      final int r = queries[i][1];
      ans[i] = prefix[r + 1] - prefix[l];
    }

    return ans;
  }

  private boolean startsAndEndsWithVowel(final String word) {
    return isVowel(word.charAt(0)) && isVowel(word.charAt(word.length() - 1));
  }

  private boolean isVowel(char c) {
    return "aeiou".indexOf(c) != -1;
  }
}



or




class Solution {
    private List<Integer> nums = new ArrayList<>();

    public int[] vowelStrings(String[] words, int[][] queries) {
        Set<Character> vowels = Set.of('a', 'e', 'i', 'o', 'u');
        for (int i = 0; i < words.length; ++i) {
            char a = words[i].charAt(0), b = words[i].charAt(words[i].length() - 1);
            if (vowels.contains(a) && vowels.contains(b)) {
                nums.add(i);
            }
        }
        int m = queries.length;
        int[] ans = new int[m];
        for (int i = 0; i < m; ++i) {
            int l = queries[i][0], r = queries[i][1];
            ans[i] = search(r + 1) - search(l);
        }
        return ans;
    }

    private int search(int x) {
        int l = 0, r = nums.size();
        while (l < r) {
            int mid = (l + r) >> 1;
            if (nums.get(mid) >= x) {
                r = mid;
            } else {
                l = mid + 1;
            }
        }
        return l;
    }
}



or



class Solution {
    public int[] vowelStrings(String[] words, int[][] queries) {
        int n = words.length;
        int[] Prefix = new int[n + 1];
        Set<Character> vowels = new HashSet<>(Arrays.asList('a', 'e', 'i', 'o', 'u'));

        for (int i = 0; i < n; i++) {
            Prefix[i + 1] = Prefix[i];
            if (vowels.contains(words[i].charAt(0)) && vowels.contains(words[i].charAt(words[i].length() - 1))) {
                Prefix[i + 1]++;
            }
        }

        int[] ANS = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            ANS[i] = Prefix[queries[i][1] + 1] - Prefix[queries[i][0]];
        }
        return ANS;
    }
}

or



class Solution {
    public boolean isVowel(char ch) {
        String str = "aeiou";
        return str.indexOf(ch) != -1;
    }
    public int[] vowelStrings(String[] words, int[][] queries) {
        int n = words.length;
        int[] Pre = new int[n];
        for (int i = 0; i < n; i++) {
            String temp = words[i];
            if (isVowel(temp.charAt(0)) && isVowel(temp.charAt(temp.length() - 1))) {
                Pre[i]++;
            }
        }
        for (int i = 1; i < n; i++) {
            Pre[i] += Pre[i - 1];
        }
        int[] ans = new int[queries.length];
        int index = 0;
        for (int[] query : queries) {
            int l = query[0];
            int r = query[1];
            if (l == 0) {
                ans[index++] = Pre[r];
            } else {
                ans[index++] = Pre[r] - Pre[l - 1];
            }
        }
        return ans;
    }
}



or



class Solution {
    public int[] vowelStrings(String[] words, int[][] queries) {
        int n = words.length;
        int[] prefixSum = new int[n + 1];

        for (int i = 0; i < n; i++) {
            if (isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length() - 1))) {
                prefixSum[i + 1] = prefixSum[i] + 1;
            } else {
                prefixSum[i + 1] = prefixSum[i];}
        }

        int[] result = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0], r = queries[i][1];
            result[i] = prefixSum[r + 1] - prefixSum[l];}

        return result;
    }

    private boolean isVowel(char c) {
        return "aeiou".indexOf(c) != -1;
    }

}


or



// We will say a word satisfies us if its first and last character are vowels
class Solution {
    public int[] vowelStrings(String[] words, int[][] queries) {
        int n = words.length;
        // we will create a prefix sum array whose index i will tell us 
        // how many words satisfy us from index 0 till index i
        int[] pref = new int[n];    
        // if the first word itself saitisfy us, we will put 1 in index 0
        // which means till index 0 we have 1 satisfactory string
        String s = words[0];
        if (isVowel(s.charAt(0)) && isVowel(s.charAt(s.length() - 1))) {
            pref[0] = 1;
        }
        // start iterating from index 1
        for (int i = 1; i < n; i++) {
            s = words[i];
            // if current word is satisfactory
            if (isVowel(s.charAt(0)) && isVowel(s.charAt(s.length() - 1))) {
                // number of satisfactory words increases by 1 at current index
                pref[i] = 1 + pref[i-1];
            } else {    // otherwise it remains the same
                pref[i] = pref[i-1];
            }
        }

        // create answer array
        int[] ans = new int[queries.length];    
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0];  // get left bound
            int r = queries[i][1];  // get right bound
            // our words in range l to r (inclusive) is the
            // difference of satisfactory words till index `r` and index l-1
            // why `l-1` and not `l`? because `l` is inclusive
            // in case l is 0, means we want from index 0 itself till 'r' 
            // so its directly pref[r]
            ans[i] = pref[r] - ((l == 0)? 0 : pref[l-1]);            
        }

        return ans;     // return the answer array
    }

    // method to tell is passed in character is a vowel or not
    private boolean isVowel(char c) {
        return Set.of('a', 'e', 'i', 'o', 'u').contains(c);
    }
}


or


class Solution {
    public boolean isVowel(char c) {
        return "aeiou".indexOf(c) != -1;
    }

    public int[] vowelStrings(String[] words, int[][] queries) {
        int n = words.length;
        int[] pref = new int[n];

        pref[0] = isVowel(words[0].charAt(0)) && isVowel(words[0].charAt(words[0].length() - 1)) ? 1 : 0;

        for (int i = 1; i < n; i++) {
            boolean isVowelWord = isVowel(words[i].charAt(0)) && isVowel(words[i].charAt(words[i].length() - 1));
            pref[i] = pref[i - 1] + (isVowelWord ? 1 : 0);
        }

        int[] ans = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0], r = queries[i][1];
            ans[i] = l == 0 ? pref[r] : pref[r] - pref[l - 1];
        }

        return ans;
    }
}




or


class Solution {
    public int[] vowelStrings(String[] words, int[][] queries) {
        int[] prefix = new int[words.length];
        int count = 0;

        // Build prefix sum array
        for (int i = 0; i < words.length; i++) {
            String word = words[i];
            if (isVowel(word.charAt(0)) && isVowel(word.charAt(word.length() - 1))) {
                count++;
            }
            prefix[i] = count;
        }

        // Process each query
        int[] res = new int[queries.length];
        for (int i = 0; i < queries.length; i++) {
            int l = queries[i][0], r = queries[i][1];
            if (l == 0) {
                res[i] = prefix[r];
            } else {
                res[i] = prefix[r] - prefix[l - 1];
            }
        }

        return res;
    }

    private boolean isVowel(char c) {
        return "aeiou".indexOf(c) != -1;
    }
}



