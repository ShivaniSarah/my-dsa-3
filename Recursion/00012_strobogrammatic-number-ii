https://leetcode.com/problems/strobogrammatic-number-ii/description/

https://leetcode.ca/2016-08-03-247-Strobogrammatic-Number-II/

Formatted question description: https://leetcode.ca/all/247.html

247


Given an integer n, return all the strobogrammatic numbers that are of length n. You may return the answer in any order.

A strobogrammatic number is a number that looks the same when rotated 180 degrees (looked at upside down).

 

Example 1:

Input: n = 2
Output: ["11","69","88","96"]
Example 2:

Input: n = 1
Output: ["0","1","8"]
 

Constraints:

1 <= n <= 14

 #java



class Solution {
  public List<String> findStrobogrammatic(int n) {
    return helper(n, n);
  }

  private List<String> helper(int n, int k) {
    if (n == 0)
      return List.of("");
    if (n == 1)
      return List.of("0", "1", "8");

    List<String> ans = new ArrayList<>();

    for (final String inner : helper(n - 2, k)) {
      if (n < k)
        ans.add("0" + inner + "0");
      ans.add("1" + inner + "1");
      ans.add("6" + inner + "9");
      ans.add("8" + inner + "8");
      ans.add("9" + inner + "6");
    }

    return ans;
  }
}


or


import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Strobogrammatic_Number_II {

    public static void main(String[] args) {
        Strobogrammatic_Number_II out = new Strobogrammatic_Number_II();
        Solution s = out.new Solution();

        System.out.println(s.findStrobogrammatic(2));
    }

    class Solution {

        List<String> singleDigitList = new ArrayList<>(Arrays.asList("0", "1", "8")); // not char[], because List can direct return as result
        char[][] digitPair = { {'1', '1'}, {'8', '8'}, {'6', '9'}, {'9', '6'} }; // except '0', a special case

        public List<String> findStrobogrammatic(int n) {
            return dfs(n, n);
        }

        public List<String> dfs(int k, int n) {
            if (k <= 0) {
                return new ArrayList<String>(Arrays.asList(""));
            }
            if (k == 1) {
                return singleDigitList;
            }

            List<String> subList = dfs(k - 2, n);
            List<String> result = new ArrayList<>();

            for (String str : subList) {
                if (k != n) { // @note: cannot start with 0
                    result.add("0" + str + "0");
                }
                for (char[] aDigitPair : digitPair) {
                    result.add(aDigitPair[0] + str + aDigitPair[1]);
                }
            }

            return result;
        }
    }

}

############

class Solution {
    private static final int[][] PAIRS = { {1, 1}, {8, 8}, {6, 9}, {9, 6}};
    private int n;

    public List<String> findStrobogrammatic(int n) {
        this.n = n;
        return dfs(n);
    }

    private List<String> dfs(int u) {
        if (u == 0) {
            return Collections.singletonList("");
        }
        if (u == 1) {
            return Arrays.asList("0", "1", "8");
        }
        List<String> ans = new ArrayList<>();
        for (String v : dfs(u - 2)) {
            for (var p : PAIRS) {
                ans.add(p[0] + v + p[1]);
            }
            if (u != n) {
                ans.add(0 + v + 0);
            }
        }
        return ans;
    }
}



