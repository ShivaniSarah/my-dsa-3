https://leetcode.com/problems/all-possible-full-binary-trees/description/


894. All Possible Full Binary Trees
Medium
Topics
Companies
Given an integer n, return a list of all possible full binary trees with n nodes. Each node of each tree in the answer must have Node.val == 0.

Each element of the answer is the root node of one possible tree. You may return the final list of trees in any order.

A full binary tree is a binary tree where each node has exactly 0 or 2 children.

 

Example 1:


Input: n = 7
Output: [[0,0,0,null,null,0,0,null,null,0,0],[0,0,0,null,null,0,0,0,0],[0,0,0,0,0,0,0],[0,0,0,0,0,null,null,null,null,0,0],[0,0,0,0,0,null,null,0,0]]
Example 2:

Input: n = 3
Output: [[0,0,0]]
 

Constraints:

1 <= n <= 20


# java


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
  public List<TreeNode> allPossibleFBT(int n) {
    if (n % 2 == 0)
      return new ArrayList<>();
    if (n == 1)
      return Arrays.asList(new TreeNode(0));
    if (mem.containsKey(n))
      return mem.get(n);

    List<TreeNode> ans = new ArrayList<>();

    for (int leftCount = 0; leftCount < n; ++leftCount) {
      final int rightCount = n - 1 - leftCount;
      for (TreeNode left : allPossibleFBT(leftCount))
        for (TreeNode right : allPossibleFBT(rightCount)) {
          ans.add(new TreeNode(0));
          ans.get(ans.size() - 1).left = left;
          ans.get(ans.size() - 1).right = right;
        }
    }

    mem.put(n, ans);
    return ans;
  }

  private Map<Integer, List<TreeNode>> mem = new HashMap<>();
}


or

class Solution {
    private List<TreeNode>[] f;

    public List<TreeNode> allPossibleFBT(int n) {
        f = new List[n + 1];
        return dfs(n);
    }

    private List<TreeNode> dfs(int n) {
        if (f[n] != null) {
            return f[n];
        }
        if (n == 1) {
            return List.of(new TreeNode());
        }
        List<TreeNode> ans = new ArrayList<>();
        for (int i = 0; i < n - 1; ++i) {
            int j = n - 1 - i;
            for (var left : dfs(i)) {
                for (var right : dfs(j)) {
                    ans.add(new TreeNode(0, left, right));
                }
            }
        }
        return f[n] = ans;
    }
}


or



class Solution {
      public TreeNode clone(TreeNode tree)  {
    if (null == tree)
    {
      return null;
    }
    
    TreeNode new_tree = new TreeNode(tree.val);
    new_tree.left = clone(tree.left);
    new_tree.right = clone(tree.right);
    return new_tree;
  }
  
  public List<TreeNode> allPossibleFBT(int N) {
    List<TreeNode> ret = new ArrayList<TreeNode>();
    if (N % 2 == 0) {
      return ret;
    } else if (1 == N) {
      ret.add(new TreeNode(0));
      return ret;
    }
    
    // Build up a cache of a all possible FBT for the N - 2 levels
    // these levels will be linked together as a graph and should not
    // be returned
    List<List<TreeNode>> cache = new ArrayList<List<TreeNode>>();
    cache.add(new ArrayList<TreeNode>());
    cache.get(0).add(new TreeNode(0));
    for (int root = 1; root < N / 2; ++root) {
      List<TreeNode> new_root = new ArrayList<TreeNode>();
      for (int left_size = 0; left_size < root; ++left_size) {
        for (TreeNode left : cache.get(left_size)) {
          for (TreeNode right : cache.get(root - left_size - 1)) {
            TreeNode new_tree = new TreeNode(0);
            new_tree.left = left;
            new_tree.right = right;
            new_root.add(new_tree);
          }
        }
      }
      cache.add(new_root);
    }
    
    // Cached values are linked together and must be cloned to be unlinked
    // trees before returning
    for (int root = 0; root < N / 2; ++root) {
      for (TreeNode left : cache.get(root)) {
        for (TreeNode right : cache.get(N / 2 - root - 1)) {
          TreeNode new_tree = new TreeNode(0);
          new_tree.left = clone(left);
          new_tree.right = clone(right);
          ret.add(new_tree);
        }
      }
    }
        
    return ret;
  }
}
