https://leetcode.com/problems/can-i-win/description/

class Solution {
    private Map<Integer, Boolean> memo = new HashMap<>();

    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        int s = (1 + maxChoosableInteger) * maxChoosableInteger / 2;
        if (s < desiredTotal) {
            return false;
        }
        return dfs(0, 0, maxChoosableInteger, desiredTotal);
    }

    private boolean dfs(int state, int t, int maxChoosableInteger, int desiredTotal) {
        if (memo.containsKey(state)) {
            return memo.get(state);
        }
        boolean res = false;
        for (int i = 1; i <= maxChoosableInteger; ++i) {
            if (((state >> i) & 1) == 0) {
                if (t + i >= desiredTotal
                    || !dfs(state | 1 << i, t + i, maxChoosableInteger, desiredTotal)) {
                    res = true;
                    break;
                }
            }
        }
        memo.put(state, res);
        return res;
    }
}


or


import java.util.HashMap;
import java.util.Map;

class Solution {
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        if (desiredTotal == 0) {
            return true;
        }
        if ((maxChoosableInteger * (maxChoosableInteger + 1)) / 2 < desiredTotal) {
            return false;
        }
        
        Map<Integer, Boolean> memo = new HashMap<>();
        return canIWinHelper(maxChoosableInteger, desiredTotal, 0, memo);
    }

    private boolean canIWinHelper(int maxChoosableInteger, int desiredTotal, int usedNumbers, Map<Integer, Boolean> memo) {
        if (memo.containsKey(usedNumbers)) {
            return memo.get(usedNumbers);
        }
        
        for (int i = 1; i <= maxChoosableInteger; i++) {
            int currentBit = 1 << i;
            if ((usedNumbers & currentBit) == 0) { // Check if the number i is available
                if (desiredTotal - i <= 0 || 
                    !canIWinHelper(maxChoosableInteger, desiredTotal - i, usedNumbers | currentBit, memo)) {
                    memo.put(usedNumbers, true);
                    return true;
                }
            }
        }
        
        memo.put(usedNumbers, false);
        return false;
    }
}


or


class Solution {
    Map<Integer, Boolean> mp;
    boolean[] used;
    public int getKey(boolean[] used){
        int num = 0;
        for(boolean b: used){
            num <<= 1;
            if(b) num |= 1;
        }
        return num;
    }
    public boolean helper(int desiredTotal){
        if(desiredTotal <= 0) return false;
        int key = getKey(used);
        if(mp.containsKey(key)) return mp.get(key);
        for(int i = 1; i < used.length; i++){
            if(!used[i]){
                used[i] = true;
                // check whether this lead to a win (i.e. the other player lose)
                if(!helper(desiredTotal - i)){
                    mp.put(key, true);
                    used[i] = false;
                    return true;
                }
                used[i] = false;
            }
        }
        mp.put(key, false);
        return false;
    }
    public boolean canIWin(int maxChoosableInteger, int desiredTotal) {
        int sum = (maxChoosableInteger * (1 + maxChoosableInteger))/2;
        if(sum < desiredTotal) return false;
        if(desiredTotal <= 0) return true;
        
        mp = new HashMap();
        used = new boolean[maxChoosableInteger + 1];
        return helper(desiredTotal);
    }
}


or

